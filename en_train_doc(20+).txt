1449	computer	alan kay born 17 american scientist elected fellow american academy arts sciences national academy engineering royal society arts pioneering object oriented programming graphical user interface design president institute professor science university california los angeles advisory board mid 2005 senior fellow hp labs visiting professor university professor massachusetts institute technology mit kay professional designer classical pipe life interview education america kay originally massachusetts kay family times father career ultimately york attended technical school senior graduate kay attended college west biology mathematics leave administration institution kay taught united air force local draft board status assigned programmer rare dominated women field era passing cross platform file transfer kay university bachelor degree mathematics molecular biology 1966 time professional studies wrote music adaptation campus 1966 graduate school university college engineering earned electrical engineering 1968 science 1969 flex flexible language language flex father graphics writing pioneering programs greatly inspired kay views objects programming grew musical career 1968 papert learned logo programming language lisp optimized educational purposes led learn learning professional orientation leaving associate professor science 1969 kay visiting researcher stanford artificial intelligence laboratory accepting carnegie mellon university 1970 joined xerox parc staff california decade developed prototypes workstations programming language apple macintosh computers kay idea object oriented programming named colleagues parc original object oriented concepts including object class developed 67 computing center coined term objects topic people focus lesser idea idea messaging parc kay conceived concept key laptop tablet computers book modern overlapping graphical user interface gui conceived educational platform kay considered researchers mobile learning features concept design laptop child educational platform kay involved field computing revolution happen kay educational communities parents children set tools invented medium sense wrote leading finally hit personal computing personal dynamic vehicle opposed ibm personal dynamic medium vehicle wait school drivers medium extend recognition 1981 1984 kay atari chief scientist apple fellow 1984 closure company advanced technology 1997 head development disney disney disney fellow remained left start applied leading program 2001 founded institute profit organization dedicated children learning advanced software development kay based applied california continued projects kay senior fellow hewlett packard hp advanced software team july 20 2005 kay taught fall 2011 class powerful ideas tools understand york university interactive telecommunications program time faculty goal class forms teaching learning based fundamental powerful concepts traditional learning december 1995 apple kay start source version continues effort november 1996 team started david smith david mark project source 2d 3d environment collaborative 2001 architecture reached limits interface infrastructure researcher kay hewlett packard proposed defining script process providing default scheduling mechanism avoids result user interface proposed replace user interface future mechanisms messaging players language extensions projects scripting underlying object class based users programming acts prototype based objects created project windows children machine november 2005 society mit laboratories unveiled laptop educational names 100 laptop laptop child program children machine program begun kay based kay ideal kay prominent developer focusing educational software programming kay extensively idea revolution ideas implemented 1997 conference acm turing award talk entitled revolution happened experiences code commercial software august 31 2006 kay proposal united national science foundation granted funding institute proposal title steps programming compact practical model personal computing sense kay abstract intel labs berkeley commercial source software neighborhood hundreds millions lines code days practical model design covers functionality lines code awards honors alan kay received awards honors honors include acm systems software award computers communication foundation prize foundation prize technology award acm award outstanding contributions science education  
2323	computer	architecture amdahl law amdahl argument theoretical speedup latency execution task fixed workload expected resources improved named scientist gene amdahl spring joint conference 1967 amdahl law parallel computing predict theoretical speedup multiple processors program 20 hours single processor core program takes hour execute remaining 19 hours execution time processors devoted execution program minimum execution time critical hour theoretical speedup limited 20 times reason parallel computing processors highly programs definition amdahl law formulated theoretical speedup execution task increases improvement resources magnitude improvement theoretical speedup limited task benefit improvement amdahl law applies size fixed practice computing resources tend larger larger datasets time spent grows faster inherently serial law realistic assessment parallel performance derivation task executed resources improved compared initial split program processes files disk program scan directory disk create list files internally memory program passes file separate thread processing scans directory creates file list parallel processes files execution time task improvement resources denoted includes execution time benefit improvement resources execution time benefit fraction execution time task benefit improvement resources denoted benefit execution benefits improvement resources accelerated factor improvement resources execution time benefit remains benefits theoretical execution time task improvement resources amdahl law theoretical speedup latency execution task fixed workload programs 30 execution time subject speedup improvement fast amdahl law speedup applying improvement assume serial task split consecutive execution time told times 3rd 20 times times amdahl law speedup times 20 times speedup 3rd speedup 48 execution time accelerated times serial programs serial program times faster times faster percentage improvement speed calculated sequential parallel programs optimized factor amdahl law speedup parallelism 19 20 meaning speedup respect execution time optimized 21 23 24 25 transforming sequential parallel programs reduced factor increased amdahl law speedup parallelism derivation agreement analysis execution time speedup relation law returns amdahl law law returns special applying amdahl law law returns terms achieved speedup improve decreasing improvements improves improving optimal component moving improve optimal component increase return note rational improve optimal sense improvements difficult require larger development time amdahl law represent law returns sort return adding processors machine running fixed size computation processors capacity processor add usable power previous time processors speedup ratio total throughput limit analysis potential memory bandwidth bandwidth resources scale processors adding processors returns amdahl law speedup real applications serial parallel portions heterogeneous computing techniques required cpu gpu heterogeneous processor provide performance energy efficiency cpu gpu processor  
2928	computer	association computing machinery acm international learned society computing founded 1947 largest scientific educational computing society acm profit professional membership 100 000 headquarters york city acm organization academic science computing science history acm founded 1947 association computing machinery changed association computing machinery activities acm organized local 37 special activities additionally 500 college university student founded 1961 university siggraph sponsor regular conferences famous dominant innovations fields publish specialized journals acm science events worldwide acm international programming contest sponsored events chess match ibm deep blue services publications acm 50 journals including journal acm professionals communications acm communications queue publications acm include communications primary considered computing history published acm publications paid online digital library guide computing literature individual additionally access books online acm offers insurance online courses services 1997 acm press published computing written photographs book collection current photographs figures industry digital library acm online service acm core main sections acm digital library acm guide computing literature acm digital library collection articles published acm articles conference proceedings guide computing entries acm digital library comprehensive starting 1950s organization journals conference proceedings online services include forum called tech news extensive underlying database key major computing literature secondary database rich discovery service acm guide computing literature acm hybrid access publishing model 2013 authors choose pay grant acm publishing rights copyright transfer agreement publishing license agreement acm green term invented authors post documents websites link acm digital library maintained version record digital library including linked references citing usage statistics functionality services articles texts accessed challenge acm publication coming access movement authors centralized process relevant publish sites organizations peer review online journal artificial intelligence journal machine learning journal practice technology membership addition student regular acm advanced membership recognize multiple membership demonstrated performance sets acm program established council association computing machinery 1993 recognize honor outstanding acm achievements science technology contributions mission acm march 2015 75 000 professional distinguished 2006 acm recognizing additional membership called distinguished distinguished distinguished engineers distinguished scientists distinguished 15 professional experience continuous acm membership impact computing field note 2006 distinguished levels called distinguished changed distinguished distinguished title titles changed titles senior 2006 acm recognizing senior senior professional experience continuous acm membership distinguished speakers technically membership grade acm recognizes distinguished speakers topics science distinguished speaker period current distinguished speakers acm describes people international distinguished speaker program committee served president acm acm kinds special professional student acm professional 56 countries exist acm student 41 countries conferences acm special numerous conferences hosted worldwide 2017 acm conferences complete list partial list annual conference acm conferences popular publishing competitive 2007 siggraph conference accepted 15 papers submitted 2005 acm founding partner hopper women computing institute women technology conferences hosted acm student branches includes projections hosted acm addition acm regional conferences regional conferences facilitate increased opportunities collaboration nearby institutions attended additional acm conferences list science conferences awards acm awards outstanding technical professional achievements contributions science technology 30 acm special award individuals contributions listed president acm professor university director alliance computational science engineering successor 2016 2018 distinguished professor institute technology visiting professor university dean jack school engineering university california american scientist recognized internet french living toronto ontario canada runs company named visual transitions hall university acm led council consisting president vice president president board chair publications board chair board institution referred simply council communications acm infrastructure acm boards headquarters staff maintain quality services products boards acm council women computing acm acm council women computing supports women computing main programs regional women computing acm women students conferences india europe activities acm india acm europe acm organizations institute national center women technology acm annual award honor outstanding women researchers fundamental contributions science program 2006 speakers cooperation acm primary partner ieee society ieee largest institute electrical electronics engineers ieee ieee focuses hardware standardization issues theoretical science considerable overlap acm joint activities including conferences publications awards acm sponsor 20 conferences ieee ieee award award major awards science jointly acm ieee occasionally projects developing computing acm jointly sponsored events professional organizations society industrial applied mathematics  
3110	computer	andrew tanenbaum born march 16 referred handle american dutch scientist professor science amsterdam netherlands author minix unix operating teaching purposes science regarded standard texts field teaching job 2004 operated dedicated analysis data federal united tanenbaum born york city grew white york born received bachelor science degree physics mit 1965 degree university california berkeley 1971 tanenbaum served moved netherlands live dutch united courses organization operating systems candidates university amsterdam announced teaching books tanenbaum recognized science include book operating systems design implementation minix linux kernel describes book launched books translated languages including chinese dutch french german greek italian japanese korean spanish russian spanish appeared editions universities students tanenbaum students science researchers include dean advanced school computing imaging 1990s dutch government setting oriented schools multiple universities schools intended bring students dutch foreign universities enhance tanenbaum dean advanced school computing imaging school initially consisted 200 faculty students university amsterdam university technology university advanced systems parallel computing image analysis processing tanenbaum remained dean 12 2005 awarded academy royal netherlands academy arts sciences time time professor grown include researchers universities netherlands france offers level courses annual conference runs projects amsterdam compiler kit amsterdam compiler kit toolkit producing portable compilers started 1981 andrew tanenbaum start version minix 1987 tanenbaum wrote clone unix called minix mini unix ibm pc targeted students learn operating wrote book listed source code source code set floppy disks months os minix 40 000 improving student named adding features minix october 1991 announced posix kernel called linux originally minix file based minix code minix linux minix continues developed production educational focus building highly modular reliable secure operating based microkernel lines code running kernel mode rest operating runs independent processes user mode including processes file process manager device driver continuously monitors processes failure detected capable automatically replacing failed process running programs user minix current version called bsd license projects tanenbaum involved numerous projects operating systems distributed systems computing supervisor students researcher projects include 2004 tanenbaum created analyzing opinion 2004 project outcome college stated created american hand america picture moment people america land freedom land blind america color coded map updated day projections campaign period tanenbaum identity secret referring preferred john supported revealed identity november 2004 day stating reasons running covered 2006 correctly predicting winner 33 2008 win close correctly predicted winners predicted win norm months legal 01 2010 correctly projected 35 37 exceptions incorrectly predicted win 2016 united famous tanenbaum kernel design 1992 tanenbaum speaker numerous conferences  
3116	computer	central processing unit cpu accumulator register intermediate arithmetic logic stored register accumulator write result calculation addition multiplication shift main memory read operation access main memory slower access register accumulator technology main memory slower cheaper register electronic systems split modern systems multiple purpose registers operate term common special purpose processors single accumulator simplify design basic concept mathematical operations fashion operation input instance manual calculation program carrying task follow basic sequence operations values looked stored memory computers hours held card pay rate form memory magnetic multiplication complete result machine operation takes considerable time operation read introduces considerable delay dramatically improve performance systems providing operation fed performance penalty basic pay calculated accumulator calculation save read operation sequence operations tens hundreds times multiplication accumulator machines accumulator machine called operand machine cpu accumulator based architecture cpu registers cpu stores calculations special register typically called accumulator computers accumulator machines performance supercomputers multiple registers mainframe systems microcomputers accumulator architectures popular notable bit microcontrollers popular 2014 accumulator based machines modern cpus typically operand operand machines additional operands purpose registers called purpose source destination calculations cpus considered accumulator machines characteristic register accumulator architecture accumulator architecture implicit operand arithmetic instructions instance cpu instruction codice adds read memory location accumulator result accumulator accumulator identified instruction register implicit instruction register instruction architectures register accumulator instructions instructions register explicit operand specification history accumulator single memory store result multiple operations considered accumulator refers earliest adding machines pascal accumulator based systems historical convention register accumulator arithmetic sequence arithmetic operations instructions modern interpretation convention exists names operations registers accumulator accumulator registers donald knuth 1973 mix instructions called load accumulator register memory lda store accumulator register memory knuth model instructions notable accumulator based computers configuration 20 operate parallel store add received ibm binary scientific computers vacuum tube ibm 1952 single 36 bit accumulator separate register handle operations ibm machine accumulator ibm machine 12 bit pdp minicomputers inspired machines pdp accumulator hp data created follow pdp favor pdp 11 provide offset addresses usage registers pdp 11 introduced contemporary model registers numbered cisc risc machines bit bit microprocessors numerous typically single microcontroller primary accumulator secondary accumulator instructions splits 16 bit result bit stores primary accumulator secondary accumulator direct 8080 modern intel x86 processors primary accumulator secondary accumulator multiplication division instance 32 bit registers split 64 bit result special arithmetic logical instructions add registers accumulator left operand destination supported upper result required x86 register architecture based accumulator model 64 bit extension x86 x86 64 generalized 16 registers  
3712	computer	nokia bell labs named bell laboratories bell telephone laboratories industrial scientific development company owned company nokia headquarters located hill jersey addition laboratories rest united countries laboratory originated western electric engineering department late century located west street york city development western electric engineering department bell telephone laboratories shared ownership american telephone company western electric researchers bell labs development radio transistor laser charge coupled device ccd theory unix operating programming languages nobel prizes awarded completed bell laboratories origin historical locations bell personal telephone french government awarded bell prize 50 000 000 time current telephone bell award fund laboratory bell laboratory washington collaboration bell bell laboratory bell house bell laboratory laboratory laboratory focused analysis recording transmission sound bell considerable laboratory education permit diffusion knowledge founding located bell father house street washington house headquarters bell constructed building close street house lab building declared national 1972 telephone bell maintained role bell continued personal bell labs origins complex bell bell thomas formed bell patent association patents telephone telephone company formed bell telephone company american bell telephone company subsidiary company american telephone company control american bell bell american bell held controlling western electric manufacturing arm business service providers american bell telephone company created mechanical department electrical patent department formed earlier formal organization location western electric bought property west street station manufacturers engineers product included telephone exchange switches transmission equipment bell laboratories developed activities bell ownership split western electric decade development branch moved west street bell labs carried bell telephone company government workers assigned basic president bell labs 1940s bell labs engineers scientists begun locations environmental york city 1967 bell laboratories headquarters officially hill jersey bell laboratories locations jersey hill deal branch princeton red bank hill hill remain existence red bank locations transferred operated technologies purchased largest people company largest employees 11 000 prior 2001 employees north massachusetts pennsylvania reading pennsylvania pennsylvania north moved 1980s 2001 locations scaled closed square structure set closed 2007 building designed august 2013 development bought building mixed commercial project 2012 article expressed success newly named bell announced plans 2016 2017 developments bell laboratories regarded facility type developing wide range technologies including radio transistor laser theory operating unix programming languages solar cells ccd floating gate host optical wireless wired communications technologies systems nobel prizes awarded completed bell laboratories turing award times bell labs researchers laboratories invented sound motion picture competition bell labs proposed control method determine process statistical control methods basis statistical process control based tools techniques manage improve processes origin modern quality movement including bell team headed transmitted distance 128 television images washington york thermal noise measured john theoretical analysis termed noise time pad invented laboratories bell labs proved foundation radio origins static distance communications discovered radio waves center galaxy experimental playing labs conducted stereo signals transmitted live washington vocoder electronic speech compression device electronic speech synthesizer developed demonstrated demonstrated 1939 york fair bell researcher shared nobel prize physics george discovery electron diffraction helped foundation solid electronics 1940s 1940s cell developed bell developed digital speech transmission war british alan turing labs time speech encryption meeting bell labs quality department united george paul war emergency technical committee – quality control drawn bell labs navy acceptance material sampling procedures 1947 transistor developed bell laboratories invented john william subsequently shared nobel prize physics 1956 1947 richard invented codes error detection correction patent reasons result published mathematical theory communication founding theory published bell technical journal built earlier field bell researchers greatly extended bell labs introduced series increasingly complex decade founder modern cryptography 1949 paper communication theory systems 1950s 1952 william revealed method zone enabled semiconductor level 1950s activity based theory central development binary code systems efforts precisely laboratories prime mission supporting bell engineering advances including carrier radio direct distance wire spring improved switching systems 1953 developed map tool facilitate management boolean algebraic expressions 1954 modern solar cell invented bell laboratories business 1956 telephone cable joint effort bell laboratories british canadian telephone companies 1957 music programs play electronic music created max algorithms developed robert network design laser technical paper charles hard 1960s december 1960 william donald operated gas laser continuous light laser operating accuracy color 1960 martin invented metal semiconductor field transistor achieved electronic scale integrated circuits underlying society 1962 microphone invented james west 1962 john vision communications realized launch 1964 laser invented 1965 discovered background awarded nobel prize physics 1978 michael animated movies mid 1960s invented animation language digital art created 1962 1966 orthogonal frequency division multiplexing key technology wireless services developed patented 1968 molecular beam developed molecular beam semiconductor chips laser matrices manufactured atomic layer time 1969 thompson created operating unix support telecommunication switching systems purpose computing 1969 1971 graphic designer involved graphics designed programmed prototype interactive layout 1969 charge coupled device ccd invented george smith awarded nobel prize physics 2009 1960s york city sold artists community complex 1970s 1970s 1980s bell laboratories personal computing revolution 1972 developed compiled programming language replacement interpreted language unix language designed implemented peter bell laboratories 1970 michael invented force feedback coupled interactive stereoscopic display 1971 improved task priority telephone exchange switching systems telephone traffic invented received software patents 1976 optical fiber systems tested 1980 single chip 32 bit microprocessor demonstrated production 1982 1970s major central office technology based technology discrete transistor logic bell labs developed film hybrid logic stored program controlled switching systems electronic switching systems local central offices produced bell labs western electric facilities technology evolution dramatically reduced floor space diagnostic software frame maintain technology bell labs technical journals western electric magazine people 1980s 1980 digital cellular telephone technology patented 1982 quantum hall discovered bell laboratories researchers robert nobel prize 1998 discovery 1985 programming language commercial release started developing bell laboratories 1979 extension original language 1984 electromagnetic radiation demonstrated type component time domain 1984 algorithm linear programming developed mathematician 1984 agreement signed 1982 american federal government forced break technologies split bell laboratories provide functions newly created local exchange carriers limited bell trademark association bell laboratories bell telephone laboratories owned company technologies unit western electric switch developed transition 1985 laser cooling slow manipulate atoms team 1985 modeling language mathematical programming language developed robert david bell laboratories 1985 bell laboratories awarded national medal technology contribution decades modern communication systems 1980s operating plan bell labs developed unix model electronic music instrument played space dimensions invented 1988 fiber optic cable bell labs developed fiber cable laser detector 40 000 telephone capacity invented optical atoms living cells laser beam major 1987 capture living biological systems optical machinery life 1990s 1991 technology patented team 1994 quantum laser invented 1994 peter quantum algorithm 1996 electron features atoms wide invented team operating inferno update plan created concurrent programming language performance database engine developed product form 1996 bell laboratories equipment manufacturing business company named lucent technologies researchers staff newly created labs 1997 practical transistor 60 atoms wide built 1998 optical router invented 2000s 2000 active laboratories dna machine prototypes developed geometry compression algorithm widespread communication practical powered laser invented scale map dark matter compiled 15 material material transistors invented 2002 data bell labs 2003 jersey institute technology biomedical engineering laboratory created hill jersey 2005 president lucent optical network returned president bell laboratories april 2006 bell laboratories company lucent technologies signed merger agreement december 2006 merged company lucent operations deal raised concerns united bell laboratories defense contracts separate company innovations american board set manage bell laboratories lucent sensitive government contracts december 2007 announced lucent bell laboratories innovation merged organization bell laboratories period growth bell laboratories lost spin company short period time july 2008 scientists remained physics report scientific journal nature 28 august 2008 lucent announced basic science material physics semiconductor focus including networking speed electronics wireless networks nanotechnology software 2009 george smith awarded nobel prize physics development charge coupled device ccd 2010s february 2013 head returned position chief operating lucent software services solutions business president bell labs november 2013 lucent announced president bell labs stated return bell labs innovation communications technology focusing solving key industry challenges bell labs innovation july 2014 bell labs announced broken broadband internet speed record technology fast transmission speeds 2014 shared nobel prize super resolved microscopy bell labs semiconductor physics department 15 april 2015 nokia agreed acquire lucent bell labs company share exchange worth 16 day combined operations 14 january 2016 september 2016 nokia bell labs labs technical university achieved data rate improving transmission capacity spectral efficiency optical communications field technique 2018 shared nobel prize physics optical application biological systems developed bell labs 1980s programs 20 2014 bell labs announced bell labs prize competition offer communication technologies awards 100 000 grand prize bell labs technology hill campus features square exhibit bell labs technology technological developments bell labs exhibit located main public  
4279	computer	broadcast domain logical division network nodes reach broadcast data link layer broadcast domain lan segment lan segments terms current popular technologies connected ethernet switch broadcast domain connected set inter connected switches broadcast domain routers layer devices form boundaries broadcast domains compared collision domain nodes set inter connected divided switches learning bridges collision domains contained broadcast domains layer network devices divide collision domains broadcast domains divided layer network devices routers layer switches separating broadcast domains explanation distinction broadcast collision domains simple ethernet systems shared transmission simple ethernet switches bridges data frames transmitted nodes network receiving node checks destination address frame simply frame addressed mac address broadcast address switches receiving analyzing frames connected network segment frames nodes connected segment switch frames specific node segment segment broadcast frames segments reduces traffic switched network transmitted frames received nodes broadcast frames received nodes network segment occur broadcast domain entire inter connected layer network segments connected switch bridge port collision domain network systems media feature broadcast collision domains links broadcast domain control sophisticated switch create network normal notion broadcast domain strictly controlled implementation concept termed private vlan implementation linux helpful creating multiple broadcast domains increases size broadcast domain decreases virtual lan vlan technically broadcast domain achieved server provider nodes mac address switch port broadcast frames allowed sources nodes broadcast frames sources directed server provider nodes traffic sources server provider nodes peer peer traffic result network based shared transmission ethernet client nodes communicate server provider common application internet providers allowing direct data link layer communication customer nodes network security attacks controlling broadcast domain fashion advantages network broadcast based hardware  
4801	computer	beos operating personal computers developed 1991 written hardware beos built digital media written advantage modern hardware facilities symmetric multiprocessing utilizing modular bandwidth multithreading multitasking 64 bit file beos gui developed principles clarity clean design api written ease programming partial posix compatibility access command interface internally unix derived operating beos default encoding gui support input methods input realized beos multimedia platform substantial population desktop users classic mac os windows ultimately unable achieve market share proved commercially company acquired palm beos developed population source os complete beos designed start beos left beta released september 2018 alpha history initially designed based hardware beos modified powerpc based processors systems apple powerpc reference platform common hardware reference platform apple purchase license beos replacement classic mac os apple ceo started ceo 300 apple offer apple board decided nextstep choice purchased 1996 bringing apple founder steve jobs 1997 power computing beos optional installation powerpc based macintosh systems dual boot classic mac os beos start screen offering choice apple moves beos ported intel x86 platform release march 1998 late 1990s beos managed create company failed remain released beos beos personal edition beos beos started windows linux intended consumer product developers released version beos internet appliances company business focus beos 2001 sold palm 11 beos considered official version beos development sale palm included beos networking environment networking stack public shortly company 2002 hitachi selling pcs loaded beos market internet partnership claimed initial public offering eventually court 23 25 liability split palm beos multimedia framework failed palm os product beos rights belong access projects formed beos key elements os goal continuing left released components beos list projects commercially operating based beos originally developed operating distributed development company received criticism beos community legal position regard beos reasons access bought intellectual property beos declared modified version beos distribution operating products beos beos continue media appliances video editors corporation modified beos radio automation software beos sold station box operating included switched digital audio runs heavily modified version beos launch recording interface software technology corporation radar 24 radar radar studio hard disk based 24 track professional audio based beos radar based beos manufacturer broadcast display machines beos power product final scratch record driven software hardware developed beos version sold prior release linux virtual partition  
5218	computer	central processing unit cpu electronic circuitry instructions program performing basic arithmetic logic controlling input output operations instructions industry term central processing unit 1960s traditionally term cpu refers processor processing unit control unit distinguishing core elements external components main memory circuitry form design implementation cpus changed history fundamental operation remains principal components cpu include arithmetic logic unit alu performs arithmetic logic operations processor registers supply operands alu store alu operations control unit memory execution instructions operations alu registers components modern cpus microprocessors meaning contained single integrated circuit chip cpu memory peripheral interfaces components integrated devices called microcontrollers systems chip soc computers employ multi core processor single chip cpus called cores context speak single chips array processors vector processors multiple processors operate parallel unit considered central exists concept virtual cpus abstraction computational resources history computers physically perform tasks caused machines called fixed program computers term cpu defined device software program execution earliest devices called cpus advent stored program idea stored program design john william initially finished mathematician john von neumann distributed paper entitled draft report stored program eventually completed august 1949 designed perform instructions operations types programs written stored speed memory physical wiring severe limitation considerable time effort required perform task von neumann design program changed simply changing contents memory stored program scale experimental stored program program 21 june mark program june 1949 cpus custom designs larger method designing custom cpus application development multi purpose processors produced standardization era discrete transistor mainframes minicomputers rapidly accelerated integrated allowed increasingly complex cpus designed manufactured standardization cpus increased presence digital devices modern life limited application dedicated computing machines modern microprocessors electronic devices ranging automobiles von neumann design stored program design design von neumann architecture suggested implemented ideas called harvard architecture harvard mark completed stored program design paper tape electronic memory key difference von neumann harvard architectures storage treatment cpu instructions data memory space modern cpus von neumann design cpus harvard architecture embedded applications instance microcontrollers harvard architecture processors vacuum commonly switching elements requires thousands tens thousands switching devices speed dependent speed switches tube computers average hours failures computers slower earlier harvard mark failed rarely tube based cpus dominant speed advantages reliability cpus clock rates compared modern designs clock signal frequencies ranging 100 common time limited speed switching devices built transistor cpus design complexity cpus increased technologies building reliable electronic devices improvement advent transistor cpus 1950s 1960s built switching elements vacuum improvement complex reliable cpus built printed circuit boards discrete individual components 1964 ibm introduced ibm 360 architecture series computers capable running programs speed performance time electronic computers manufacturer facilitate improvement ibm concept microprogram called microcode widespread usage modern cpus 360 architecture popular dominated mainframe market decades left legacy continued modern computers ibm 1965 digital equipment corporation dec introduced influential aimed scientific markets pdp transistor based computers distinct advantages increased reliability power consumption transistors allowed cpus operate speeds short switching time transistor comparison tube increased reliability dramatically increased speed switching elements exclusively transistors time cpu clock rates tens easily period additionally discrete transistor cpus heavy usage performance designs simd single instruction multiple data vector processors experimental designs rise era specialized supercomputers cray fujitsu scale integration cpus period method manufacturing transistors compact space developed integrated circuit allowed transistors manufactured single semiconductor based die chip basic specialized digital circuits gates ics cpus based building block ics referred scale integration devices ics guidance contained transistors build entire cpu ics required thousands individual chips space power earlier discrete transistor designs ibm 370 follow 360 ics solid logic technology discrete transistor modules dec pdp pdp switched individual transistors pdp pdp ics extremely popular pdp 11 originally built ics eventually implemented lsi components practical scale integration cpus lee published influential articles including 1967 build equivalent 32 bit mainframe scale integration circuits lsi time build lsi chips chips gates build process logic logic logic companies continued build processors chips transistors faster chips built processors logic chips 1980s time ics slow considered applications required power technology advanced increasing transistors ics decreasing individual ics complete cpu lsi ics increased transistor counts hundreds thousands 1968 ics required build complete cpu reduced 24 ics types roughly 1000 contrast lsi implementation pdp 11 contained cpu composed lsi integrated circuits microprocessors introduction commercially microprocessor intel 1970 microprocessor intel 8080 1974 class cpus completely central processing unit implementation methods mainframe minicomputer manufacturers time launched proprietary development programs upgrade architectures eventually produced instruction set compatible microprocessors compatible hardware software combined advent success personal term cpu applied exclusively microprocessors cpus denoted cores combined single processing chip previous generations cpus implemented discrete components numerous integrated circuits ics circuit boards microprocessors hand cpus manufactured ics cpu size result implemented single die faster switching time physical factors gate allowed microprocessors clock rates ranging tens additionally ability construct transistors increased complexity transistors single cpu observed trend moore law proven accurate predictor growth cpu complexity 2016 complexity size construction form cpus changed basic design function changed common cpus accurately von neumann stored program machines moore law holds concerns limits integrated circuit transistor technology extreme electronic gates causing effects phenomena concerns factors causing researchers methods computing quantum expand usage parallelism methods extend classical von neumann model operation fundamental operation cpus physical form execute sequence stored instructions called program instructions executed memory cpus follow fetch decode execute steps operation instruction cycle execution instruction entire process instruction cycle sequence instruction program counter jump instruction executed program counter modified address instruction program execution continues complex cpus multiple instructions fetched decoded executed simultaneously describes referred classic risc pipeline common simple cpus electronic devices called microcontroller role cpu cache access stage pipeline instructions manipulate program counter producing result data instructions called facilitate program behavior loops conditional program execution conditional jump existence functions processors instructions change bits register influence program outcome operations processors compare instruction values sets bits register equal jump instruction determine program flow fetch step fetch involves instruction represented sequence program memory instruction location address program memory determined program counter pc stores address instruction fetched instruction fetched pc instruction address instruction sequence instruction fetched retrieved slow memory causing cpu waiting instruction returned issue addressed modern processors caches pipeline architectures decode instruction cpu memory determines cpu decode step performed circuitry instruction decoder instruction converted signals control cpu instruction interpreted defined cpu instruction set architecture isa bits field instruction called opcode operation performed remaining fields provide required operation operands operands constant called location processor register memory address determined addressing mode cpu designs instruction decoder implemented circuit microprogram translate instructions sets cpu configuration signals applied sequentially multiple clock memory stores microprogram change cpu instructions execute fetch decode steps execute step performed depending cpu architecture consist single action sequence actions action cpu connected perform desired operation action completed typically response clock pulse written internal cpu register quick access subsequent instructions written slower expensive capacity main memory addition instruction executed arithmetic logic unit alu inputs connected pair operand sources alu configured perform addition operation sum operand inputs output alu output connected storage register memory receive sum clock pulse occurs sum transferred storage sum larger alu output word size arithmetic flag set structure implementation cpu circuitry set basic operations perform called instruction set operations involve adding comparing program basic operation represented combination bits machine language opcode executing instructions machine language program cpu operation perform decoding opcode complete machine language instruction consists opcode additional bits arguments operation addition operation complexity scale machine language program collection machine language instructions cpu executes actual mathematical operation instruction performed logic circuit cpu processor arithmetic logic unit alu cpu executes instruction memory alu perform operation storing result memory instructions integer mathematics logic operations machine instructions exist loading data memory storing branching operations mathematical operations floating performed cpu floating unit fpu control unit control unit cpu circuitry electrical signals direct entire carry stored program instructions control unit execute program instructions control unit alu memory arithmetic logic unit arithmetic logic unit alu digital circuit processor performs integer arithmetic logic operations inputs alu data operated called operands status previous operations code control unit operation perform depending instruction executed operands internal cpu registers external memory generated alu input signals alu circuitry result performed operation appears alu outputs result consists data word stored register memory status typically stored special internal cpu register purpose memory management unit mmu microprocessors desktop laptop server computers memory management unit translating logical addresses physical ram addresses providing memory protection abilities virtual memory simpler processors microcontrollers include mmu clock rate cpus circuits employ clock signal sequential operations clock signal produced external circuit generates consistent form periodic square wave frequency clock determines rate cpu executes instructions faster clock instructions cpu execute ensure proper operation cpu clock period maximum time signals cpu setting clock period worst propagation delay design entire cpu moves data edges clock signal advantage cpu design perspective component count perspective disadvantage entire cpu wait elements portions faster limitation methods increasing cpu parallelism architectural improvements solve globally cpus clock signal subject delays electrical signal clock rates increasingly complex cpus difficult clock signal phase entire unit led modern cpus require multiple identical clock signals avoid single signal cpu major issue clock rates increase dramatically heat cpu constantly changing clock components switch time component switching energy element static clock rate increases energy consumption causing cpu require heat dissipation form cpu cooling solutions method dealing switching components called clock involves clock signal components effectively regarded difficult implement common usage power designs notable cpu design extensive clock ibm powerpc based xbox 360 power requirements xbox 360 greatly reduced method addressing global clock signal removal clock signal removing global clock signal design process considerably complex designs carry marked advantages power consumption heat dissipation comparison designs uncommon entire cpus built global clock signal notable examples arm compliant mips compatible removing clock signal cpu designs portions device alus conjunction superscalar pipelining achieve arithmetic performance gains designs perform comparable level excel simpler math operations combined power consumption heat dissipation properties suitable embedded computers integer range cpu represents numerical values specific digital computers represented base values employed unusual representations ternary base modern cpus represent binary form represented valued physical voltage numeric representation size precision integer cpu represent binary cpu measured bits digits binary encoded integer cpu process operation commonly called word size bit data path integer precision integer size cpu integer size determines range integer values operate bit cpu manipulate integers represented bits range 256 28 discrete integer values integer range affect memory locations cpu address address integer representing specific memory location binary cpu 32 bits represent memory address address memory locations limitation reasons cpus mechanisms bank switching additional memory addressed cpus larger word sizes require circuitry physically larger cost power generate heat result bit microcontrollers commonly modern applications cpus larger word sizes 16 32 64 128 bit performance required benefits larger word size larger data ranges address spaces disadvantages cpu internal data paths shorter word size reduce size cost ibm 360 instruction set 32 bit instruction set 360 model 30 model 40 bit data paths arithmetic logical unit 32 bit add required cycles bits operands motorola 68000 series instruction set 32 bit instruction set motorola 68000 motorola 16 bit data paths arithmetic logical unit 32 bit add required cycles gain advantages bit lengths instruction sets bit integer floating data allowing cpus implementing instruction set bit portions device ibm 360 instruction set 32 bit supported 64 bit floating values facilitate accuracy range floating 360 model 65 bit fixed binary arithmetic 60 bit floating arithmetic cpu designs mixed bit processor meant purpose usage reasonable balance integer floating capability required parallelism description basic operation cpu offered previous describes simplest form cpu type cpu referred operates executes instruction pieces data time instruction clock cycle process rise inherent cpus instruction executed time entire cpu wait instruction complete instruction result cpu instructions clock cycle complete execution adding execution unit improve performance unused transistors increased design cpu execution resources operate instruction time reach scalar performance instruction clock cycle performance instruction clock cycle attempts achieve scalar performance variety design cpu linearly parallel referring parallelism cpus terms classify design techniques methodology differs implemented relative effectiveness increasing cpu performance application instruction level parallelism simplest methods increased parallelism steps instruction decoding prior instruction executing simplest form technique instruction pipelining modern purpose cpus pipelining instruction executed time breaking execution discrete stages separation compared assembly instruction complete stage execution pipeline retired pipelining introduce possibility situation result previous operation complete operation condition termed data dependency conflict additional care check conditions delay portion instruction pipeline occurs naturally requires additional circuitry pipelined processors complex pipelined processor scalar pipeline stalls instruction clock cycle stage improvement idea instruction pipelining led development method decreases idle time cpu components designs superscalar include instruction pipeline multiple identical execution units load store units arithmetic logic units floating units address generation units superscalar pipeline multiple instructions read passed instructions executed parallel simultaneously execution units ability instructions executed simultaneously instructions superscalar cpu dispatch simultaneously waiting execution units instructions completed cycle difficulty design superscalar cpu architecture creating effective correctly determine instructions executed parallel dispatch execution units requires instruction pipeline filled rise superscalar architectures amounts cpu cache hazard avoiding techniques branch prediction speculative execution register renaming execution memory maintaining levels performance attempting predict branch path conditional instruction cpu minimize times entire pipeline wait conditional instruction completed speculative execution performance increases executing portions code conditional operation execution instructions executed reduce delays data dependencies single instruction stream multiple data lot data type modern processors pipeline single instruction executed times cpu fetch decode phases greatly increases performance highly program engines video creation software photo processing portion cpu superscalar performance penalty scheduling stalls intel pentium superscalar alus accept instruction clock cycle fpu accept instruction clock cycle integer superscalar floating superscalar intel successor architecture superscalar capabilities floating features increase floating instruction performance simple pipelining superscalar design increase cpu ilp allowing single processor complete execution instructions rates instruction clock cycle modern cpu designs superscalar purpose cpus designed decade superscalar emphasis designing ilp computers moved cpu hardware software interface isa strategy instruction word vliw ilp software reducing cpu perform ilp reducing design complexity task level parallelism strategy achieving performance execute multiple threads processes parallel parallel computing strategy multiple instruction stream multiple data stream mimd technology purpose multiprocessing initial technology symmetric multiprocessing smp cpus share view memory scheme cpu additional hardware maintain constantly view memory avoiding views memory cpus program programs cpu increase cpus schemes uniform memory access directory based protocols introduced 1990s smp systems limited cpus systems built thousands processors initially multiprocessing built multiple discrete cpus boards implement interconnect processors processors interconnect implemented single chip technology chip level multiprocessing single chip multi core processor recognized parallelism existed single program single program threads functions executed separately parallel earliest examples technology implemented input output processing direct memory access separate thread computation thread approach technology introduced 1970s systems designed multiple computation threads parallel technology multi threading approach considered cost effective multiprocessing components cpu support opposed entire cpu execution units memory including caches shared multiple threads hardware support multithreading visible software supervisor software operating systems larger support type implemented temporal multithreading thread executed waiting data return external memory scheme cpu context switch thread ready switch cpu clock cycle type simultaneous multithreading instructions multiple threads executed parallel cpu clock cycle decades 1970s 2000s focus designing performance purpose cpus achieving ilp technologies pipelining caches superscalar execution execution trend power cpus intel pentium 2000s cpu designers achieving performance ilp techniques growing cpu operating frequencies main memory operating frequencies cpu power dissipation ilp techniques cpu designers ideas commercial computing markets transaction processing performance multiple programs throughput computing performance single thread process emphasis dual core processor designs notably intel designs superscalar architecture late designs processor families exhibit including x86 64 64 sparc ibm video game console cpus xbox 360 core powerpc design core cell microprocessor data parallelism common increasingly paradigm processors computing deals data parallelism processors discussed earlier referred type scalar device implies vector processors deal multiple pieces data context instruction scalar processors deal piece data instruction schemes dealing data referred single instruction stream multiple data stream simd single instruction stream single data stream utility creating processors deal vectors data tasks tend require operation sum dot product performed set data classic examples types tasks include multimedia applications images video sound types scientific engineering tasks scalar processor complete entire process decoding executing instruction set data vector processor perform single operation set data instruction application require steps apply operation set data vector processors cray exclusively scientific cryptography applications multimedia shifted digital media form simd purpose processors shortly inclusion floating units started purpose processors specifications implementations simd execution units purpose processors simd specifications hp multimedia acceleration extensions max intel integer proved software developers applications benefit simd deal floating developers designs common modern simd specifications isa notable modern examples include intel powerpc virtual cpus cloud computing involve cpu operation virtual central processing units host virtual equivalent physical machine virtual operating physical machines operating managed computing memory resources form cluster systems dynamically add remove cluster resources host cluster level resources fine performance performance speed processor depends factors clock rate instructions clock factors instructions cpu perform reported values represented peak execution rates artificial instruction sequences branches realistic consist mix instructions applications execute performance memory hierarchy greatly processor performance issue considered mips calculations standardized tests called developed attempt measure real effective performance commonly applications processing performance computers increased multi core processors essentially individual processors called cores sense integrated circuit ideally dual core processor powerful single core processor practice performance gain 50 software algorithms implementation increasing cores processor dual core quad core increases workload handled processor handle numerous events interrupts cpu cores processing plant floor handling task cores handle tasks cores adjacent single core handle specific capabilities modern cpus hyper threading involve sharing actual cpu resources increased utilization monitoring performance levels hardware gradually complex task response cpus implement additional hardware logic monitors actual cpu accessible software intel performance counter monitor technology  
5300	computer	data storage called storage memory technology consisting components recording media digital data core function fundamental component computers central processing unit cpu data performing computations practice computers storage hierarchy fast expensive storage options close cpu slower larger cheaper options fast volatile technologies data power referred memory slower technologies referred storage von neumann architecture cpu consists main control unit arithmetic logic unit alu controls flow data cpu memory performs arithmetic logical operations data functionality memory perform fixed operations output result change behavior acceptable devices desk digital signal processors specialized devices von neumann machines memory store operating instructions data computers hardware program simply memory instructions tend simpler design simple processor successive computations build complex modern computers von neumann machines data organization representation modern digital represents data binary pictures audio form converted string bits binary digits common unit storage byte equal bits piece handled device storage space accommodate binary representation piece simply data complete print stored 40 bits byte character data encoded assigning bit pattern character multimedia object standards exist encoding character image video adding bits encoded unit redundancy detect errors coded data correct based mathematical algorithms errors occur probabilities random bit physical bit loss physical bit storage ability maintain errors inter communication random bit random radiation typically detection bit physical bits specific bit definition depends specific storage device typically automatically device replaced functioning equivalent device bit values redundancy check method typically communications storage error detection detected error data compression methods database represent string bits shorter bit string reconstruct original string utilizes storage tens types data cost computation analysis trade storage cost saving costs computations delays data availability data compressed security reasons types data credit card storage prevent possibility reconstruction storage hierarchy storage storage hierarchy lesser bandwidth access latency cpu traditional division storage primary secondary storage guided cost bit contemporary usage memory semiconductor storage read write random access memory typically dram dynamic ram forms fast temporary storage storage consists storage devices media accessible cpu secondary storage typically hard disk drives optical disc drives devices slower ram volatile contents powered historically memory called core memory main memory real storage internal memory volatile storage devices referred secondary storage external memory peripheral storage primary storage primary storage main memory internal memory referred simply memory accessible cpu cpu continuously reads instructions stored executes required data operated stored uniform manner historically computers delay lines magnetic primary storage 1954 methods replaced magnetic core memory core memory remained dominant 1970s advances integrated circuit technology allowed semiconductor memory competitive led modern random access memory ram sized light expensive time types ram primary storage volatile powered diagram traditionally layers primary storage main capacity ram main memory connected central processing unit memory bus buses diagram address bus data bus cpu address bus called memory address desired location data reads writes data memory cells data bus additionally memory management unit mmu device cpu ram actual memory address provide abstraction virtual memory tasks ram types primary storage volatile start storage source read instructions start volatile primary storage startup program bios bootstrap read larger program volatile secondary storage ram start execute volatile technology purpose called rom read memory terminology rom types capable random access types rom read updates slow memory portions written embedded systems programs rom programs rarely changed standard computers store programs rom secondary storage volatile costly primary storage secondary storage refer historically called secondary storage storage secondary storage secondary storage external memory storage differs primary storage accessible cpu input output channels access secondary storage desired data intermediate primary storage secondary storage data device powered volatile unit typically magnitude expensive primary storage modern systems typically magnitude secondary storage primary storage data time modern computers hard disk drives secondary storage time access byte stored hard disk typically contrast time access byte stored random access memory measured access time difference solid memory magnetic storage devices hard disks typically times slower memory optical storage devices dvd drives access times disk drives disk read write head reaches proper data subsequent data track fast access reduce seek time latency data transferred disks blocks data disk accessing blocks latency offers opportunity design efficient external memory algorithms sequential block access disks magnitude faster random access sophisticated paradigms developed design efficient algorithms based sequential block access reduce bottleneck multiple disks parallel increase bandwidth primary secondary memory examples secondary storage technologies flash memory usb flash drives floppy disks magnetic tape paper tape cards standalone ram disks drives secondary storage file format abstraction organize data files providing additional called describing owner file access time access operating systems concept virtual memory allowing utilization primary storage capacity physically primary memory moves secondary storage devices file file slower secondary storage performance storage storage memory level storage typically involves robotic mechanism mount insert removable mass storage media storage device demands data copied secondary storage rarely accessed slower secondary storage data stores accessed human operators typical examples include tape libraries optical read storage database determine tape disc robotic arm fetch medium drive finished reading robotic arm return medium library storage storage online formal distinction online offline storage hard disk drives online storage drives spin automatically massive arrays idle disks storage removable media tape automatically loaded tape libraries storage tape manually loaded offline storage storage storage data storage medium device control processing unit medium recorded secondary storage device physically removed inserted connected human operator access storage accessed human interaction storage transfer medium easily physically additionally original data medium remote location enabling recovery storage increases security physically data integrity based attack techniques stored purposes rarely accessed storage expensive storage modern personal computers secondary storage media storage optical flash memory devices popular lesser extent removable hard disk drives enterprise magnetic tape examples floppy disks disks cards characteristics storage storage technologies levels storage hierarchy evaluating core characteristics measuring characteristics specific implementation core characteristics implementation storage technology characteristics worth measuring capacity performance volatile memory stored constantly supplied electric power suitable term storage volatile memory requires constant power maintain stored fastest memory technologies volatile universal rule primary storage required fast volatile memory dynamic random access memory form volatile memory requires stored static random access memory form volatile memory dram exception power applied content power supply lost power supply window time primary volatile storage volatile storage batteries systems integrated batteries maintain volatile storage minutes performance utilities measure performance linux security disk encryption volume virtual disk encryption file encryption storage devices hardware memory encryption intel architecture supporting total memory encryption memory encryption multiple sparc generation october 2015 storage media commonly data storage media semiconductor magnetic optical paper limited usage fundamental storage technologies flash arrays proposed development semiconductor semiconductor memory semiconductor based integrated circuits store semiconductor memory chip millions transistors volatile volatile forms semiconductor memory exist modern computers primary storage exclusively consists dynamic volatile semiconductor memory dynamic random access memory century type volatile semiconductor memory flash memory gained share storage computers volatile semiconductor memory secondary storage advanced electronic devices specialized computers designed 2006 notebook desktop manufacturers started flash based solid drives default configuration options secondary storage addition traditional magnetic magnetic storage patterns surface store magnetic storage volatile accessed read write recording read write head covers surface head medium moved relative access data modern computers magnetic storage forms computers magnetic storage optical optical storage typical optical disc stores surface circular disc reads surface laser reflection optical disc storage volatile permanent read media formed write media read write media forms common optical disc storage optical disc storage magnetic surface stores read written combining magnetic optical methods optical disc storage volatile sequential access slow write fast read storage storage 3d optical data storage proposed light magnetic proposed speed energy consumption optical storage paper paper data storage typically form paper tape cards store automatic processing purpose computers existed recorded holes paper medium read determine location medium solid contained technologies people marks paper easily read standardized tests object sold readable attached technologies redundancy bits resolved error detection correction mechanisms storage device requires solutions solutions commonly valid storage devices device typical designed handle single device failure devices failure occurs completely failure data lost probability single failure typically probability failures time probability squared database probability data loss remotely storage array handle recovery recovery network connectivity secondary storage connect utilizing networks concept primary storage shared multiple processors lesser degree robotic storage individual magnetic optical optical stored robotic storage devices tape storage field tape libraries optical storage field optical optical disk libraries forms technology drive device referred robotic access storage devices slots holding individual media robots slots load media built drives arrangement slots devices performance characteristics storage expansion options adding slots modules drives robots tape libraries 100 000 slots provide optical solutions 000 slots robotic storage capacity imaging medical video industries hierarchical storage management strategy automatically unused files fast hard disk storage libraries files retrieved disk  
5309	computer	software simply software collection data instructions contrast physical hardware built performs science software engineering software processed systems programs data software includes programs libraries executable data online documentation digital media hardware software require lowest programming level executable code consists machine language instructions supported individual central processing unit cpu graphics processing unit gpu machine language consists binary values processor instructions change preceding instruction change stored storage location user instruction input output operations screen causing visible user processor executes instructions jump instruction operating personal computers smartphone devices servers processors multiple execution units multiple processors performing computation computing concurrent activity majority software written level programming languages easier efficient programmers closer natural languages machine languages level languages translated machine language compiler interpreter combination software written level assembly language strong correspondence machine language instructions translated machine language history algorithm piece software written century planned engine created engine calculate algorithm considered programmer theory creation computers proposed alan turing application decision eventually led creation academic fields science software engineering fields study software creation science theoretical study software turing science software engineering application engineering development software prior software programs stored memory stored program digital computers understand electronic computing devices types virtually platforms software broad categories purpose domain based goal software divided programming tools programming tools software form programs applications software developers programmers software engineers create maintain improve support software software written programming languages programming languages existence implementation consists set programming tools tools contained programs compilers editors combined task form integrated development environment ide combines functionality contained tools relevant individual tools implementing functionality ide easier specific tasks searching files project programming language implementations provide option individual tools ide topics architecture users programmers people modern purpose computers opposed embedded systems analog computers supercomputers layers software performing variety tasks platform application user software execution software loaded storage hard drive memory software loaded execute software involves passing instructions application software software hardware ultimately receives instruction machine code instruction carry data carrying computation control flow instructions data movement typically memory involves moving data memory registers enable speed data access cpu moving data amounts costly data computations include simple operations variable data element complex computations involve operations data elements quality reliability software quality commercial software office windows linux software person crash errors called bugs discovered alpha beta testing software software performance combination unseen bugs bugs discovered eliminated software testing software testing bug programmers program bug law method software development separate testing teams typically employed approaches termed software development developers testing demonstrate software users clients feedback software tested unit testing regression testing methods manually commonly automatically code tested instance nasa extremely software testing procedures operating systems communication functions nasa based operations interact identify command programs enables people nasa check evaluate functional systems programs command software enable hardware engineering operations function easier license software license user software licensed environment software licenses rights copies proprietary software divided types source software hand software license rights modify software patents software patents types patents theoretically supposed inventor exclusive time limited license detailed idea algorithm implement piece software component piece software ideas software user requirements supposed concrete implementations actual software packages implementing patent supposed covered copyright automatically software patents supposed cover middle requirements concrete implementation countries requirement claimed physical requirements software patent held software effects physical requirement american copyright law applied aspects writing software code software patents software industry people holding views sources split initial ideas patent practice patent patent aspect oriented programming claim rights programming tool implementing idea implemented source innovation distinguished experts companies software fast moving field software patents create vast additional costs innovation software patents united argument american corporations patent primary allowing continue software patents design implementation design implementation software varies depending complexity software instance design creation word time designing developing basic functionality software designed created coded written programmed integrated development environments ide eclipse visual studio simplify process compile software applicable software created existing software application programming interface api underlying software libraries apis purpose instance spring framework implementing enterprise applications windows forms library designing graphical user interface gui applications word windows communication foundation designing services program designed relies api instance windows desktop application api functions windows forms library close close application apis programmer write companies oracle provide apis applications written software libraries numerous apis data structures hash tables arrays binary trees algorithms creating software software special economic characteristics design creation distribution economic person creates software called programmer software engineer software developer terms meaning terms programmer exist word confusion systems industry organizations variety software companies programmers software industry software industry gates founder person 2009 ownership shares company responsible windows office software products market respective product categories profit software organizations include software foundation gnu project mozilla foundation software standard organizations develop recommended software standards xml software standards software companies include google ibm technologies oracle novell adobe systems companies provide innovation  
5323	computer	science deals theoretical foundations computation practical techniques application science study processes interact data represented data form programs enables algorithms manipulate store communicate digital scientist studies theory computation practice designing software systems fields divided theoretical practical disciplines computational complexity theory highly abstract graphics emphasizes real applications programming language theory considers approaches description computational processes programming involves programming languages complex systems interaction considers challenges computers usable accessible history earliest foundations science modern digital machines calculating fixed numerical tasks existed computations multiplication division algorithms performing computations existed development sophisticated computing equipment designed constructed mechanical calculator demonstrated digital mechanical calculator called considered scientist reasons binary thomas launched mechanical calculator industry released simplified calculating machine strong reliable daily office environment charles started design automatic mechanical calculator difference engine eventually idea programmable mechanical calculator engine started developing machine features modern step adoption card derived programmable translation french article engine wrote notes included algorithm compute considered program invented cards process statistical eventually company ibm impossible dream ibm kinds card equipment calculator business develop programmable calculator harvard mark based engine cards central computing unit machine finished dream true 1940s powerful computing machines developed term refer machines human computers mathematical calculations field science study computation science established distinct academic discipline 1950s 1960s science degree program cambridge science university cambridge laboratory 1953 science degree program united formed university 1962 practical computers applications computing distinct study rights initially believed impossible computers scientific field study late gradually accepted academic population ibm brand formed science revolution time ibm short international business machines released ibm ibm computers exploration period devices ibm letter instruction program crash start process late 1950s science discipline stages issues time improvements effectiveness computing technology modern society shift users technology usage experts professionals user base initially computers costly degree aid efficient professional operators adoption widespread human assistance common usage contributions short history formal academic discipline science fundamental contributions science electronics founding science current human history called age driver revolution major human technological progress industrial revolution ce revolution contributions include proposed 1956 term science appears 1959 article communications acm argues creation graduate school sciences analogous creation harvard business school management science subject applied nature characteristics typical academic discipline efforts numerical george universities create programs starting 1962 science involve study computers alternative names proposed major universities term computing science precisely difference scientist peter suggested term reflect scientific discipline data data treatment involving computers scientific institution term department university founded 1969 peter professor term countries alternative term proposed data science distinct field data analysis including statistics databases days computing terms field computing suggested communications acm flow applied mathematician applied months journal suggested term suggested europe terms derived translations expression automatic italian mathematics french german italian dutch spanish languages informatics greek school informatics university informatics linked applied computing computing context domain attributed formulated dijkstra science computers design deployment computers systems considered disciplines science study hardware considered engineering study commercial systems deployment called technology systems cross ideas disciplines science disciplines philosophy cognitive science linguistics mathematics physics biology statistics logic science considered closer relationship mathematics scientific disciplines computing mathematical science science influenced alan turing continues ideas fields mathematical logic category theory domain theory algebra relationship science software engineering issue term software engineering science defined david relationship engineering science disciplines claimed principal focus science properties computation principal focus software engineering design specific computations achieve practical goals separate complementary disciplines academic funding aspects science tend depend department formed mathematical emphasis engineering emphasis science mathematics emphasis numerical orientation alignment computational science types tend efforts bridge field philosophy scientists argued distinction separate paradigms science peter argued paradigms science technology mathematics peter argued theory abstraction modeling design paradigm science branch mathematics theoretical science employs reasoning paradigm engineering approaches software engineering scientific paradigm approaches artifacts empirical perspective natural sciences branches artificial intelligence fields discipline science range topics theoretical studies algorithms limits computation practical issues implementing computing systems hardware software called computing sciences association computing machinery acm ieee society ieee considers discipline science theory computation algorithms data structures programming methodology languages elements architecture addition fields software engineering artificial intelligence networking communication database systems parallel computation distributed computation interaction graphics operating systems numerical symbolic computation science theoretical science theoretical science mathematical abstract motivation practical computation aim understand nature computation consequence understanding provide efficient studies mathematical logic formal concepts methods considered theoretical science motivation drawn field computing data structures algorithms data structures algorithms study commonly computational methods computational efficiency theory computation peter fundamental question underlying science efficiently automated theory computation focused answering fundamental questions computed resources required perform computations effort answer question theory computational theoretical models computation question addressed computational complexity theory studies time space costs approaches solving computational famous prize theory computation coding theory theory developed fundamental limits signal processing operations data storing data coding theory study properties codes systems converting form fitness specific application codes data compression cryptography error detection correction network coding codes studied purpose designing efficient reliable data transmission methods programming language theory programming language theory branch science deals design implementation analysis classification programming languages individual features falls discipline science depending mathematics software engineering linguistics active numerous dedicated academic journals formal methods formal methods mathematically based technique specification development software hardware systems formal methods software hardware design motivated expectation engineering disciplines performing mathematical analysis contribute reliability design form theoretical software engineering safety security involved formal methods software testing avoid errors framework testing industrial tool support required cost formal methods development integrity life critical systems safety security formal methods application broad variety theoretical science logic formal languages automata theory program semantics type systems algebraic data types software hardware specification systems architecture engineering architecture digital organization conceptual design fundamental operational structure focuses central processing unit performs internally accesses addresses memory field involves disciplines engineering electrical engineering selecting hardware components create computers meet functional performance cost goals performance analysis performance analysis study computers goals improving throughput controlling response time resources efficiently predicting performance peak loads concurrent parallel distributed systems property systems computations executing simultaneously mathematical models developed concurrent computation including nets process parallel random access machine model distributed idea multiple computers connected network computers distributed private memory achieve common goal networks branch science aims manage networks computers worldwide security cryptography security branch technology objective access modification maintaining intended users cryptography practice study encryption modern cryptography science encryption algorithms based computational complexity databases database intended organize store amounts data easily digital databases managed database management systems store create maintain search data database models query languages applications graphics visualization graphics study digital visual contents involves synthesis manipulation image data study connected fields science including vision image processing computational geometry heavily applied fields special effects video games interaction theories principles guidelines user interface designers create user experiences desktop laptop mobile devices scientific computing scientific computing computational science field study concerned constructing mathematical models quantitative analysis techniques computers analyze solve scientific practical typically application simulation forms computation scientific disciplines artificial intelligence artificial intelligence aims required goal processes solving decision environmental adaptation learning communication humans animals origins conference 1956 artificial intelligence cross drawing expertise applied mathematics symbolic logic electrical engineering philosophy mind social intelligence popular mind robotic development main field practical application embedded component software development require computational understanding starting late 1940s alan turing question computers question remains effectively turing output scale human intelligence automation predictive tasks increasingly successful human monitoring intervention domains application involving complex real data software engineering software engineering study designing implementing modifying software ensure quality fast build systematic approach software design involving application engineering software software engineering deals organizing analyzing deal creation manufacture software internal maintenance arrangement computing science programming paradigms programming languages tasks common programming paradigms include languages offer support multiple paradigms distinction matter style technical capabilities conferences events science conferences researchers public private sectors meet academic fields science conference papers journal publications proposed explanation quick development field requires rapid review distribution task handled conferences journals education science taught schools 2014 code estimated percent schools united offered science education 2010 report association computing machinery acm science association 14 50 education standards school science science education growing israel south korea included science national secondary education countries gap science education 2012 20 percent science degrees united awarded women gap western countries gap 2011 women earned science degrees 2001 55 percent science women external links academic search  
5921	computer	color american english colour english characteristic human visual perception color categories names red orange yellow green blue perception color cone cells human eye electromagnetic radiation visible spectrum color categories physical specifications color objects wavelength light reflected reflection object physical properties light defining color space colors identified coordinates named global agreement agreed color names mentioned red orange international commission illumination rgb color space instance color space human cone cell types respond bands light wavelengths red medium wavelength green short wavelength light blue color dimensions color spaces color model dimensions color photo eyes species varies considerably humans color compared instance color vision sensitive red types vision complex color vision animal kingdom 12 spectral types multiple units science color called simply color science includes study perception color human eye brain origin color materials color theory art physics electromagnetic radiation visible range commonly referred simply light physics color electromagnetic radiation characterized wavelength frequency intensity wavelength visible spectrum range wavelengths humans visible light light sources light wavelengths source spectrum distribution intensity wavelength spectrum light eye direction determines color direction spectral combinations color formally define color class rise color classes vary species lesser extent individuals species class called color question spectral colors colors word appearance newton colors produced visible light single wavelength pure spectral colors table approximate frequencies wavelengths pure spectral colors wavelengths listed measured air vacuum color table interpreted pure spectral colors form continuous spectrum divided distinct colors matter culture historical people colors common list main bands red orange yellow green blue newton included color blue newton referred blue simply dark blue time intensity spectral color relative context viewed alter perception considerably intensity orange yellow brown intensity yellow green green color objects color object depends physics object environment characteristics eye brain physically objects color light leaving surfaces depends spectrum incident illumination properties surface angles illumination viewing objects reflect light transmit light light color viewer perception object color depends spectrum light leaving surface host cues color differences objects independent lighting spectrum viewing angle color physics drawn effects color object complex result surface properties transmission properties properties contribute mix wavelengths light leaving surface object perceived color nature illumination color properties objects nearby characteristics eye brain perception development theories color vision scientists written nature light color vision newton light identified source color published comprehensive theory colors effects color understood thomas proposed theory based observation color matched combination lights theory james von principles newton law mixture confirmed theory color achieved advance time remained directed attention time developed opponent process theory color color typically opponent pairs red green blue orange yellow black white ultimately theories synthesized 1957 processing corresponds theory processing level nucleus corresponds opponent theory international experts commission developed mathematical color model mapped space colors assigned set color eye ability human eye distinguish colors based varying sensitivity cells retina light wavelengths humans retina types color cells cones type distinct light perceived blue blue wavelengths cones type called short wavelength cones cones blue cones types closely middle wavelength cones cones green cones sensitive light perceived green wavelengths wavelength cones cones red cones sensitive light perceived yellow wavelengths light matter complex composition wavelengths reduced color components eye cone type principle cone output determined light falls wavelengths location visual field types cones yield signals based extent amounts called values response curve function wavelength varies type cone curves overlap values occur incoming light combination mid wavelength called green cones cones degree time set values determines human color space estimated humans distinguish roughly colors type light sensitive cell eye response curve normal situations light cones play virtually role vision hand light cones leaving signal response sensitive light red range conditions intermediate illumination response weak cone response result color cone responses effects combined curve describes change color perception light function temperature intensity color brain mechanisms color vision level retina terms values color processing organized dominant theory color vision color transmitted eye opponent processes opponent channels constructed raw output cones channel channel channel theory supported accounts structure color experience humans green blue color wheel collection colors color channels measures exact nature color perception processing status color feature perceived feature perception type matter complex continuing color perception color types person color sensing cones missing normal incoming light person distinguish colors color color blind term color individuals distinguish colors kinds color caused nature cones retina central caused neural brain visual processing takes humans types color animals types include species birds species fish species sensitive axes color color called distinction cone cells retina compared functional ability enhanced color based difference women phenomenon individual receives copies gene medium wavelength cones carried person phenomenon occurs women report existence functional forms letters musical sounds lead unusual additional experiences colors functional experiments demonstrated color experiences lead tasks lead increased activation brain regions involved color perception reality similarity real color standard route exposure strong light sensitivity range type light continue signal colors observed period lack color component detected responsible phenomenon eye continue figure complementary color effects utilized artists including van color artist limited color eye gray neutral color color missing color wheel limited consisting red yellow black white mixture yellow black variety green mixture red black variety pure gray theory strictly true visual fixed adaptation reality visual constantly environment colors scene reduce effects illumination scene illuminated light difference light sources reasonable range colors scene constant studied land 1970s led theory color phenomena explained mathematically modeled modern theories adaptation color appearance theory vision enhanced understanding visual viewing environment color naming colors vary including red orange yellow green blue brightness color derived object color orange abstract red 1969 study paul kay pattern naming basic colors red red orange dark red blood red red languages basic color names distinguish dark colors colors colors distinguished red yellow green languages basic colors include black white red green blue yellow pattern holds set black gray white red orange yellow green blue brown distinct blue russian italian english individual colors variety cultural national colors individual color articles color field color attempts identify effects color human activity form alternative medicine attributed colors countries colors demonstrated effects researchers university demonstrated color red decreases cognitive functioning spectral colors color light sources wavelengths light sources effectively produce spectral color eye distinguish single wavelength sources displays spectral color orange combination red green light appears orange red green mixed eye cones respond spectral color orange concept understanding perceived color light source dominant wavelength single wavelength light produces light source dominant wavelength roughly color definition pure spectral colors red light spectrum examples spectral colors colors black gray white colors light color human eye perceived color color white light typically spectrum narrow bands continuous spectrum human eye difference light light source reflected colors objects exploited red human color generated mixture colors called color scenes photography printing television media methods color spaces color terms primary colors method advantages disadvantages depending application mixture colors produce response identical spectral color close wavelengths color space diagram straight edge green light blue light produces light response red color green blue light mixture pure light intensity mixture blue green color printing systems pure colors spectral colors spectral colors matched natural scenes rarely colors scenes approximated systems range colors color called diagram color systems connected acquisition devices cameras scanners characteristics color sensors devices characteristics human eye acquisition colors poor special caused unusual lighting scene color tuned human normal color vision color response devices properly managed color stored transferred digital form color management techniques based avoid colors color management limitations output devices assist finding mapping input colors additive additive color light created light colors red green blue additive primary colors additive color systems projectors terminals filters wavelengths light color surface displays visible spectrum absorbed remain visible base paper white light colors directions ink wavelengths absorbed white light light color reaches eye light pure white source forms artificial lighting spectrum color red viewed blue light black red red red components spectrum red illuminated blue light absorbed red creating appearance black object structural color structural colors colors caused interference effects color effects produced material fine parallel lines formed parallel layers composed scale color wavelength randomly light shorter wavelengths produce colors blue caused structures wavelength light air molecules blue human aligned arrays array diffraction reflects wavelengths directions interference phenomena separating mixed white light light wavelengths structure layers reflect wavelengths transmit depending layers structural color studied field film structural colors structural color responsible birds blue variations pattern rise films oil reflected color depends viewing angle numerous scientists carried including newton robert electron development products exploit structural color  
6513	computer	model distributed application structure tasks providers resource service called servers service called clients clients servers communicate network separate hardware client server server host runs server programs share resources clients client share resources requests server content service function clients communication sessions servers incoming requests examples applications model email network printing wide client server role client server characteristic describes relationship programs application server component function service clients requests services servers classified services provide server serves file server serves files shared resource server software electronic components programs data processors storage devices sharing resources server service client server determined nature application requires service functions single server file server software time serve data clients kinds requests client software communicate server software communication servers data called inter server server server communication client server communication service abstraction resources client concerned server performs request response client understand response based application protocol content data requested service clients servers exchange messages messaging pattern client request server returns response exchange messages inter process communication communicate computers common language follow rules client server expect language rules communication defined communications protocol client server protocols operate application layer application layer protocol defines basic patterns data exchange server implement application programming interface api api abstraction layer accessing service communication specific content format parsing access cross platform data exchange server receive requests distinct clients short period time perform limited tasks moment relies scheduling incoming requests clients accommodate prevent maximize availability server software limit availability clients service attacks designed exploit server process requests request rates bank customer accesses online services browser client client request bank server customer stored database server accesses database server client application server returned data applying bank business logic output server finally server returns result client browser display step sequence message processes request returns data request response messaging pattern requests sequence complete browser data customer design pattern applicable model separation concerns history form architecture remote job entry os 360 announced 1964 request job response output model 1960s 1970s scientists building stanford institute terms server host serving host user host host documents usage continued xerox parc mid 1970s context researchers terms design network programming language called decode encode language purpose language accept commands user host return status reports user encoded commands network packets capable server host received packets decoded returned data user host program user host received user transaction development 1969 united department defense established predecessor internet client host server host client host server host meanings client server host connected network server client refer program server host user host refer computers host clients servers programs host model server devoted task serving word client occurs separating data function distributed file 1978 paper xerox parc scientists james israel authors define term readers explain distinguish user user network node client 1992 word server entered centralized computing model server hosts resources client hosts enables purpose extend capabilities shared resources hosts centralized computing resources computers computation client hosts central computers simpler client hosts relies heavily network resources servers infrastructure computation storage node loads operating network terminal operating input output interface server contrast fat client personal resources rely server essential functions microcomputers price increased power 1980s late 1990s organizations computation centralized servers mainframes minicomputers fat clients resources complicated technology management 2000s applications application software developed specific microarchitecture mass storage advent service oriented architecture factors rise cloud computing trend 2010s comparison peer peer architecture addition model distributed computing applications peer peer application architecture model server designed operate centralized serves clients computing power memory storage requirements server scaled expected load clients connecting simultaneously load balancing systems employed scale server implementation peer peer network computers resources communicate nodes hierarchical network clients network communicate peer peer networking algorithm peer peer communications protocol load resources share load node shared resources remain offer ideally peer achieve availability redundant resource availability load capacity change protocol requests client server master regarded categories distributed peer peer systems  
6557	computer	control unit component central processing unit cpu operation processor memory arithmetic logic unit input output devices respond instructions processor operation units providing timing control signals resources managed flow data cpu devices john von neumann included control unit von neumann architecture modern designs control unit typically internal cpu role operation introduction functions control unit control unit digital circuitry contained processor coordinates sequence data movements processor units result data movements digital circuits units processor produces data expected software instruction loaded earlier memory controls data flow processor additionally external control signals rest direct data instructions processor external memory examples devices require cpus graphics processing units gpus receives external instructions commands converts sequence control signals applies data path implement sequence register transfer level operations precisely control unit collection complex digital circuitry execution units alu data registers contained cpu cpu unit accept stored program single instruction based cpu instruction set individual instruction sequential steps addresses data registers memory managing execution data alu storing data registers memory controls coordinates cpu properly manipulate data design sequential steps based instruction range steps execution units enabled program set instructions memory cpu data manipulate data correctly instructions complete program require human intervention hardware instructions cards computations stored programmed computers invented detailed steps cpu hardware control signals enable cpu units selected selected unit proper execution required instruction operation produce desired data additionally hardware properly sequences control signals hardware units cpu data moved changed stored cpu memory instruction objective depending type instruction entering sequential steps produced vary selection configuration cpu hardware utilized achieve instruction objective moving storing modifying data cpu feature efficiently software instructions control select cpu hardware eventually program data reason modern computers flexible universal running programs compared 1940s computers proper required hardware changing programs instruction decode process repeated program counter stored program address instruction address programs advanced forms control units manage translation instructions data portion micro instructions scheduling micro instructions selected execution units data changed execution unit function alu functions processors control unit broken additional units instruction unit scheduling unit handle scheduling unit deal coming instruction pipeline control unit main functions cpu carrying stored instructions software program flow data based instructions roughly traffic lights control flow cars data locations traffic grid desired spot memory address register car building execution unit changed car returns location controlled traffic grid control unit control units implemented logic units featuring finite gates generate specific based instructions responses control units faster designs design fixed requires wiring instruction set modified changed architecture preferred reduced instruction set computers risc simpler instruction set controller approach operate speed flexibility complexity instruction set implement limited approach popular computers evolved control units cpus logic difficult design https mobile architecture microprogram control unit idea introduced intermediate level execute program instructions organized sequence stored special control memory algorithm microprogram control unit control unit description main advantage microprogram control unit simplicity structure outputs controller organized easily replaced  
6559	computer	control store cpu control unit stores cpu microprogram accessed types control store form arrays accessed address implemented writable microcode stored form read memory called writable control store outputs register prevent race condition occurring register clock signal running implementation control stores implemented array accessed address form read memory dates program timing matrix mit 1947 modern processors matrices field transistors build rom structures control processor internal implementation ibm 360 variety techniques card read storage model 30 read storage model 40 balanced read storage model 50 writable stores computers built writable microcode storing microcode rom hard wired logic microcode stored ram called writable control store called writable instruction set machines experimental laboratory prototypes cpu 16 original 360 models ibm mainframe read control store 360 370 successor models loaded floppy disks writable control store consisting ultra speed random access read write memory 370 architecture included facility called initial microprogram load console power processor tightly coupled multiprocessor complex ibm easily repair field majority control store stored rom vendors sell writable control store option allowing customers machine microprogram vendors ibm microcode emulator features hardware commercial machines writable microcode include burroughs systems 1970s 1980s xerox processors lisp machines xerox star workstations dec vax family machines 1980s dec pdp machines stored microcode sram chips 80 bits wide typically loaded power cpu machines offered user programmable writable control stores option including hp dec pdp 11 60 data machines 70 series minicomputers stored microcode sram chips loaded power cpu data eclipse sram writable control store loaded power cpu offered advantages including ease microprogram hardware generations faster access provide user programmable allowed user optimize machine specific purposes cpu designs compile instruction set writable ram flash cpu processor computing intel cpus x86 architecture family writable microcode starting pentium pro 1995 allowed bugs intel core microcode intel microcode fixed software requiring entire chip replaced installed linux freebsd windows motherboard bios timing avoiding race condition control store register outputs outputs determine address sort register prevent creation race condition designs bits register machine faster execution delayed cycle register pipeline register execution dependent result current stable current outputs control store register historically register bits chip clock signal determining clock rate cycle time register  
6596	computer	vision scientific field deals computers gain level understanding digital images videos perspective engineering seeks tasks human visual vision tasks include methods processing analyzing understanding digital images extraction dimensional data real produce numerical symbolic forms decisions understanding context transformation visual images input retina descriptions interface processes action image understanding symbolic image data models constructed aid geometry physics statistics learning theory scientific discipline vision concerned theory artificial systems extract images image data forms video sequences views multiple cameras multi dimensional data medical scanner technological discipline vision seeks apply theories models construction vision systems domains vision include scene reconstruction event detection video tracking object recognition 3d pose estimation learning indexing motion estimation image definition vision field deals computers gain level understanding digital images videos perspective engineering seeks tasks human visual vision concerned automatic extraction analysis understanding single image sequence images involves development theoretical algorithmic basis achieve automatic visual understanding scientific discipline vision concerned theory artificial systems extract images image data forms video sequences views multiple cameras multi dimensional data medical scanner technological discipline vision seeks apply theories models construction vision systems history late 1960s vision universities pioneering artificial intelligence meant mimic human visual robots intelligent behavior 1966 believed achieved summer project camera distinguished vision field digital image processing time extract dimensional structure images goal achieving scene understanding studies 1970s formed foundations vision algorithms exist including extraction edges images labeling lines modeling representation objects structures optical flow motion estimation decade studies based mathematical analysis quantitative aspects vision include concept scale space inference shape cues texture focus contour models snakes researchers realized mathematical concepts treated optimization framework regularization markov random fields 1990s previous topics active led understanding camera advent optimization methods camera realized lot ideas explored bundle adjustment theory field led methods sparse scenes multiple images progress stereo correspondence multi view stereo techniques time variations graph cut solve image segmentation decade marked time statistical learning techniques practice recognize images 1990s change increased interaction fields graphics vision included image based rendering image view interpolation image stitching light field rendering feature based methods conjunction machine learning techniques complex optimization frameworks fields artificial intelligence artificial intelligence deal autonomous planning systems navigate environment detailed understanding environments required navigate environment vision acting vision sensor providing level environment robot artificial intelligence vision share topics pattern recognition learning techniques vision artificial intelligence field science field engineering vision considered engineering solid physics solid physics field closely vision vision systems rely image sensors detect electromagnetic radiation typically form visible red light sensors designed quantum physics process light surfaces explained physics physics behavior core imaging systems sophisticated image sensors require quantum mechanics provide complete understanding image process measurement physics addressed vision motion field plays role study biological vision century extensive study eyes neurons brain structures devoted processing visual stimuli humans animals led coarse complicated description real vision systems operate solve vision tasks led vision artificial systems designed mimic processing behavior biological systems levels complexity learning based methods developed vision neural deep learning based image feature analysis classification background biology vision closely study biological vision – closely tied human stored knowledge interpret integrate utilize visual field biological vision studies models processes visual perception humans animals vision hand studies describes processes implemented software hardware artificial vision systems exchange biological vision proven fields signal processing field vision signal processing methods processing variable signals typically temporal signals extended natural processing variable signals multi variable signals vision specific nature images methods developed vision processing variable signals multi dimensionality signal defines signal processing vision fields mentioned views vision topics studied purely mathematical view methods vision based statistics optimization geometry finally field devoted implementation aspect vision existing methods realized combinations software hardware methods modified gain processing speed losing performance vision fashion management patent search industry fields closely vision image processing image analysis machine vision overlap range techniques applications cover implies basic techniques developed fields interpreted field names hand appears scientific journals conferences companies market fields distinguish fields graphics produces image data 3d models vision produces 3d models image data trend combination disciplines explored augmented reality relevant accepted vision stereo vision applications applications range tasks industrial machine vision systems production artificial intelligence computers robots vision machine vision fields overlap vision covers core technology automated image analysis fields machine vision refers process combining automated image analysis methods technologies provide automated inspection robot guidance industrial applications vision applications computers pre programmed solve task methods based learning increasingly common examples applications vision include systems prominent application fields medical vision medical image processing characterized extraction image data patient detection measurements dimensions blood flow supports medical providing structure brain quality medical applications vision medical includes enhancement images interpreted images ray images reduce influence noise application vision industry called machine vision extracted purpose supporting manufacturing process quality control details final products automatically measurement position orientation details robot arm machine vision heavily process remove food material process called optical sorting military applications largest vision obvious examples detection vehicles guidance advanced systems guidance send specific target target selection reaches based locally acquired image data modern military concepts sensors including image sensors provide rich set combat scene support strategic decisions automatic processing data reduce complexity multiple sensors increase reliability application autonomous vehicles include land based vehicles robots wheels cars trucks vehicles unmanned vehicles uav level autonomy ranges autonomous unmanned vehicles vehicles vision based systems support driver pilot situations autonomous vehicles typically vision navigation producing map environment slam detecting obstacles detecting task specific events uav forest examples supporting systems systems cars systems autonomous aircraft car manufacturers demonstrated systems autonomous driving cars technology reached level market examples military autonomous vehicles ranging advanced uavs guidance space exploration autonomous vehicles vision nasa exploration application include typical tasks application employ range vision tasks defined measurement processing solved variety methods examples typical vision tasks vision tasks include methods processing analyzing understanding digital images extraction dimensional data real produce numerical symbolic forms decisions understanding context transformation visual images input retina descriptions interface processes action image understanding symbolic image data models constructed aid geometry physics statistics learning theory recognition classical vision image processing machine vision determining image data specific object feature activity recognition literature algorithms tasks based convolutional neural networks capabilities scale visual recognition challenge benchmark object classification detection millions images hundreds object classes performance convolutional neural networks tests close humans algorithms objects stem person holding hand images filters increasingly common phenomenon modern digital cameras contrast kinds images rarely humans humans tend issues objects fine grained classes dog species convolutional neural networks handle ease specialized tasks based recognition exist motion analysis tasks motion estimation image sequence processed produce estimate image 3d scene camera produces images examples tasks scene reconstruction typically images scene video scene reconstruction aims computing 3d model scene simplest model set 3d sophisticated methods produce complete 3d surface model advent 3d imaging requiring motion scanning processing algorithms enabling rapid advances field grid based 3d sensing acquire 3d images multiple angles algorithms multiple 3d images 3d models image aim image removal noise sensor noise motion blur images simplest approach noise removal types filters pass filters filters sophisticated methods assume model local image structures model noise image data terms local image structures lines edges controlling filtering based local analysis step level noise removal compared simpler approaches field inpainting methods organization vision highly application dependent systems stand applications solve specific measurement detection larger design systems control mechanical actuators planning databases machine interfaces specific implementation vision depends functionality pre learned modified operation functions unique application typical functions vision systems image understanding systems image understanding systems include levels abstraction level includes image primitives edges texture elements regions intermediate level includes boundaries surfaces volumes level includes objects scenes events requirements topics requirements designing levels representation concepts concept organization spatial knowledge temporal knowledge scaling description comparison inference refers process explicitly represented control refers process inference search matching techniques applied stage processing inference control requirements search hypothesis activation matching hypothesis testing generation change focus attention strength belief inference goal hardware kinds vision systems basic elements power source image acquisition device camera ccd processor control communication cables wireless interconnection mechanism addition practical vision software display monitor vision systems spaces industrial illumination controlled environment completed includes accessories camera supports cables vision systems visible light cameras viewing scene frame rates 60 frames slower vision systems image acquisition hardware active illumination visible light structured light 3d scanner camera radar imaging scanner magnetic image scan synthetic hardware images processed vision algorithms process visible light images traditional broadcast consumer video systems operate rate 30 frames advances digital signal processing consumer graphics hardware speed image acquisition processing display real time systems hundreds thousands frames applications robotics fast real time video systems simplify processing algorithms combined speed projector fast image acquisition 3d measurement feature tracking vision systems composed camera automatically pictures person perspective 2016 vision processing units emerging class processor cpus graphics processing units gpus role  
6804	computer	charge coupled device ccd device movement electrical charge device charge conversion digital achieved shifting signals stages device time ccds charge device shift allowing transfer charge ccd major technology digital imaging ccd image sensor pixels represented metal semiconductors threshold image acquisition allowing conversion incoming electron semiconductor interface ccd read ccds technology light detection ccd image sensors professional medical scientific applications quality image data required applications quality demands consumer professional digital cameras active pixel sensors complementary metal semiconductors quality advantage ccds time history charge coupled device invented 1969 united bell labs george smith lab semiconductor bubble memory smith conceived design termed notebook charge bubble devices device shift register design ability transfer charge surface semiconductor storage concept principle device developed labs late 1960s patent application ccds imaging assigned michael initial paper describing concept listed memory delay imaging device experimental device principle row closely metal squares silicon surface accessed wire ccd integrated circuit technology simple bit shift register device input output circuits demonstrate shift register pixel linear imaging device development device rapid rate 1971 bell researchers led michael capture images simple linear devices companies including semiconductor texas instruments development programs effort led bell researcher commercial devices 1974 linear 500 element device 100 100 pixel device electrical engineer invented digital camera ccd 1975 11 satellite equipped charge coupled device array pixels technology imaging launched december 1976 sony started development effort ccds involving investment eventually sony managed mass produce ccds happened august 1982 subsequently ccd chip contribution january 2006 smith awarded national academy engineering charles prize 2009 awarded nobel prize physics ccd concept michael awarded 2010 national medal technology innovation pioneering electronic technologies including design development charge coupled device ccd awarded 2012 ieee medal pioneering contributions imaging devices including ccd cameras thermal operation ccd capturing images region layer silicon transmission region shift register ccd properly speaking image projected lens array region causing electric charge proportional light intensity location dimensional array scan cameras single slice image dimensional array video cameras dimensional picture scene projected plane sensor array image control circuit transfer contents neighbor operating shift register array charge charge converts charge voltage process controlling circuit converts entire contents array semiconductor sequence digital device sampled stored memory analog device analog video camera processed continuous analog signal output charge pass filter processed fed circuits transmission recording processing detailed physics operation charge generation light region channel ccds silicon bias gate gate positive potential threshold strong eventually result creation channel gate takes time reach thermal hours scientific cameras cooled temperature initially holes mobile electrons surface ccd operates called deep pairs generated region separated electric field electrons surface holes pair generation processes identified processes dark current generation add noise image limit total usable integration time electrons surface image integration charge transferred thermal reached maximum capacity depth typically electrons pixel design manufacturing region ccd layer silicon grown material channel devices type design utilized modern ccds surface silicon region defines channel charge packets travel details advantages channel device layer charge surface structure advantages transfer efficiency dark current reduced surface penalty charge capacity factor compared surface channel ccd gate grown layer process gates chemical separately gates channels channels defined utilization process produce channel region channel grown serve charge packets column channel produced gates process utilizes temperature step gate material channel parallel exclusive channel charge carrying regions channel region underlying providing barrier electrons charge packets discussion physics ccd devices assumes electron transfer device transfer gates reverse bias channel layer ccd charge packets device ccd manufacturing operation optimized process describes frame transfer ccd ccds manufactured heavily manufacture device method reduces dark current infrared red response method manufacture construction transfer devices version ccd called ccd charge coupled device charge packet transfer operation analogous dilation ccd additional charge silicon silicon interface generates electric field gate additional driving force aid transfer charge packets architecture ccd image sensors implemented architectures common frame frame transfer distinguishing characteristic architectures approach frame device image active electronic shutter mechanical shutter type sensor image device read frame transfer ccd silicon covered mask typically image transferred image storage region acceptable percent image read storage region image integrating active frame transfer devices typically require mechanical shutter common architecture solid broadcast cameras frame transfer architecture requires silicon real equivalent frame device costs roughly architecture concept step column image sensor storage device pixel shift occur transfer image storage shutter times essentially eliminated advantage imaging covered factor 50 percent effective quantum efficiency equivalent modern designs addressed characteristic adding surface device direct light regions active bring factor 90 percent depending pixel size optical design choice architecture utility application expensive failure power intensive mechanical shutter device choice consumer shot cameras devices hand applications require light collection issues money power time frame device choice tend frame devices frame transfer falls common choice factor issue devices addressed frame transfer chosen architecture illuminated device ccds pixels digital cameras optical scanners video cameras light sensing devices commonly respond 70 percent incident light meaning quantum efficiency 70 percent efficient photographic film percent incident light common types ccds sensitive infrared light infrared photography vision devices video recording photography normal silicon based sensitivity limited consequence sensitivity infrared infrared remote controls appears ccd based digital cameras infrared cooling reduces array dark current improving sensitivity ccd light visible wavelengths professional liquid reduce dark current thermal noise levels frame transfer ccd frame transfer ccd imaging structure proposed ccd imaging michael bell laboratories frame transfer ccd specialized ccd professional video cameras designed exposure efficiency normal functioning ccd divided phases exposure phase ccd incoming storing electrons cells exposure time passed cells read time phase cells shifted entire ccd shifted continue light shifting fast errors result light falls cell holding charge transfer errors referred vertical strong light source create vertical exact location addition ccd light read faster shifting requires faster faster introduce errors cell charge measurement leading noise level frame transfer ccd light sensitive cells light typically covered material exposure time cells transferred rapidly hidden safe incoming light cells read speed correctly measure cells charge time ccd light delay occurs successive disadvantage ccd cost cell basically complex control electronics charge coupled device charge coupled device ccd connected image mounted ccd image includes functional elements micro channel plate screen elements mounted close mentioned sequence coming light source fall generating accelerated electrical control voltage applied electrons accelerated screen screen finally converts electrons guided ccd fiber optic lens image inherently includes shutter functionality control voltage accelerated return electrons electrons screen light image light falls ccd shutter closed process control voltage called called ccd cameras extremely sensitivity cameras enable single detection major advantages cameras performing cameras enable shutter times short 200 cameras price cameras expensive image hand cameras cooling chip temperatures cooling adds additional costs camera yields heavy application vision devices scientific applications electron ccd electron ccd ccd product ccd discontinued product offered texas instruments charge coupled device gain register shift register output gain register split stages stage electrons impact gain probability stage register elements 500 gain single input electrons thousands output electrons reading signal ccd noise background typically electrons noise thousands electrons single electron devices primary advantage noise photo 1973 george smith bell telephone laboratories sensitivity ccds gain applied gain register stochastic exact gain applied pixel charge impossible gains 30 uncertainty signal noise ratio quantum efficiency respect operation gain light levels quantum efficiency assumed pixel electron noise stochastic multiplication risk multiple electrons pixel single electron avoid multiple counts pixel mode operation frame rates essential gain graph multiplication registers elements gains equation probability output electrons input electrons total multiplication register gain costs resolution capable replacing applications advantage fast applications range imaging cameras cooling cooling liquid chip temperatures range cooling adds additional costs imaging yield application cameras equipped permanent vacuum chip avoid issues light capabilities biomedical fields noise speeds variety applications involving light sources events imaging speed resolution types ccds broken field biomedical light applications including animal imaging single imaging super resolution microscopy wide variety modern microscopy techniques light conditions comparison traditional ccds terms noise commercial cameras typically clock charge dark current dependent extent cooling lead effective noise ranging 01 electrons pixel read improvements technology led generation cameras capable producing charge transfer efficiency em gain times advances light detection lead effective total background noise electrons pixel read noise floor light imaging device quantum ccds quantum efficiency 100 count outputs ease compared photographic variety reasons ccds rapidly infrared applications thermal noise rays alter pixels ccd array counter effects ccd shutter closed average images shutter closed random noise developed dark frame average image shutter image remove dark current systematic pixels hot pixels ccd space highly developed series steps reduction convert raw ccd data images ccd cameras require wind sources weight imaging platforms technique auto ccd chip monitor imaging chip rapidly detect errors tracking command mount motors correct unusual application ccds called scanning ccd fixed tracking follow motion ccd transferred read direction parallel motion speed image larger region normal field view digital survey famous technique survey quarter addition ccds array including color cameras digital color cameras mask ccd square pixels filtered red blue green human eye sensitive green red blue result collected pixel color resolution resolution color separation reached ccd devices beam splits image red green blue components ccds arranged respond color professional video semi professional technique developments competing technology sensors beam filters increasingly popular video digital cinema cameras advantage mask device quantum efficiency light sensitivity size device light entering captured sensor mask proportion light ccd pixel scenes instance microscopy resolution mask device enhanced technology process color sampling frames scene produced sensor moved pixel dimensions visual field acquired elements mask sensitive red green blue components color eventually pixel image scanned color resolution channels equivalent resolutions red blue channels green channel sensor sizes sensors ccd sizes image sensor formats sizes referred inch fraction called optical format measurement 1950s time ccd exposure eventually electrons image structure ccd electrons flow easily direction vertical anti features built ccd reduce sensitivity light pixel structure james developed vertical anti light collection reduce light sensitivity  
6829	computer	computing cache hardware software component stores data future requests data served faster data stored cache result earlier computation data stored cache hit occurs requested data cache cache occurs cache served reading data cache faster result reading slower data store requests served cache faster performs cost effective enable efficient data caches caches proven computing typical applications access data degree locality reference access patterns exhibit temporal locality data requested requested spatial locality data requested stored physically close data requested motivation inherent trade size speed larger resource implies physical distances expensive technologies sram cheaper easily mass produced dram hard disks buffering cache benefits bandwidth latency latency larger resource latency access hundreds clock cycles modern processor reach dram reading subsequent reads nearby locations prediction explicit guess future reads requests time correctly latency throughput cache throughput underlying resource multiple fine larger efficient requests dram circuits served wider data bus program accessing bytes 32 bit address space served 128 bit chip data bus individual byte accesses total bandwidth 80 data movement memory addresses data reading larger reduces fraction bandwidth required address operation hardware implements cache block memory temporary storage data central processing units cpus hard disk drives frequently cache browsers servers cache entries entry data data store entry tag specifies identity data store entry cache client cpu browser operating access data exist store checks cache entry tag matching desired data data entry situation cache hit browser program check local cache disk local contents tag content data percentage accesses result cache hit rate hit ratio cache alternative situation cache entry desired tag cache requires expensive access data store requested data retrieved typically copied cache ready access cache existing cache entry removed newly retrieved data heuristic select entry replace replacement policy popular replacement policy replaces entry entry accessed entry cache algorithm efficient caching algorithms compute hit frequency size stored contents cache store larger amounts data slower experienced hard drives networks efficient cpu cache writing policies writes data cache write data store timing write controlled write policy basic writing approaches write cache complex implement track locations written mark dirty writing store data locations written store cache referred write reason read write cache requires block replaced require memory accesses service write replaced data cache store data policies data write client data cache explicitly cache write data data returned write operations decision write misses data loaded cache defined approaches write write policies write policies entities cache change data store cache alternatively client updates data cache copies data caches communication protocols cache managers data consistent protocols examples hardware caches cpu cache memories close cpu operate faster larger main memory cpus 1980s caches levels modern embedded desktop server microprocessors types cache levels functions examples caches specific function cache cache translation buffer mmu gpu cache earlier graphics processing units gpus limited read texture caches introduced textures improve 2d cache cache misses affect performance caching 32 bit wider texture data pixel indexed complex patterns arbitrary coordinates perspective transformations inverse texture mapping gpus advanced gpgpu compute developed larger increasingly caches including instruction caches increasingly common functionality cpu caches architecture gpus feature l2 cache gpu level cache gpu level cache gpu level cache caches grown handle primitives threads atomic operations interface cpu style mmu digital signal processors earlier designs memory fed modern qualcomm include set caches cpu modified harvard architecture shared l2 split l1 cache cache translation buffer memory management unit mmu table entries main memory specialized cache recording virtual address physical address translations specialized cache called translation buffer tlb software caches disk cache cpu caches managed hardware variety software caches cache main memory disk cache managed operating kernel disk buffer integrated hard disk drive referred disk cache main functions write read repeated cache rare size buffer comparison drive capacity disk controllers board cache hard disk drive data blocks finally fast local hard disk drive cache held slower data storage devices remote servers cache local tape drives optical scheme main concept hierarchical storage management fast flash based solid drives caches slower media hard disk drives hybrid drives solid hybrid drives cache browsers servers employ caches store previous responses servers images caches reduce transmitted network stored cache reduces bandwidth processing requirements server helps improve users browsers employ built cache internet service providers organizations caching server cache shared users network form cache caching files sought peer peer applications stored cache accelerate exist communities perform task traffic cache store data computed demand retrieved store optimization technique stores resource consuming function calls lookup table allowing subsequent calls stored avoid repeated computation dynamic programming algorithm design methodology caching caches caches mapping domain names ip addresses library write operation common operating networks ethernet lan complexity protocol required multiple write caches communication instance caches client network file caches typically read write network protocol simple reliable search engines frequently indexed cache google cached link search result prove server type caching storing computed program caches output compilation speed compilation runs database caching improve throughput database applications processing data dictionaries frequently subsets data distributed cache hosts provide scalability reliability performance application hosts located spread regions buffer cache semantics buffer cache fundamental differences intent process caching process buffering caching performance increase data repeatedly transferred caching performance increase initial typically write transfer data item performance increase buffering occurring caching read caches data item fetched location subsequent reads data item performance increase fetched cache faster intermediate storage data location write caches performance increase writing data item realized write data item data item stored cache intermediate storage transfer data item storage stage occurring background process strict buffering caching process distributed cache protocol maintain consistency cache intermediate storage location data buffering hand typical caching implementations data item read written time effectively write performance increase application write originated additionally portion caching protocol individual writes batch writes form buffering portion caching protocol individual reads batch reads form buffering form impact performance initial reads impact performance sum individual reads practice caching involves form buffering strict buffering involve caching buffer temporary memory location traditionally cpu instructions address data stored peripheral devices addressable memory intermediate stage additionally buffer feasible block data assembled required storage device data delivered produced buffer data transferred sequentially hard disk buffering increases transfer performance reduces variation transfer latency opposed caching intent reduce latency benefits data written buffer read buffer cache increases transfer performance increase possibility multiple combine block main performance gain occurs chance data read cache multiple times written data read cache purpose reduce accesses underlying slower storage cache abstraction layer designed perspective neighboring layers  
7519	computer	file comparison convolution correlation thumb visual comparison convolution cross correlation operations involving function assuming height result reason identical mathematics functional analysis convolution mathematical operation functions produce function shape modified term convolution refers result function process computing convolution cross correlation real valued functions continuous discrete variable differs cross correlation reflected axis cross correlation   continuous functions cross correlation operator convolution operator convolution applications include probability statistics vision natural language processing image signal processing engineering differential equations convolution defined functions euclidean space periodic functions discrete time fourier transform defined circle periodic convolution row 13 properties discrete convolution defined functions set integers convolution applications field numerical analysis numerical linear algebra design implementation finite response filters signal processing computing inverse convolution operation definition convolution written star defined integral product functions shifted integral transform equivalent definition symbol represent time domain   context convolution weighted average function moment weighting simply shifted   weighting function emphasizes input function functions supported negative arguments integration limits multi dimensional formulation convolution domain definition notation common engineering convention interpreted carefully avoid confusion   instance equivalent   equivalent convolution describes output terms input class operations linear time invariant theory derivation convolution result constraints terms fourier transforms input output operation frequency components created existing modified amplitude phase output transform product input transform transform transfer function convolution theorem derivation property convolution conversely convolution derived inverse fourier transform product fourier transforms historical developments earliest convolution integral appeared derivation theorem published expression type book entitled differences series volumes series paris convolution operations fourier term wide 1950s prior folding german composition product integral integral appears definition operation composition products considered italian mathematician circular convolution function periodic period functions exists convolution periodic identical arbitrary choice summation called periodic summation function periodic summation function circular convolution periodic summation replaced operation called periodic convolution discrete convolution complex valued functions defined set integers discrete convolution convolution finite sequences defined sequences supported functions set integers sequences coefficients coefficients ordinary product convolution original sequences product coefficients sequences finite support set representing instance finite response finite summation circular discrete convolution function periodic period functions exists convolution periodic identical summation called periodic summation function periodic summation function circular convolution limited interval   reduces common forms notation convolution denotes convolution integers circular convolution context fast convolution fast fourier transform algorithm fast convolution algorithms situations discrete converted circular fast transforms convolution property implement computation convolution sequences kernel operation multiplication multi efficiently implemented transform techniques common fast convolution algorithms fast fourier transform algorithms circular convolution theorem circular convolution finite sequences sequence performing inverse type defined efficiently implemented technique conjunction extension portions output fast convolution algorithms algorithm transform fast fourier transforms rings sequence extension shorter sequence fast circular convolution computationally efficient method sequence blocks block faster algorithms method method hybrid convolution method combines block algorithms input output latency real time convolution computations domain definition convolution complex valued functions complex valued function defined defined rapidly infinity integral exist conditions existence convolution infinity easily offset rapid question existence involve conditions supported functions supported continuous functions convolution exists supported continuous function supported locally convolution defined continuous convolution defined functions locally square supported interval form supported functions convolution exists functions consequence theorem true functions discrete convolution convolution             algebra convolution holds negative implies convolution continuous map suitable spaces satisfy convolution continuous mapping convolution true contexts circle convolution preceding sharp real exists constant optimal discovered 1975 stronger estimate true 19 weak norm convolution defines continuous map 20 rapid addition supported functions functions functions rapid infinity feature convolution rapidly rapidly rapidly decreasing functions convolution combined convolution properties class functions closed convolution distributions define convolution function distribution distributions supported function distribution smooth function defined analogous extend definition convolution unique associative valid distribution supported distribution measures convolution measures bounded variation measure defined convolution defined regarded distributions convolution l1 functions continuous respect measure convolution measures version norm total variation measure space measures bounded variation space convolution measures treated standard methods functional analysis apply convolution distributions properties algebraic properties convolution defines product linear space functions product algebraic properties formally space functions product convolution associative algebra identity linear spaces functions space continuous functions compact support closed convolution form associative proof variable integration 28 result proof theorem double evaluated proof integral real complex 32 algebra functions identity convolution lack identity typically major collections functions convolution performed distribution identity linear space supported distributions identity convolution distribution distributions inverse element convolution defined set distributions forms convolution proof integration functions integral convolution space simply product theorem result holds assumed functions theorem variable derivative functions variables analogous holds partial derivative consequence convolution viewed smoothing operation convolution differentiable times total hold precise condition l1 weak derivative consequence convolution instance continuously differentiable compact support arbitrary locally function hold sense distributions supported distribution function distribution hand positive differentiable functions continuous convolution discrete difference operator analogous relationship convolution theorem convolution theorem 47 denotes fourier transform 48 49 constant depends specific normalization fourier transform versions theorem hold transform transform transform transform trivial convolution theorem convolution translations meaning translation function defined function convolution translated function translation convolution functions consequence convolution conditions convolution translation invariant operation speaking translation invariant operations represented convolution play role study time invariant systems theory representing function response transformation precise version theorem requires class functions convolution defined requires assuming addition continuous linear operator respect topology instance continuous translation invariant continuous linear operator convolution finite measure continuous translation invariant continuous linear operator convolution distribution fourier transform bounded bounded fourier suitable measure real complex valued functions define convolution typical locally compact left measure convolution defined convolution fixed function left translation convention required consistency definition convolution measures left measure integral preferred locally compact version convolution theorem holds fourier transform convolution product fourier transforms circle measure fixed operator acting space operator compact direct calculation convolution property cited normal translation operators family operators consisting translation operators family normal operators spectral theory exists basis simultaneously circle precisely characters convolution compact multiplication operator basis viewed version convolution theorem discussed discrete finite convolution operators represented matrices discrete fourier transform result holds compact matrix coefficients finite dimensional representations form basis theorem analog convolution theorem continues hold aspects analysis depend fourier transform convolution measures written finite measures convolution defined measure action written subset convolution finite measure total variation locally compact left measure continuous respect density function convolution continuous density function convolution separate density functions probability measures convolution probability distribution sum independent random variables respective distributions ε multiplication unit ε convolution product defined algebra functions respect algebraic structure convolution defined convolution appears notably definition algebra convolution operations applications science engineering mathematics  
7597	computer	processor design design engineering task creating processor component hardware engineering design development implementation electronics engineering design process involves choosing instruction set execution paradigm vliw risc microarchitecture microprocessor design description manufactured semiconductor device processes die chip carrier chip carrier inserted socket printed circuit board mode operation processor execution lists instructions instructions typically include compute manipulate data values registers change values read write memory perform tests data values control program flow details cpu design divided design components cpus designed performance markets require custom optimized application specific designs items achieve frequency power dissipation chip goals cpus designed performance markets implementation items intellectual property control logic implementation techniques logic synthesis cad tools implement register files common logic cpu design include unstructured random logic finite machines common 1965 1985 programmable logic arrays common 1980s common implementation logic device types implement logic include cpu design project major tasks designing cpu core die helps transistors die improves performance transistors switch faster reduces power wires reduces cost cpus fit silicon releasing cpu size die cpu core cost levels integration scale integration chip additional cache multiple cpus components improving performance reducing cost complex electronic designs logic effort design bugs project schedule cpu key cpu architectural innovations include register cache virtual memory instruction pipelining superscalar cisc risc virtual machine microprogram stack topics variety proposed including logic cpus computational ram optical computing performance analysis testing cpu speed examples include developed standard performance evaluation corporation developed embedded microprocessor benchmark consortium commonly metrics include metrics design techniques cpu faster performance performance deterministic response vice versa markets markets cpus markets requirements cpus devices designed market markets purpose computing vast majority revenues generated cpu sales purpose computing desktop laptop server computers commonly businesses market intel ia 32 64 bit version x86 64 architecture market powerpc sparc maintaining customer bases hundreds millions ia 32 architecture cpus market growing percentage processors mobile implementations netbooks laptops devices types programs cpu designs targeted type application function demands wide range programs efficiently cpu designs advanced technically disadvantages costly power consumption processor 1984 performance cpus required develop scientific computing scientific computing market revenue units shipped government labs universities 1990 cpu design market mass market cpus organized clusters proven main remaining active hardware design scientific computing speed data transmission systems connect mass market cpus embedded design measured units shipped cpus embedded machinery appliances vehicles infrastructure embedded processors sell volume units price purpose processors single function devices purpose cpus embedded processor embedded cpu family largest total units shipped units inexpensive design time roughly commercial intellectual property embedded larger chip silicon cost implementations 200 logic gates square silicon 2009 cpus produced arm architecture instruction set 32 bit instruction set arm architecture arm chip designed human time 32 bit parallax microcontroller architecture chip designed people human time bit architecture microcontroller conceived designed students institute technology bit architecture technology chip designed 13 months people educational cpu design 32 bit berkeley risc risc architecture chips designed series students quarter sequence graduate courses design basis commercial sparc processor design decade student class mit team design build simple bit cpu series integrated circuits team students designed built simple 32 bit cpu courses require team students design implement simple cpu single 15 week cpu designed effort considered design effort time 24 people contributed project included designing building prototype cpu soft microprocessor cores embedded systems performance levels desired power consumption requirements processors implemented logic synthesis techniques synthesized processors implemented shorter time time market  
7622	computer	complex instruction set cisc single instructions execute level operations load memory arithmetic operation memory store capable multi step operations addressing modes single instructions term coined contrast reduced instruction set risc term risc complex mainframe computers microcontrollers memory load store operations separated arithmetic instructions modern risc processor complex modern microcontroller cisc labeled instruction set complexity electronic circuits instructions complexity encoding patterns typical characteristic risc designs uniform instruction instructions employ strictly separate load store instructions examples instruction set architectures labeled cisc 360 architecture pdp 11 vax architectures data microprocessors microcontrollers labeled cisc academic publications include motorola 68000 families intel 8080 x86 family z80 families national semiconductor technology family intel family designs regarded instance technology labeled risc circles cisc risc complex addressing modes arithmetic instructions operate memory risc principles historical design context benefits risc philosophy prominent bridge called semantic gap design instruction sets support level programming procedure calls loop control complex addressing modes allowing data structure array accesses combined single instructions instructions typically highly encoded enhance code density compact nature instruction sets program sizes slow main memory accesses time 1960s saving cost memory disc storage faster execution meant programming productivity assembly language level languages fortran algol microprocessors category programmed assembly language types critical applications instructions 1970s analysis level languages complex machine language implementations determined instructions improve performance instructions intended assembly language fit compiled level languages compilers updated advantage instructions benefits rich instructions compact modern processors performance segment caches central component opposed embedded systems fast complex expensive memories inherently limited size compact code fundamental reason main memories dynamic ram remain slow compared performance cpu core design issues designs achieved aim throughput cost allowed level language expressed instructions observed instance versions complex architectures hardware lead situations improve performance complex instruction procedure enter instruction sequence simpler instructions reason microcode designed assembly language instructions including features implemented efficiently basic hardware instance effects conventional setting register memory location ordinary internal buses external bus demand extra cycles time balanced performance designs highly encoded level instructions complicated decode execute efficiently limited transistor budget architectures required deal processor designer simpler typically slower solution based decode tables microcode time transistors components limited resource left components opportunity types performance risc idea circuitry performs actions defined microcode cisc processors processor structure cpu designs 1970s rise ideas return simpler processor designs feasible expensive rom tables structures decoding risc labeled processor ibm ibm watson center mid 1970s tightly pipelined simple machine originally intended internal microcode kernel engine cisc designs processor introduced risc idea larger public simplicity visible instruction set easier implement overlapping processor stages pipelining machine code level level compilers pipelining level performance cisc supercomputers reduce instruction cycle time implementing limited component count wiring complexity feasible time internal microcode execution cisc processors hand pipelined depending design basic structure risc processors superscalar modern context complex variable encoding typical cisc architectures complicated feasible build superscalar implementation cisc programming model superscalar original pentium superscalar examples frequent memory accesses operands typical cisc machine limit instruction level parallelism extracted code fast cache structures modern designs measures inherently compact rich instructions average performed machine code unit byte bit cisc risc processor advantage modern cache based implementation transistors logic microcode resources speed cache memories limited maximum transistors complex transistor count cisc grow exponentially total transistors processor majority typically caches tools enhanced technologies led implementations highly encoded variable designs load store limitations risc implementations architectures x86 designs microcontrollers embedded systems superscalar complexity modern x86 solved converting instructions micro operations dynamically micro operations indirect dynamic superscalar execution pentium pro amd examples simple superscalar design located complex speak technique ibm architecture microprocessors cisc risc terms terms cisc risc meaningful continued evolution cisc risc designs implementations highly tightly pipelined x86 implementations designs intel amd ibm supported instruction achieved maximum efficiency simple x86 subset typical risc instruction set typical risc load store limitations intel pentium generation superscalar version principles modern x86 processors typically decode split instructions dynamic sequences internally micro operations helps execute larger subset instructions pipelined overlapping fashion advanced extraction parallelism code stream performance popular academic texts complex instructions cisc term meaning load store risc architecture instructions complexity implementation instructions define cisc arithmetic instructions perform memory accesses compared bit cisc processor risc floating instruction complex cisc complex addressing modes 32 64 bit risc processors complex addressing modes bit cisc processors pdp pdp intel intel motorola 68000 mainframe burroughs vax technology vary sizes formats instructions types sizes registers data types hardware support operations scanning arbitrary precision arithmetic functions bit addition cisc category load operate instructions load store memory contents instructions perform actual calculations instance pdp fixed instructions microcode cisc instructions powerpc instructions complex register renaming buffer risc minimal cisc instructions cisc combines memory access computation instructions  
8095	computer	donald knuth born january american scientist mathematician professor stanford university author multi volume art programming contributed development analysis computational complexity algorithms formal mathematical techniques process notation addition fundamental contributions branches theoretical science knuth creator definition language rendering modern family writer knuth created programming systems designed encourage facilitate programming designed mix instruction set architectures knuth software patents expressed opinion united patent trademark office european patent life knuth born german knuth father jobs running printing company teaching school donald student school received academic solving grade entered contest letters bar create judges 500 list donald 500 winning contest prizes school received television education 1956 knuth institute technology western university joined beta physics institute technology knuth introduced ibm mainframes reading manual knuth decided assembly compiler code machine school believed knuth created program school team win games assigned values players probability approach news reported knuth founding editors engineering science review national award technical magazine 1959 switched physics mathematics 1960 received bachelor science degree simultaneously master science degree special award faculty considered outstanding 1963 mathematician hall earned phd mathematics california institute technology receiving phd knuth joined faculty assistant professor accepted commission write book programming language compilers project knuth decided treat topic developing fundamental theory programming art programming originally planned publish single book knuth developed book concluded required volumes cover subject published volume 1968 publishing volume art programming knuth left accept institute defense communications division princeton university campus performing mathematical cryptography support national security agency knuth left position stanford university faculty professor science knuth writer scientist knuth called father analysis algorithms art programming 1970s knuth science field real identity standard publications lot papers coming simply wrong   straight story told 2011 volumes volume series published concrete mathematics foundation science originated expansion mathematical volume published gates difficulty subject matter art programming stating send read knuth author mathematical john set theory construction alternate simply subject book seeks development mathematics knuth book students original creative 1995 knuth wrote book knuth language knuth mathematics contributed articles journal mathematics 1960s major mathematics knuth appeared videos youtube discussed topics writing email knuth addition science knuth author 16 texts illuminated process systematic sampling analysis 16 book rendering art contributed subsequently invited set 16 project book scientist rarely published science opinion software patents academic scientific community knuth opposed policy software patents trivial solutions obvious expressed views solutions method linear programming expressed united patent trademark office european patent knuth times stanford university titled visiting professor oxford university department science united kingdom fellow college programming digital 1970s abandoned favor knuth approach quality previous volumes time digital created programming developing knuth created methodology programming called programming believed programmers programs literature main task human knuth idea programming source file pascal source file produce readable description program executable binary iteration replaces pascal knuth program published programs books personal life donald knuth 24 june 1961 graduate student california institute technology children john martin knuth knuth chinese knuth chinese 1977 shortly week china 1980 volume art programming knuth chinese growing programmers china time 1989 chinese journal science technology header knuth close chinese people speak language health concerns 2006 knuth cancer surgery december stated bit radiation reported video knuth pay 56 errors discovered books 256 32 valuable article massachusetts institute technology technology review knuth reward checks knuth sending real checks 2008 bank error publicly listed balance bank san bugs code proved correct knuth published scientific article school magazine 1957 title weights measures defined fundamental unit 26 named fundamental unit force published article issue 33 june 1957 demonstrate concept knuth referred circular definition definition circular art programming volume concrete mathematics 2010 conference knuth announced xml based successor titled performed bell support features scaled units 3d printing input heart monitors animation sound awards honors 1971 knuth acm hopper award received awards including turing award national medal science john von neumann medal prize knuth elected distinguished fellow british society 1980 recognition knuth contributions field science 1990 awarded academic title professor art programming professor art programming knuth elected national academy sciences 1975 1992 associate french academy sciences retired regular teaching stanford university art programming elected foreign royal society 2003 knuth elected fellow class society industrial applied mathematics 2009 outstanding contributions mathematics academy science letters 2012 fellow american mathematical society awards honors include publications short list publications include art programming computers books books collected papers books  
10018	computer	dijkstra 11 – august 2002 dutch systems scientist programmer software engineer science pioneer computing science theoretical training programmer amsterdam 1952 1962 university professor life dijkstra held chair sciences university texas austin 1984 1999 professor mathematics university technology fellow burroughs corporation influential figures computing science founding generation dijkstra helped shape discipline engineering theoretical perspective fundamental contributions cover diverse computing science including compiler construction operating systems distributed systems sequential concurrent programming programming paradigm methodology programming language program design program development program software engineering principles graph algorithms foundations programming science papers source concepts standard science identified dijkstra names coined opponent view computing science concepts science engineering terms academic disciplines mid 1960s programming considered art scientific discipline 1986 programming 1970s regarded private solving activity writing instructions program late 1960s programming dijkstra industrial programmers programming style improve quality programs dijkstra background mathematics physics driving forces acceptance programming scientific discipline coined phrase structured programming 1970s programming ideas structured programming helped foundations development professional discipline software engineering enabling programmers organize manage increasingly complex software projects 2009 revolution views programming started dijkstra led movement structured programming systematic rational approach program construction structured programming basis programming methodology including object oriented programming academic study concurrent computing started 1960s dijkstra 1965 paper field identifying solving mutual principles distributed computing mutual finding shortest paths graphs fault tolerance contributions field distributed computing built shortly death 2002 received acm influential paper award distributed computing program computation annual award renamed dijkstra prize dijkstra prize distributed computing honor prize sponsored jointly acm principles distributed computing international distributed computing disc recognizes individual larger influence principles distributed computing dijkstra born father president dutch chemical society taught secondary school mathematician formal job dijkstra considered career law represent netherlands united nations school parents studied mathematics physics theoretical physics university 1950s electronic computers dijkstra career accident supervisor professor van director computation department mathematical center amsterdam offered dijkstra job officially netherlands programmer march 1952 time dijkstra remained physics days week increasing exposure computing focus shift dijkstra 1957 required stated programmer time netherlands 1959 received phd university amsterdam thesis entitled communication automatic devoted description assembly language designed commercial developed netherlands thesis supervisor van amsterdam 1952 1962 dijkstra amsterdam closely hired build mode interaction decide interface hardware software writing programming manual hardware designers contract dijkstra programmer write software machine learned experience documentation program debugging design dijkstra formulated solved shortest path demonstration official 1956 absence journals dedicated automatic publish result 1959 mathematical center dijkstra developed compiler programming language algol 60 influence thinking programming scientific activity completed implementation algol 60 compiler august 1960 compiler produced university technology 1962 dijkstra moved south netherlands professor mathematics department university technology university separate science department culture mathematics department suit dijkstra build scientists solving unusual model mathematics department late 1960s built operating named university influenced designs subsequent operating systems software based virtual memory burroughs corporation dijkstra joined burroughs corporation company time production computers based innovative hardware architecture fellow august 1973 consisted visiting company centers times carrying burroughs facility study floor house dijkstra fellow burroughs corporation occasionally branches united result reduced university day week day day famous discussed colleagues scientific articles aspects – notation presentation language content shortly moved 1984 university texas austin usa branch emerged austin burroughs output articles wrote 500 documents series technical reports private select university texas austin dijkstra accepted chair science department university texas austin 1984 dijkstra austin november 1999 mark contributions computing science department sciences organized 2000 dijkstra returned austin original house netherlands months live austin texas die netherlands dijkstra august 2002 cancer children scientist dijkstra scientific contributions theoretical pioneer computing science dijkstra helped shape discipline engineering academic perspective papers source concepts standard science identified dijkstra names coined formulated solved 1994 survey science conducted list 38 influential papers field dijkstra author papers computing scientist included positions industry dijkstra numerous contributions computing science including compiler construction operating systems concurrent programming concurrent computing distributed programming distributed computing programming paradigm methodology programming language program design program development program software engineering principles algorithm design foundations programming science addition dijkstra teaching science relationships academic computing science software industry algorithmic dijkstra algorithmic graph algorithms concurrent algorithms distributed algorithms plays role computing science 2002 dijkstra started field concurrent distributed algorithms 1965 paper solution concurrent programming control stated solved mutual paper exists remains day influential paper field win influential paper award reflects artificial separation concurrent distributed separation existed dijkstra 1959 dijkstra published article note graphs algorithm shortest path graph nodes called dijkstra algorithm impact 40 article single source shortest paths positive integer weights linear time 1999 1959 theoretical developments shortest paths directed graphs based dijkstra algorithm dijkstra algorithm shortest path routing protocols modifications dijkstra algorithm proposed authors reduce time shortest path search heuristic algorithms search algorithm peter stanford institute 1968 main goal reduce time reducing search space dijkstra shortest path mathematical center amsterdam 1956 programmer demonstrate capabilities called objective choose answer produced computing people understand designed shortest path algorithm 20 minutes aid paper pen implemented simplified transportation map 64 cities netherlands bits represent city algorithm interview published 2001 hardware engineers institute minimize wire connect pins panel machine solution discovered algorithm minimal spanning tree algorithm algorithm originally developed mathematician independently robert 1957 dijkstra 1959 called algorithm 1961 dijkstra algorithm method parsing mathematical expressions notation report produce output reverse notation abstract syntax tree algorithm named algorithm operation algorithm commonly implement operator 1962 1963 dijkstra proposed mechanism mutual algorithm processes generalization algorithm published concurrent algorithm introduced algorithmic identified proposed algorithm 1974 dijkstra algorithms mutual dijkstra considered introduce demonstrate concept mid 1970s dijkstra authors introduced study collection process performs computation including allocation storage cell process automatically paper color basic incremental collection 1980s dijkstra proposed algorithm detecting distributed systems 1981 dijkstra developed comparison based sorting algorithm variation compiler construction programming language dijkstra fan algol 60 team implemented compiler language closely involved algol 60 development discussed peter article european phase development algol 60 proceedings acm conference history programming languages january 1978 dijkstra period publication report defining algol 60 language dijkstra list 13 authors final report eventually left committee majority amsterdam wrote jointly algol 60 compiler dijkstra compiler agreed project completed shortly dijkstra rest life algol result collaboration american european algol 60 short algorithmic language 1960 algol family programming languages algol 58 inspired languages rise programming languages including pascal algol 60 designed language unknown implementation challenges notes implement major challenge algol 60 implementation time allocation management data 1960 dijkstra recursive procedures executed time stack activation records efficiently access called algol 60 compiler support method dijkstra short book algol 60 programming originally published 1962 standard reference language programming paradigm methodology programming 1950s 1960s recognized academic discipline sciences theoretical concepts coding systems programming professional activity understood late 1960s programming software term days computing science difficulty writing efficient programs required time software rapid increases power complexity increase complexity software software existing methods sufficient mark term software coined software engineering conference 1968 germany 1972 acm turing award lecture reference major software machines magnitude powerful machines programming weak computers programming computers programming equally dijkstra programmed extensively machine code 1950s level languages frequent statement poor structure 1968 wrote private paper statement published letter editor letter statement considered introduced phrase considered computing dijkstra argued programming statement level programming languages major source errors eliminated letter caused huge programming community programming dijkstra statement article notes structured programming programming languages provide alternatives programmers dijkstra thesis linear control flow allowed level structures statement loop methodology developed structured programming movement title 1972 book considered movement history programming structured programming programming 1970s revolution views programming started dijkstra led movement structured programming systematic rational approach program construction structured programming basis programming methodology including object oriented programming structured programming regarded programming notes book topic structured programming dijkstra structured programming control structures principal message programming considered scientific discipline based mathematical programming paradigm structured programming – 1970s 1980s – influenced modern programming languages pascal fortran version incorporates concepts structured programming released 1978 language considerably extended enhanced version popular structured programming language list based programming languages developed traditional structured language hybrid language pure object oriented programming language article structured programming 1986 writes dijkstra 1969 structured programming article decade focus programming techniques altered human achievements software development decade focus programming regarded private solving activity writing instructions program decade programming regarded public mathematics based activity specifications programs challenge programs programs expected debugging common program error programs errors detected achievements universal industrial established fundamental change software development book science 2004 edited notes major contributions structured programming programming technique art science demonstration carefully structured programs creative sufficient read humans program design development software engineering dijkstra ideas programming methodology structured programming movement helped foundations development professional discipline software engineering software design development enabling programmers organize manage increasingly complex software projects late 1960s dijkstra discussed concept program families mid 1970s david idea apply software engineering principles rise structured programming movement led structured approaches applied software design techniques structured analysis structured design structured programming concepts techniques ideas modular design principles concepts modules modules david techniques abstract data types tools methods structured concepts developed structured design structured programming structured analysis design technique structured method structured systems analysis design method james martin technology engineering field software metrics considered direct influence structured programming movement software engineering 1970s separation concerns soc basic principles software engineering design principle separating program distinct sections addresses separate concern term separation concerns coined dijkstra 1974 paper role scientific operating 1960s dijkstra colleagues designed implemented operating identified layers 1968 article subject foundation subsequent designs operating systems ieee society david alan writes trace idea building systems layers 1967 paper dutch scientist dijkstra joint ieee society acm conference prior paper engineers organize software examples programs electronic library society code era complicated difficult read hard modify 1967 paper dijkstra software constructed layers simple operating layers realistic ideas argued larger project essential structuring idea layers control complexity software architecture forms apply hierarchy classes object oriented programming structure service oriented architecture application science 2007 controlling complexity business systems distributed systems substantial internet dijkstra plan development called solution stack layers operational systems service components services business processes consumer actions integration quality control architecture policies dijkstra organized design layers reduce complexity software term architecture software design considered software architecture introduced design principles vocabulary professional programmer levels abstraction programming layers sequential processes original paper operating issue communications acm january 1983 introduction editor chief project systems architecture continues day hierarchical powerful approach organizing systems concurrent computing programming paper 1965 dijkstra introduced mutual processes discussed solution published concurrent algorithm notion standard critical introduced paper pioneer field concurrent computing considers dijkstra sequential processes 1965 classic paper concurrent programming notes dijkstra conceptual foundation abstract concurrent programming paper 1968 dijkstra published paper sequential processes 70 originated field concurrent programming discussed notion mutual criteria solution satisfy historical perspective left 1965 paper including correct solution mutual processes dijkstra subsequently generalized solution processes proposed mechanism concurrent processes operations identified called proposed algorithm detection field concurrent programming concurrent algorithm design illustrate synchronization issues techniques originally formulated 1965 dijkstra student terms computers competing access tape drive peripherals formulation attributed dijkstra book concurrent programming algorithms principles foundations writes dijkstra 1965 introduced mutual concept process object notion commands contributions synchronization domain computing science concepts mechanisms techniques applied domains process synchronization major topic science john 2011 notes notion concurrent program writing parallel programs regard underlying hardware introduced dijkstra 1968 1982 dijkstra idea sentences programming programming notation techniques potential parallelism solving synchronization communication implementation parallelism topic systems hardware software essentially independent concurrent programming concurrent programming abstract setting study parallelism implementation details distributed computing dijkstra principles distributed computing dijkstra prize recognizes individual larger influence principles distributed computing papers considered established field dijkstra 1965 paper solution concurrent programming control correct solution mutual writes exists started field concurrent distributed algorithms paper systems distributed control 1974 started field considered scientific fault tolerant systems dijkstra paper invited talk acm principles distributed computing 1983 report dijkstra distributed systems regard milestone fault tolerance field formal specification 1970s dijkstra chief formal 1976 dijkstra published book discipline programming method systematic development programs command language language semantics proposed development method considerable impact field day originally proposed developed extension dijkstra program statements modeled 1984 add support approach programming published jointly textbook students science book published dutch entitled van english edition appeared 1988 method programming nature science programming science programming widespread programming phrase rule thumb loop attributed claim programming inherently complex manage programmers abstraction dijkstra famous engineering view computing science peter dijkstra term science science dijkstra suggests called computing science computing technology dijkstra abstract mechanisms computing science master complexity abstract nature computing science wrote programmer 1972 dijkstra wrote scientists business programs business design classes computations display desired behaviour dijkstra opposed inclusion software engineering academic science wrote science software engineering discipline approach goal goal software engineering accepted program style computing science dijkstra character book discipline programming 1976 stated absence offer explanation articles books references approach references researchers dijkstra preserve university professor life dijkstra teaching required activity approach teaching style sentences attributed english dijkstra language served feet regarded quick deep courses students austin science presentation mathematical photo students names textbook exception write overhead invited students ideas explored explore assigned study students solutions conducted final week student dijkstra office hours highly original people capacity job austin 1990 job interview dijkstra solved austin invented technology software dijkstra computers decades colleagues acquired macintosh mail wide dijkstra wrote articles preferred rely pen dijkstra writing instrument pen repeatedly word processors write letter article rough editing head pen paper mentioned physics student solve head walking dijkstra publications written care correspondence colleagues published separately hand written letter dijkstra career characterized economy writer dijkstra 300 papers written hand precise script comprehensive explanation mathematics science reports author people paper colleagues papers limited scientists love simplicity age guidance difficult topic learn required lines prove wrong track dijkstra famous question machines relevant question promising researcher select topic dijkstra vocal criticism critical opposed teaching basic dijkstra fictional company served chairman company called mathematics company production mathematical software companies production programs invented activities challenges mathematics documented papers series company produced proof hypothesis difficulties proved assuming hypothesis proof trade secret company door company effort spent maintenance successful effort standard proof theorem replaced 100 existing dijkstra mathematics business conceived 1974 describes fictional company 75 percent market share dijkstra carefully pen called dijkstra numbered prefix dijkstra started moved mathematical centre amsterdam university technology dijkstra experienced writer block dijkstra distributed colleagues copies spread international science community topics science mathematics included reports letters short articles period 40 1972 hand written rarely 15 numbered 14 april 2002 science reports simply scanned growing facilitate search online dijkstra university texas personal life dijkstra confidence house simple mobile telephone movies contrast played austin classical music dijkstra death dijkstra august 2002 university texas death cancer influence recognition 1972 association computing machinery acm dijkstra contributions field distinguished turing award award reads introduction awards dijkstra delivered dijkstra march 2003 email distributed computing community acm president peter wrote dijkstra awards honors dijkstra awards honors distinguished british society bcs awarded bcs royal award approved 1969 1971 dijkstra dijkstra 1990 department science university texas austin organized day honor speakers united europe scientists contributed articles edited book 2002 foundation japan recognized dijkstra pioneering contributions scientific basis software creative basic software theory algorithm theory structured programming dijkstra receive award accepted family award death shortly death 2002 dijkstra received acm influential paper award distributed computing program computation annual award renamed dijkstra prize dijkstra prize distributed computing honor dijkstra award outstanding academic achievement science university department science named dijkstra 2005 award recognizes academic performance science major selection based major courses department faculty department science university texas austin hosted dijkstra lecture 12 october 2010 professor oxford principal researcher speaker event lecture series grant honor memory dijkstra publications books selected articles  
10931	computer	finite machine finite automaton automata finite automaton simply machine mathematical model computation abstract machine finite time change response external inputs change called transition defined list initial conditions transition finite machines types – deterministic finite machines deterministic finite machines deterministic finite machine constructed equivalent deterministic behavior machines observed devices modern society perform sequence actions depending sequence events simple examples machines products proper combination sequence determined requested traffic lights change sequence cars waiting combination require input combination proper finite machine computational power models computation turing machine computational power distinction computational tasks turing machine memory limited studied field automata theory operated simple mechanism modeled machine control access park gate arms height initially arms locked entry passing token slot arms allowing single customer push customer passes arms locked inserted considered machine locked inputs affect slot arm push locked arm matter times input push locked – machine input – locked additional additional inputs change customer arms push input locked machine represented transition table transitions based inputs machine outputs input machine represented directed graph called diagram represented node circle edges transitions labeled input transition input change input represented circular original locked node black dot initial concepts terminology description status waiting execute transition transition set actions executed condition event received audio radio radio receiving moving station moving track identical stimuli actions depending current finite machine representations associate actions representations event table transition table types common representation combination current input complete action table definition including actions tables virtual finite machine machines unified modeling language notation describing machines machines overcome limitations traditional finite machines main benefits machines introduce concepts nested orthogonal regions notion actions machines characteristics mealy machines moore machines support actions depend event mealy machines entry actions transitions moore machines machines specification description language standard includes graphical symbols actions transition basic data types called abstract data types action language execution semantic finite machine executable variants represent figure usage addition modeling systems finite machines including electrical engineering linguistics science philosophy biology mathematics logic finite machines class automata studied automata theory theory computation science finite machines modeling application behavior design hardware digital systems software engineering compilers network protocols study computation languages classification finite machines classifiers called sequence produce binary output received input accepted accepting accepting input received current accepting input accepted rule input sequence symbols characters actions figure finite machine accepts string accepting infinite set symbol sequences formal language called regular language finite machine accepts set set binary strings regular language set strings prime machine defining language string accepted machine language accepted machine definition languages accepted regular language regular accepts determining language accepted finite instance algebraic path generalization shortest path graphs edges weighted elements arbitrary start accepting automaton accepts string accepting appears deterministic finite automaton dfa binary input string start input accepting machine accept binary string including binary string examples strings accepted dfa ε string 11 00 classifiers classifier generalization finite machine produces single output terminal generate output based input actions control applications field computational linguistics control applications types distinguished generators generators types single letter input alphabet produce sequence output sequence outputs distinction deterministic dfa deterministic nfa automata deterministic automaton transition input deterministic automaton input lead transition powerset construction algorithm transform automaton complex deterministic automaton identical functionality finite machine called actions transition concept finite machines required convenient purely form suit design tools alternative semantics sets semantics represent machines tools modeling designing logic embedded controllers combine hierarchical machines current flow graphs tables language set semantics original machines support nested orthogonal regions actions transition actions mathematical model classification formal definitions deterministic deterministic conventional partial function 13 defined combination 14 15 16 17 symbol 18 13 defined 16 error input definitions machines transforming machine algorithms default form require total functions finite machine computational power turing machine restricted head perform read operations left formal language accepted finite machine accepted restricted turing machine vice versa output function function input alphabet 31 definition corresponds mealy model mealy machine output function depends 32 definition corresponds moore model moore machine finite machine output function transition output symbol moore machine 33 converted output equivalent mealy machine setting output function mealy transition labeling edge output symbol destination moore transformation straightforward mealy machine output labels incoming transitions edges split multiple moore machine incident output symbol optimization finding machine minimum performs function fastest algorithm minimization algorithm techniques include table moore reduction procedure additionally linear time implementation hardware applications digital circuit built programmable logic device programmable logic controller logic gates hardware implementation requires register store variables block logic determines transition block logic determines output classic hardware implementations controller machine output connected minimizing time delay output encoding power machines optimized minimize power consumption software applications concepts commonly build software applications finite machines finite machines compilers finite automata programming language compilers finite machines implement lexical starting sequence characters lexical builds sequence language builds syntax tree lexical handle regular context programming language grammar reading finite markov chain processes finite markov chain processes finite type  
11324	computer	dictionary computing online dictionary computing subjects history founded 1985 hosted college london 2015 updated supported college department computing served editor chief dictionary articles dictionary incorporates resources file covering computing topics availability gnu documentation license license incorporated content projects wikipedia  
12590	computer	hopper december – january 1992 american scientist united navy rear programmers harvard pioneer programming invented compiler tools idea machine independent programming languages led development level programming language prior navy hopper mathematics yale university professor mathematics college hopper attempted navy war 34 joined navy hopper computing career harvard mark team led 1949 joined corporation team developed developing compiler believed programming language based english compiler converted english terms machine code understood computers 1952 hopper finished program originally called compiler written 1954 hopper lead department automatic programming led release compiled languages flow 1959 participated consortium hopper guide creating machine independent programming language led language inspired idea language based english 1966 retired 1967 navy active retired navy 1986 digital equipment corporation sharing computing experiences rank referred navy guided named cray hopper supercomputer hopper awarded 40 degrees universities college yale university renamed honor 1991 received national medal technology november 22 2016 awarded medal freedom president life education hopper born york city children parents van dutch descent attended west navy mobile civil war child age decided determine clock realized limited clock school education attended school jersey hopper initially college age 16 scores beta bachelor degree mathematics physics earned master degree yale university earned mathematics yale direction types criteria published hopper teaching mathematics associate professor york university professor hopper career war hopper navy war multiple reasons age 34 weight height ratio basis job mathematician mathematics professor college valuable war effort war hopper leave absence united navy women serve waves navy minimum weight reported december trained school smith college massachusetts hopper class assigned computation project harvard university grade served mark programming staff headed hopper papers mark automatic sequence controlled calculator hopper request transfer regular navy war advanced age 38 continued serve navy hopper remained harvard computation lab 1949 favor fellow navy contract harvard 1949 hopper corporation senior mathematician joined team developing hopper served director automatic programming development scale electronic market competitive processing mark hopper recommended development programming language english told computers understand english idea accepted published paper subject compilers 1952 1950s company corporation original compiler program compiler version 1952 operational link time referred compiler believed running compiler touch told computers arithmetic compiler translated mathematical notation machine code symbols fine data processors symbol people symbol professional data processors easier people write english statement symbols decided data processors write programs english computers translate machine code language data processors pay write code kinds symbols major language data processing 1954 hopper named company director automatic programming department released compiler based programming languages including math flow spring 1959 experts industry government brought day conference conference data systems languages hopper served technical committee employees served short term committee defined language common business oriented language language extended hopper flow language ideas ibm equivalent hopper belief programs written language close english machine code languages close machine code assembly languages captured business language business language committee mount college 1967 1977 hopper served director navy programming languages navy office systems planning rank 1973 developed validation software compiler standardization program entire navy standards 1970s hopper defense department replace centralized systems networks distributed computers user node access common databases located network developed implementation standards testing systems components programming languages fortran navy tests standards led convergence programming language major vendors 1980s tests official administration assumed national standards national institute standards technology navy hopper retired rank age 60 1966 active august 1967 month period assignment retired 1971 return active 1972 1973 elmo march 1983 segment 60 minutes joint resolution house led commodore special remained active special effective november 1985 rank commodore renamed rear hopper navy female career 42 hopper navy august 14 1986 held boston hopper awarded defense distinguished service medal combat awarded department defense time active united navy 79 months days ship united navy months 23 days william charles navy history serve active age served active life rank post navy hired senior digital equipment corporation dec hopper initially offered job position applying position dec typical formal interview process letter receiving access account museum computing pioneer proposal hopper hired time senior position report position hopper represented company industry serving industry position death age 85 1992 hopper primary activity capacity days computing career efforts vendors life easier users digital engineering facilities received serving navy uniform allowed department defense regulation 32 accomplished building compiler training people em track em death day 1992 hopper natural 85 age military honors national legacy popular culture hopper women computing legacy factor creation hopper women computing held conference designed bring career women computing  
13729	computer	honda largest motorcycle manufacturer 1959 largest manufacturer internal engines measured volume producing 14 internal engines honda largest japanese automobile manufacturer 2001 honda largest automobile manufacturer toyota motor motors ford automobiles 2015 honda japanese automobile manufacturer release dedicated brand 1986 core automobile motorcycle businesses honda manufactures equipment engines personal power generators products 1986 honda involved artificial intelligence robotics released asimo robot 2000 aerospace honda engines 2004 honda production 2012 honda joint china honda china honda honda 2013 honda invested revenues development 2013 honda japanese united honda models history life honda founder honda automobiles art tuned cars entered honda founded precision machine company rings art initial failures contract supply rings toyota lost contract poor quality products engineering school visiting japan understand toyota quality control processes honda mass produce rings acceptable toyota automated process employ control industry called start war honda president senior managing director toyota 40 stake company honda aided war effort companies production military aircraft relationships honda toyota aircraft company japanese navy period 29 attack plant plant 13 january honda sold remains company toyota war 000 honda technical institute october staff 12 built sold supply 500 stroke war radio generator engines engines honda building engine customers honda type sound engine 1949 honda technical institute 000 000 000 incorporate honda motor time honda hired engineer business marketing expertise honda technical close partnership honda october 1973 complete motorcycle frame engine honda 1949 type honda dream honda motor company grew short time largest manufacturer motorcycles 1964 production automobile honda mini pick truck sale august 1963 powered straight gasoline engine classified cheaper car production car honda sports car production october 1963 chain driven rear wheels honda motorcycle origins decades honda expand product expanded operations numerous countries 1986 honda introduced successful brand american market attempt gain ground vehicle market 1991 introduction honda vehicle incorporated mid engine v6 variable timing ceo 1990 selected successful honda america manufacturing shared friendly honda health issues 1992 death honda honda product development japanese truck utility vehicle 1990s company japanese media reported 1992 1993 honda risk mitsubishi motors time larger volume successful models change honda corporate culture market driven product development vehicles generation numerous popular company engineers public change honda company successful 1992 season citing costs light mitsubishi create friendly company image honda aircraft company established 1995 owned subsidiary goal produce jet aircraft honda 23 february 2015 honda announced ceo president step replaced june additional senior managers expected corporate profile divisions honda headquartered tokyo japan shares trade tokyo stock exchange york stock exchange london paris company assembly plants plants located china united canada england japan brazil indonesia india thailand vietnam taiwan july 2010 percent honda vehicles sold united built north american plants percent earlier yen advance 15 honda sales operating revenue regions honda motor company based california honda racing corporation honda motorcycle racing division honda canada headquartered ontario originally planned located hill ontario delays led manufacturing division honda canada manufacturing based ontario honda created joint honda cars hero honda motorcycles india honda honda china honda honda atlas japanese march 2011 honda announced plans production plants decision staff plant day week manufacturer source japan 22 500 cars produced period 2018 honda reported annual revenue 250 increase previous cycle honda shares 32 share market valued 50 october 2018 products automobiles honda global consists fit civic versions north america vehicle sold developing vehicles markets worldwide honda varies country vehicles exclusive region examples honda honda light body truck designed engineered north america produced exclusive models includes honda civic door sold europe honda automotive manufacturing 1963 honda car truck built japanese market door honda introduced 1963 1965 honda built door commercial delivery van called honda honda door air cooled cylinder gasoline powered honda 1969 civic gained wide popularity door built honda car adapted international sale civic appeared 1972 replaced replaced air cooled called honda life water cooled honda life represented honda efforts competing car segment offering delivery van pick platforms shared chassis life approach initially commercial success appears influence vehicles engine flat installed utilizing installed engine wheel drive honda entered automobile manufacturing late 1960s japanese manufacturers toyota cars appears honda sense japanese competitors products civic exception usa market vehicle exchange program joint venture employed wheel drive implementation held honda honda installed technologies products optional equipment standard anti lock speed sensitive power steering multi port fuel 1980s approaches creation japanese chain mid sports car honda introduced variable timing technology honda calls civic compact cars developed manufactured honda north america civic continuously running japanese manufacturer toyota corolla introduced 1968 production civic honda vehicles sold north america 1990s model expanded civic larger slots fit honda produces civic hybrid hybrid electric vehicle toyota prius produces 2008 honda increased global production meet demand cars hybrids emerging markets company production car output building utility vehicles light truck sales fell segment light truck motor trend magazine 2006 2006 civic car magazine honda rare double win motor trend honors reported honda plans increase hybrid sales japan 20 total sales 2011 14 previous united environmental protection agency fuel efficient cars 1984 2010 honda models honda combined honda civic combined honda civic combined honda civic hybrid combined honda combined rated civic car america consecutive motorcycles honda largest motorcycle manufacturer japan started production 1955 peak 1982 honda manufactured motorcycles annually 2006 figure reduced 000 domestic competitors 2017 india largest motorcycle market honda india honda leading segment 59 percent market share 1960s manufacturer honda japanese motorcycle market advertising agency advertising honda created innovative marketing campaign meet people honda contrast negative america campaign suggested honda motorcycles campaign successful 1963 honda sold 90 000 motorcycles honda story manufacturer entering market highly dominant competitors story market entry subsequent huge success subject academic competing advanced explain honda strategy reasons success 1975 boston government write report british motorcycle industry japanese competitors report concluded japanese including honda sought scale production benefit scale learning curve effects decline british motorcycle industry failure british managers businesses profit scale scope explanation offered 1984 richard honda responsible firm entry market opposed tightly focused strategy cost scale honda entry market story learning – honda success hard staff term strategy honda initial plan entering compete motorcycles honda motorcycles class performance reliability distances team base san francisco positive consumers fell selling super school honda strategy 1989 creating concept core honda argued honda success focus technology internal engines power weight ratio engines honda produced racing technology expertise honda entry motorcycle market 1960s study teaching strategy business schools worldwide power equipment production started 1953 type engine prior motorcycle honda power equipment reached record sales 2007 units 2010 31 march figure units cumulative production power products 85 units september 2008 honda power equipment includes engines honda engines powered entire 33 car starting field 2010 500 consecutive race engine running day classic 1980s honda developed engine motor manufactured honda commonly chinese korean light vehicles honda engine company built passenger vehicles late 1990s company considerable pressure american engine honda american honda sending honda considered starting production mid 2000s larger version sports car v6 engines achieve power output future american size truck segment honda brands late 2008 honda citing environmental worldwide economic conditions reasons project robots asimo honda development robotics program successive builds starting 1986 honda moving honda series honda series 54 asimo walk feet manner human asimo humanoid robot independently human difficult mimic machine asimo demonstrated honda robot asimo project expertise create robot steps 2010 marks honda developed machine capable reading user asimo covered infrared sensors monitor electrical blood alter human process user limited gestures robot fitted brain machine interface aircraft honda technology manufactured subsidiary honda aircraft company levels reduced increased fuel efficiency reducing operating costs honda built racing honda 01 sale public replaces standard honda hired people pilot team team cross honda products honda builds terrain vehicles cells honda solar cell subsidiary company honda headquarters president ceo started sales japan film solar cells public industrial 24 october 2008 selling solar cells october 2007 honda announced october 2013 honda business operation support existing customers spring 2014 subsidiary honda active motorcycle grand racing automobile honda entered time 1964 season german grand wheel 1965 addition team honda grand honda win grand 1967 win italian grand john driver 1968 honda french grand racing coupled commercial difficulties selling automobiles united honda international learning 1965 honda powered dominated 1966 french championship hands jack european championship season championship 1980s honda returned engines team designed cars earlier extremely successful john engine developments company produced honda engine racing race 1988 honda returned 1983 initially partner team switching 1984 late 1980s 1990s honda powered cars consecutive 1986 1987 honda switched 1988 partners title 1988 1989 1990 1991 honda 1992 honda company maintained presence 1999 winning jordan grand honda debuted series supplier 1994 engines competitive development company powered consecutive drivers 2003 honda transferred effort series joint development 2006 2004 honda powered cars dominated series winning 14 16 including 500 claimed series manufacturers championship drivers championship titles 2006 2011 honda engine supplier series including 500 2006 500 time 500 history race single engine 2012 constructed engines effort 1998 honda considered team project death technical director honda official engine supplier british american racing bar jordan grand honda bought stake bar team 2004 team 2005 time 1960s honda 2006 grand driver button announced december 2008 honda 2008 global economic team sold team principal renamed subsequently honda official team british car championship 2010 honda official announcement 16 2013 planned enter 2015 engine supplier 15 september 2017 campaign spanning single achieving announced honda sign multi deal supply team red racing motorcycles honda racing corporation formed 1982 company combines motorcycle development potential racing machines racing activities source creation leading edge technologies development honda motorcycles advancement motorcycle sports range activities include sales production racing motorcycles support satellite teams education programs honda race driver stay international 1959 honda entered motorcycles race motorcycle race powerful engines 1961 honda chassis claim grand classes pick senior 1966 1967 honda race design engine configurations cylinder 22 cylinder 1979 honda returned grand motorcycle racing stroke rules limited engines circular race track connecting provide sufficient compete dominant stroke honda time experiment failed 1982 season honda debuted stroke race honda grand championship honda dominant motorcycle grand racing winning level titles honda head classes including clean 2010 record held honda set 2015 john average speed honda michael championship honda claimed championship honda captured titles 2003 2007 2010 motorcycle honda claimed electric alternative fuel vehicles compressed natural gas honda civic time purpose built natural gas vehicle commercially honda civic appeared 1998 factory modified civic designed exclusively compressed natural gas car drives contemporary honda civic gasoline 2001 civic rated internal engine environmental protection agency city los angeles 2005 honda started offering public factory trained service purchase civic 2006 civic released york consumer car june 2015 honda announced decision phase natural gas powered vehicles focus development generation vehicles hybrids plug electric cars hydrogen powered fuel cell vehicles 2008 honda sold 16 000 natural gas vehicles commercial flexible fuel honda subsidiary launched flexible fuel versions honda civic honda fit late 2006 flex fuel vehicles models gasoline initially market preferences decided produce limited share vehicles flex fuel engines 33 percent civic production 28 percent fit models sale price flex fuel version respective gasoline versions 000 civic fit flex fuel vehicles sold brazil tag price gasoline versions july 2009 honda launched market flexible fuel car honda city months 2006 flex fuel models sold cars gasoline powered automobiles 41 flex fuel cars 2007 reaching 2008 success flex versions 2009 percent honda automobile production market flexible fuel percentage gasoline version produced brazil march 2009 honda launched market flex fuel motorcycle produced subsidiary honda da 150 mix sold hybrid electric late 1999 honda launched commercial hybrid electric car sold market honda month introduction toyota prius initially sold 20 000 generation produced 2000 2006 fuel economy fuel efficient mass produced car time total global sales 18 000 vehicles cumulative global sales reached 100 000 hybrids 2005 200 000 2007 honda introduced generation japan february 2009 released markets 2009 market april 2009 19 800 door expensive hybrid 2002 honda selling honda civic hybrid 2003 model market honda hybrid offered model 2005 2007 sales honda japan february 2010 honda hybrid electric car market honda producing 200 000 hybrids japan sales fit hybrid japan october 2010 time lowest price gasoline hybrid electric vehicle sold country european version called honda hybrid released 2011 2011 honda launched hybrid models japan fit hybrid hybrid hybrid honda cumulative global hybrid sales passed unit milestone september 2012 12 11 months sales generation japan november 1999 total hybrids sold worldwide 2013 hybrids months 2014 honda sold hybrids worldwide hydrogen fuel cell japan 16 june 2008 honda motors produced assembly clarity hybrid hydrogen fuel cell vehicle efficient gas electric hybrid vehicle clarity combines hydrogen ordinary air generate electricity electric motor july 2014 honda announced production honda clarity 2015 model vehicle products heat water clarity advantage gas electric hybrids internal engine gas electric hybrid battery assist fuel cell acceleration capture energy improving fuel efficiency lack hydrogen stations developed countries production volumes honda release vehicle 150 california market infrastructure vehicle stations limited building stations expensive california air resources board granted stations honda views hydrogen fuel cell vehicles term replacement cars battery cars plug electric vehicles electric honda ev introduced 1997 result vehicle california ev battery electric vehicle major batteries ev electric range units sold production 1999 electric honda fit ev introduced 2012 range electric car launched retail customers july 2012 initial availability limited california production limited 100 units total units september 2014 fit ev released japan local government corporate customers august 2012 availability japanese market limited 200 units july 2014 honda announced production fit ev 2015 model honda plug hybrid introduced 2013 electric range sales january 2013 plug hybrid california york total units sold september 2014 introduced japan june 2013 corporations government agencies marketing japanese marketing starting 1978 honda japan decided sales distribution channels created honda sold established products content standard equipment nature honda sports compact honda honda honda honda honda stores approach implemented efforts japanese toyota sales honda created sales channels called honda 1984 honda 1985 honda chain sold products traditionally honda 1978 honda honda sold honda civic cars honda honda honda products equipment portable generators equipment motorcycles honda super established honda operations products rear license plate installed rear products rear license plate installed rear door time sales partly japanese bubble economy vehicles specific honda engineered sold sales channels providing vehicles sold honda honda locations march 2006 sales discontinued honda cars network japanese honda network names offering japanese market honda cars locations honda accessories separate retail chain called honda access motorcycle automobile products cooperation corporate partner pioneer honda audio car navigation equipment installed vehicle brand honda access locations japanese auto vehicles directed specific honda retail chain vehicles called honda auto spring 2012 honda japan introduced honda cars store japanese devoted compact cars honda fit vehicles honda honda international marketing 2003 honda released internet engineers honda constructed goldberg machine car honda engineers honda hand assembled pre production models single sets chain events honda moving speaking takes perfect 2004 produced version 2005 impossible dream december 2005 honda released impossible dream minute filmed japan founder dream build performance vehicles song impossible dream reaches racing leaves honda vehicles motorcycle car hot air song song 1960s musical 2006 honda released internet 60 person car film honda civic mid late 2000s united model close sales current start model honda advertising animated character simply opportunity rob deals offered honda phrase opportunity television screen speaker radio addition honda international culture images thomas engine late 2006 honda released asimo exploring museum arms aerospace exhibit suit progress honda sponsored coverage 2007 announced continue 2008 price requested 2007 focuses racing red – symbol termed campaign lengths honda engineers engine cars – honda released campaign spot engineer build honda engineers white walk light strong flying holding finally engineers red light hand address digital campaign aims share characteristics 2008 honda released – honda environmental responsibility hybrid engine efficient solar panels clarity hydrogen powered car 90 scale involving shapes dimensional 29 2008 honda partnership channel broadcast live letters mid air live agreed british television minutes 2009 american honda released dream impossible documentary series collection minute focus core honda current short films include failure secret success mobility honda employees card film series plays honda national television feature voice american radio host voice honda director sports late driver stated honda played role respect founder honda relationship chairman honda time called honda company marketing campaign honda official partner sponsor national league arena named honda center honda honda classic tournament sponsor major league honda player award united honda sports award female college sports united honda sports award winners chosen receive honda honda sponsored starting season honda sponsor los angeles 2010 deal winners receiving honda 1989 honda campus star challenge tournament historically black universities 2010 chinese 2010 chinese labor happened honda honda  
14537	computer	irix discontinued operating developed silicon graphics mips workstations servers variety unix bsd extensions irix operating include file major version irix irix released 1998 minor versions irix released quarter 2005 minor releases version 22 branches release maintenance release identified suffix version includes original irix code feature release suffix includes improvements enhancements overlay upgrade 22 maintenance release download versions 23 require active silicon graphics support contract history irix time release operating series workstations servers 1988 previous releases identified release prefix continued official documentation prefix irix release irix based unix release enhancements incorporates based news extent file replaces irix released 1991 replaces window window manager providing irix released 1993 incorporates features unix release including irix introduced file 1994 irix support 64 bit mips processor irix releases support mips processor family 64 bit mode irix released workstation irix improved multiprocessor scalability origin 2000 systems origin 2000 irix marketed cellular irix incorporates features original cellular irix distributed operating project irix development irix released 1998 version irix 30 released august 2006 2001 review irix critical moving efforts linux windows mips irix customers continue support platform 2006 september press release announced mips irix product production december 29 2006 march 2007 special arrangement support products december 2013 receive updates silicon graphics subsequent purchase systems hardware x86 64 based running mips code red enterprise linux linux enterprise server features irix compliant unix release unix 95 posix including draft 15 capabilities irix strong support real time disk graphics irix unix versions feature graphical user interface main desktop environment irix decade 1990 continuing 2000s animation industry scientific visualization application base relevant legacy applications 1990s irix leader symmetric multi processing smp scalable processors single image irix desktop default window manager custom designed toolkit irix compiler compiler designed support parallel posix programming fortran 90 gui ide development tools include performance tuning performance pilot irix supports graphics chips image processing libraries  
14777	computer	international informatics annual competitive programming competition secondary school students largest international mathematical terms participating countries 2017 held 1989 contest consists days programming solving algorithmic nature deal involving amounts data programmers creative dream programmers hard programming mathematics students compete individual basis students competing participating country countries 2012 students national teams selected national computing informatics british informatics computing germany international informatics science competitions competition structure competition days students typically solve hours student allowed communication books solve task write program pascal java hour competition time program secret data 2010 tasks divided difficulty awarded tests yield correct specific time memory limits program interact secret library input fixed depends program actions – game type inputs publicly hours contest output file program output files writing program exploiting special characteristics input hand combination pascal removed programming language 2019 2010 time live real time contest aware scores improve scores starting 2012 contest management developing monitoring contest scores competition days separately awarded depending relative total score 50 awarded relative gold silver medal 12 gold medal prior 2010 students receive scores published impossible country ranked adding scores competitors medal 2010 scores students receive official live 2012 nations ranked score russia china usa subsequently awarded closing analysis female performance women medal 49 medal average female suggests women participate national level double percentage women participate stage president richard competition difficulty women solve hit solution 2017 held iran participate iran students participated competition organized russia 11 issues usa team unable chinese team winning gold medal 3rd multiple winners list history sign perfect score rare achievement history sign participated host team iii gold list includes countries national selection contest multiple times competitions participating countries competitions select team listed  
15034	computer	sciences institute isi component university california school engineering development processing computing communications technologies located california isi participated revolution played leading role developing managing internet predecessor institute basic applied supported 20 government agencies involved defense science health security energy annual funding 100 isi employs scientists programmers graduate students staff california headquarters staff hold phd degrees 40 faculty graduate students senior researchers faculty school isi artificial intelligence grid computing quantum computing expertise includes natural language processing isi international robotics integration motion analysis social media analysis hardware software expertise includes physical security data mining computing cloud computing networking isi internet internet traffic analysis researchers scientific data management wireless technologies electrical smart grid isi los angeles department water power major demonstration project current initiative involves data brain imaging jointly school medicine federal agency include air force office scientific department defense advanced projects agency department education department energy department security national institutes health national science foundation scientific technical defense agencies corporate partners include center interactive smart technologies martin company martin quantum computation center subsidiary project initiative international isi businesses including ibm corporation samsung electronics company company corporation technology corporation fujitsu isi operates metal semiconductor implementation service multi project electronic circuit service 60 000 chips 1981 design tools circuit designs produce volume chips corporations universities entities worldwide institute rise startup companies grid software fusion machine translation data integration technologies history isi founded headed corporation 1960s 1970s decided leave funding cut 1971 approached university california los angeles creating campus technology institute told decision 15 months concept approved proposal days isi launched employees 1972 proposal funded defense advanced projects agency darpa 30 days isi earliest nodes predecessor internet 1977 demonstration international isi helped tcp ip communications protocols fundamental operations researcher paul developed domain characterized operates names invented sri international ongoing steve originated request comments series written record network technical structure operation documented shaped emerging internet isi researcher implement packet voice packet video packet switching real time applications development tcp ip protocol supports email edited decades death 1998 isi colleagues assumed responsibility institute role 2009 simultaneously directed internet assigned authority predecessor assign internet addresses isi organization created purpose 1998 achievements entity implement voice internet protocol voice ip voip security applications portable computers originated isi isi researchers created created 2011 isi natural language experts ibm team created watson machine win human competitors jeopardy 2012 isi successful drive remained 250 2012 martin quantum computation center organization operate quantum manufacturer wave systems isi martin performing basic applied quantum computing quantum located nasa center operated jointly nasa google andrew school engineering ranked engineering graduate schools news report 2015 including isi ranked federal science development structure isi organized divisions focused expertise specialized operate divisions isi led executive director executive vice president principal scientist technologies natural language focus optical character recognition speech processing multimedia analysis joined isi 2013 school vice dean john served executive director 2012 2013 1988 2012 isi led ibm executive  
15271	computer	retrieval activity resources relevant collection resources searches based content based indexing retrieval science searching document searching documents searching data databases texts images sounds automated retrieval systems reduce called software provide access books journals documents stores document search engines visible applications overview retrieval process user query queries formal statements search strings search engines retrieval query identify single object collection objects match query degrees object entity represented content collection database user queries matched database opposed classical queries database retrieval returned match query typically ranked ranking key difference retrieval searching compared database searching depending application data objects documents images audio mind maps videos documents stored represented document systems compute numeric score object database matches query rank objects ranking objects user process user query history idea computers search relevant pieces article inspired patents machine filed goldberg documents stored film description searching automated retrieval systems introduced 1950s featured 1957 desk set 1960s retrieval formed 1970s retrieval techniques perform corpora collection documents scale retrieval systems 1970s 1992 department defense national institute standards technology retrieval conference program aim retrieval community infrastructure evaluation retrieval collection methods scale huge corpora introduction search engines scale retrieval systems model types effectively relevant documents strategies documents typically transformed suitable representation retrieval strategy incorporates specific model document representation purposes picture relationship common models picture models dimensions mathematical basis properties model performance measures evaluation retrieval process users measurement considers collection documents search query traditional evaluation metrics designed boolean retrieval retrieval include precision recall measures assume ground notion document relevant relevant query practice queries  
15476	computer	internet protocol suite conceptual model set communications protocols internet networks commonly tcp ip protocols suite transmission control protocol tcp internet protocol ip occasionally department defense model development networking method funded united department defense darpa internet protocol suite data communication data addressed transmitted received functionality organized abstraction layers classify protocols scope networking involved lowest layers link layer communication methods data remains single network segment link internet layer providing independent networks transport layer handling host host communication application layer providing process process data exchange applications technical standards underlying internet protocol suite protocols maintained internet engineering task force internet protocol suite osi model comprehensive reference framework networking systems history internet protocol suite development conducted defense advanced projects agency darpa late 1960s pioneering 1969 darpa started data transmission technologies 1972 robert joined darpa processing technology office satellite packet networks ground based radio packet networks recognized communicate spring 1973 developer existing network control program protocol joined architecture interconnection models goal designing protocol generation summer 1973 fundamental differences local network protocols hidden common protocol network responsible reliability function hosts designer network design protocol implemented transmission control program published 1974 initially tcp managed routing protocol grew researchers recommended division functionality protocol layers included university california sciences institute edited request comments technical strategic document series documented internet development stated design internet protocols principle mechanisms intended create environment upper layers access layers monolithic design lead scalability issues transmission control program split distinct protocols transmission control protocol internet protocol design network included recognition provide functions efficiently routing traffic nodes intelligence located edge network nodes design principle design connect network local characteristics solving initial popular expression tcp ip product string ip carriers formal protocol specification created tested called router interface network network packets originally router called term changed avoid confusion types specification 1973 1974 networking stanford details idea tcp specification technical influence networking xerox parc produced parc universal packet protocol suite existed time darpa technologies stanford university university college london develop operational versions protocol hardware platforms versions developed tcp tcp tcp ip tcp ip protocol implementation 1975 network tcp ip communications performed stanford university college london november 1977 network tcp ip conducted sites tcp ip prototypes developed multiple centers 1978 1983 tcp ip officially completed flag day january 1983 protocols activated adoption march 1982 department defense declared tcp ip standard military networking 1985 internet advisory board renamed internet architecture board held day tcp ip industry attended 250 vendor protocol leading increasing commercial 1985 conference focused network broader adoption tcp ip conference founded dan internet corporations ibm dec attended meeting ibm dec major corporations tcp ip competing proprietary protocols ibm 1984 tcp ip development corporate stream tcp ip products ibm systems including os time companies software offering tcp ip dos windows tcp ip stack university tcp ip written single programmers ibm wrote tcp ip os 1984 donald mit wrote multi connection tcp ip layer maintained john mit 1983 tcp 1986 software founded starting 1985 created multi connection tcp application radio systems tcp spread tcp ip june 1989 university california berkeley agreed tcp ip code developed bsd unix public domain vendors including ibm included code commercial tcp ip software releases released native tcp ip stack windows 95 event helped tcp ip protocols based networks included ibm systems network architecture platforms digital equipment corporation systems interconnection osi xerox network systems key architectural principles principle evolved time original expression maintenance intelligence edges assumed internet connected edges speed simplicity real network address content caches forced principle principle implementation sending behavior receiving behavior send formed accept interpret object technical errors meaning principle software hosts exploit legal protocol features provide abstraction protocols services aligned division protocol suite layers functionality application level model set protocols send data layers data level architectural document emphasizes architectural principles titled host requirements structured referring layers document refers architectural principles loosely defines layer model layers names layers protocol suite closer user application closer physical transmission data viewing layers providing consuming service method abstraction upper layer protocols details bits ethernet collision detection layers avoid details application protocol layers architectural single architectural model iso systems interconnection osi defined layers osi model provide easier fit real protocols frequently document stack layers lack emphasis major difference osi approaches refers existence layer upper layers document intended 1996 architecture internet architecture grown evolutionary fashion grand plan process evolution main reasons technology success record current principles internet architecture internet protocol suite layered protocol stack design osi model established tcp ip model compared osi model books confusion models assumptions goals including relative strict abstraction upper layers provide services layers provide original osi model extended include services ip designed reliable effort delivery protocol transport layer implementations choose provide reliability data integrity guarantee delivery tcp data integrity delivery guarantee reception packet model osi model documents formal model limitation david rough running code model respect osi model iso extensions model multi access links addressing systems ethernet address mapping protocol protocols considered ip existing link terminology dependent convergence facility extension osi model internal organization network layer operate ip transport data tcp functionality exists layer management extensions osi model management framework library operates transport layer tcp application protocols designers protocols osi architecture link treated black box explicitly transmission systems academic practical alternative osi model description layer tcp ip networking model starting lowest level link layer link layer networking scope local network connection host attached called link tcp ip literature lowest component layer internet protocols tcp ip designed hardware independent result tcp ip implemented virtually hardware networking technology link layer packets internet layer interfaces hosts link processes receiving packets link controlled software device driver network card firmware specialized perform data link functions adding packet header transmission transmit frame physical medium tcp ip model includes specifications translating network addressing methods internet protocol link layer addresses media access control mac addresses aspects level assumed exist link layer explicitly defined layer packets selected virtual private network networking scenario link layer data considered application data ip stack transmission reception ip connection connection virtual link established transport protocol application scope protocol serves link layer protocol stack tcp ip model strict hierarchical sequence tcp ip model link layer corresponds systems interconnection osi model physical data link layers layers osi model internet layer internet layer responsibility sending packets multiple networks requires sending data source network destination network process called routing internet protocol performs basic functions internet layer data structures transport layer distinguish operation transport layer protocols ip data variety upper layer protocols protocols identified unique protocol internet control message protocol internet management protocol protocols protocols carried ip transmit diagnostic manage ip multicast data layered ip perform functions differences architecture tcp ip stack internet osi model tcp ip model internet layer corresponds layer systems interconnection osi model referred network layer internet layer transmission facility hosts located ip networks forwarding transport layer hop router destination functionality internet layer ip networks essentially internet internet protocol principal component internet layer defines addressing systems identify network hosts computers locate network original address successor internet internet protocol version 32 bit ip address capable identifying hosts limitation eliminated 1998 standardization internet protocol version 128 bit addresses production implementations emerged 2006 transport layer transport layer basic data channels applications task specific data exchange layer host host connectivity meaning message transfer services independent structure user data specific purpose independent underlying network protocols layer provide error control segmentation flow control control application addressing port message transmission connecting applications transport layer connection oriented implemented tcp implemented purpose providing process specific transmission channels applications layer concept network port numbered logical construct allocated communication channels application types services port standardized client computers address specific services server service directory services ip effort delivery transport layer protocols offer reliability ip reliable data link protocol level data link control tcp connection oriented protocol addresses numerous reliability issues providing reliable byte stream stream control transmission protocol reliable connection oriented transport mechanism message stream byte stream oriented multiple streams single connection multi support connection represented multiple ip addresses representing multiple physical interfaces fails connection developed initially telephony applications transport ip applications user protocol protocol ip effort protocol reliability addressed error detection weak algorithm typically applications streaming media audio video voice ip time reliability simple query response applications overhead setting reliable connection real time transport protocol protocol designed real time data streaming audio video applications network address distinguished tcp port convention ports specific applications tcp ip model transport host host layer corresponds roughly fourth layer systems interconnection osi model called transport layer application layer application layer includes protocols applications providing user services application data network connections established level protocols include basic network support services protocols routing host configuration examples application layer protocols include transfer protocol file transfer protocol simple mail transfer protocol dynamic host configuration protocol data coded application layer protocols transport layer protocol units tcp messages layer protocols actual data transfer tcp ip model data define additional layers application transport layers osi model presentation session layers functions libraries application programming interfaces application layer protocols treat transport layer protocols black boxes provide stable network connection communicate applications aware key transport layer connection ip addresses port application layer protocols client server applications common services port internet assigned authority transfer protocol server port 80 server port 23 clients connecting service ports port assigned duration transaction random specific range configured application transport layer level layers application layer protocols routers switches typically traffic provide bandwidth applications interpret application data resource reservation protocol network address translator traversal application payload application layer tcp ip model compared equivalent combination session presentation application layers systems interconnection osi model tcp ip reference model user protocols support protocols support protocols provide services user protocols actual user applications user protocol support protocol layer names layers literature table networking models layers varies networking models secondary sources conflict intent primary sources comparison tcp ip osi layers osi model application layer presentation layer session layer distinguished separately tcp ip model application layer transport layer pure osi protocol applications 400 combined requirement tcp ip protocol stack monolithic architecture transport layer application protocol runs external data representation presentation protocol runs protocol called remote procedure reliable record transmission effort transport authors interpreted tcp ip model link layer entire tcp ip model covers osi layer physical layer issues hardware layer assumed link layer authors attempted incorporate osi model layers tcp ip model commonly referred modern standards ieee model layers link layer network access layer split osi model layers protocol development effort concerned strict protocols fit osi model refer osi layer repeatedly stated internet protocol architecture development intended osi compliant addressing internet architecture entitled considered session presentation layers osi suite considered included application layer tcp ip suite functionality session layer protocols protocols session protocol sip session layer functionality realized port tcp protocols cover transport layer tcp ip suite functions presentation layer realized tcp ip applications standard data exchange apparent original osi model iso model iso management framework iso internal organization network layer management framework documents considered defined layer management protocols network layer manner structure dependent convergence facilities protocols demonstrated tunneling protocols generic routing mechanism osi tunneling network layer implementations internet protocol suite specific hardware software environment requires hardware software layer exists capable sending receiving packets network result suite implemented essentially computing platform minimal implementation tcp ip includes internet protocol ip address resolution protocol internet control message protocol transmission control protocol tcp user protocol internet management protocol addition ip tcp internet protocol version requires neighbor discovery protocol integrated security layer application programmers typically concerned interfaces application layer transport layer layers services tcp ip stack operating ip implementations accessible programmers apis unique implementations include tcp ip source stack designed embedded systems stack protocols packet radio systems personal computers connected serial lines microcontroller firmware network adapter typically handles link issues supported driver software operating programmable analog digital electronics charge physical components link layer typically application specific integrated circuit network interface physical standard performance routers extent based fast programmable digital electronics carrying link level switching  
16750	computer	mathematical logic science kleene star kleene operator kleene closure operation sets strings sets symbols characters commonly monoid construction application kleene star set written regular expressions context introduced stephen kleene automata set set finite strings generated arbitrary elements allowing element multiple times set set ε ε finite set infinite set operators rules generative grammars definition notation set define formal language power set set times understood set strings represented strings definition kleene star kleene star operator operator set strings characters kleene formal language studies theory variation kleene star operation called kleene kleene term union kleene set kleene holds element composed element terms element retrieved ε conversely ε examples kleene star applied set strings kleene applied set characters kleene star applied character set kleene star applied set kleene applied set associative product sharing properties product sets kleene kleene star applied set string generalization strings form monoid binary operation ε identity element kleene star defined monoid strings precisely monoid neutral element set kleene star generalized including operation union algebraic structure notion complete star  
18847	computer	multics computing service influential time sharing operating based concept single level memory virtually modern operating systems heavily influenced multics – unix created people multics – linux macos windows nt overview initial planning development multics started 1964 cambridge massachusetts originally project led mit project mac electric bell labs developed designed delivered mit january 1967 multics conceived commercial product electric valuable ideas multics impact science multics numerous features intended ensure availability support computing utility telephone electricity utilities modular hardware structure software architecture achieve grow size simply adding resource computing power main memory disk storage separate access control lists file flexible sharing complete privacy multics standard mechanisms engineers analyze performance adaptive performance optimization mechanisms ideas multics implemented single level store data access distinction files called segments multics process memory memory process consisted solely segments mapped address space read write process simply normal central processing unit cpu instructions operating care modifications saved disk posix terminology file codice multics concept process memory separate memory hold mapped files unix memory segment appeared file included temporary scratch memory process kernel stack disadvantage size segments limited 256 hardware architecture machines multics 36 bit word size registers address segments size 18 bits extra code files larger called files days memory expensive databases huge graphics limit rarely major idea multics dynamic linking running process request segments address space segments code execute allowed applications automatically version external called routines segments dynamically linked process execution processes search rules users versions external routines automatically equally settings multics security facilities code segment gain access data structures maintained process interact application running process user process simply performed normal procedure instruction code segment dynamically linked code segment implemented operation code segment modify data maintained action request completed simple procedure return instruction returned control user process user code single level store dynamic linking power operating systems rapid advance field 1960s accepted limited forms dynamic linking multics supported extremely central processing units memory banks disk drives removed continued operating mit software development common practice split multiprocessor separate systems hours removing components form leaving rest running original users software development testing components main user multics supported multiple cpus earliest multiprocessor systems multics major operating designed secure versions multics broken repeatedly led secure modern security engineering techniques break rare generation hardware base hardware support oriented security concept master mode multics operating provide hierarchical file file names arbitrary syntax file directory multiple names typically short form symbolic links supported multics standard concept process kernel separate stack security command processor implemented ordinary user code – idea unix written level language multics burroughs written algol project history 1964 multics developed initially mainframe 36 bit business including multics 1970 1973 multics supported machines included security improvements including hardware support protection rings bell labs project 1969 people create unix multics development continued mit electric continued development 1985 80 sites installed universities industry government sites french university 1980s stopped supporting multics users systems unix 1985 multics issued certification level secure operating trusted evaluation criteria national security center division nsa operating evaluated level multics distributed 1975 2000 europe systems united 2006 sas multics versions multics installation running hardware october 30 2000 canadian department national canada current status 2006 released source code final 1992 multics release mit source software exception optional pieces tcp ip 2014 multics current hardware simulator release simulator release 12 multics release emulator adds features including command recall editing video observations peter author book covering unix stated position multics flexible operating failed position computing community technical innovations multics project modern commercial computing systems kernel powerful multiprocessor mainframe computing utility day complex code comparison linux 2007 mit memory time kernel portion multics main memory entire including operating complex compiler user commands libraries consisted source modules roughly 200 lines source code compiled produce total roughly procedure code standards day multics compilers code density cpu performance routines called operators short standard code sequences direct comparison object code size modern systems code density choice multi user expensive main memory multics influence projects unix design features multics greatly influenced unix operating originally written multics programmers thompson influence multics unix including naming commands internal design philosophy focusing keeping simple multics resource demands limited hardware time unix originally multics unix stand opposed multics designers multics complexity favor straightforward approach computers abelson alternative origin peter neumann bell labs demonstration prototype suggested – – multics thompson 2007 interview peter refers multics close institute technology claim success multics hierarchical file separate process replace process operating systems prime operating referred multics william founder company moved domain os operating systems called multics extended multics design heavily graphics workstation environment operating technologies influenced multics external user interface internal structure close project reliability availability security features multics extended support fault tolerant systems supporting secure reliable transaction processing multics active development production usage protection architecture multics ability code level access resources basis security features operating reading literature papers multics components complete list multics listed  
18977	computer	minix mini unix posix compliant version unix operating based microkernel architecture versions minix created andrew tanenbaum educational purposes starting minix primary aim development shifted education creation highly reliable microkernel os minix developed source software minix released 1987 complete source code universities study courses source software licensed bsd license april 2000 implementation minix andrew tanenbaum created minix amsterdam principles textbook 1987 12 000 lines source code kernel memory manager file minix printed book hall released minix source code floppy disk reference manual minix compatible edition unix tanenbaum originally developed minix compatibility ibm pc ibm pc microcomputers time minix minix released 1991 included support ibm systems ported motorola 68000 sparc architectures supporting atari commodore apple macintosh sun platforms ports intel pc 32 bit protected mode national semiconductor arm processors scientific version minix basis operating based computing surface parallel computers version minix running user process sunos solaris simulator named minix demand 68k based architectures minix released 1997 x86 solaris hosted sparc architectures subject edition tanenbaum textbook distributed rom included book minix posix support processors 32 bit mode replaced network protocols included minix tcp ip stack ports minix based workstation hitachi based hp personal digital assistant developed minix minix variant minix intel ia 32 compatible processors created researchers adds virtual memory support window minix minix publicly announced 24 october 2005 andrew tanenbaum speech association computing machinery acm operating systems principles serves edition tanenbaum textbook usable resource limited embedded computers applications requiring reliability minix supports ia 32 arm architecture systems live format hard drive versions compatible hardware systems including workstation fusion virtual pc version released november 2009 gcc python 400 common unix utility programs addition version marks transition driver automatically drivers running processes minix applications reliability minix support virtual memory management suitable desktop os desktop applications firefox minix version replaced support increasing software applications minix replaced prior compiler gcc supported gnu ported minix released september 2014 brought arm support minix release candidates january 2016 stable release minix announced minix supports programming languages including fortran pascal python minix active development community 50 people 2016 conference history future minix intel post 2015 running minix internally software component intel management engine relationship linux influence minix design minix architecture notably monolithic kernel microkernel tanenbaum tanenbaum explained microkernel 2006 linux kernel development minix host led linux features minix minix file claims 2004 brown institution major linux kernel copied minix book named andrew tanenbaum brown published personal brown funded licensing time minix original development license licensing relative operating systems tanenbaum minix accessible students offer material source code copied freely license requiring included price tanenbaum book applied minix basis freely distributed software source unix operating systems linux 1990s software developers abandoned minix favor april 2000 minix source software software license time operating systems capabilities remained operating students  
19980	computer	machine translation referred confused aided translation machine aided human translation interactive translation field computational linguistics software translate speech language basic level performs simple language produce translation recognition phrases closest target language solving corpus statistical neural techniques rapidly growing field leading translations handling differences linguistic translation isolation current machine translation software domain weather reports improving output limiting scope technique effective domains formal language machine translation government legal documents produces usable output conversation improved output quality achieved human intervention systems translate accurately user identified proper names assistance techniques proven tool assist human limited produce output weather reports progress potential machine translation history 1950s scholars possibility achieving automatic machine translation quality notably bar critics claim principle obstacles translation process history idea machine translation century proposed universal language equivalent ideas sharing symbol field machine translation appeared translation 1949 researcher field bar mit university team public demonstration ibm experiment 1954 programs japan russia 1955 conference held london 1956 researchers continued field association machine translation computational linguistics formed 1962 national academy sciences formed automatic language processing advisory committee study 1964 real progress slower report 1966 failed funding greatly reduced 1972 report director defense engineering scale success translating military conflict french institute translate french english german spanish 1970 university started project translate texts automated translation 1971 xerox translate technical 1978 late 1980s computational power increased expensive statistical models machine translation companies launched including 1984 develop market translation memory technology 1989 commercial russian english german developed university 1991 started offering translation texts 1996 500 000 requests day 1997 future head translation development google darpa speed competition 2003 innovations time included source statistical engine 2007 translation service japan 2008 mobile phone built speech speech translation functionality english japanese chinese 2009 google announced google translate translates roughly books day 2012 idea digital computers translation natural languages proposed wrote translation 1949 experiment application demonstration 1954 machine college university london translation english french papers topic published time articles popular journals wireless 1955 application college time reading texts translation process human translation process simple procedure complex cognitive operation decode meaning source translator interpret features process requires depth knowledge grammar semantics syntax source language culture speakers translator depth knowledge encode meaning target language challenge machine translation program understand person create target language sounds written person application current technology faster automated translation program procedure human produce output close quality human translator produce provide approximation original process called sufficient purposes including finite expensive time human translator total accuracy approached evolution accuracy improved approaches machine translation method based linguistic rules translated linguistic – suitable speaking target language replace source language argued success machine translation requires natural language understanding solved rule based methods parse creating symbolic representation target language generated nature representation approach machine translation transfer based machine translation methods require extensive morphological syntactic semantic sets rules data machine translation programs native speaker language approximate meaning written native speaker difficulty data support method multilingual corpus data statistical methods grammar based methods grammar methods carefully design grammar translate closely languages technique referred rule based machine translation rule based rule based machine translation paradigm includes transfer based machine translation machine translation dictionary based machine translation paradigms type translation creation dictionaries grammar programs methods involves linguistics source target languages morphological syntactic rules semantic analysis languages basic approach involves linking structure input sentence structure output sentence source language generator target language transfer lexicon actual translation biggest explicit variation input source language lexical selection rules written instances ambiguity domains hard core grammar domains domain specific adjustment limited lexical selection adjustment transfer based machine translation transfer based machine translation machine translation creates translation intermediate representation meaning original sentence depends partially language pair involved translation machine translation instance rule based machine translation approaches approach source language translated transformed language language neutral representation independent language target language generated major advantages valuable target languages increases machine translation operational commercial level 1992 designed translate technical english languages dictionary based machine translation method based dictionary entries translated dictionary statistical statistical machine translation generate translations statistical methods based bilingual corpora canadian corpus english french record canadian record european corpora achieved translating texts corpora rare language pairs statistical machine translation software ibm google switched statistical translation method october 2007 2005 google improved internal translation capabilities 200 united nations materials train translation accuracy improved google translate statistical translation programs detecting patterns hundreds millions documents translated humans intelligent based human translated documents language translation quality approaches statistical machine translation minimal corpus size focus derivation syntactic structure pattern recognition development statistical machine translation operate corpus smt biggest includes dependent huge amounts parallel texts morphology rich languages translating languages correct errors based based machine translation approach proposed 1984 based machine translation based idea approach corpus texts translated sentence translated sentences corpus selected components sentences translate components original sentence target language phrases form complete translation hybrid hybrid machine translation statistical rule based translation organizations technologies asia online university claim hybrid approach rules statistics approaches advent neural version hybrid machine translation emerging combines benefits rules statistical neural machine translation approach pre post processing rule guided smt inherent complexity approach suitable specific approach complex technologies neural deep learning based approach neural machine translation rapid progress google announced translation services technology previous statistical methods providers including technologies announced deployment neural machine translation technology 2017 major issues word sense concerns finding suitable translation word meaning raised 1950s bar universal machine distinguish meanings word numerous approaches designed overcome divided shallow approaches deep approaches shallow approaches assume knowledge simply apply statistical methods surrounding word deep approaches comprehensive knowledge word shallow approaches successful time translator united nations health organization wrote machine translation easier translator job harder time consuming involves extensive resolve source lexical target language require resolved ideal deep approach require translation software require degree shallow approach simply sense english phrase based war mentioned corpus reasonable chance wrong shallow approach involves user ambiguity estimate 25 professional translator job leaving harder 75 human standard speech major translate standard language accuracy standard language heuristic statistical based takes input sources standard form language rule based translation nature include common standard errors translation source language limitations translation speech issues machine translation mobile devices named entities entities narrow sense refer concrete abstract entities real including people organizations companies refers time space july 2011 79 99 named entities occur analyzed statistical machine translation initial difficulty dealing named entities simply identifying list names common language illustrate – common names language constantly changing named entities recognized machine translator translated common affect translation change human identified named entities output translation implications message deal named entities translation meaning letters target language closely correspond source language attempts incorporate machine translation adding step translation procedure attempts cited quality translation named entities identified incorrectly california word translated word machines treated entity hard machine component process lack attention issue named entity translation recognized stemming lack resources task addition complexity creating named entity translation approach named entity translation translate create translate list goal – opposed translation approaches rely correct identification named entities approach successful named entity translation class based model method named entities replaced token represent class belong replaced person class token statistical distribution person names analyzed distributions individually class based model probability specific language affect assigned probability translation study stanford improving translation examples probabilities assigned david walk walk english target language occurrences training data outcome study stanford attempts improve named recognition translation times decrease scores translation result inclusion methods named entity translation translation sources utilization corpora body translated languages methods translated languages utilized combination provide accurate translation language compared source languages formal representation knowledge includes concepts objects processes domain relations stored linguistic nature speak lexicon nlp source knowledge machine translation systems access knowledge base systems enabled resolve lexical classic examples humans interpret phrase context knowledge stored machine translation initially meanings syntax change source knowledge specific context reduced usage nlp include retrieval extraction building generated knowledge based machine translation 1993 serve nlp purposes compiled applications automatic quality machine translation automated systems produce reasonable output quality machine translation improved domain restricted controlled inherent limitations programs largest user european commission project university received project support eu create reliable translation tool covers majority eu languages development systems time budget human translation increase eu dependency reliable programs european commission contributed isa creation statistical machine translation program tailored eu replace previous rule based machine translation 2005 google claimed promising proprietary statistical machine translation engine statistical translation engine google language tools english chinese english score ibm score summer 2006 tests conducted national institute standards technology focus military sources united amounts money natural language engineering venture capital fund funded intelligence community technologies private sector brought companies language military community translation processing languages languages focus key phrases quick communication military mobile phone apps processing technology office darpa hosts programs babylon translator air force awarded contract develop language translation technology notable rise social networking created application machine translation software – utilities facebook messaging clients – allowing users speaking languages communicate machine translation applications released mobile devices including mobile pocket pcs portability instruments designated mobile translation tools enabling mobile business networking partners speaking languages foreign language learning foreign countries human translator human translation 1966 automated language processing advisory committee united government quality machine translation improved levels application online collaboration medical field investigated application technology medical settings human topic difficulties accurate translations medical evaluation factors affect machine translation systems evaluated factors include intended translation nature machine translation software nature translation process programs purposes statistical machine translation smt typically based machine translation researchers evaluating english french translation performs concept applies technical documents easily translated smt formal language applications product descriptions written controlled language dictionary based machine translation produced translations require human intervention save quality inspection evaluating output quality machine translation systems human judges translation quality human evaluation time consuming reliable method compare systems rule based statistical systems automated evaluation include exclusively machine translation communication human language context embedded takes person context original reasonable degree probability true purely human generated translations error ensure machine generated translation human quality translation achieved translations reviewed edited human late wrote machine translation easier translator job harder time consuming involves extensive resolve source lexical target language require resolved pre editing provide input machine translation software output addition accuracy occur varying levels training data machine translating programs based statistical machine translation rely vast array real sentences base translation sentences analyzed accuracy researchers program trained sentence accuracy decreases optimal level training data 100 000 sentences training data increases sentences increases harder exact translation match machine translation teaching tool concerns machine translation accuracy dr university advantages utilizing machine translation method called bad model bad model forces language identify incorrect aspects translation individual language dr teaching tool implemented late 1980s dr survey students bad model models students observed improved lexical retrieval increased confidence target language machine translation signed languages 2000s options machine translation spoken signed languages limited common belief individuals traditional pitch timing spoken languages compared signed languages individual confused meaning written based spoken language researchers 2000 developed prototype called team translation english machine completed english american sign language translations program analyze syntactic morphological aspects english step program accessed sign synthesizer dictionary synthesizer process follow complete meanings entire analyzed complete translation located synthesizer generated human appeared sign english user copyright original subject copyright protection scholars claim machine translation entitled copyright protection involve copyright issue derivative author original original language rights translated translator permission publish translation  
19999	computer	microcode hardware technique interpreter cpu hardware programmer visible instruction set architecture microcode layer hardware level instructions implement level machine code instructions internal machine digital processing elements microcode purpose central processing units current desktop cpus path faster control unit handle microcode typically special speed memory translates machine instructions machine data input sequences detailed circuit level operations machine instructions underlying electronics instructions designed altered freely building complex multi step instructions reducing complexity circuits writing microcode called microcode processor implementation called microprogram extensive simple emulate powerful architectures wider word execution units simple achieve software compatibility products processor family hardware vendors ibm term microcode firmware code device termed microcode microcode machine code hard disk drives microcode updated typically microcode firmware overview lowest layer software stack traditionally raw binary machine code instructions processor microcode level avoid confusion microprogram element micro prefix microarchitecture engineers write microcode design phase processor storing read memory rom programmable logic array structure combination machines exist microcode stored sram flash memory traditionally denoted control store context computers read read write memory cpu process loads microcode control store storage medium possibility microcode correct bugs instruction set implement machine instructions complex digital processors employ microcode based control unit tasks performed essentially parallel level programmer assembly programmer change microcode machine code compatibility processors family microcode runs exact electronic circuitry designed inherent processor design consist series control cpu fundamental level hardware circuitry single typical horizontal operations simultaneously control processor features cycle wider 50 bits 128 bits 360 85 emulator feature carefully designed optimized fastest execution slow microprogram result slow machine instruction performance application programs instructions microcode originally developed simpler method developing control logic initially cpu instruction sets step fetch decode execute machine instructions including operand address calculations reads writes controlled logic minimal sequential machine circuitry efficient powerful instruction sets multi step addressing complex operations hard wired processors difficult design highly encoded instructions contribute microcode simplified job allowing processor behaviour programming model defined microprogram routines dedicated circuitry late design process microcode easily changed hard wired cpu designs change greatly cpu design 1940s late 1970s portion programming assembly language level instructions programmer productivity advantage microcode relative ease powerful machine instructions defined ultimate extension executable level language designs statement level language executed microcode compilation ibm future systems project data processor examples 1970s cpu speeds grew memory speeds numerous techniques memory block transfer memory pre fetch multi level caches level machine instructions microcode helped complex machine instructions require memory bandwidth operation character string single machine instruction avoiding multiple instruction architectures instruction sets implemented complex included ibm 360 digital equipment corporation vax approach increasingly complex microcode implemented instruction sets called cisc alternate approach microprocessors logic instruction decoding simple machine microcode technology microprocessor instruction decode visible chip operation transistor level simulation modern cpu designs microcode simulation logic functions control store logic functions faster expensive equivalent microprogram memory benefits processor operate hardware oriented architecture assembly instructions visible normal programmers hardware microcode implements programmer visible architecture underlying hardware fixed relationship visible architecture easier implement instruction set architecture wide variety underlying hardware micro architectures ibm 360 32 bit architecture 16 purpose registers 360 implementations hardware implemented simpler underlying microarchitecture 360 model 30 bit data paths arithmetic logic unit alu main memory implemented purpose registers special unit speed core memory 360 model 40 bit data paths alu 16 bit data paths main memory implemented purpose registers special unit speed core memory model 50 32 bit data paths implements purpose registers special unit speed core memory model 65 model larger data paths implement purpose registers faster transistor circuits enabled ibm design 360 models hardware spanning wide range cost performance compatible dramatically reduces unique software programs written model approach digital equipment corporation dec vax family computers result vax processors programmer visible architecture change reduces cost field correct bugs processor bug fixed replacing portion microprogram hardware logic wiring history 1947 design mit introduced concept control store simplify design methods control store matrix dimensional lattice dimension accepts control time cpu internal clock connects control signals gates circuits pulse takes generated cpu clock separate time row lattice row activated control signals connected signals transmitted control store played player roll controlled sequence wide constructed bits played sequentially control store song short repeated continuously enhanced concept adding conditional execution concept conditional software initial implementation consisted pair matrices generated signals manner control store matrix selected row signals microprogram instruction word speak cycle implemented providing single control store choose alternatives matrix control signals conditional detected internal signal coined term feature distinguish simple control store implementation microprogram bits control functional elements internally cpu advantage hard wired cpu internal cpu control specialized form program microcode transforms complex electronic design challenge control cpu complex programming challenge advantage cpu divided memory address register memory data register access main storage elements form execution unit modern cpus execution units simple computers unit read write memory execute user code elements brought single chip chip fixed form slice execution unit bit slice chips amd family examples bit slice elements execution units execution units bundle wires called bus programmers develop basic software tools programmer define table bits close relationship underlying architecture microcode properties difficult generate compiler simulator program intended execute bits electronics freedom microprogram microprogram extensively tested input program logic produce data program optimize programmable logic array optimal logic optimized logic reduce transistors required rom control store reduces cost producing electricity cpu microcode characterized horizontal vertical referring controls cpu elements decoding horizontal microcode requires extensive decoding logic vertical microcode horizontal wider bits storage space vertical horizontal microcode horizontal microcode discrete micro operations combined single simultaneous operation horizontal microcode typically contained wide control store uncommon word bits clock microcode word read decoded control functional elements cpu typical implementation horizontal microprogram word tightly defined bits simple arrangement type implement jump instruction address opcode microcode require clock engineer designing write source code common portions cpu remaining bits design hardware microcode property exploited operations cpu alu required complete earlier arithmetic instruction vertical microcode vertical microcode encoded bit fields pass intermediate logic generates actual control signals internal cpu elements alu registers contrast horizontal microcode bit fields produce control signals encoded vertical microcode requires instruction lengths storage requires time decode slower cpu clock vertical microcode assembly language simple conventional complex processors dec alpha processors microprocessors ibm mainframes architecture mainframes term alpha processors term ibm mainframe microprocessors form machine code access special registers hardware resources regular machine code implement instructions functions table alpha processors form vertical microcode fields field select cpu controlled word control store field controls cpu type microcode designer explicitly slower cpu save money reducing unused bits control store reduced complexity increase cpu clock frequency increased cycles instruction transistors cheaper horizontal microcode design cpus microcode vertical microcode vertical horizontal microcode horizontal microcode referred writable control store computers built writable microcode design storing microcode rom hard wired logic microcode stored ram called writable control store called writable instruction set experimental prototype computers writable control stores commercial machines writable microcode burroughs systems xerox workstations dec vax family machines ibm 360 370 implementations dec pdp machines data eclipse machines offer user programmable writable control stores option including hp dec pdp 11 60 data machines 70 series minicomputers ibm 370 includes facility called initial microprogram load console power processor tightly coupled multiprocessor complex commercial machines ibm 360 85 read storage writable control store microcode offers advantages including ease microprogram hardware generations faster access provide user programmable user optimize machine specific purposes starting pentium pro 1995 x86 cpus writable intel microcode allowed bugs intel intel fixed requiring entire chips replaced prominent set microcode intel offered processor architectures age counter security discovered designs public start 2018 microcode update installed linux freebsd windows motherboard bios comparison vliw risc design trend heavily processors complex instructions 1960s continued roughly mid 1980s risc design philosophy started prominent cpu microcode takes clock cycles execute single instruction clock cycle step microprogram instruction cisc processors include instructions time execute variations interrupt latency modern systems pipelining designing processor control risc advantages cisc risc vliw processors designed execute instruction cache single cycle cpus microcode execute cycle vliw processors instructions wide horizontal microcode typically fine grained control hardware microcode risc instructions narrow vertical microcode popular application specific processors network processors microcontrollers digital signal processors channel controllers disk controllers network interface controllers graphics processing units hardware micro modern cisc implementations x86 family decode instructions dynamically micro operations instruction encoding risc traditional microcode instruction decode unit common x86 instructions falls traditional microcode rom complex rarely instructions x86 microcode handle complex operations loop string instructions floating unit functions unusual values special purpose instructions  
20272	computer	minicomputer mini class computers developed mid 1960s sold mainframe mid size computers ibm direct competitors 1970 survey york times suggested definition minicomputer machine input output device memory capable running programs level language fortran basic class formed distinct software architectures operating systems designed control human interaction communication switching distinct calculation record keeping sold original equipment manufacturers final application decade minicomputer class 100 companies formed remained single chip cpu microprocessors appeared intel 1971 term minicomputer machine middle range computing spectrum mainframe computers microcomputers term minicomputer contemporary term class sparc power architecture based systems oracle ibm hewlett packard history term minicomputer developed 1960s computers transistors core memory technologies minimal instructions sets expensive peripherals model 33 19 inch compared mainframes 1960s minicomputers definition minicomputer consequence candidates minicomputer highly successful minicomputer digital equipment corporation dec 12 bit pdp built discrete transistors cost launched 1964 versions pdp advantage scale integrated circuits pdp include pdp pdp dec rise minicomputer companies massachusetts route 128 including data laboratories prime minicomputers computers grew processing power capacity manufacturing process control telephone switching control laboratory equipment 1970s hardware launch aided design cad industry industries dedicated series integrated circuits started minicomputers late 1960s arithmetic logic unit alu commonly cpu data paths bus bits popularity bit slice architecture scientific computers series ics parallel uncommon bits architecture series offered data memories dual packages inch major components architecture eye starting 1980s minicomputers circuits launch 1975 radio electronics magazine referred minicomputer term usual personal computers based single chip microprocessors time microcomputers bit single user simple machines running simple program operating systems cp dos powerful systems multi user multitasking operating systems unix classical mini 16 bit emerging performance 32 bit mid 1980s 1990s decline happened cost microprocessor based hardware inexpensive easily local network systems microprocessors users minicomputer manufacturers data centers result minicomputers terminals replaced workstations file servers pcs 1980s 1990s change minicomputers inexpensive pc networks development versions unix unix systems intel x86 microprocessor architecture including solaris linux freebsd windows series operating systems nt included server versions supported multitasking features required servers microprocessors powerful cpus built multiple distinguishing feature mainframes systems increasingly largest mainframe computers digital equipment corporation dec leading minicomputer manufacturer time largest company ibm minicomputer generic unix servers intel based pcs dec minicomputer company including data prime laboratories based england massachusetts merged dec sold 1998 data acquired corporation proprietary minicomputer architectures ibm 38 operating introduced advanced concepts ibm 400 lines legacy code programs written stands application efforts ibm enable programs originally written 34 36 moved 400 400 replaced subsequently replaced 2008 replaced ibm power systems contrast competing proprietary computing architectures 1980s dec vax hewlett packard discontinued compatible upgrade path runs hp alpha intel cpu architectures computers specialized reliable scale computing acquired combined entity merged hewlett packard based product ported mips processors based processors branded hp integrity servers earlier stack machines mips microprocessors customer software carried source integrity continues hp answer extreme scaling largest customers operating termed os continues base software environment servers extended include support java integration popular development tools visual studio eclipse minicomputer industrial impact heritage variety companies emerged built systems minicomputers specialized software custom peripherals addressed specialized aided design aided manufacturing process control manufacturing resource planning minicomputers sold original equipment manufacturers pioneering companies built minicomputers dec data hewlett packard hp refers minicomputers servers minicomputers pcs servers microcomputers physically cpus operating systems developed integrating features minicomputers software context simple microcomputers inspired minicomputer cp similarity digital single user os rt 11 multi user time sharing inspired minicomputer unix originally minicomputer os windows nt foundation current versions windows design ideas generation pc programmers minicomputer systems  
20412	computer	matlab matrix laboratory multi paradigm numerical computing environment proprietary programming language developed matlab matrix functions data implementation algorithms creation user interfaces programs written languages including java fortran python matlab intended numerical computing optional symbolic engine allowing access symbolic computing abilities additional package adds graphical multi domain simulation model based design dynamic embedded systems 2018 matlab users worldwide matlab users engineering science history chairman science department university mexico started developing matlab late 1970s designed students access learn fortran spread universities strong audience applied mathematics community jack engineer stanford university 1983 recognizing commercial potential joined steve matlab founded 1984 continue development libraries 2000 matlab set libraries matrix manipulation matlab researchers control engineering spread domains education teaching linear algebra numerical analysis popular scientists involved image processing syntax matlab application built matlab scripting language common usage matlab application involves command window interactive mathematical executing files matlab code variables variables defined assignment operator codice matlab programming language types converted language variables assigned type treated symbolic objects type change values computation involving values variables output function vectors matrices simple array defined syntax initial codice codice instance defines variable named codice existing variable codice array consisting values array starts initial step previous reaches avoid left syntax default variable named codice array values default indexing based usual convention matrices mathematics programming languages java matrices defined separating elements row space row list elements square access elements denote function argument list sets expressions rows columns written square identity matrix size generated function eye matrices size generated functions vector matrix function adding prime dot matrix dot matlab perform matlab functions accept matrices apply element codice element reduce element matlab include standard loops applications notation produces code faster execute code function creates square values matlab function codice generate square matrices structures matlab structure data types variables matlab arrays structure array element array field names addition matlab supports dynamic field names field field matlab support matlab structures simple variables structure cost functions creating matlab function file match function file valid function names character letters functions sensitive function handles matlab supports elements introducing function handles function references implemented files nested functions classes object oriented programming matlab supports object oriented programming including classes virtual dispatch packages pass semantics pass reference semantics syntax calling languages matlab classes reference classes depending class handle super class reference classes classes method behavior reference classes alter object object instance reference class simple class file named executed commands graphics graphical user interface programming matlab supports developing applications graphical user interface gui features matlab includes guide gui development environment designing tightly integrated graph features function plot produce graph vectors code produces figure function matlab program produce dimensional graphics functions mesh matlab graphical user interfaces programmed gui design environment guide tool languages matlab functions written programming languages fortran function created allowing matlab data types passed returned files matlab dynamically object files created functions 2014 increasing python libraries written java called matlab matlab libraries xml support implemented java libraries calling matlab java complicated matlab sold separately mechanism called java matlab interface confused java interface called official matlab api java 2016 alternatives based symbolic math matlab connected maple mathematica libraries exist import license matlab proprietary product users subject vendor lock matlab products deploy matlab functions library files java application building environment future development tied matlab language purchased separately evaluation license requested sales department requires detailed project matlab evaluated granted evaluation license valid weeks student version matlab license matlab subset reduced prices reported european union eu competition sell licenses dropped investigation evidence alternatives matlab competitors commercial competitors include mathematica maple source alternatives matlab gnu octave intended compatible matlab language julia programming language initially matlab syntax languages treat arrays basic entities array programming languages fortran 90 lang statistical languages libraries add functionality existing languages data language python numeric javascript gnu octave unique alternatives matlab bug matlab compatibility gnu octave gnu octave matlab language release history release version reported concurrent license manager program complete list matlab official matlab release notes exist matlab include hidden pictures typing generate picture displays image dog typing randomly outputs answer commands include image life appears version matlab  
20926	computer	supervised learning machine learning task learning function maps input output based input output pairs function consisting set training examples supervised learning pair consisting input object typically vector desired output called signal supervised learning algorithm training data produces function mapping examples optimal scenario algorithm correctly determine class labels unseen instances requires learning algorithm training data unseen situations reasonable inductive bias parallel task human animal referred concept learning steps solve supervised learning perform steps algorithm choice wide range supervised learning algorithms single learning algorithm supervised learning theorem major issues supervised learning bias variance issue bias variance imagine equally training data sets learning algorithm input trained data sets incorrect predicting correct output learning algorithm variance input output values trained training sets prediction error learned classifier sum bias variance learning algorithm bias variance learning algorithm bias flexible fit data learning algorithm flexible fit training data set variance key aspect supervised learning methods adjust bias variance automatically providing bias variance parameter user adjust function complexity training data issue training data relative complexity true function classifier regression function true function simple learning algorithm bias variance learn data true function highly complex involves complex interactions input features input space function training data flexible learning algorithm bias variance dimensionality input space issue dimensionality input space input feature vectors dimension learning difficult true function depends features extra dimensions learning algorithm variance input dimensionality typically requires tuning classifier variance bias practice engineer manually remove features input data improve accuracy learned function addition algorithms feature selection seek identify relevant features instance strategy dimensionality reduction seeks map input data dimensional space prior running supervised learning algorithm noise output values fourth issue degree noise desired output values target variables desired output values incorrect human error sensor errors learning algorithm attempt function matches training examples attempting fit data carefully leads overfitting measurement errors stochastic noise function learn complex learning model situation target function modeled training data phenomenon called deterministic noise type noise bias variance practice approaches noise output values stopping prevent overfitting detecting removing noisy training examples prior training supervised learning algorithm algorithms identify noisy training examples removing noisy training examples prior training generalization error statistical factors factors choosing applying learning algorithm include application engineer compare multiple learning algorithms determine hand cross validation tuning performance learning algorithm time consuming fixed resources time additional training data features extra time tuning learning algorithms algorithms learning algorithms supervised learning algorithms set training examples form feature vector label class learning algorithm seeks function input space output space function 11 element space functions 12 called hypothesis space convenient 11 function 14 11 defined 16 score 17 18 denote space functions 12 18 space functions learning algorithms probabilistic models 11 takes form conditional probability model 22 23 takes form joint probability model 24 bayes linear analysis joint probability models logistic regression conditional probability model basic approaches choosing 23 11 empirical risk minimization structural risk minimization empirical risk minimization seeks function training data structural risk minimization includes penalty function controls bias variance assumed training set consists sample independent distributed pairs 27 measure function training data loss function 28 defined training 29 loss predicting 30 31 risk 32 function 11 defined expected loss 11 estimated training data risk minimization empirical risk minimization supervised learning algorithm seeks function 11 minimizes 32 supervised learning algorithm constructed applying optimization algorithm 11 11 conditional probability distribution 40 loss function negative log likelihood 41 empirical risk minimization equivalent maximum likelihood estimation 12 candidate functions training set empirical risk minimization leads variance poor generalization learning algorithm training examples called overfitting structural risk minimization structural risk minimization seeks prevent overfitting incorporating regularization penalty optimization regularization penalty viewed implementing form simpler functions complex wide variety employed correspond definitions complexity function 11 linear function popular regularization penalty 45 squared euclidean norm weights 46 norm include 47 norm 48 49 norm penalty denoted 51 supervised learning optimization function 11 parameter 54 controls bias variance 55 empirical risk minimization bias variance 54 learning algorithm bias variance 54 chosen cross validation complexity penalty bayesian interpretation negative log prior probability 11 59 60 posterior 11 generative training training methods discriminative training methods seek function 11 output values discriminative model special 24 joint probability distribution loss function negative log likelihood 64 risk minimization algorithm perform generative training 23 regarded generative model data generated generative training algorithms simpler computationally efficient discriminative training algorithms solution computed closed form bayes linear analysis standard supervised learning generalized  
21173	computer	linguistics philosophy language natural language ordinary language language evolved naturally humans planning natural languages forms speech distinguished constructed formal languages program computers study logic defining natural language exact definition varies scholars natural language defined contrast artificial constructed languages programming languages international languages communication systems nature examples include song researchers applied linguistic syntax language languages natural languages subject degrees published language regulation viewed type comparison standard languages official language academy standard french french academy classified natural language field natural language processing constructed classified constructed language controlled classified controlled natural language controlled languages controlled natural languages subsets natural languages grammars dictionaries restricted reduce eliminate ambiguity complexity instance cutting rarely forms purpose development implementation controlled natural language typically aid native speakers natural language understanding ease processing natural language controlled natural language simplified english originally developed aerospace industry maintenance constructed languages international languages international languages native speakers considered natural languages natural languages communicate evolved natural designed selecting elements natural languages grown natural vocabulary syntax natural languages naturally standardized children natural correct structures parents speech development languages languages explained language languages including constructed languages strict rules attempt remove exception true native speakers languages basis vocabulary grammar natural standardized linguistic body considered product human experts natural language content spoken  
21459	computer	prize named honor awarded international outstanding contributions mathematical aspects sciences including prize established 1981 executive committee international mathematical union named mathematician earlier award consists gold medal prize fields medal prize targeted 40 january award medal features profile prize characters refers medal designer reverse figures university prize sponsor naming prize shortly july 2016 president national mathematics competitions personal requests executive committee change july 30 31 2018 assembly decided remove prize achievement mathematics science replace resolution 2018 resolutions  
21523	computer	artificial neural networks ann systems computing systems inspired biological neural networks animal neural network algorithm framework machine learning algorithms process complex data inputs systems learn perform tasks examples programmed task specific rules image recognition learn identify images analyzing images manually labeled cat cat identify images prior knowledge cat automatically generate identifying characteristics learning material process ann based collection connected units nodes called artificial neurons loosely model neurons biological brain connection biological brain transmit signal artificial neuron artificial neuron receives signal process signal additional artificial neurons connected common ann implementations signal connection artificial neurons real output artificial neuron computed linear function sum inputs connections artificial neurons called edges artificial neurons edges typically weight learning weight increases decreases strength signal connection artificial neurons threshold signal signal threshold typically artificial neurons layers layers perform kinds transformations inputs signals travel layer input layer layer output layer layers multiple times original goal ann approach solve human brain time attention moved performing specific tasks leading biology artificial neural networks variety tasks including vision speech recognition machine translation social network filtering playing board video games medical diagnosis history created computational model neural networks based mathematics algorithms called threshold logic model neural network split approaches approach focused biological processes brain focused application neural networks artificial intelligence led networks link finite automata learning late 1940s created learning hypothesis based mechanism neural learning learning unsupervised learning evolved models term researchers started applying ideas computational models turing type machines 1954 computational machines called simulate network neural network computational machines created 1956 created perceptron algorithm pattern recognition mathematical notation circuitry basic perceptron exclusive circuit processed neural networks time 1959 biological model proposed nobel based discovery types cells primary visual cortex simple cells complex cells functional networks layers published 1965 method data handling neural network machine learning minsky papert 1969 discovered key issues computational machines processed neural networks basic perceptrons processing exclusive circuit computers processing power effectively handle required neural networks neural network computers achieved processing power artificial intelligence focused level symbolic models processed algorithms characterized expert systems knowledge rules late 1980s expanded level symbolic machine learning characterized knowledge parameters cognitive model backpropagation key neural networks learning 1975 backpropagation algorithm effectively solved exclusive training multi layer networks feasible efficient backpropagation distributed error term layers modifying weights node mid 1980s parallel distributed processing popular 1986 simulate neural processes support vector machines simpler methods linear classifiers gradually neural networks machine learning popularity neural networks transformed domains prediction protein structures 1992 max pooling introduced shift tolerance aid 3d object recognition 2010 backpropagation training max pooling accelerated gpus perform pooling variants vanishing gradient layered feedforward networks backpropagation recurrent neural networks rnns errors layer layer exponentially layers tuning neuron weights based errors deep networks overcome multi level hierarchy networks 1992 pre trained level time unsupervised learning fine tuned backpropagation 2003 sign gradient image reconstruction localization hinton 2006 proposed learning level representation successive layers binary real valued latent variables restricted boltzmann machine model layer layers learned deep architecture generative model data sampling model pass level feature activations 2012 dean created network learned recognize level concepts unlabeled images youtube videos earlier challenges training deep neural networks addressed methods unsupervised pre training computing power increased gpus distributed computing neural networks deployed scale image visual recognition deep learning hardware based designs computational devices created simulation computing scale principal components convolution create class neural computing analog digital implementations digital devices colleagues 2010 vanishing gradient gpus propagation feasible layered feedforward neural networks 2009 2012 recurrent neural networks deep feedforward neural networks developed international competitions pattern recognition machine learning directional multi dimensional short term memory lstm competitions connected handwriting recognition 2009 international conference document analysis recognition prior knowledge languages learned colleagues pattern recognition including 2011 traffic sign recognition competition 2012 segmentation structures electron microscopy challenge neural networks pattern achieve human competitive performance traffic sign recognition 2012 handwritten digits researchers demonstrated 2010 deep neural networks hidden markov model context dependent define neural network output layer reduce errors vocabulary speech recognition tasks voice search gpu based implementations approach pattern recognition including 2011 traffic sign recognition competition 2012 segmentation structures em challenge competition deep highly nonlinear neural architectures standard architecture vision inspired simple complex cells pre trained unsupervised methods hinton team lab 2012 contest sponsored design software molecules identify convolutional networks art deep learning feedforward networks convolutional layers max pooling layers connected layers final classification layer learning unsupervised pre training convolutional layer filters input filter equivalent weights vector trained supervised deep learning methods achieve human competitive performance tasks artificial neural networks guarantee shift deal natural objects scenes extended shift ann learned concepts location type object class label scale lighting realized networks networks 2008 2013 models artificial neural network network simple elements called artificial neurons receive input change internal activation input produce output depending input activation artificial neuron neuron inputs outputs biological neuron model network forms connecting output neurons input neurons directed weighted graph weights functions compute activation modified process called learning learning rule components artificial neural network neurons neuron label receiving input predecessor neurons consists components output function simply identity function input neuron predecessor serves input interface network output neuron successor serves output interface network connections weights network consists connections connection output neuron 13 input neuron sense 13 predecessor successor 13 connection assigned weight 19 bias term total weighted sum inputs serve threshold shift activation function propagation function propagation function computes input neuron outputs 22 predecessor neurons typically bias function form learning rule learning rule rule algorithm parameters neural network input network produce output learning process typically amounts modifying weights variables network neural networks functions neural network models viewed simple mathematical models defining function 26 distribution 27 27 29 models learning rule common phrase ann model definition class functions class varying parameters connection weights architecture neurons connectivity mathematically neuron network function 30 defined composition functions 31 functions represented network structure dependencies functions type composition nonlinear weighted sum 32 33 commonly referred activation function function sigmoid function softmax function function characteristic activation function smooth transition input values change change input produces change output refers collection functions 34 vector 35 figure decomposition 36 dependencies variables interpreted view functional view input 37 transformed dimensional vector 38 transformed dimensional vector finally transformed 36 view commonly context optimization view probabilistic view random variable 41 depends random variable 42 depends 43 depends random variable 27 view commonly context graphical models views equivalent architecture components individual layers independent components independent input 38 naturally enables degree parallelism implementation networks previous commonly called feedforward graph directed graph networks cycles commonly called recurrent networks commonly manner figure 36 dependent temporal dependence learning possibility learning neural networks specific task solve class functions 48 learning set observations 49 task optimal sense defining cost function 50 optimal solution 51 52 solution cost cost optimal solution mathematical optimization cost function 54 concept learning measure solution optimal solution solved learning algorithms search solution space function cost applications solution data dependent cost function observations model data frequently defined simple finding model 36 minimizes 56 data pairs drawn distribution 58 practical situations 59 samples 58 minimize cost sample data entire distribution form online machine learning cost reduced online machine learning 58 fixed distribution time neural network methods form online machine learning frequently finite datasets choosing cost function define cost function frequently cost function desirable properties naturally formulation probabilistic formulation posterior probability model inverse cost ultimately cost function depends task backpropagation trained standard backpropagation algorithm method calculate produces cost respect weights continuous backpropagation derived context control theory 1960 1961 principles dynamic programming 1962 published simpler derivation based chain rule multi stage dynamic optimization method 1969 1970 finally published method automatic discrete connected networks nested differentiable functions corresponds modern version backpropagation efficient networks sparse 1973 backpropagation adapt parameters controllers proportion error gradients 1974 mentioned possibility applying principle artificial neural networks 1982 applied method neural networks 1986 hinton method generate internal representations incoming data hidden layers neural networks 1993 wan win international pattern recognition contest backpropagation weight updates backpropagation stochastic gradient descent equation 65 learning rate 66 cost loss function 67 stochastic term choice cost function depends factors learning type supervised unsupervised reinforcement activation function performing supervised learning classification common choices activation function cost function softmax function cross entropy function softmax function defined 68 represents class probability output unit 70 72 represent total input units 70 level cross entropy defined 75 represents target probability output unit 70 probability output 70 applying activation function output object boxes form binary mask multi scale regression increase localization precision based regression learn features capture geometric addition serving classifier remove requirement explicitly model relations helps variety objects learned model consists multiple layers linear unit activation function linear transformation layers convolutional connected convolutional layer additional max pooling network trained minimize error predicting mask ranging entire training set boxes represented alternatives backpropagation include extreme learning machines networks training networks neural networks learning paradigms major learning paradigms correspond learning task supervised learning unsupervised learning reinforcement learning supervised learning supervised learning set pairs 80 aim function allowed class functions matches examples mapping data cost function mapping data prior knowledge domain commonly cost squared error minimize average squared error network output target pairs minimizing cost gradient descent class neural networks called multilayer perceptrons mlp produces backpropagation algorithm training neural networks tasks fall paradigm supervised learning pattern recognition classification regression function approximation supervised learning paradigm applicable sequential data hand writing speech recognition learning form function continuous feedback quality solutions unsupervised learning unsupervised learning data 37 cost function function data 37 network output 36 cost function dependent task model domain assumptions implicit properties model parameters observed variables trivial model constant cost minimizing cost produces equal data cost function complicated form depends application compression mutual 37 30 statistical modeling posterior probability model data note examples tasks fall paradigm unsupervised learning estimation applications include clustering estimation statistical distributions compression filtering reinforcement learning reinforcement learning data 37 generated agent interactions environment time agent performs action 95 environment generates observation 96 cost unknown dynamics aim discover policy selecting actions minimizes measure term cost expected cumulative cost environment dynamics term cost policy unknown estimated formally environment modeled markov decision process 98 actions 99 probability distributions cost distribution 100 observation distribution transition policy defined conditional distribution actions observations define markov chain aim discover policy minimizes cost artificial neural networks frequently reinforcement learning algorithm dynamic programming coupled artificial neural networks programming applied multi dimensional nonlinear involved vehicle routing natural resources management medicine ability artificial neural networks accuracy reducing grid density solution original control tasks fall paradigm reinforcement learning control games sequential decision tasks learning algorithms training neural network model essentially selecting model set allowed models bayesian framework determining distribution set allowed models minimizes cost numerous algorithms training neural network models viewed straightforward application optimization theory statistical estimation employ form gradient descent backpropagation compute actual gradients simply derivative cost function respect network parameters changing parameters gradient direction backpropagation training algorithms fall categories evolutionary methods gene expression programming simulated expectation maximization parametric methods particle optimization methods training neural networks recursive learning algorithm learning method designed model controller neural networks 2004 recursive squares algorithm introduced train neural network online algorithm converge step update weights step input data initially algorithm computational complexity based decomposition recursive learning algorithm simplified optimization optimization algorithm phase cycle propagation weight update input vector network network layer layer reaches output layer output network compared desired output loss function error calculated neurons output layer error values output network neuron error reflects contribution original output backpropagation error values calculate gradient loss function phase gradient fed optimization method update weights attempt minimize loss function algorithm neural network connections inputs outputs denote vectors vectors vectors called inputs outputs weights neural network corresponds function weight maps input output optimization takes input sequence training examples produces sequence weights starting initial weight chosen random weights computed compute output algorithm function computation step calculating variable weight applying gradient descent function local minimum starting minimizing weight gradient descent algorithm code implement algorithm explicit required gradient function function learning algorithm divided phases propagation weight update phase propagation propagation involves steps phase weight update weight steps ratio percentage speed quality learning called learning rate ratio faster neuron trains ratio accurate training sign gradient weight error varies weight weight updated direction gradient learning repeated network performs stochastic gradient descent algorithm training layer network hidden layer lines labeled pass implemented backpropagation algorithm gradient error network network weights extension choice learning rate strong change causing minimum learning rate training aimed error minimization improvements increase reliability adaptive learning rate avoid network connection weights improve rate convergence algorithm adaptive learning rate variable term gradient change weighted weight adjustment additionally depends previous change equal change depends solely gradient depend change current speed determined current slope current weight change depend current gradient error function slope weight change previous time flat gradient error function flat lead gradient descent delayed addition term flat modes learning modes learning stochastic batch stochastic learning input creates weight adjustment batch learning weights adjusted based batch inputs errors batch stochastic learning introduces noise gradient descent process local gradient calculated data reduces chance network local batch learning typically yields faster stable descent local minimum update performed direction average error batch common choice mini meaning samples batch selected entire data set variants method data handling method data handling features automatic structural parametric model optimization node activation functions permit deep feedforward multilayer perceptron layers supervised learning network grows layer layer layer trained regression analysis items detected validation set regularization size depth network depends task convolutional neural networks convolutional neural network cnn class deep feed networks composed convolutional layers connected layers matching typical artificial neural networks tied weights pooling layers max pooling structured convolutional architecture architecture cnns advantage 2d structure input data cnns suitable processing visual dimensional data superior image speech applications trained standard backpropagation cnns easier train regular deep feed neural networks parameters estimate examples applications vision include robot navigation development neural network idea add structures called cnn output form stable respect representations short term memory short term memory lstm networks rnns avoid vanishing gradient lstm augmented recurrent gates called gates lstm networks prevent errors vanishing errors flow virtual layers space lstm lstm learn deep learning tasks require memories events happened thousands millions discrete time steps specific lstm evolved lstm handle delays signals mix frequency components lstm rnns trained temporal classification ctc rnn weight matrix probability label sequences training set input sequences ctc alignment recognition 2003 lstm started competitive traditional speech 2007 combination ctc achieved speech data 2009 ctc trained lstm rnn win pattern recognition competitions connected handwriting recognition 2014 ctc trained rnns break 00 speech recognition benchmark traditional speech processing methods lstm improved vocabulary speech recognition speech synthesis google android photo real 2015 google speech recognition experienced 49 improvement ctc trained lstm lstm popular natural language processing previous models based concepts lstm learn context sensitive languages lstm improved machine translation language modeling multilingual language processing lstm combined cnns improved automatic image deep computing deep computing deep networks provide framework efficiently trained hierarchical processing temporal data enabling investigation inherent role rnn layered composition deep belief networks deep belief network probabilistic generative model multiple layers hidden units considered composition simple learning modules layer pre train learned weights initial weights backpropagation discriminative algorithms weights helpful training data limited weights model performance pre trained weights region weight space closer optimal weights randomly chosen improved modeling faster convergence fine tuning phase memory storage retrieval neural networks memory storage retrieval neural networks fast deep learning neural networks layers filters simultaneously filters nonlinear stochastic logic stationary motivated learn continuously neural network serve dynamic neural network spatial time domains speed link weights integrate filters functions layers dynamically rank layers functions relative learning task biological learning retina visual regions deep learning capability enhanced correlation ability data lost neurons layers task transparent link weights link weights dynamic innovation redundancy facilitate ranking layers filters individual neurons relative task applied domains including medical financial predictions adaptive filtering noisy speech unknown noise image recognition video image recognition software security adaptive control linear systems faster learning speed error rate cnn based function filters max pooling 20 studies applications demonstrate aspects data hidden shallow learning networks human senses predicting events recorded surface financial prediction blind filtering noisy speech proposed 1996 developed modified version developed 2008 auto auto encoder idea motivated concept representation classifier representation defined yields performing classifier encoder deterministic mapping transforms input vector hidden representation weight matrix offset vector bias decoder maps hidden representation reconstructed input process auto encoding compare reconstructed input original minimize error reconstructed close original auto partially output idea introduced 2010 specific approach representation representation input clean input implicit definition ideas algorithm starts stochastic mapping step input passes basic auto encoder process mapped hidden representation hidden representation reconstruct stage minimization algorithm runs close input reconstruction error cross entropy loss sigmoid decoder squared error loss decoder deep architecture auto stack encoding function auto encoder learned input input level trained auto encoder trained output input supervised learning algorithm support vector machine classifier multi class logistic regression deep stacking networks deep stacking network deep convex network based hierarchy blocks simplified neural network modules introduced 2011 learning convex optimization closed form solution mechanism similarity generalization block simple module easy train supervised fashion backpropagation entire blocks block consists simplified multi layer perceptron mlp single hidden layer hidden layer logistic units output layer linear units connections layers represented weight matrix input hidden layer connections weight matrix target vectors form columns matrix input data vectors form columns matrix matrix hidden units modules trained layer weights stage function performs element logistic sigmoid operation block estimates final label class estimate original input form expanded input block input block original data downstream blocks input adds output preceding blocks learning upper layer weight matrix weights network formulated convex optimization closed form solution deep architectures goal discover transformed feature representation structure hierarchy architecture parallel learning straightforward batch mode optimization purely discriminative tasks perform conventional tensor deep stacking networks architecture extension offers improvements covariance statistics transforms convex layer convex upper layer covariance statistics mapping distinct sets hidden units layer predictions tensor scalability considered conventional learning batch mode scaling design larger architectures data sets basic architecture suitable diverse tasks classification regression deep learning real valued inputs gaussian restricted boltzmann machines led models continuous valued inputs strictly binary latent variables basic variants graph visible units input real valued difference hidden layer hidden unit binary variable real valued variable discrete probability mass density continuous domain mixture forms prior extension called extra modeling capacity additional terms energy function terms enables model form conditional distribution variables variables observation compound hierarchical deep models compound hierarchical deep models deep networks parametric bayesian models features learned deep architectures deep auto convolutional variants deep coding networks sparse feature learning rnns conditional auto representation allowing faster learning accurate classification dimensional data architectures poor learning classes examples network units involved representing input adjusted degree freedom limiting degree freedom reduces parameters learn learning classes examples hierarchical bayesian models learning examples vision statistics cognitive science compound hd architectures aim integrate characteristics deep networks compound architecture hierarchical dirichlet process hierarchical model incorporated architecture generative model generalized abstract concepts layers model examples classes natural levels learned jointly maximizing joint log probability score hidden layers probability visible input set hidden units model parameters representing visible hidden hidden hidden symmetric interaction terms learned model model defines joint distribution express learned conditional model prior term represents conditional model viewed layer bias terms deep predictive coding networks deep predictive coding network predictive coding scheme adjust inference procedure deep locally connected generative model sparse features time varying observations linear model pooling strategy learn invariant feature representations units form deep architecture trained layer unsupervised learning layers markov chain layer depend preceding layers predict representation layer approach upper layer temporal dependencies previous extended form convolutional network networks separate memory structures integrating external memory artificial neural networks dates distributed representations organizing maps sparse distributed memory hierarchical temporal memory patterns encoded neural networks addresses content addressable memory neurons essentially serving address controllers memories differentiable lstm differentiable memory structures short term memory lstm approaches differentiable memory recurrent functions neural turing machines neural turing machines lstm networks external memory resources interact processes combined analogous turing machine differentiable allowing efficiently trained gradient descent preliminary demonstrate neural turing machines simple algorithms sorting associative recall input output examples differentiable neural computers extension performed neural turing machines short term memory systems memory networks sequence processing tasks semantic approaches represent previous experiences experience form local model called nearest nearest neighbors methods deep learning semantic deep graphical model word count vectors set documents documents mapped memory addresses documents located nearby addresses documents query document accessing addresses bits address query document sparse distributed memory operates 1000 bit addresses semantic 32 64 bit addresses conventional architecture memory networks memory networks extension neural networks incorporating term memory term memory read written goal prediction models applied context question answering term memory effectively acts dynamic knowledge base output textual response team electrical engineers school engineering created physical artificial neural network analyze volumes data identify objects actual speed light pointer networks deep neural networks improved parameter reduction maintaining training extremely deep layers neural networks practical cpu architectures pointer networks neural random access machines overcome limitation external random access memory components typically belong architecture registers alu systems operate probability distribution vectors stored memory cells registers model differentiable trains key characteristic models depth size short term memory parameters altered independently – models lstm parameters grows memory size networks frameworks based neural networks map highly structured input highly structured output approach context machine translation input output written sentences natural languages lstm rnn cnn encoder source sentence summary decoded conditional rnn language model produce translation systems share building blocks rnns cnns trained attention mechanisms multilayer kernel machine multilayer kernel machines learning highly nonlinear functions iterative application nonlinear kernels kernel principal component analysis method unsupervised layer pre training step deep learning layer learns representation previous layer principal component pc projection layer output feature domain kernel dimensionality reduction updated representation layer supervised strategy features features extracted process method building cells straightforward kernel machines deep learning developed spoken language understanding main idea kernel machine approximate shallow neural infinite hidden units stacking output kernel machine raw input building level kernel machine levels deep convex network hyper parameter determined cross validation neural architecture search neural architecture search machine learning design artificial neural networks approaches designed networks compare hand designed systems basic search algorithm candidate model evaluate dataset feedback network artificial neural networks requires understanding characteristics ann capabilities fall broad categories applications ability model nonlinear processes artificial neural networks applications wide range disciplines application include identification control vehicle control prediction process control natural resource management quantum game playing pattern recognition radar systems identification signal classification 3d reconstruction object recognition sequence recognition speech handwritten printed recognition medical diagnosis automated systems data mining visualization machine translation social network filtering mail spam filtering artificial neural networks including cancer cancer cancer distinguish highly cancer cell lines lines cell shape artificial neural networks accelerate reliability analysis subject natural predict foundation artificial neural networks building black box models modelling engineering types models types models defined levels abstraction modeling aspects neural systems range models short term behavior individual neurons models dynamics neural circuitry interactions individual neurons finally models behavior abstract neural modules represent complete include models term short term neural systems relations learning memory individual neuron level theoretical properties computational power multilayer perceptron universal function proven universal approximation theorem proof neurons required network topology weights learning parameters specific recurrent architecture rational valued weights opposed precision real valued weights power universal turing machine finite neurons standard linear connections values weights machine super turing power capacity models capacity property roughly corresponds ability model function stored network notion complexity convergence models consistently converge single solution local exist depending cost function model optimization method guarantee converge local minimum data parameters methods neural network recursive squares algorithm introduced train algorithm guaranteed converge step generalization statistics applications goal create unseen examples possibility training systems capacity network parameters approaches address training cross validation techniques check presence training select minimize generalization error form regularization concept probabilistic bayesian framework regularization performed selecting larger prior probability simpler models statistical learning theory goal minimize empirical risk risk roughly corresponds error training set predicted error unseen data overfitting supervised neural networks squared error cost function formal statistical methods determine confidence trained model validation set estimate variance calculate confidence interval output network assuming normal distribution confidence analysis valid output probability distribution network modified assigning softmax activation function generalization logistic function output layer neural network softmax component component based neural network target variables outputs interpreted posterior probabilities classification measure softmax activation function theory criticism training issues common criticism neural networks robotics require training real operation potential solutions include randomly training examples numerical optimization algorithm steps changing network connections examples called mini improving training efficiency convergence capability ongoing neural network introducing recursive squares algorithm neural network training process takes step converge theoretical issues neural network solved computationally difficult integers fundamental reflect real neurons function propagation critical artificial neural networks mechanism exists biological neural networks coded real neurons sensor neurons action frequently sensor activation cells motor neurons receive action frequently sensor neuron motor neuron principles handled biological neural networks subject active neural coding motivation artificial neural networks strictly neural function biological neural networks central claim artificial neural networks powerful principle processing principles defined claimed network simple statistical association basic function artificial neural networks learning recognition result artificial neural networks quality distinct lack computing systems human hand mind solutions learned biological shallow deep circuits reported brain wide variety argued brain wires signal statistics serial major statistical dependencies hardware issues effective neural networks require considerable computing resources brain hardware tailored task processing signals graph neurons simplified neuron von neumann architecture neural network designer millions database rows connections vast amounts memory storage designer transmit signals connections neurons matched cpu processing power time notes neural networks century advances hardware 1991 2015 computing power delivered gpus increased standard backpropagation algorithm feasible training networks layers gpus reduce training times months days engineering addresses hardware difficulty constructing von neumann chips implement neural networks circuitry chip optimized neural network processing called tensor processing unit practical arguments position neural networks solve complex diverse tasks ranging autonomously flying aircraft detecting credit card game technology writer true analyzing learned artificial neural network difficult easier analyze learned biological neural network researchers involved exploring learning algorithms neural networks gradually principles learning machine successful local local learning shallow deep architecture hybrid approaches hybrid models combining neural networks symbolic approaches claim mixture capture mechanisms human mind types artificial neural networks variations simplest static types static components including units layers unit weights topology dynamic types change learning process complicated learning produce types require learning supervised operator operate independently types operate purely hardware purely software purpose computers  
21642	computer	born 15 february scientist designed programming languages including pascal classic topics software engineering 1984 turing award recognized distinction science developing sequence innovative languages born 1959 earned degree electronics engineering federal institute technology 1960 earned canada 1963 awarded electrical engineering science university california berkeley supervised designer pioneer 1963 1967 served assistant professor science stanford university university 1968 professor informatics xerox parc california retired 1999 2004 fellow history museum programming languages algorithms including algol pascal programming languages chief designer programming languages algol pascal major design implementation team operating systems digital hardware design simulation received association computing machinery acm turing award development languages 1984 1994 fellow acm publications book written jointly pascal user manual report served basis language implementation efforts 1970s 1980s united europe article program development teaching programming considered classic software engineering 1975 wrote book algorithms data structures programs gained wide recognition major book title algorithms data structures published 1985 2004 examples edition written pascal replaced editions examples written textbook systematic programming introduction considered source students coding regarded sought reading numerical mathematics 1992 published documentation os book martin intended programmer guide law 1995 law software slower rapidly hardware faster 1995 paper software attributes martin  
21652	computer	natural language processing nlp science engineering artificial intelligence concerned interactions computers human natural languages program computers process analyze amounts natural language data challenges natural language processing frequently involve speech recognition natural language understanding natural language generation history history natural language processing started 1950s earlier alan turing published article titled intelligence proposed called turing criterion intelligence experiment 1954 involved automatic translation russian sentences english authors claimed machine translation solved real progress slower report 1966 failed funding machine translation dramatically reduced machine translation conducted late 1980s statistical machine translation systems developed notably successful natural language processing systems developed 1960s natural language restricted blocks restricted simulation written 1964 1966 human human interaction patient knowledge base provide generic response head head 1970s programmers write conceptual structured real data examples 1975 1978 1978 1976 1977 1979 plot units 1981 time written including 1980s natural language processing systems based complex sets hand written rules starting late 1980s revolution natural language processing introduction machine learning algorithms language processing increase computational power moore law theories linguistics grammar theoretical sort corpus linguistics machine learning approach language processing earliest machine learning algorithms decision trees produced systems hard rules existing hand written rules speech tagging introduced hidden markov models natural language processing increasingly focused statistical models soft probabilistic decisions based real valued weights features input data cache language models speech recognition systems rely examples statistical models models robust input input errors common real data produce reliable integrated larger multiple notable occurred field machine translation ibm complicated statistical models developed systems advantage existing multilingual textual corpora produced canada european union result laws calling translation proceedings official languages systems government systems corpora developed tasks implemented systems continues major limitation success systems result deal methods effectively learning limited amounts data increasingly focused unsupervised semi supervised learning algorithms algorithms learn data hand desired answers combination data task difficult supervised learning typically produces accurate input data data including entire content wide algorithm time complexity practical 2010s representation learning deep neural network style machine learning methods widespread natural language processing techniques achieve art natural language tasks language modeling parsing popular techniques include word embeddings capture semantic properties increase learning level task question answering pipeline separate intermediate tasks speech tagging dependency parsing shift substantial nlp systems designed deep neural network based approaches viewed paradigm distinct statistical natural language processing instance term neural machine translation emphasizes deep learning based approaches machine translation learn sequence sequence transformations intermediate steps word alignment language modeling statistical machine translation smt rule based statistical nlp days language processing systems designed hand coding set rules writing grammars heuristic rules stemming rarely robust natural language variation called statistical revolution late 1980s mid 1990s natural language processing heavily machine learning machine learning paradigm calls statistical inference automatically learn rules analysis corpora typical real examples corpus corpora set documents human classes machine learning algorithms applied natural language processing tasks algorithms input set features generated input data earliest algorithms decision trees produced systems hard rules systems hand written rules common increasingly focused statistical models soft probabilistic decisions based real valued weights input feature models advantage express relative answers producing reliable model included component larger systems based machine learning algorithms advantages hand produced rules major tasks list commonly tasks natural language processing note tasks direct real applications commonly serve aid solving larger tasks natural language processing tasks closely frequently categories coarse division  
22409	computer	os series operating systems initially created ibm ibm software designer result companies position os relative windows operating environment companies relationship 1992 os development fell ibm exclusively stands operating introduced generation change release ibm personal generation personal computers version os released december 1987 versions released december 2001 os intended protected mode successor notably basic calls dos calls names started dos create family mode applications mode applications systems heritage os shares similarities unix windows nt ibm discontinued support os 31 december 2006 updated maintained marketed 2015 announced oem distribution os released called purchase development history joint development development os ibm signed joint development agreement august 1985 code named cp dos product delivered os announced april 1987 released december original release gui introduced os os features api controlling video display handling keyboard mouse events programmers writing protected mode bios access hardware addition development tools include subset video keyboard apis libraries family mode programs dos task named program combination allowing user select mode sessions screen multiple programs communications database oriented extensions delivered 1988 os extended edition 25 lan manager query manager user interface presentation manager introduced os october 1988 user interface windows released interface replaced versions closer appearance windows extended edition sold ibm sales channels introduced distributed database support ibm database systems communications support ibm mainframe networks 1989 version introduced notably improvements fat file including form alternate data streams called extended attributes addition extended attributes fat file extended edition introduced tcp ip ethernet support os windows books late 1980s existence systems os future 1990 collaboration ibm 1990 releases windows os time windows success selling millions copies success windows dos bundled computers os hand additional stand software package addition os device drivers common devices printers ibm hardware windows hand supported larger variety hardware increasing popularity windows shift development focus os ibm building business based windows technical practical reasons contributed companies differences culture vision hardware approach contributed success pc ibm sought os drive sales hardware including systems support features programmers ibm lines code measure programmer productivity ibm developers lack comments code developers ibm code products differences api os announced windows completion windows api defined ibm requested api changed os issues surrounding application compatibility appeared os designers source code conversion tools allowing complete windows application source code os os gain vendors avoid developing os windows parallel os targets intel processor dos ibm supporting processor 16 bit memory mode customers purchased based result ibm surrounding os release april 1992 os 16 bit protected mode benefit intel simpler 32 bit flat memory model virtual mode features providing support dos applications 1988 windows dos applications including expanded memory emulation os released 1991 limited dos box issues started parallel version windows future oriented portable 1988 created competition os team os technology build digital creating dos nt os completely architecture ibm grew concerned delays development os initially companies agreed ibm maintenance os development os continue development os decided nt os windows nt leaving future os development ibm business perspective logical consumer operating systems based dos windows compatibility existing windows applications waiting develop receive licensing money os sales windows nt os heritage initial support mode os applications os lan manager network support nt materials included os copyright embedded software nt os support resource kit windows nt support os presentation manager applications addition windows nt add presentation manager 1992 32 bit era os released april 1992 32 bit api native programs os contained 16 bit code drivers included object oriented user interface called object oriented interface previous gui providing environment program windows program manager environment user manage programs files devices objects screen object dos compatibility os ibm dos dos windows windows managed including licensed dos improved time os dos application time effective allowed os modified windows dos including windows applications limitations intel processor os dos program time allowed dos program total control dos mode crash entire contrast os benefit virtual mode intel processor create virtual machine dos programs included extensive set configuration options optimize performance capabilities dos program real mode operating os virtual machine capabilities subject direct hardware access limitations 32 bit environments os protected mode dos programs interface standard mode windows supported programs written windows performance windows nt os dos programs possibility real hardware interrupts dos program machine os hardware selected machines notably ibm machines break release enhancements intel intel pentium virtual interrupt flag virtual mode extensions solve windows compatibility compatibility windows windows achieved windows user mode code components virtual dos machine originally complete version windows code included os windows os windows os ibm developed versions os windows version user installed fly cost additional windows license screen set video drivers windows programs os desktop process windows extensive access hardware video result switching screen session occasionally issues os runs user mode components windows compatible windows device drivers applications multiple windows applications default single windows session multitasking memory protection native windows achieve true isolation windows programs os multiple copies windows parallel separate user program windows session multitasking memory protection sessions applications shared windows session applications separate windows sessions cost additional hardware resources approach protect program windows session instance windows program running separate windows session programs running windows session windows applications running screen mode windows session os windows applications windows applications warp released 1994 os version os warp performance benefits product image warp originally internal ibm release ibm claimed star terms internal names prior os releases external launch os warp 1994 master upcoming series minute os warp offers host benefits os notably broader hardware support multimedia capabilities internet compatible networking includes basic office application suite ibm released versions expensive red expensive blue named color boxes red designed support windows applications utilizing existing installation windows hard drive blue includes windows support installation support windows applications windows installation computers sold windows pre installed price red popular product os warp lan client support built mid 1995 warp connect os performance sensitive including graphics multimedia systems updated 32 bit code included os warp brought 32 bit warp introduced object oriented 32 bit display driver model 1996 warp java speech recognition software ibm released server editions warp warp bundled ibm lan server product operating installation personal version notes included template databases contact management distributed rom os warp essentially contained entire os easily meaning people increase os users belief increase sales demand party applications os desktop version replaced easily released versions applications 2000 july edition personal magazine bundled software included version warp required activation essentially release special versions os 11 warp included symmetric multiprocessing smp support os sales computing corporate professionals 1990s windows nt os technically superior windows 95 os failed develop consumer stand desktop pc segments reports installed properly ibm series pcs offer 1994 ibm receive terms largest pc manufacturer time license windows 95 ibm development os completely ibm ibm strategy os warp windows ibm aimed drive sales software hardware 1995 windows 95 ibm difficult ibm purchased office result ibm signed license agreement 15 minutes windows 95 launch event competitors sales ibm pcs ibm os operating pc business os 1991 ibm started development intended replacement os called os product brand code sections code existing os products microkernel code base intended eventually host ibm operating systems including os microkernel included major architectural features including support unix graphics libraries driver model os developed solely power platforms ibm intended market effort market intel mission formed create prototypes machines corporate customers raised issues idea intel advanced plans code base eventually include replacement os 400 operating os microkernel product industries telecommunications set television partial pre alpha version os demonstrated gates stopped time public os user pre alpha code boot released 1995 spent development os profit widespread adoption entire os os product project launched internally ibm evaluate competitive situation windows 95 primary concerns included major code quality issues existing os product 20 service requiring original installation heavily development organization reported basically reports austin study tightly classified registered printed numbered copies identified failures board personal systems division ibm decision level division cut 95 budget entire product development including os eliminate development lab sales marketing efforts product 300 development individuals sales support spent warp distributed version os 2001 dedicated community remained os final mainstream release os failed mass market ibm traditionally bank automated machines os customized user interface french national os thousands selling machines companies os systems os host pc control satellite operations support equipment installed stations 1994 2007 receive network programming satellite ibm shortly release warp os eventually company support december 31 2006 sales os stopped december 23 2005 ibm version 52 released desktop server systems december 2001 systems os 2001 calling version released 2004 series preliminary release candidates version availability released 15 2010 version released 20 2011 ibm support ibm customers highly complex applications business technologies java platform neutral manner application completed ibm operating linux alternative virtualization support running os virtualization appears improving party products os historically difficult virtual machine legacy x86 operating systems extensive set features x86 cpu os running suffer os beta workstation released january 2000 os company decided drop official os support originally os hardware virtualization support code greatly improves os interactions os current version version included release current releases os supported host addition note os runs versions virtualization x86 based hosts emulation mac oracle corporation originally sun supports os warp attempting os difficult impossible strict requirements amd hardware enabled virtualization reported reliable manner difficulties efficiently running os created opportunity virtualization company bank os hardware os support virtualization software easy company desired os determined possibility hired russian software developers write host based officially support os company workstation born vendors corporation incorporated windows xp path os incorporated initially shipped xp embedded edition exclusively extensive pressure customer banks support common os switched xp professional match primary corporation security os native design reduced market share appears os based programs dealing dos windows pass os server source people ibm release os source held 2005 2007 ibm citing legal technical reasons entire os future party code ibm copyright code ibm technology transfer commodore licensing technology os exchange scripting language os code written ibm prevent os announced future hand ibm object windows os object project maintained language association arranged os source operating systems linux os ibm release improved file ported os code base ibm release source os driver developers ported linux driver functionality boot partition driver integrated successor os summary releases release dates refer english editions technology graphic layer named presentation manager windows fonts functionality version windows introduced os object oriented allowing user perform traditional computing tasks accessing files printers legacy programs advanced object oriented tasks built party application objects extended integrated fashion mainstream operating ibm common user access user interface standards hardware vendors support device drivers alternative operating systems including os linux leaving users choices select vendors issue video cards ibm licensed reduced version display drivers allowing users choose wide selection cards supported modular driver design represents objects disks files program objects printers object model som code shared applications written programming languages distributed version called allowed objects computers communicate based object oriented aspect som direct component object model implemented manner instance notable differences som som support fundamental concepts programming support som developed os includes advancement application development compound document technology called developed apple proved technology accepted users developers developed multimedia capabilities os accessible media control interface commands update bundled ibm version support files support formats parties integrated multimedia offers standalone applications tcp ip stack based source bsd stack visible compatible tools classic subjects comparison operating systems historical os iran bank bank iran machines local servers 30 000 stations 2011 bank moved infrastructure moving os virtual machines running windows os banks peak 000 machines running os warp 1990s os automated machines 2006 workstations automated machines computers linux os industry bank australia network os late 2002 blue os late 2009 decade os professionals companies mid 1990s native 32 bit software developed serving corporate markets os handling international os eventually software written led massive delays os fault software written os handling eventually removed os radio minute air os windows 95 recommended os os ibm laptop os satellite operations support public radio satellite controlled os stations receive programming satellite introduced 1994 os retired 2007 switched successor os control automated light british columbia canada late 2000s replaced windows xp os london extension signals control london control delivered 1999 2011 original automatic train control provide automatic train operation manual train os local computers distributed tower formed central equipment located intended cover rest green park introduced os bank domestic centre staff program created access customer accounts easily windows os chain installed stores march 2010 os machines london os york city os systems os desktops automatic 2011 automatic os reliable current running windows os main operating national insurance motor direct centre products series iii insurance platform 1996 byte 1989 listed os winners byte awards stating macintosh 1984 development platform search developers magazine predicted complete bug desktops os capable pcs os dos stands os milestone product march 1995 os products utilizing os ibm os wide variety hardware products effectively form embedded operating  
23665	computer	digital imaging pixel picture element physical raster image addressable element addressable display device element picture represented screen pixel sample original image samples typically provide accurate representations original intensity pixel variable color imaging systems color typically represented component red green blue yellow black contexts descriptions camera sensors pixel refers single scalar element multi component representation called camera sensor context contexts refer set component spatial position word pixel pictures element include voxel word pixel published 1965 picture elements video images space moon learned word link division precision originated simply time 1963 word combination picture element word appeared variety magazine word pictures reference movies reference pictures concept picture element dates earliest days television german word pixel picture german patent paul earliest publication term picture element wireless magazine earlier patents filed authors explain pixel picture cell 1972 graphics image video processing pixel ibm technical reference original pc pixels unit measurement commonly graphic design equivalent roughly measurement element display size matter screen resolution views technique dates cinema live frame frame create motion animation british word meaning term animation process 1950s including grant technical measures inch pixels inch distinct meanings printer devices measure printer density dot ink quality photographic image printed printer printer manufacturers 2002 terms resolution pixels represent image closer result original pixels image called resolution resolution specific definition pixel counts expressed single digital camera pixels pair display pixels display total 200 pixels pixels color samples form image file correspondence screen pixels depending displays image computing image composed pixels image raster image word raster television scanning patterns printing storage techniques sampling patterns pixels arranged regular dimensional grid arrangement common operations implemented uniformly applying operation pixel independently pixels sampling patterns changing shape kernel pixel image reason care image device converting image data pixel format resolution monitors computers pixels display image abstract image represents gui resolution image called display resolution determined video card lcd monitors pixels display image native resolution pixel determining native resolution crt monitors beam rate fixed fixed native resolution crt monitors fixed beam rate meaning native resolution set resolutions equally supported produce images lcd user ensure display resolution matches native resolution monitor resolution pixel scale distance objects fall pixel detector ccd infrared chip scale measured ratio pixel preceding product ratio lens expressed units pixel pixel sizes yields factor 000 bits pixel distinct colors represented pixel depends bits pixel image bit pixel pixel additional bit colors image colors image colors color 15 bits pixel depth sum bits allocated red green blue components meaning 16 bits red blue bits green human eye sensitive errors green primary colors applications involving 16 bits divided bits red green blue bit left 24 bit depth bits component systems 32 bit depth 24 bit pixel extra bits purposes combining image display image acquisition systems capable sensing color channels pixel grid divided single color regions contribute displayed color viewed distance displays lcd led displays single color regions separately addressable elements typically divide pixel vertically square pixel divided display industry terminology referred pixels basic addressable elements hardware pixel circuits circuits digital camera image sensors single color sensor regions filter pattern camera industry pixels display industry systems approaches approach referred rendering knowledge pixel geometry manipulate separately producing increase apparent resolution color displays crt displays red green blue mesh grid called shadow mask require difficult step aligned displayed pixel raster rendering concept samples digital cameras electronics charge coupled device ccd complementary image sensors consisting single sensor elements records measured intensity level digital cameras sensor array covered color filter red green blue regions filter arrangement sensor element record intensity single primary color light camera color neighboring sensor elements process called create final image sensor elements called pixels record channel red green blue final color image color channels sensor called camera produces image image size scanner color depending allocation primary colors green elements red blue arrangement labs invented measure camera produces lens – opposed manufacturer camera product based camera sensor claims accurate relevant camera mid 2013 lens mounted measured 23 36 sensor method add introduced micro camera sensor produce raw shifting sensor pixel level multi instance multiple images generated unified image  
23716	computer	programmer developer software engineer person creates software term programmer refer computers writes code kinds software formal approach programming programmer programmer primary language assembly java lisp python titles environment prefix titles range including software developer developer mobile applications developer embedded firmware developer software engineer scientist software involve programming require range skills simple term programmer positions considered history british mathematician considered programmer publish algorithm intended implementation charles engine october intended calculation machine completed functioning standard time algorithm person program functioning modern based scientist programming team consisting kay jennings programmers international programmers day annually january 2009 government russia professional annual programmers day 13 september 12 september international software word software 1953 print 1960s time computers programmed customers commercial vendors time ibm company founded provide software products services usage company 1955 software industry expanded 1960s computers sold mass produced universities government business customers created demand software programs written house time staff programmers distributed freely users machine charge commercial basis sciences corporation founded 1959 started grow hardware makers started operating systems software programming environments machines industry expanded greatly rise personal pc mid 1970s brought computing desktop office created growing market games applications utilities dos operating product dominant operating time century successful business model hosted software called software service time model attempted view producers proprietary software reduces concerns accessed definition client software loaded user pc 2014 role cloud developer defined context definition developer published nature programmers write maintain detailed instructions called programs computers follow perform functions programmers design logical structures solving technical innovations advanced computing technologies sophisticated languages programming role programmer programming job titles descriptions vary depending organization programmers settings including corporate technology software companies service government entities sizes professional programmers companies client sites licensing typically required programmer professional commonly held programmers programming considered legal licensing requirements count programmers varies depending type business writing programs instructions involved updating financial records required conditions aircraft training flight simulator simple programs written hours complex require considered complete continuously improved stay programmers team senior programmers write programs specifications determined senior programmers systems analysts design process complete job programmer convert design logical series instructions follow programmer codes instructions programming languages programming languages depending purpose program commonly business applications typically mainframe computers fortran science engineering scientific business applications java popular programming languages business applications programmers programming language languages learn languages easily practice programmers referred language java programmers type function perform environment database programmers mainframe programmers developers source code programs programmers programmers aware task perform comments source code understand program easily code save programmers libraries basic code modified customized specific application approach yields reliable consistent programs increases programmers productivity steps testing debugging programmers program running bugs errors identified programmer program level bugs remain process called testing debugging programmer job programmers continue life program updating modifying existing programs called maintenance programming programmers contribute user online technical application programming programmers broad types application programmers systems programmers application programmers write programs handle specific job program track organization existing packaged software generic applications frequently purchased independent software vendors systems programmers contrast write programs maintain control systems software operating systems database management systems workers instructions determine network workstations cpu handle jobs communicate peripheral equipment printers disk drives skills software developer deep technical expertise aspects computing positions require degree relevant field science technology engineering programming post graduate studies ideal software developer motivated professional carrying dynamic hands experience key languages programming java javascript oracle linux python unix xml software testing tools developer sink differences design software development programming apparent current market programmers developers implements designs class structure hierarchy developers software systems design multi architecture component interactions software types software programmers software development companies experts fields create programs designed specific clients packaged software ranging video games educational software programs desktop publishing financial planning programming packaged software rapidly growing segments services industry companies organizations – – set team ensure design development house software answer specific internal users existing software suitable expensive laboratories organizations people commonly programmer analysts responsible systems analysis actual programming transition mainframe environment based personal computers pcs distinction programmer user increasingly users tasks performed programmers growing packaged software database management software packages users write simple programs access data perform calculations addition rise internet development huge programming field software applications applications browser examples applications include google search service outlook mail service photo sharing service programming editors source code editors editors designed programmers developers writing source code application program editors include features programmers include color syntax auto auto complete matching syntax check plug features aid users coding debugging testing market bbc news 17 science students field months 2009 rate university subjects medical students survey category class degrees technology game design science industries jobs extremely difficult actual figure market programming foreign topic crash dot bubble left programmers programming mentioned 2004 topic companies claim skills regard programming programmers counter companies cheaper programmers developing countries avoid paid training industry specific technologies covered degree programs reasons result cost saving combining sets held specialized programmers generalized positions candidates desired experience degrees dropped lack science mathematics apparent programming subject manufacturing situation confusion economy entering post age nature advantages academic institutions office statistics degrees science degrees 30 trend decline growth compared stem degree growth 1986 1992 2002 2008 flat growth addition labor statistics outlook 2016 26 decline programmers programming companies programmers countries  
23862	computer	python interpreted level purpose programming language created van released 1991 python design philosophy emphasizes code notably enable programming scales van led language community leader july 2018 python features dynamic type automatic memory management supports multiple programming paradigms including object oriented functional comprehensive standard library python operating systems reference implementation python source software community based development model python implementations python managed profit python software foundation history python conceived late 1980s van netherlands successor language inspired capable exception handling operating implementation december 1989 van influence python reflected title python community life post permanent july 12 2018 python released 16 october 2000 major features including cycle detecting support python released december 2008 major revision language completely compatible major features python version series releases python include codice utility partially translation python code python python life initially set 2015 concern body existing code easily ported python january 2017 google announced python improve performance concurrent features philosophy python multi paradigm programming language object oriented programming structured programming supported features support functional programming aspect oriented programming including methods paradigms supported extensions including design contract logic programming python dynamic typing combination reference cycle detecting memory management features dynamic resolution late method variable names program execution python design offers support functional programming lisp codice codice codice functions list dictionaries sets generator expressions standard library modules implement functional tools standard language core philosophy document python 20 includes functionality built core python designed highly compact popular adding programmable interfaces existing applications van vision core language standard library easily interpreter approach offering choice coding methodology python philosophy syntax favor simpler grammar considered python culture python philosophy approach language design favor python developers avoid optimization critical reference implementation offer increases speed cost clarity speed python programmer time critical functions extension modules written languages time compiler translates python script direct level api calls python interpreter goal python developers keeping reflected language british occasionally approaches reference materials examples refer spam famous python standard bar common python community wide range meanings program style code python natural language python philosophy emphasis contrast code difficult understand reads rough programming language called users python considered experienced referred syntax semantics python meant easily readable language visually english languages languages blocks statements optional syntactic exceptions special pascal python blocks increase statements decrease current block program visual structure accurately represents program semantic structure feature termed rule statements control flow python statements include python support optimization class van support functionality python generators generators passed generator python pass generator function python passed multiple stack levels expressions python expressions languages java python distinction expressions statements contrast languages common lisp scheme leads functionality statements expression list expressions expressions statements assignment statement codice form conditional expression conditional statement advantage avoiding classic error assignment operator codice 75 operator codice 34 conditions codice valid code codice 78 syntax error python methods methods objects functions attached object class syntax codice 79 normal methods functions syntactic codice 80 python methods explicit codice parameter access instance data contrast implicit codice codice object oriented programming languages java objective typing python typing objects variable names type constraints compile time operations object fail object suitable type dynamically python operations defined adding string attempting sense python programmers define types classes object oriented programming instances classes constructed calling class codice codice 85 classes instances codice 86 instance allowing reflection version python kinds classes style style syntax difference class codice style classes codice instances codice 86 versions python python kinds classes style classes eliminated python term plan support typing python syntax language static types default implementation experimental optional static type named supports compile time type checking mathematics python usual language arithmetic operators codice 48 codice codice codice codice 56 codice 32 codice 96 codice matrix codice 33 operator included version additionally operator codice 99 essentially bits argument integers codice 100 operators include shift operators codice codice left codice codice codice codice codice codice behavior division changed time negative infinity languages adds consistency instance equation codice true equation codice valid positive negative values codice maintaining equation result codice expected interval codice positive integer interval codice negative python codice 128 function nearest integer breaking versions codice codice python codice codice python boolean expressions multiple relations manner consistent mathematics expression code tests codice codice codice codice derived languages interpret expression expression evaluate code result compared codice python extensive built support arbitrary precision arithmetic integers switched machine supported maximum fixed precision 32 64 bits python type codice arbitrary precision python type codice suffix textual representation python distinction codice codice types eliminated behavior contained codice class codice type class module codice version floating arbitrary precision modes codice type module codice version arbitrary precision rational python extensive mathematics library party library native capabilities frequently scientific scripting language aid numerical data processing manipulation libraries python standard library commonly cited tools suited tasks internet applications standard formats protocols supported includes modules creating graphical user interfaces connecting databases generating arithmetic arbitrary precision regular expressions unit testing standard library covered specifications server interface implementation codice modules code internal documentation supplied standard library cross platform python code modules variant implementations development environments python implementations including include loop function command interpreter user statements sequentially receives including idle add abilities auto completion session syntax standard desktop integrated development environments browser based intended developing science math python programs browser based ide environment ide commercial python ide scientific computing implementations reference implementation reference implementation python written meeting standard select features python programs intermediate executed virtual machine distributed standard library written mixture native python platforms including windows modern unix systems platform portability earliest implementations fast compliant interpreter python time compiler speed improvement python fork implements memory stack allowing concurrent programs version python variants microcontrollers implementations time python compilers developed 2005 nokia released python interpreter series 60 mobile phones named includes modules implementations additional modules integrate symbian operating project variants s60 platform party modules nokia supports python libraries enabling programs written target device cross compilers languages compilers level object languages python restricted subset python language python source language performance performance comparison python implementations numerical workload 13 development python development conducted python enhancement proposal process primary mechanism major features community input issues python design decisions outstanding reviewed python community van python life enhancement language corresponds development reference implementation list python primary forum language development specific issues discussed bug maintained python development originally hosted source code repository running python moved january 2017 public releases types distinguished version alpha beta release candidates released testing final releases rough schedule release delayed code ready python development team monitors code running unit suite development continuous integration community python developers contributed 86 000 software modules python package official repository party python libraries major academic conference python special python naming python derived british python python creator van developing language python references frequently python code culture variables python literature spam traditional bar official python documentation references python routines prefix python examples prefix names python applications libraries include python commonly create games qt python python implementation originally written python api documentation generators python api documentation generators include 2003 python consistently ranked popular programming languages programming community popular language java selected programming language 2007 2010 2018 empirical study scripting languages python conventional languages java programming involving string manipulation search dictionary determined memory consumption java organizations python include wikipedia google nasa facebook amazon entities social news networking written python python serve scripting language applications apache server server interface standard api evolved facilitate applications frameworks support developers design maintenance complex applications develop client based applications data database framework program communications computers libraries effective python scientific computing specialized libraries providing domain specific functionality mathematical software notebook interface programmable python library covers aspects mathematics including algebra numerical mathematics theory python embedded software products scripting language including finite element method software 3d parametric 3d animation packages max blender cinema visual effects 2d imaging programs pro musical notation programs gnu python printer complex structures python choice writing video games programming languages google app engine java python algorithmic quantitative python implemented apis online languages python commonly artificial intelligence projects libraries tensorflow learn scripting language modular architecture simple syntax rich processing tools python natural language processing operating systems include python standard component linux distributions freebsd macos command terminal linux distributions written python red linux linux python package management python extensively security industry including exploit development software laptop child developed labs written python raspberry pi single board project python main user programming language includes python replace java python python scripting provider core feature version february 2013 languages influenced python python design philosophy influenced programming languages python development languages practice requiring document describing issues surrounding change language python python received programming language awards 2007 2010 2018 award language growth popularity measured  
24226	computer	plan bell labs distributed operating computing sciences center bell labs mid 1980s building unix concepts developed late 1960s final official release 2015 plan unix file extended network graphical user interface assumed basis functionality heavily plan bell labs reference 1959 science fiction movie plan space plan reference film continues developed operating researchers history plan bell labs originally developed starting mid 1980s computing science center bell labs originally developed unix plan team initially led rob thompson support head computing techniques department notable developers contributed project including bruce plan replaced unix bell labs primary platform operating systems explored original unix model facilitate programming notably distributed multi user environments development internal bell labs shipped operating universities 1992 1995 plan commercial parties book source licenses targeted embedded systems market market developers expect established operating systems 1996 plan project favor inferno intended sun microsystems java platform late 1990s bell labs owner lucent technologies dropped commercial support project 2000 release distributed source license fourth release software license occurred 2002 user development community including current bell labs produced minor daily releases form iso images bell labs hosted development development source tree accessible protocols update existing addition official components os included bell labs hosts repository developed applications tools bell labs moved projects development official plan stopped development continues fork active provide builds functionality fork wi drivers audio drivers usb support built game emulator features plan inspired operating systems include os os design concepts plan distributed operating designed network heterogeneous separated computers function single typical plan installation users terminals running window access cpu servers handle computation intensive processes permanent data storage additional network hosts acting file servers storage designers idea operating systems processes running programs view operating systems file single path refer resources processes potential complexity setup controlled set conventional locations common resources idea processes offer services processes providing virtual files processes client process input output file inter process communication processes plan unix notion central access computing resources unix idea device files provide access peripheral devices removable media possibility mount physically distinct hierarchical adds possibility mount connection server program standardized protocol treat services original window called exploited plan represents user interface terminal pseudo files read program mouse movements button perform textual input output writing graphics operations bit window devices creating window program sets connected actual device files access window receives input output commands program handles sending output actual screen device focused program keyboard mouse input program operating device drivers window assume set special files provide input accept messages plan distributed operation relies process allowing client server processes communicate machines command starts remote session computation server command local including user terminal devices server remote programs perform input output terminal mouse keyboard display combining effects remote shared network protocol programs provide services files programs speak unified protocol called compared systems reduces custom programming interfaces generic medium byte oriented protocol messages delivered server client protocol refer communicate processes programs data including user interface network release edition modified renamed operating systems plan provide special application programming interfaces berkeley resources calls access devices plan device drivers implement control interface file hardware accessed ordinary file input output operations read write sharing device network accomplished directory tree target machine union plan user files called names directory trees single location union directory underlying controlled files union directory simply report names resolution single path performed denotes exists exists exist file exists recursive performed exists files accessible union union directory created command mounted contents replacing previous contents directory union mounted personal directory union mounted file requested looked finally separate process replace notion search path unix list search programs command plan directory adding commands single kernel separate mount tables process provide process file processes constructed independently user simultaneously programs heterogeneous create isolated environment secure plan union directory architecture inspired linux union file implementations developers bsd union facility recursive merging plan purpose special virtual calls process management plan file process appears directory control files ordinary file calls file approach plan processes managed simple file management tools cat processes copied moved files plan calls accessing networking stack networking hardware file network connections controlled reading writing control messages control files interface respective protocols reduce complexity managing character plan initial implementation iso thompson invented native encoding plan entire converted 1992 compatibility traditional strings enabling reliable processing multilingual string data unix multiple processes single encoding characters regions switching code sets combining design concepts design concepts plan supposed combined implement network address translation server union directory created router directory tree virtual private network vpn implemented union directory hierarchy remote public internet union directory hierarchy filters application implement manner distributed computing network composed union directory remote hosts local features complex distributed computing environment existing hierarchical software plan benefit design tasks plan accomplished cat cp utilities combination default plan authentication key management server plan handles authentication programs secret implementation details graphical programs unix plan designed graphics mind plan terminal user create windows graphical programs replace window inter process communication mechanism wide plan editors storage plan supports fat file systems designed bell labs plan storage capability hard drive file permanent data storage software development distribution package plan includes special compiler variants programming languages tailored set libraries user interface specific plan written extensions features left compilers language custom built portability mind author compile load produce medium quality object code concurrent programming language called editions dropped maintenance reasons replaced threading library unix compatibility plan supposed development unix concepts compatibility unix software goal project command utilities plan share names unix plan support posix applications emulate berkeley socket interface posix environment implements interface close posix common extensions native plan interfaces standard includes posix compatible authors claim port window plan ship supporting properly job linux linux emulator application progress vice versa virtual machine modified plan kernel user process linux supporting plan programs reception comparison contemporary operating systems 1991 plan designers compared operating systems terms size source code minimal version size microkernel device drivers lines code plan depending metric lines complete kernel lines code 2006 count kernel 150 000 lines compared linux operating systems community commercial unix attempts achieving distributed computing remote access concurrently plan design effort included network file architecture developed sun microsystems unix model os berkeley developer sunos architecture limited compared plan capabilities support remote device access remote inter process communication unix domain essentially user level servers integrated architecture file communication textual message design plan limitations paradigm compared interfaces sun object oriented operating spring comparison plan contemporary distributed operating plan demonstrated integral concept interface represented set implemented modern distributed features plan character encoding implemented operating systems unix operating systems linux implemented plan file features plan process creation mechanism additionally plan user space plan applications tools including editors ported unix linux systems achieved level popularity projects seek replace gnu operating programs surrounding linux kernel plan operating programs window manager inspired plan heavily influenced plan science plan grid computing platform vehicle computing plan storage systems plan approached unix popularity tool factors contributed adoption plan include lack commercial backup user applications lack device drivers plan developers claim adoption solved original goals distributed development environment platform growing popularity inferno hosted capabilities vehicle bringing plan technologies systems hosted heterogeneous computing projects extend plan including plan additional hardware drivers software including improved version mail compiler version control support programs plan ported raspberry pi single board project attempts replace custom plan compiler gcc modern development tools speed development derivatives inferno plan shares design concepts source code kernel devices protocol inferno shares plan unix heritage bell labs unix philosophy command tools inferno plan tools translated license starting release fourth edition april 2002 source code plan bell labs freely lucent public license considered source license source initiative osi software license software foundation passes software guidelines february 2014 university california berkeley current plan copyright – lucent – release plan software lucent public license version gnu public license version  
25220	computer	quantum computing computing quantum mechanical phenomena quantum device performs quantum computing completely binary digital electronic computers based transistors common digital computing requires data encoded binary digits bits quantum computation quantum bits qubits quantum turing machine theoretical model universal quantum field quantum computing paul 1980 richard 1982 david 1985 scale quantum computers theoretically solve classical computers algorithms integer algorithm quantum algorithm simulation quantum body systems exist quantum algorithms algorithm faster probabilistic classical algorithm classical principle exponential resources simulate quantum algorithm quantum computation thesis 500 complex values bits stored comparison digital bits hand quantum computers efficiently solve feasible classical computers review ieee spectrum argues practical quantum computers implemented gap hard experiments carried qubits extremely developed quantum computing theory relies thousands millions qubits calculate gap closed classical memory bits bit represented quantum hand maintains sequence qubits represent quantum qubit pair qubits quantum qubits quantum qubits arbitrary simultaneously normal time quantum operates qubits quantum gates measurement observed algorithm composed fixed sequence quantum logic gates encoded setting initial values qubits classical calculation measurement qubits qubit classical outcome classical bits algorithm measurement result quantum computers distributed quantum algorithms quantum algorithms probabilistic provide correct solution probability note term deterministic computing probabilistic computing term deterministic meaning science implementation qubits quantum start spin typically written true mapped effective spin principles operation quantum qubits classical composed classical bits representing qubit classical requires storage complex coefficients classical bit sufficient provide values bits qubits hold exponentially classical care qubits probabilistic final qubits measured configurations measurement incorrect qubits measurement qubits measurement computation understand classical operates bit register exact register time probability distribution bit strings 000 100 uncertainty probability probabilistic possibility qubit quantum dimensional vector 11 dimensional vector vector node holding amplitude bit string qubits coefficients 12 complex sum squares coefficients absolute values 13 equal 14 absolute squared 15 probability 14 measurement complex magnitude direction complex plane phase difference coefficients represents meaningful parameter fundamental difference quantum computing probabilistic classical computing measure qubits bit string probability measuring string squared magnitude string coefficient probability measuring 000 17 probability measuring 18 measuring quantum complex coefficients 11 classical probability distribution 20 quantum classical result measurement dimensional vector depending basis chosen space basis bit strings 000 computational basis bases unit orthogonal vectors eigenvectors operator notation choice basis explicit 11 computational basis written computational basis single qubit dimensions 24 25 eigenvectors operator single qubit 26 27 operation classical bit quantum qubit dimensional vectors classical quantum computation computing string 28 vector classical computation application stochastic matrices preserve probabilities add preserve l1 norm quantum computation hand allowed operations matrices effectively preserve sum squares add euclidean l2 norm applied depend physics quantum device quantum computations technically quantum operations probabilistic combinations quantum computation classical computation quantum circuit precise formulation finally algorithm result read classical sample probability distribution bit register bit string 000 quantum measures qubit equivalent quantum classical distribution coefficients classical squared coefficients quantum sampling distribution original quantum algorithms correct answer probability repeatedly running measuring quantum probability correct answer increased contrast quantum computation correct answer quantum running technical sense earlier frequent measurements computation protocol details sequences operations quantum algorithms universal quantum algorithm algorithm algorithm amplitude quantum fourier transform quantum gate quantum algorithm quantum error correction potential cryptography integer security public key systems believed computationally ordinary integers product prime products 300 comparison quantum efficiently solve algorithm factors ability quantum break systems sense polynomial time digits integer algorithm solving popular public key based difficulty integers discrete solved algorithm curve algorithms broken protect secure email types data breaking electronic privacy security algorithms broken algorithms public key algorithms based integer discrete algorithm applies based coding theory lattice based broken quantum computers finding polynomial time algorithm solving hidden break lattice based studied proven applying algorithm break symmetric secret key algorithm force requires time equal roughly underlying algorithm compared roughly classical meaning symmetric key lengths effectively 256 security attack algorithm 128 classical force search key size quantum cryptography functions public key cryptography quantum based systems secure traditional systems quantum quantum search discrete quantum algorithms offering polynomial speedup classical algorithm including simulation quantum physical processes solid physics approximation solving equation mathematical proof equally fast classical algorithm discovered considered quantum computers offer polynomial speedup quantum database search solved algorithm queries database required classical algorithms advantage optimal algorithm probability finding desired element oracle examples quantum query subsequently discovered finding functions evaluating trees addressed algorithm properties properties running time algorithm quantum scale square root inputs elements database opposed linear scaling classical algorithms class algorithm applied boolean instance database algorithm answers application attempts guess secret key file symmetric attack application quantum computing major government agencies quantum simulation nanotechnology rely understanding quantum systems systems impossible simulate efficient manner quantum simulation applications quantum computing quantum simulation simulate behavior atoms unusual conditions quantum quantum computation relies theorem calculations ground simple evolved complicated ground represents solution question theorem evolution slow stay ground times process solving linear equations quantum algorithm linear systems equations algorithm named expected provide speedup classical quantum john introduced term quantum refer speedup advantage quantum classical field google announced 2017 expected achieve quantum happen ibm 2018 classical computers practical task views quantum potential future benchmark quantum achieved quantum computers paper published 1994 paul 400 qubit conflict bound holographic principle claimed theoretical benefits quantum computing proven theory quantum mechanics standard interpretation negative probabilities maintains born rule quantum mechanics rely probability branches science simply expected values arguments turing complexity bayesian quantum mechanics physical nature mathematical employed obstacles technical challenges building scale quantum quantum computers solve faster classical david ibm listed requirements practical quantum quantum challenges controlling removing quantum environment interactions external sources exist examples include quantum gates lattice background spin physical implement qubits effectively highly controlled times candidate systems time mri technology called time typically range temperature quantum computers require qubits cooled 20 prevent result time consuming tasks render quantum algorithms maintaining qubits duration eventually issues difficult optical approaches magnitude shorter cited approach optical pulse error rates typically proportional ratio operating time time operation completed time quantum threshold theorem error rate quantum error correction errors total calculation time time error correction scheme correct errors faster introduces cited figure required error rate gate fault tolerant computation assuming noise meeting scalability condition wide range systems error correction cost greatly increased required qubits required factor integers algorithm polynomial qubits error correction algorithms figure additional factor 1000 bit implies bits error correction error correction figure rise bits computation time steps approach stability create quantum threads theory form stable logic gates developments quantum computing models quantum computing models distinguished basic elements computation main models practical quantum turing machine theoretically direct implementation model models computation equivalent simulate polynomial overhead physical physically implementing quantum candidates distinguished physical qubits candidates topic rapid progress vast flexibility 1959 richard lecture possibility quantum effects computation 1980 paul quantum mechanical models computers russian mathematician motivated development quantum computers 1981 conference organized mit ibm richard build quantum nature classical simulation nature quantum mechanical easy 1984 published quantum cryptography protocol ibm scientists charles 1993 international scientists including charles perfect quantum principle original 1994 peter bell labs discovered quantum algorithm quantum factor integers exponentially faster classical algorithm algorithm theoretically break public key quantum computers 1996 criteria published list conditions constructing quantum proposed theoretical david 2000 paper physical implementation quantum computation 2001 researchers demonstrated algorithm factor 15 qubit 2005 researchers university michigan built semiconductor chip devices standard scalable quantum computing 2009 researchers yale university created solid quantum processor qubit chip artificial atom qubits atoms single atom team university created silicon chip based quantum algorithm developments 2010 journal quantum processing devoted subject february 2010 digital circuits designed symmetric functions organized quantum gates april 2011 team scientists australia japan quantum transferred complex set quantum data transmission integrity qubits 2011 wave systems announced commercial quantum wave 128 qubit processor 25 2011 martin agreed purchase wave university california house wave newly formed martin quantum computing center wave engineers designed chips empirical approach focusing solving wave demonstrated quantum criticism wave paper nature proved chips quantum properties published papers suggested wave machine operation explained requiring quantum models classical models data considered experts remain divided ultimate classification wave systems quantum behavior established demonstration researchers university created version algorithm factor 21 september 2011 researchers proved quantum computers von neumann architecture separation ram november 2011 researchers qubits february 2012 ibm scientists quantum computing integrated circuits april 2012 team researchers university california university technology university science technology university california constructed qubit quantum crystal easily scaled functional temperature logical qubit directions electron spin kernels spin algorithm generating answer 95 september 2012 researchers university south quantum global enabling manufacture memory building blocks team led engineers created qubit based single atom silicon technological platform forms building blocks modern day computers october 2012 nobel prizes david basic understanding quantum quantum computing november 2012 quantum object reported scientists university science technology china december 2012 dedicated quantum computing software company founded company focus exclusively software applications commercially quantum computers including wave demonstrated ability quantum processors solve real february 2013 technique sampling reported optical lattice universal quantum practical science 15 2013 google announced quantum artificial intelligence lab hosted nasa center qubit wave quantum universities space association researchers share time goal quantum computing machine learning google developed quantum machine learning algorithms learned principles quantum classical computing 2014 reported based documents nsa national security agency nsa running 79 program titled hard targets develop quantum capable breaking encryption 2014 researchers google reported definition quantum speedup measure quantum speedup wave device explicitly rule 2014 researchers university south silicon qubits accurate increasing time hold quantum computers easier build april 2015 ibm scientists claimed critical advances practical quantum claimed ability detect measure kinds quantum errors simultaneously square quantum bit circuit design scale larger dimensions october 2015 bell electron separated october 2015 researchers university south built quantum logic gate silicon time december 2015 nasa publicly displayed operational 15 quantum canadian company wave quantum artificial intelligence laboratory center california field device purchased 2013 partnership google universities space association presence quantum effects wave quantum processing unit accepted tests wave quantum processor algorithm 2016 ibm announced time quantum computing public cloud access experiments quantum processor service called ibm quantum experience quantum processor composed qubits ibm watson center york august 2016 scientists university built quantum october 2016 university variant electron based quantum electron holes semiconductor temperatures lot quantum particle positive electrical charge march 2017 ibm announced industry initiative build commercially universal quantum computing systems called ibm company released api application program interface ibm quantum experience enables developers programmers building interfaces existing quantum bit qubit cloud based quantum classical computers deep background quantum physics 2017 ibm announced built tested powerful universal quantum computing processors 16 qubit processor complex qubit processor ibm prototype commercial processor 17 qubits materials device architecture improvements powerful quantum processor created ibm july 2017 researchers announced quantum simulator 51 qubits announcement harvard university international conference quantum technologies quantum simulator differs simulator designed solve equation solving equation require building solve equations september 2017 ibm scientists qubit device model largest quantum published cover story peer reviewed journal nature october 2017 ibm scientists 49 qubit simulation barrier simulated 49 56 qubit short depth circuits national laboratory supercomputer university tensor framework originally developed university california november 2017 university team australia quantum 1000 times conventional slow speed light material december 2017 ibm announced ibm network clients companies universities labs explore practical quantum applications ibm 20 qubit commercial systems business science include samsung corporation hitachi honda university national lab oxford university university december 2017 released version quantum development kit includes programming language write programs quantum 2017 wave reported selling 000 qubit quantum late 2017 2018 ibm intel google reported testing quantum processors 50 49 72 qubits realized circuits qubits circuits range quantum dynamics expected classical computers argued improvements error rates classical simulation reach february 2018 scientists reported time discovery form light involve development quantum computers february 2018 reported testing silicon based spin qubits quantum processor june 2018 intel testing silicon based spin qubit processor manufactured company july 2018 team led university achieved multi qubit demonstration quantum calculation performed leading hardware platforms race develop universal quantum december 2018 reported machine built qubits january 2019 ibm launched ibm integrated quantum computing commercial relation computational complexity theory class efficiently solved quantum computers called bounded error quantum polynomial time quantum computers probabilistic algorithms quantum computers bounded error probabilistic polynomial time classical computers defined set polynomial time algorithm probability error bounded quantum solve instance answer probability solution runs polynomial time contained complexity class precisely class decision complete strict integer discrete log complete common quantum computers solve complete polynomial time true false capacity quantum accelerate classical algorithms quantum computation complexity classical calculations accelerated quantum takes computational tasks search algorithm optimal mechanics local hidden variable interpretation quantum mechanics local hidden variable quantum implement search item database 29 steps faster 29 steps algorithm search method quantum computers solve complete polynomial time quantum computers faster classical computers types solve classical computers solve turing machine simulate quantum computers quantum solve existence standard quantum computers thesis theories quantum theory loop quantum faster computers built defining computation theories time exists obvious input receive output  
25723	computer	theoretical science formal language theory regular language called rational language formal language expressed regular expression strict sense notion theoretical science opposed regular expressions engines modern programming languages augmented features recognition languages expressed classic regular expression alternatively regular language defined language recognized finite automaton equivalence regular expressions finite automata kleene theorem american mathematician stephen kleene hierarchy regular languages defined languages generated type grammars regular grammars regular languages input parsing programming language design formal definition collection regular languages alphabet defined regular expression syntax semantics note defining rules regular expression examples finite languages regular string language ε regular typical examples include language consisting strings alphabet language consisting strings form simple language regular set strings intuitively recognized finite automaton finite automaton finite memory exact techniques prove equivalent regular language equivalent properties properties purely algebraic approaches define regular languages set statements formulated monoid equivalence leads concept language authors properties alternative definition regular languages called kleene theorem precisely subset called varies authors textbook calls equivalence regular expressions nfas kleene theorem textbook calls equivalence regular expressions dfas kleene theorem prove equivalence nfas dfas kleene theorem equivalence regular expressions finite automata languages oriented regular grammars dfas nfas calls languages generated regular introduces regular expressions terms rational languages finally kleene theorem regular rational languages authors simply define rational expression regular expressions rational languages regular languages closure properties regular languages closed operations languages regular result operations properties deterministic finite automata accept language consequence closure properties deterministic finite automata accepted languages regular expressions complete alphabet larger complete regular expressions extended operator regular languages exponential space bound complete exponential space respect polynomial time reduction complexity computational complexity theory complexity class regular languages referred regular decision solved constant space space independent input size regular determining bits input hand regular language language recognized language regular requires machine log log space recognize input size log log class regular languages practice solved machines space location hierarchy locate regular languages hierarchy regular language context true language consisting strings context regular prove language regular theorem methods regular languages regular language denote ordinary generating function formal power generating function language rational function regular regular language exist integer constant complex complex 14 languages 15 proved 15 language strings balanced language equal 18 form 19 language care 20 magnitude language binary form 19 form 23 regular language exists constant 24 25 26 27 function language function regular language rational arbitrary language notion regular language generalized infinite automata trees tree automaton rational set notion regular rational language notion language finite automaton set monoid notes relation term regular language bit papers influenced term language refers behavior automata rational language refers regular expressions rational power series defines rational subsets arbitrary terminology motivated regular language series generalization time context formal power series approach rise weighted rational expressions weighted automata algebraic context regular languages boolean weighted rational expressions called rational languages context kleene theorem generalization called kleene theorem  
25781	computer	robot programmable capable carrying complex series actions automatically robots guided external control device control embedded robots constructed human form robots machines designed perform task regard robots autonomous semi autonomous range honda advanced step innovative mobility asimo playing robot industrial robots medical operating robots patient assist robots dog robots programmed robots uav robots appearance movements robot sense intelligence autonomous expected coming decade robotics autonomous car main drivers branch technology deals design construction operation application robots systems control sensory feedback processing robotics technologies deal automated machines humans dangerous environments manufacturing processes humans appearance behavior robots inspired nature field inspired robotics robots created branch robotics soft robotics time accounts user automated devices automata animals humans designed entertainment mechanical techniques developed industrial age appeared practical applications automated machines remote control wireless remote control term word meaning forced labor word robot denote fictional humanoid play universal robots writer word true inventor electronics evolved driving force development advent electronic autonomous robots created william england numerical control cnc machine tools late 1940s john commercial digital programmable robot built george 1954 named sold motors 1961 pieces hot metal die machines guide plant west jersey robots replaced humans performing dangerous tasks humans unable size limitations extreme environments space concerns increasing robots role society robots technological replace workers increasing functions robots military combat ethical concerns robot autonomy potential addressed fiction realistic concern future summary word robot refer physical robots virtual software referred machines robots agreement experts public robots tend abilities functions accept electronic programming process data physical operate autonomously degree operate physical physical processes sense manipulate environment exhibit intelligent behavior behavior humans animals closely concept robot field synthetic biology studies entities nature comparable machines history idea automata engineers including china attempted build operating machines animals humans descriptions automata include artificial artificial birds speaking automaton hero automaton human automaton modern include artificial people mechanical built greek life 400 include greek engineer applied knowledge produce water moving figures century greek mathematician mechanical operated called hero greek mathematician inventor created numerous user automated devices machines powered air pressure water century protected mechanical robots kingdom king china 3rd century describes account humanoid automata involving earlier chinese king mechanical engineer king life size human shaped figure mechanical artificial accounts flying automata texts attributes century contemporary artificial birds fly century includes construction mechanical automata including mechanical birds shaped humans animals female oil played instruments scenes italy da vinci plans humanoid robot da vinci notebooks 1950s contained detailed drawings mechanical robot wave arms head design based recorded attempted build japan complex animal human automata built century machinery automaton variations existed theatre perform traditional france life sized player pipe player mechanical food hand food matter stored hidden remote controlled systems remotely operated vehicles demonstrated late century form types remotely controlled remotely controlled john john electric wire guided von electric wire guided invented powered rapidly wires differential speed wires connected station allowed guided target practical guided british inventor granted patent remotely controlled radio waves tesla publicly demonstrated wireless controlled sell navy father radio guidance systems pioneering guided war demonstrated remote controlled aircraft royal flying built wire guided origin term robot robot applied term artificial automata play writer named true inventor term robot word robot language forced term classified service robot patent fictional story technological creation artificial human bodies theme class fit class manufactured artificial workers english pronunciation word evolved introduction late row late short row row bought current pronunciation row bot robots humanoid robots annual model engineers society london delivered speech invented robot frame consisted body motor powered power source robot hands head controlled remote control voice control george westinghouse electric corporation built connected devices users 1939 humanoid robot debuted 1939 york fair feet walk voice command speak 78 record player head arms body consisted steel motor covered japan robot designed constructed modern autonomous robots electronic autonomous robots complex behaviour created william institute england 1949 prove rich connections brain cells rise complex behaviors – essentially secret brain wired robots named constructed 1949 shape slow rate movement robots capable station battery power purely electronics simulate brain processes time alan turing john von neumann view processes terms digital computation inspired subsequent generations robotics researchers mark modern form beam robotics digitally operated programmable robot invented george 1954 ultimately called ultimately foundations modern robotics industry sold motors 1960 installed 1961 plant jersey hot pieces metal die machine stack patent digitally operated programmable robotic arm represents foundation modern robotics industry robot introduced 1963 company 1973 robot driven axes patented kuka robotics germany programmable universal manipulation arm invented 1976 design sold commercial industrial robots widespread performing jobs accuracy reliability humans employed jobs dirty dangerous suitable humans robots manufacturing assembly transport earth space exploration surgery laboratory mass production consumer industrial future development trends techniques emerged develop science robotics robots method evolutionary robotics robots submitted tests perform model create subsequent generation robots method robotics development single robot solving functions type robot introduced acts smartphone robot named robots advanced eventually standard operating designed robots robot operating source set programs developed stanford university massachusetts institute technology technical university germany ros program robot navigation specific hardware involved level commands items image recognition ros robot data attributes movement robots data level algorithms developing windows robots robotics developer studio 2007 japan scale service robots technological japan led japanese government agencies trade future applications robotics obvious people capabilities robots time prediction 1982 people robots clean removing automobiles human pack electrical cable load trucks handle soft fast food service robot predictions prototypes 2008 developed truck drive human operator analysts driving trucks eventually 2014 driving truck expected greatly change process mining 2015 trucks mining operations australia mining company australia analysts decades trucks driving robot named intelligence software read correct learn banks understand robot introduced 2012 learns guidance perform task moving hands desired motion extra buttons controls arm precision features regular program takes matter minutes usual industrial robots extensive programs coding programming operate software engineers taught perform multiple complicated tasks 2015 precise tasks word robot introduced public writer play universal robots published play factory chemical manufacture living simplified people called robots play focus technology creation living appearance modern ideas humans mass produced workers efficient original thinking issue robots exploited human dependence labor formulated robots achieve robots rise humans word wrote short letter reference oxford english dictionary named writer actual article journal explained originally workers labor word sought suggested word labor hard labor languages russian robot traditionally robot period typically months origin word contemporary russian european root robot german root word robotics field study coined science fiction writer asimov asimov created laws robotics theme books define laws fiction laws pure fiction technology created ability understand follow robots serve military purposes law law people asimov laws set simple ethical read short stories single failure dr university modern robots mobile robot mobile robots capability environment fixed physical location mobile robot common automated guided vehicle automatic guided vehicle mobile robot wires floor vision discussed article mobile robots industry military security environments consumer products entertainment perform tasks vacuum cleaning mobile robots focus deal current major university labs focus mobile robot mobile robots tightly controlled environments assembly lines difficulty interference humans rarely robots domestic robots cleaning maintenance increasingly common developed countries robots military applications industrial robots industrial robots consist arm multi linked attached fixed surface common type assembly international organization standardization definition industrial robot iso automatically controlled programmable axes fixed mobile industrial automation applications definition international robotics european robotics network national standards robots classes devices manipulate objects manual control automated devices manipulate objects cycles programmable controlled robots continuous robots type acquire environment response service robot commonly industrial robots fixed robotic arms production distribution term service robot defined international robotics proposed definition service robot robot operates semi autonomously perform services humans equipment manufacturing operations educational robot robots educational 1980s robots schools programmed logo language robot kits lego educational robots children learn mathematics physics programming electronics robotics introduced school students form robot competitions company recognition science technology organization foundation robotics competition lego league lego league tech challenge competitions devices shaped robots teaching 1974 1976 robot shaped game teaching toy based track tape player invented michael modular robot modular robots robots designed increase utilization robots architecture functionality effectiveness modular robot easier increase compared conventional robots robots composed single type identical identical module types shaped modules vary size architectural structure hyper redundancy modular robots designed degrees freedom creating programming inverse dynamics modular robots complex traditional robots modular robots composed shaped modules modules shaped modules technology modular robotic technology patented robotics design creation modular robots shaped modules connect chain form heterogeneous modular robot systems robots designed module complete robotic modules connected chain single module degree freedom modules connected degrees freedom shaped modules designed chain increasingly size chain increases attached chain modules base shaped modules suffer design modular robot pressure attached modules payload carrying capacity decrease arm increases modular robots manually form robot perform applications modular robots architecture type composed modules modular robots snake arm robot combine form dual arm robot split mobile robots mobile robots split multiple combine larger single modular robot ability specialized single task capacity specialized perform multiple tasks modular robotic technology applied hybrid transportation industrial automation cleaning handling universities studied technology developed prototypes collaborative robots collaborative robot robot effectively interact human workers performing simple industrial tasks environmental conditions create hazards risk industrial motion control application collaborative robots industries manufactured universal robots september 2012 industrial robot designed interact neighboring human workers programmable performing simple tasks detect human robotic arms prominent switches intended sale businesses robotic personal companies bought commercially robots society roughly robots asia 32 europe 16 north america 40 robots japan japan country robots autonomy ethical questions robots advanced sophisticated experts increasingly explored questions ethics robots behavior robots claim social cultural ethical legal rights scientific team robot brain exist 2019 predict robot intelligence advances robotic behavior sophisticated social impact intelligent robots subject 2010 documentary film called plug suggested moment computers robots humans calls singularity suggests dangerous humans discussed philosophy called 2009 experts attended conference hosted association advancement artificial intelligence aaai computers robots acquire autonomy abilities pose hazard robots acquired forms semi autonomy including power sources independently choose targets attack achieved intelligence science fiction potential hazards media sources scientific separate trends result robotic autonomy pose inherent concerns 2015 robots capability degree researchers institute reasoning lab york conducted experiment robot aware answer question military robots experts robots military combat robots degree autonomous functions concerns technology robots controlled robots navy funded report military robots complex attention implications ability autonomous decisions researcher autonomous robots decisions effectively experts question robot generated public concerns fuel source engine designed selected sensors local environments project stated fat smart autonomous equipped artificial perception considered robots decisions autonomously believes represents dangerous trend humans decisions machines relationship people predicted machines workers increase social policy human replacement involves technology company july 2011 announced plan replace workers robots company robots increase robots period increased robots lead improve redundancy laws robots human jobs gates believes slow spread automation fund types robot pay guaranteed living workers bank development report 2019 evidence automation workers technological innovation creates industries jobs balance contemporary main types robots based purpose autonomous robots dedicated robots robots classified purpose robot designed perform task extremely range tasks robots nature programmed limited physical form factory robot arm perform jobs cutting welding acting pick robot printed circuit boards purpose autonomous robots purpose autonomous robots perform variety functions independently purpose autonomous robots typically navigate independently spaces handle charging interface electronic perform basic tasks computers purpose robots link networks software accessories increase recognize people objects talk provide monitor environmental quality respond pick perform tasks purpose robots perform variety functions simultaneously times day robots mimic human people appearance type robot called humanoid robot humanoid robots limited stage humanoid robot navigate humanoid robots limited intelligent behaviors environments factory robots car production decades automobile dominated robots typical factory hundreds industrial robots automated production lines robot human workers automated production vehicle chassis finally assembled sequence robot stations industrial robots extensively manufactured rapidly boxes loading centers electronics mass produced printed circuit boards exclusively manufactured pick robots typically remove electronic components accuracy robots hundreds thousands components hour performing human speed accuracy reliability automated guided vehicles mobile robots wires floor vision transport facilities ports style robots limited tasks accurately defined performed time feedback intelligence required robots basic sensors limitations paths easily altered alter paths obstacles block entire operation technologies developed deploy bar code scanning floor systems tend require maintenance daily cleaning bar codes vehicle blocks bar code lost designed human environments intelligent 400 designed people friendly navigate recognizing natural features 3d scanners sensing environment dimensions eliminate cumulative errors calculations current position create maps environment scanning simultaneous localization mapping slam maps navigate real time path planning algorithms operate complex environments perform sequential tasks semiconductor lab dynamic require additional strategies dimensional sensors time flight cameras dirty dangerous tasks jobs humans leave robots job domestic cleaning dangerous exploring jobs physically exploring cleaning pipe performing surgery space unmanned space launched robot launched 1960s limited abilities ability fly land status robot includes robots devices remotely operated distance human operator sequence movements semi autonomous behaviour human perform job dangerous robot country scale operator instance surgery robot human patient scale compared surgery recovery time avoid workers spaces cleaning operator robot authors device called sign books remotely robot aircraft unmanned vehicle increasingly military search terrain targets hundreds robots military devices activity automated machines robots cost human domestic robots domestic robots simple robots dedicated single task simple jobs vacuum cleaning floor domestic robot military robots military robots include robot ground based combat variety discussion degree autonomy situations unmanned combat air vehicles upgraded form uavs wide variety including combat designed systems ability fly pick target decisions built fly pilot avoid detection flight expected 2011 aaai studied topic depth president study issue suggested build friendly meaning advances occurring include effort friendly measures exist robot heavy countries japan south korea begun pass requiring robots equipped safety systems sets laws asimov laws robotics official report issued 2009 japanese government robot industry policy committee chinese researchers issued report set ethical rules set legal guidelines referred robot legal studies concern expressed occurrence robots apparent mining robots mining robots designed solve mining industry including skills improving productivity achieving environmental targets nature mining mining autonomous semi autonomous operated robots greatly increased times vehicle manufacturers provide autonomous trains trucks load material transport destination requiring human intervention largest mining corporations expanded autonomous truck largest consisting 150 autonomous komatsu trucks operating western australia announced expansion autonomous largest 21 autonomous atlas machines autonomous robots atlas control autonomously execute plan moving position gps set automatically plan path position selected destination systems greatly enhance safety efficiency mining operations healthcare robots healthcare main functions assist individual disease multiple aid systems automation elderly disabled robots automation developed time simple basic robotic semi autonomous robots assist elderly disabled common tasks population countries japan meaning increasing elderly people care people care humans robots gradually introduced semi autonomous robot designed support disabled elderly people daily life activities serving patients perform tasks people staff script pro manufactures robot designed consist form determining drug robot send robot robot size determined size robot user determines size based tablet robot filled brought patient label set patient slot labeled patient led read checks contents ensure correct drug correct patient robot time efficient device depends robot healthcare robotics product helps thousands daily errors robot feet wide feet hold hundreds kinds thousands resources staff resource industry head coupled capture deliver location head moves single axis degrees process technology correct drug drug patient specific filled patient robot released returned waiting load delivery floor robots robots installed performing life saving jobs types robot developed laboratories robotics focuses specific industrial tasks types robot alternative design robots manufacture expected types robot solve real finally realized robots approach designing robots base animals designed engineered applying methods nanorobots emerging technology field creating machines robots components close scale constructed molecular machines researchers produced complex systems sensors synthetic molecular motors functioning robots contest researchers create entire robots perform tasks scale applications include micro surgery level individual cells utility manufacturing cleaning people suggested earth argue outcome robots researchers investigated possibility creating robots alter physical form suit task fictional 1000 real robots sophisticated consist shaped units relative algorithms designed robots reality soft robots robots bodies flexible actuators air robots behaviors robots inspired researchers modeling behavior thousands robots perform task finding hidden cleaning robot simple behavior complex set robots considered single distributed considered intelligence largest created include sri project source micro robotic project behaviors failure robot fail mission continue robots fail space exploration failure extremely costly interface robots robotics application design virtual reality interfaces specialized robots widespread community robots called interfaces touch enabled user interaction real virtual environments robotic forces mechanical properties virtual objects users experience sense touch robots popular culture literature robotic characters artificial women artificial women cyborgs women humans mechanical enhancements science fiction reference western literature mechanical appears book creates hero assisted robots translation master looked real women speak intelligence trained robot android mechanical devices human appearance word robot play universal robots written writer born author century asimov published books asimov science fiction stories robots robots interaction society center asimov carefully considered ideal set instructions robots risk humans laws robotics robot human human harm robot human conflict law robot protect existence protection conflict law introduced short story earlier stories asimov zeroth law robot harm humanity humanity harm rest laws modified sequentially oxford english dictionary asimov short story law earliest recorded word robotics asimov initially aware assumed word existed mechanics terms branches applied knowledge films robots films robots cinema fictional famous star wars sex robots concept humanoid sex robots public attention concern concept stated development sex robots wrong argue introduction devices women children popular culture concerns robots repeatedly expressed wide range books films common theme development master race highly intelligent robots motivated human race called science fiction theme robot android creator include mechanical matrix robot fictional robots programmed gain intelligence abilities software hardware examples popular media robot red 2017 game robotics robot ethics control positive negative impact technologies environment common theme called robots mimic humans closely fictional representations intelligent robots films artificial intelligence 2016 adaptation audience robots  
25984	computer	raymond kurzweil born february 12 american inventor involved fields optical character recognition ocr speech synthesis speech recognition technology electronic keyboard instruments written books health artificial intelligence technological singularity kurzweil public movements public share outlook life extension technologies future nanotechnology robotics kurzweil received 1999 national medal technology innovation united honor technology president white house 500 000 mit prize 2001 largest innovation 2002 national hall established patent office received 21 honors public service included kurzweil 16 america magazine ranked united called kurzweil written books national age machines translated languages selling book amazon science kurzweil book singularity york times book amazon science philosophy kurzweil public private industry conferences maintains news readers annually kurzweil employed google 2012 director engineering life business career life ray kurzweil grew york city attended public education school born parents war diversity philosophy paths – education consisted single months moving father music visual artist kurzweil decided inventor age kurzweil construction electronic collected neighbors kurzweil reader science fiction literature age read entire swift series age built robotic theater robotic game involved computers age 12 1960 computers existed york city built computing devices statistical programs predecessor head start age kurzweil wrote paper theory parents involved arts documentary produced future technology kurzweil attended martin van school class held class participate focused projects hidden book engineer bell labs taught kurzweil science 1963 age 15 wrote program created pattern recognition software analyzed classical synthesized 1965 invited television program secret performed piece composed built prize international science fair kurzweil westinghouse search program projects national winners allowed president white house activities kurzweil belief overcome mid life school kurzweil minsky invited mit kurzweil science literature 1970 mit mit study minsky programming courses offered mit 1968 mit kurzweil started company program match school students program called select college program designed compared thousands criteria college answers submitted student time sold company 100 000 roughly 000 2013 1974 kurzweil founded kurzweil products led development optical character recognition program capable recognizing written normal time scanners read written fonts decided application technology create reading machine blind people understand written read device required enabling ccd scanner speech synthesizer development technologies completed institutions bell labs january 13 1976 finished product unveiled news conference headed national blind called kurzweil reading machine device covered entire kurzweil major business venture 1978 kurzweil products selling commercial version optical character recognition program customers bought program paper legal news documents online databases kurzweil sold kurzweil products legal subsidiary xerox communications 1995 kurzweil business venture electronic music technology 1982 meeting divide capabilities electronic traditional musical instruments kurzweil inspired create generation music capable accurately sounds real instruments kurzweil music systems founded 1984 kurzweil unveiled machine capable instruments tests unable difference kurzweil mode normal grand recording abilities machine coupled abilities instruments single user play entire piece kurzweil music systems sold south korean musical instrument manufacturer 1990 xerox kurzweil remained acquired 2006 january 2007 raymond kurzweil chief strategy kurzweil music systems life concurrent kurzweil music systems kurzweil created company kurzweil applied intelligence develop speech recognition systems commercial product debuted 1987 speech recognition program kurzweil started kurzweil educational systems 1996 develop pattern recognition based technologies people attention school products include kurzweil 1000 speech software program enables read electronic scanned blind visually users kurzweil program electronic learning helps reading writing study skills 1990s kurzweil founded medical learning company company products included interactive education program simulated patient time kurzweil started featuring programs assist creative art process offer program called visual art synthesizer developed kurzweil automatically creates period started devoted news scientific developments ideas tech critics discussion population mind forum 1999 kurzweil created fund called financial transactions kurzweil adaptive technologies 2006 stated ultimate aim improve performance investment software program ability recognize patterns stock ownership trends predicted 1999 book age machines computers day prove superior human financial investment decisions june 2005 kurzweil introduced kurzweil national blind reader reader pocket sized device consisting digital camera unit kurzweil reading machine 30 reader designed aid blind people reading written machine portable scans digital camera images machine scans scanning december 2012 kurzweil hired google time position projects involving machine learning language processing hired google founder kurzweil agreed sentence job description bring natural language understanding google received technical february 2015 recognizing diverse technical creative purposes notable kurzweil kurzweil joined life extension foundation company event declared death kurzweil plans liquid stored facility future medical technology repair personal life kurzweil existence possibility intelligence kurzweil exist kurzweil kurzweil 1975 children kurzweil private practice newton massachusetts women children parents families holds faculty harvard medical school william james college graduate education publications practice kurzweil serves active boston children museum kurzweil venture kurzweil writer kurzweil writer allen kurzweil creative approach kurzweil fail department timing enabling factors play lot wave moment decades kurzweil effective common approach creative conducted claims constructed solved difficult algorithmic business strategy written books kurzweil book age intelligent machines published 1990 history artificial intelligence future developments experts field contribute heavily form association american awarded status outstanding science book 1990 1993 kurzweil published book called solution life book main idea levels fat health common cutting fat consumption total optimal people 1999 kurzweil published age machines theories future technology stem analysis term trends biological technological evolution emphasis development future architecture kurzweil book published 2004 returned human health medical alternative medicine singularity published 2005 movie february 2007 acquired rights singularity age machines including rights film kurzweil life ideas documentary film directed steps living follow released april 28 2009 kurzweil book create mind secret human revealed released 13 2012 kurzweil describes pattern recognition theory mind theory hierarchical pattern argues architecture machines lead artificial kurzweil book fiction intelligence real book materials ideas provide real context book set release january 2019 movies kurzweil wrote produced movie directed called singularity true story future 2010 based 2005 book singularity fiction fiction 20 minsky story ideas avatar robots addition movie independent feature documentary kurzweil life ideas called kurzweil global speaking 2009 film documents kurzweil ultimate ideas york times book singularity including concept exponential growth life expansion biology documented kurzweil stated goal bringing late father film features critics argue kurzweil predictions 2010 independent documentary film called plug international film kurzweil major critics late argue benefits life feature documentary film singularity independent released 2012 kurzweil scale achievement documentation counter documentary singularity kurzweil frequently comments application cell size nanotechnology human brain applied building february 2009 issue magazine kurzweil expressed construct genetic late father kurzweil dna achieved extraction dna constructing clone memories ray father kurzweil father records notes pictures maintain father ray 200 day meant ray devices scale eventually replace blood cell updating specific improve views law returns 1999 book age machines kurzweil proposed law returns rate change wide variety evolutionary systems including growth technologies increase exponentially focus issue 2001 entitled law returns proposed extension moore law wide variety technologies argue favor concept technological singularity kurzweil suggests exponential technological growth counter humans living linear consequence claims encouraged future projections future nanotechnology robotics kurzweil science board 2006 develop rapid response deal suggested technologies biology cancer heart disease biological suggests scientific tools attacks software subject nanotechnology nanotechnology potential solve global disease change global media kurzweil extreme potential nanotechnology argues practice progress stopped require attempt drive dangerous technologies responsible scientists tools defense suggests proper regulation ensure technological progress benefits stated avoid replication level priority continuing advance technologies technologies strategy include process global program monitoring unknown biological temporary public international cooperation software values tolerance respect knowledge diversity health kurzweil health age 35 suffer form type major risk factor heart disease kurzweil shares develop extreme involving hundreds chemical red methods attempt live kurzweil 250 glasses water green day glasses red week effort 2008 reduced 150 kurzweil claims health book singularity claimed brought level raised density 30 55 11 claimed protein heart disease conditions ideal levels claimed health including dramatically reducing fat type singularity written books subjects health solution life steps living people emulate health abilities kurzweil current anti websites book kurzweil future live 2013 interview 15 medical technology add remaining life passes supported foundation approach finding repair damage encouraged public kurzweil view human kurzweil creating synthetic based operating principles human primary purpose claims human consists 300 pattern commonly accepted belief primary difference humans allowed superior intellectual abilities evolution larger claims layered deals increasing abstraction layer levels mechanical simple decisions levels hierarchy dealing concepts sentiment creating understanding claims levels human enabling factors permit human development language technology art science stated quantitative improvement humans enabling factor language technology art science quantitative increase 300 pattern kurzweil led singularity organizations december 2004 kurzweil joined advisory board machine intelligence institute october 2005 kurzweil joined scientific advisory board foundation 13 2006 kurzweil speaker singularity stanford university california 2013 kurzweil speaker 2013 innovation start rise international conference korea february 2009 kurzweil collaboration google nasa center view california announced creation singularity university training center corporate government university mission understand facilitate development exponentially technologies apply focus guide tools address humanity grand challenges singularity concept foundation university offered week graduate program 40 students june 2009 predictions predictions kurzweil book age intelligent machines ideas future written 1986 1989 published 1990 building technologies freedom 1983 kurzweil claims union technologies cellular phones machines removing control flow book kurzweil trends improvement chess software performance predict computers beat human players 2000 1997 chess champion ibm deep blue chess match kurzweil growth worldwide internet 1990s time publication age intelligent machines internet users medium difficult content stated internet users content eventually users access international networks libraries data bases services additionally kurzweil claims correctly preferred mode internet access wireless systems correct estimate practical widespread century october 2010 kurzweil released report predictions format predictions book age intelligent machines 1990 age machines 1999 singularity 2005 total predictions kurzweil claims correct 12 essentially correct 17 partially correct wrong adding essentially correct kurzweil claimed accuracy rate 86 writing magazine criticized kurzweil predictions wrong economy continuing 1998 dot 2009 company market supercomputer achieving 20 speech recognition widespread cars drive sensors installed 2009 charge 20 supercomputer produced time predicted kurzweil responded considers google supercomputer capable 20 kurzweil predictions 2009 claims magazine kurzweil predicted majority created continuous speech recognition future predictions 1999 kurzweil published book titled age machines depth ideas final book devoted predictions coming century 2009 singularity concrete short term predictions includes term life extension life enhancement option time 3d virtual environments real real reality direct interaction video games virtual reality highly believes 20 25 millions blood cell sized devices bodies improving memory cognitive abilities kurzweil machine pass turing change quick enhance intelligence merging intelligent machines creating kurzweil humans hybrid biological biological intelligence increasingly dominated biological component intelligent brain created expand reach decades human machine increasingly dominated biological component kurzweil humans start linking connected global network connected people filled data 2008 kurzweil expert panel national academy engineering solar power scale produce energy earth people 20 kurzweil capture 000 energy sun earth surface meet humanity energy reception kurzweil referred ultimate thinking machine wall street journal included kurzweil 16 america magazine ranked united called criticism idea technological singularity popular concept science fiction authors bruce real expressed views singularity scenario talk foundation entitled singularity future black prominent scientists david paul allen criticized kurzweil projections cover article december 2010 issue ieee spectrum john kurzweil predictions failed originally predicted kurzweil brand tech close successful predictions lack predictions sun microsystems kurzweil future progress technologies nanotechnology advanced create founder development corporation called notion technological singularity intelligent design people view driven arm critics argued kurzweil ideas cognitive scientist kurzweil books mixture ideas hard smart people criticized kurzweil predictions based age science kurzweil understand basic biology pioneer kurzweil ideas views culture surrounding kurzweil predictions edge entitled british john gray argues contemporary science sense achieve life kurzweil singularity trend history brain makers history artificial intelligence written 1994 hp born character people kurzweil technical ray kurzweil 2015 paper william yale university takes economic technological singularity comments writing singularity modern literature singularity demand supply market economy technology kurzweil suggests productivity trade resources producing super computers decrease production technology variety methods runs supply tests demand track technology output tests singularity predicted minimum 100 occur  
26201	computer	reduced instruction set risc instruction set architecture isa cycles instruction complex instruction set cisc precise definition risc concept set simple instructions set complex specialized instructions reason risc compiler common risc load store architecture memory accessed specific instructions instructions computers 1960s identified modern concept dates 1980s projects stanford university university california berkeley concept stanford mips successful mips architecture berkeley risc entire concept sparc success era ibm effort eventually led power architecture projects wide variety designs late 1980s 1990s representing major force unix workstation market embedded processors laser printers routers products risc designs include arc alpha arm mips risc power isa including powerpc risc sparc century arm architecture processors smartphones tablet computers ipad android devices wide user base risc based systems risc processors supercomputers fastest supercomputer ranked project history development alan turing automatic computing engine design characteristics risc architecture systems 1960s risc architecture partly based load store approach term risc coined david berkeley risc project concepts appeared designed cray 1964 load store architecture addressing modes register register register constant operation codes basic clock cycle times faster memory access time partly optimized load store architecture jack considered modern risc systems technical barriers overcome development modern risc michael views risc ibm design 1975 john completed 1980 eventually produced single chip form 1981 products division micro processor implies cpu designed mini tasks ibm rt pc 1986 commercial failure inspired projects including ibm eventually lead ibm power instruction set architecture public risc designs university programs funding darpa program program unknown led huge advances chip design graphics berkeley risc project started 1980 direction david carlo berkeley risc based performance pipelining technique register traditional cpu registers program register time cpu register windows huge registers 128 programs time program limits registers procedure fast procedure calls simply moves window set registers procedure return moves window berkeley risc project delivered risc processor 1982 consisting 44 transistors compared 100 000 cisc designs era risc 32 instructions completely single chip design 40 transistor instruction risc 1983 times fast risc mips project grew graduate john stanford university 1981 functioning 1983 simple programs 1984 mips approach clock cycle pipeline mips mips 1984 colleagues formed mips systems commercial venture architecture called mips microprocessor 1985 1980s risc concept commercial future mid 1980s concepts commercially 1986 hewlett packard started implementation risc computers berkeley risc effort eventually entire concept 1987 sun microsystems systems sparc processor based berkeley risc government committee innovations computing communications acceptance risc concept success sparc success sparc ibm released risc systems 1990 1995 risc processors foundation 15 server industry 2010 source instruction set architecture isa risc development university california berkeley purposes alternative proprietary 2014 version user space isa fixed isa designed core sufficient embedded processor supercomputer cloud computing standard chip designer defined extensions coprocessors tested silicon design soc source processor generator language characteristics design philosophy instruction set philosophy common phrase reduced instruction set idea instructions simply eliminated set instructions risc instruction sets grown size larger set instructions cisc cpus risc processors powerpc instruction sets cisc ibm 370 conversely dec pdp cisc cpu instructions involve multiple memory basic instructions extended instructions term reduced phrase intended single instruction single data memory complex instructions cisc cpus require data memory cycles execute single instruction risc processors typically separate instructions data processing term load store architecture preferred instruction format risc architectures fixed instructions commonly 32 bits simple encoding fetch decode issue logic considerably 32 bit instructions reduced code density characteristic embedded computing workstation server markets risc architectures originally designed serve address architectures arm power isa mips risc optional short feature reduced instruction format instruction compression feature pattern evolved direction media instructions original 16 bit encoding hardware utilization level performance risc chip typically transistors dedicated core logic originally allowed designers increase size register set increase internal parallelism features typically risc architectures risc designs feature harvard memory model instruction stream data stream separated modifying memory code held instructions executed processor cpu separate instruction data cache special synchronization instruction issued caches accessed simultaneously improve performance risc designs shared characteristic branch delay slot branch delay slot instruction space jump branch instruction space executed branch branch delayed instruction alu cpu extra time perform branch branch delay slot considered strategy implementing risc designs modern risc designs powerpc versions sparc mips aspects attributed risc labeled designs 1975 include observations memory restricted compilers time unable advantage features intended facilitate manual assembly coding complex addressing modes cycles perform required additional memory accesses argued functions performed sequences simpler instructions yield implementations leave registers reducing slow memory accesses simple designs instructions uniform structure arithmetic operations restricted cpu registers separate load store instructions access memory properties enable balancing pipeline stages risc pipelines efficient allowing clock frequencies days industry programming assembly language machine code encouraged powerful easy instructions cpu designers instructions feasible advent level languages started create dedicated instructions implement central mechanisms languages goal provide addressing mode instruction ease compiler implementation arithmetic operations operands memory addition register time hardware design compiler design reason implement functionality hardware microcode memory constrained compiler generated code advent risc philosophy complex instruction set computing cisc cpus registers reasons force complexity limited main memories code density held leading features highly encoded variable instructions data loading calculation mentioned issues priority ease decoding instructions equally reason main memories slow common type core memory reduce frequency cpu access slow resource modern computers limiting factors main memories slow compared cpu fast cache memories employed overcome limited size partly explain highly encoded instruction sets proven risc designs modern computers risc developed alternative cisc strategies implemented alternatives risc cisc examples instruction word vliw minimal instruction set mid 1970s researchers john ibm projects demonstrated majority combinations orthogonal addressing modes instructions programs generated compilers time proved difficult write compiler limited ability advantage features conventional cpus discovered implementations architectures complex operations slower sequence simpler operations designs time optimize instruction optimized sequence instructions faster tuned instruction performing equivalent operation sequence vax codice instruction mentioned core memory slower cpu designs advent semiconductor memory reduced difference apparent registers caches cpu operating frequencies additional registers require chip board time 1975 complexity cpu logic reduced risc designs practical measurements real programs andrew tanenbaum processors instance 98 program fit 13 bits cpu designs dedicated 16 32 bits store suggests reduce memory accesses fixed machine store unused bits instruction word ready cpu addressing conventional design required leave sized constant 32 bit instruction word real programs time executing simple operations researchers decided focus operations fast clock rate cpu limited time takes execute operation instruction decreasing cycle time execution instructions focus reduced instructions led machine called reduced instruction set risc goal instructions simple easily pipelined achieve single clock throughput frequencies characteristics risc processors external memory accessible load store instruction instructions limited internal registers simplified aspects processor design allowing instructions fixed pipelines logic dealing delay memory access cache instructions led risc designs referred load store architectures issue complex instructions difficult fault incorrect machine hidden remains load store machine program counter sufficient machine main distinguishing feature risc instruction set optimized highly regular instruction pipeline flow features delay slots separate instruction data caches load store architecture register set random features helpful maintaining regular pipeline flow instruction clock cycle comparison architectures cpus designed set instructions – designs classic risc designs names minimal instruction set transport architecture risc architectures traditionally desktop pc server markets x86 based platforms remain dominant processor architecture change arm architecture based processors developed performance systems manufacturers including amd qualcomm released arm architecture based server processors arm cray 2017 produce arm architecture based supercomputer desktop announced partnership qualcomm planned support pc version windows qualcomm based devices 2017 devices support x86 based software x86 processor emulator desktop arena arm architecture risc widespread smartphones tablets forms embedded device pentium pro intel internal risc processor core processors risc designs contemporary cisc designs 2000 performing cpus risc performing cpus cisc risc architectures risc architectures wide range platforms cellular tablet computers fastest supercomputers fastest list mobile systems century majority mobile systems risc architectures examples include  
27802	computer	papert february 29 – july 31 2016 south born american mathematician scientist spent career teaching mit artificial intelligence movement education inventor logo programming language education papert attended university receiving bachelor arts degree philosophy 1949 phd mathematics 1952 receive mathematics university cambridge 1959 supervised career papert researcher variety including john college cambridge institute university paris university national physical laboratory london associate mit 1963 held position 1967 professor applied math director mit artificial intelligence laboratory founding director professor minsky 1981 served green professor education mit 1974 1981 papert learning theories focusing impact technologies learning schools learning organizations mit papert create learning mit architecture machine mit media lab developer theory learning called built learning theories papert university 1963 ideas papert papert schools based theories learning logo papert development logo programming language mit created logo tool improve children solve mobile robot called logo developed children solve simple environment play main purpose logo foundation ability learn knowledge papert simple language program children advanced functionality expert users technology papert knowledge machine laptop child initiative manufacture children machine developing nations papert construction toy manufacturer lego logo programmable lego robotics kits named 1980 book personal life leading figure circle review living london 1950s papert prominent south policies university education papert papert mit professor wrote influential paper concrete final 24 papert russian author life russian land accident papert 78 received brain motor december 2006 street international commission mathematical instruction study conference vietnam emergency surgery remove blood french hospital transferred complex operation air jet boston massachusetts moved hospital closer january 2007 heart replaced 2008 returned communicate walk complicated speech extensive support team principles hands learning papert blue hill july 31 2016 awards legacy papert researchers fields education science influenced design study knowledge development 1981 papert logo mit started logo systems board chair 20 papert designed award winning programs including lego logo marketed lego influenced articles book advisory board company influenced alan kay concept kay projects papert 1980 international 1981 software association achievement award 1994 award 1997 papert called minsky living mathematics mit president papert mind range papert helped fields study children sense development artificial intelligence rich technology learning left mit mit continues expand reach digital learning vision build ideas  
29071	computer	sunos unix branded operating developed sun microsystems workstation server systems sunos refer versions based bsd versions based unix release marketed brand solaris history supported sun series systems including sun systems upgraded sun cpu boards supported sun sun series systems supported sun release sun sun sparc architectures intended release support sun sparc processor release preliminary support sun systems sunos introduced support sun architecture multiprocessor machines series single lock kernel cpu time execute kernel release solaris 1994 architectures supported supported sun continued ship sunos december 27 1998 supported september 30 2003 sunos solaris 1987 corporation sun announced project merge popular unix market time bsd including features unique sunos release svr4 september 1991 sun announced major os release switch bsd derived source base based svr4 internal release sun marketing solaris sunos desktop environment network computing functionality svr4 based os expected ship volume sun solaris refer sunos release including sunos sunos considered micro versions continued released 1994 solaris equivalent practice referred customers sun sunos release names matching version straightforward solaris sunos visible os startup output command matching release solaris marketing simple solaris release includes minor version incorporated dropped solaris sunos minor appears solaris release named solaris 11 incorporates 11 user interface gui environments bundled earlier versions sunos included news 1989 sun released compliant based environment supported news applications default sunos gui  
29279	computer	siggraph special graphics interactive techniques annual conference graphics acm siggraph organization siggraph conference 1974 conference attended tens thousands professionals conferences held los angeles boston north america siggraph asia conference held 2008 countries strength siggraph set overview conference animation theater electronic theater presentations created films played floor companies set compete attention companies engineering graphics motion picture video game industries schools graphics papers siggraph considered forum publication graphics paper acceptance rate siggraph 26 submitted papers peer reviewed single blind process criticism siggraph paper incremental progress papers accepted presentation siggraph printed 2003 special issue acm transactions graphics journal prior 1992 siggraph papers printed graphics publication 1993 2001 dedicated siggraph conference proceedings series publications addition papers numerous panels industry experts set wide variety topics graphics machine education siggraph offers day courses art graphics topics shorter presentations artists researchers 1984 john animated short siggraph animated short debuted 1986 debuted numerous shorts conference siggraph awards programs recognize outstanding contributions graphics award outstanding creative contributions graphics awarded 1983 recognize individual achievement graphics conference conference scheduled siggraph 2012 conference vary annually  
29468	computer	speech recognition inter field computational linguistics technologies enables recognition translation spoken language computers automatic speech recognition speech recognition speech incorporates knowledge linguistics science electrical engineering fields speech recognition systems require training called individual speaker reads isolated vocabulary person specific voice fine recognition person speech increased accuracy systems training called speaker independent systems systems training called speaker dependent speech recognition applications include voice user interfaces voice routing control search spoken simple data entry entering credit card structured documents report determining speaker characteristics speech processing word processors aircraft termed direct voice input term voice recognition speaker identification refers identifying speaker recognizing speaker simplify task translating speech systems trained specific person voice identity speaker security process technology perspective speech recognition history waves major innovations field advances deep learning data advances academic papers published field worldwide industry adoption variety deep learning methods designing speech recognition systems speech industry players include google ibm apple amazon core technology speech recognition systems based deep learning history key growth vocabulary size speaker independence processing speed pre 1970 person continuous speech recognition graduate student stanford university late 1960s previous systems required users word issued spoken commands playing game chess time researchers invented dynamic time algorithm create recognizer capable operating 200 word vocabulary processed speech short frames segments processing frame single unit algorithms technique carried achieving speaker independence remained time period 1970 1990 late 1960s developed mathematics markov institute defense analysis decade students james hidden markov model hmm speech recognition james learned summer job institute defense analysis education allowed researchers combine sources knowledge language syntax unified probabilistic model practical speech recognition 1980s introduction gram language model progress field rapidly increasing capabilities computers darpa program 1976 researchers pdp mb ram 100 minutes decode 30 speech practical products vocabulary typical commercial speech recognition larger average human vocabulary student huang developed speaker independent vocabulary continuous speech recognition performance darpa 1992 evaluation handling continuous speech vocabulary major milestone history speech recognition huang speech recognition 1993 student lee joined apple 1992 helped develop speech interface prototype apple based speech recognition company acquired companies including kurzweil applied intelligence 1997 systems 2000 speech technology windows xp operating industry leader brought company 2001 speech technology bought 2005 apple originally licensed software provide speech recognition capability digital assistant siri 2000s 2000s darpa sponsored speech recognition programs effective speech 2002 global autonomous language teams participated program ibm team led cambridge university team composed sri university washington funded collection telephone speech corpus hours recorded conversations 500 speakers program focused broadcast news speech google effort speech recognition 2007 researchers product telephone based directory service produced valuable data helped google improve recognition systems google voice search supported 30 languages united national security agency type speech recognition 2006 technology analysts search volumes recorded conversations indexed analysts queries database conversations government programs focused intelligence applications speech recognition darpa program program 2000s speech recognition dominated traditional approaches hidden markov models combined feedforward artificial neural networks aspects speech recognition deep learning method called short term memory lstm recurrent neural network published 1997 lstm rnns avoid vanishing gradient learn deep learning tasks require memories events happened thousands discrete time steps speech 2007 lstm trained temporal classification ctc started traditional speech recognition applications 2015 google speech recognition experienced performance jump 49 ctc trained lstm google voice smartphone users deep feedforward recurrent networks acoustic modeling introduced 2009 hinton students university toronto colleagues initially collaborative university toronto subsequently expanded include ibm google shared views 2012 review paper executive called innovation change accuracy 1979 contrast incremental improvements decades application deep learning word error rate 30 innovation field researchers begun deep learning techniques language modeling history speech recognition shallow form deep form recurrent nets artificial neural networks explored 1980s 1990s 2000s methods uniform internal gaussian mixture model hidden markov model hmm technology based generative models speech trained key difficulties analyzed 1990s including gradient weak temporal correlation structure neural predictive models difficulties addition lack training data computing power days speech recognition researchers understood barriers subsequently moved neural nets generative modeling approaches deep learning starting overcome difficulties hinton reviewed history collaboration colleagues university toronto google ibm applications deep feedforward neural networks speech recognition 2010s 2010s speech recognition called voice recognition speaker recognition speaker independence considered major systems required training period 1987 carried finally – children train respond voice models methods algorithms acoustic modeling language modeling modern based speech recognition algorithms hidden markov models systems language modeling natural language processing applications document classification statistical machine translation hidden markov models modern purpose speech recognition systems based hidden markov models statistical models output sequence symbols speech recognition speech signal viewed stationary signal short time stationary signal short time scale speech approximated stationary process speech markov model stochastic purposes reason popular trained automatically simple computationally feasible speech recognition hidden markov model output sequence dimensional real valued vectors integer vectors consist coefficients fourier transform short time window speech spectrum transform coefficients hidden markov model tend statistical distribution mixture covariance likelihood observed vector word speech recognition systems output distribution hidden markov model sequence individual trained hidden markov models separate core elements common hmm based approach speech recognition modern speech recognition systems combinations standard techniques improve basic approach typical vocabulary context dependency left context hmm normalization speaker recording conditions speaker normalization vocal normalization female normalization maximum likelihood linear regression speaker adaptation features called coefficients capture speech dynamics addition linear analysis skip coefficients lda based projection linear analysis global semi tied variance transform maximum likelihood linear transform systems called discriminative training techniques purely statistical approach hmm parameter estimation optimize classification measure training data examples maximum mutual minimum classification error minimum phone error decoding speech term compute source sentence algorithm path choice dynamically creating combination hidden markov model includes acoustic language model combining finite approach improvement decoding set candidates keeping candidate function rate candidates pick score set candidates list list approach subset models lattice minimize bayes risk approximation source sentence probability sentence minimizes loss function sentence minimizes average distance sentences weighted estimated probability loss function distance distances specific tasks set maintain efficient algorithms score represented weighted finite edit distances represented finite assumptions dynamic time based speech recognition dynamic time approach historically speech recognition successful hmm based approach dynamic time algorithm measuring similarity sequences vary time speed instance similarities walking patterns detected video person walking walking observation applied video audio data linear representation analyzed application automatic speech recognition speaking speeds method optimal match sequences time series restrictions sequences linearly match sequence alignment method context hidden markov models neural networks neural networks emerged acoustic modeling approach late 1980s neural networks aspects speech recognition classification isolated word recognition speech recognition speaker recognition speaker adaptation contrast neural networks assumptions feature statistical properties recognition models speech recognition estimate probabilities speech feature segment neural networks discriminative training natural efficient manner assumptions statistics input features neural networks effectiveness short time units individual isolated neural networks rarely successful continuous recognition tasks lack ability model temporal dependencies lstm recurrent neural networks rnns time delay neural networks identify latent temporal dependencies perform task speech recognition deep neural networks effective manner feedforward neural networks model temporal dependencies alternative approach neural networks pre processing feature transformation dimensionality reduction hmm based recognition deep feedforward recurrent neural networks deep feedforward neural network artificial neural network multiple hidden layers units input output layers shallow neural networks model complex linear relationships architectures generate models extra layers enable composition features layers huge learning capacity potential modeling complex patterns speech data success vocabulary speech recognition occurred 2010 industrial researchers collaboration academic researchers output layers based context dependent hmm constructed decision trees overview articles fundamental principle deep learning hand feature engineering raw features principle explored architecture deep autoencoder raw linear filter bank features features stages fixed transformation true raw features speech produce larger scale speech recognition automatic speech recognition 2014 traditional based hmm based model approaches required separate components training pronunciation acoustic language model models jointly learn components speech recognizer valuable training process deployment process gram language model required hmm based systems typical gram language model takes memory deploy mobile devices modern commercial systems google apple 2017 deployed cloud require network connection opposed device locally attempt temporal classification ctc based systems introduced google deepmind university toronto 2014 model consisted recurrent neural networks ctc layer jointly rnn ctc model learns pronunciation acoustic model learning language conditional independence assumptions hmm ctc models learn map speech english characters models common rely separate language model clean expanded extremely datasets demonstrated commercial success chinese english 2016 university oxford sentence level reading model coupled rnn ctc architecture human level performance restricted grammar dataset scale cnn rnn ctc architecture 2018 google deepmind achieving times performance human experts alternative approach ctc based models attention based models attention based models introduced simultaneously carnegie mellon university google brain university 2016 model named spell acoustic signal attention signal character time ctc based models attention based models conditional independence assumptions learn components speech recognizer including pronunciation acoustic language model deployment carry language model practical deployment applications limited memory 2016 attention based models considerable success including ctc models external language model extensions proposed original model latent sequence proposed carnegie mellon university mit google brain word units natural english characters university oxford google deepmind extended watch spell handle reading human level performance applications car systems typically manual control input control steering wheel enables speech recognition driver audio audio window accept speech input recognition simple voice commands phone calls select radio stations play music compatible smartphone player music loaded flash drive voice recognition capabilities vary car model car models offer natural language speech recognition fixed set commands allowing driver sentences common phrases systems user set fixed command health care medical documentation health care sector speech recognition implemented medical documentation process speech recognition provider speech recognition engine recognized displayed spoken responsible editing document speech recognition provider digital dictation voice speech recognition machine recognized draft document original voice file editor draft edited report speech recognition industry major issues speech recognition healthcare american recovery 2009 substantial financial benefits utilize meaningful standards standards require substantial data maintained commonly referred electronic health record speech recognition naturally suited generation interpretation progress note summary gains speech recognition enter structured discrete data numeric values codes list controlled vocabulary minimal people operate keyboard mouse issue tailored advantage voice recognition capabilities interaction involves navigation user interface button heavily dependent keyboard mouse voice based navigation benefits contrast highly customized systems dictation implement voice macros phrases – normal report automatically default values generate vary type – ray contrast series alternative navigation hand speech recognition extraction studied form clinical sign paper data performance processing software development community clinical documentation language processing speech recognition software conjunction word processors benefits short term memory brain patients treated conducted determine cognitive benefits individuals treated techniques military performance aircraft substantial efforts devoted decade evaluation speech recognition aircraft note program speech recognition advanced technology integration 16 aircraft 16 vista program france aircraft programs dealing variety aircraft platforms programs speech operated aircraft applications including setting radio frequencies autopilot setting coordinates release parameters controlling flight display swedish flying 2004 recognition increasing loads report concluded adaptation greatly improved introduction models improve recognition scores expected effects broken english speakers speech caused recognizer expected restricted vocabulary proper syntax expected improve recognition accuracy service employs speaker dependent requiring pilot create template safety critical critical tasks release wide range functions voice commands confirmed visual feedback major design feature reduction pilot workload pilot assign targets aircraft simple voice commands commands speaker independent systems developed master lead systems produced word accuracy scores 98 achieving recognition accuracy noise environment jet environment acoustic noise severe environment noise levels pilot reduce acoustic noise microphone substantial evaluation programs carried decade speech recognition systems applications notably development activity royal aerospace france included speech recognition canada voice applications included control communication setting navigation systems control automated target applications issue voice impact pilot effectiveness reported tests represent demonstration environment remains speech recognition speech technology consistently achieve performance improvements operational settings training air traffic controllers training air traffic controllers represents application speech recognition systems training systems require person pseudo pilot voice controller controller conduct real situation speech recognition synthesis techniques offer potential eliminate person pseudo pilot reducing training support theory air controller tasks characterized highly structured speech primary output controller reducing difficulty speech recognition task practice rarely document 65 details phrases air traffic controllers document 150 examples phrases phrases supported simulation vendors speech recognition systems 500 000 navy international training organizations royal air force civil italy brazil canada speech recognition vendors telephony domains field telephony widespread field gaming simulation telephony systems contact centers integrating systems level integration word processing personal computing field document production expected increases improvement mobile processor speeds speech recognition practical smartphones speech user interface creating custom speech commands leading software vendors field google corporation voice command digital communications voice control technologies technology speech technology center technologies software voice translator usage education daily life language learning speech recognition learning language proper pronunciation addition person develop speaking skills students blind education vision benefit technology voice screen keyboard students physically disabled suffer upper handwriting typing school speech programs utilize speech recognition technology freely searching internet physically operate mouse keyboard speech recognition students learning increase writing concerns mechanics writing learning voice recognition software conjunction digital audio personal running word processing software proven positive short term memory capacity stroke individuals people people benefit speech recognition programs individuals hard speech recognition software automatically generate closed conversations conference services speech recognition people difficulty hands ranging involve conventional input devices people keyboard lot developed market speech recognition speech recognition telephony services telephone individuals learning paper communication essentially idea processed incorrectly causing paper benefit software technology bug proof idea speak hard disabled person rare learn technology person type technology question effectiveness product effective word depending technology word input wrong causing time wrong word performance performance speech recognition systems evaluated terms accuracy speed accuracy rated word error rate speed measured real time factor measures accuracy include single word error rate command success rate speech recognition machine complex vary terms pronunciation pitch volume speed speech background noise electrical characteristics accuracy speech recognition vary accuracy mentioned earlier article accuracy speech recognition vary depending factors speech sentences separated easier recognize speech isolated speech continuous speech naturally spoken sentences harder recognize speech isolated speech constraints represented grammar speech recognition multi pattern recognition task word legal word sequences errors level telephone speech sampling rate samples computed called frame analysis step neural network approaches explained sound produced air medium register machines basic sound creates wave descriptions amplitude strong frequency security concerns speech recognition attack operation activation spoken audio video broadcast devices offices start input action voice controlled devices accessible building building gain access personal calendar address book contents private messages documents user send messages online attacks demonstrated artificial sounds ultrasound attempt send commands nearby people adds speech music specific speech recognition recognizing music speech sounds command human sound command conferences journals popular speech recognition conferences held include europe ieee conferences field natural language processing include papers speech processing journals include ieee transactions speech audio processing renamed ieee transactions audio speech language processing 2014 renamed ieee acm transactions audio speech language merging acm publication speech language speech communication books books speech recognition acquire basic knowledge 1993 source statistical methods speech recognition spoken language processing 2001 huang speech edition published 2004 speech processing dynamic optimization oriented approach published 2003 updated textbook speech language processing 2008 martin art speaker recognition features processing classification techniques speech recognition comprehensive textbook speaker recognition depth source details theory practice techniques modern systems gained attention government sponsored darpa largest speech recognition project ongoing 2007 project involves speech recognition translation components accessible introduction speech recognition technology history audience book voice machine building computers understand speech 2012 book speech recognition automatic speech recognition deep learning approach written published 2014 highly mathematically oriented technical deep learning methods derived implemented modern speech recognition systems based deep learning methods book published earlier 2014 deep learning methods applications technical methodology focused overview based speech recognition context deep learning applications including speech recognition image recognition natural language processing retrieval processing learning software terms freely resources carnegie mellon university toolkit start learn speech recognition start resource book toolkit art techniques toolkit demonstration speech recognizer software resources list speech recognition software  
30984	computer	toyota market leader sales hybrid electric vehicles largest companies encourage mass market adoption hybrid vehicles toyota market leader hydrogen fuel cell vehicles cumulative global sales toyota lexus hybrid passenger car models achieved milestone january 2017 prius family selling hybrid units sold worldwide company founded toyoda father company toyota industries create automobiles earlier department toyota industries created product type engine passenger car 1936 toyota toyota motor corporation produces vehicles brands including toyota brand lexus holds 16 66 stake corporation stake joint china toyota toyota motor india toyota companies toyota largest japan corporate toyota headquartered toyota city main headquarters toyota located story building toyota 2006 head office toyota logo toyota motor toyota technical center 14 story building plant toyota plant mass production named plant adjacent location headquarters main headquarters building 2013 company head toyoda reported difficulties foreign employees headquarters lack city tokyo office located tokyo office located addition manufacturing automobiles toyota financial services toyota financial services division builds robots toyota motor company 1981 toyota motor announced plans merge sales entity toyota motor sales entities existed separate companies reconstruction japan toyoda toyota motor sales merger occurred 1982 president combined organization toyota motor corporation toyota motor corporation toyota motor corporation june 14 2013 toyota motor corporation announced external board corporation occurred meeting day additionally vice chairman replaced chairman chairman toyoda remains post president toyota publicly tokyo company code addition toyota foreign listed york stock exchange london stock exchange toyota publicly japan 1949 1999 reported financial statements toyota subsidiaries global ranking toyota earlier largest automotive manufacturer american motors ford produced time history vehicles ford 2005 2006 motors largest automotive manufacturer 2011 2011 fell position motors german history toyoda invented toyoda model automatic principle machine occurs toyota production built production patent automatic sold british company generating starting capital automobile development production toyota automobiles started division toyoda automatic devoted production automobiles direction founder toyoda vehicles passenger car truck toyota motor company established independent company originally sold toyoda family company founder toyoda april 1936 toyoda passenger car model completed sales price yen 400 yen cheaper ford cars september 1936 company public competition design logo 27 000 entries winning entry japanese letters toyoda circle toyoda family born preferred toyota write japanese visually simpler leaving considered sound compared toyoda changing company newly formed word company registered august toyota motor company september 1947 toyota sized vehicles sold vehicle sold included vehicles light truck light truck master word japanese article toyota size result naming contest toyota company organized 1947 toyota eventually entered american market 1957 received dropped american market continued markets mid 1960s 1960s begun import vehicles called 1964 25 light trucks response toyota motor honda motor building plants 1980s 1980s toyota received japanese quality control award start 1980s participating wide variety 1973 oil consumers market cars fuel economy american car manufacturers considered economy cars entry level product vehicles employed level quality price toyota held rear wheel drive designs production production wheel drive cars 1983 honda managed corolla built 1982 toyota motor company toyota motor sales merged company toyota motor corporation toyota entered joint venture motors called united motor manufacturing operating automobile manufacturing plant california factory motors plant closed tesla assembly plant toyota started establish brands 1980s launch division lexus 1989 1990s 1990s toyota branch producing compact cars adding larger vehicles including sized lines version launch iterations sports cars era major presence europe success toyota team europe corporation decided set toyota motor europe marketing engineering market vehicles toyota set base united kingdom company cars popular british drivers bases set 1999 company decided list york london stock 2000s 2001 toyota merged banks form bank japan government bad financial service agency listed magazine largest money losing corporations toyota chairman serving director time largest toyota result japan merged bank tokyo mitsubishi mitsubishi financial 2002 toyota managed enter team establish joint french companies toyota started producing cars france oriented north america introduced 2003 toyota ranked 2000 list leading companies 2005 2011 company global automobile sales quarter 2008 2007 toyota released update sized truck produced american texas motor trend named truck 2007 toyota car 2007 construction build ontario canada build toyota prius blue usa plant originally intended build toyota toyota decided plant princeton usa company success corolla 2010s 2011 toyota japanese automotive industry series natural 2011 led severe supplier base drop production severe 2011 season thailand japanese chosen thailand production base toyota estimated lost production 150 000 units production 000 units february 2014 announced toyota manufacturing vehicles engines australia 2017 decision based cost local manufacture competition local market company plans corporate functions 2017 head office remain port plant functions expected reduced 300 ford motor company motors suit production 2016 2017 global sales 2014 selling vehicles months june 30 2014 increase period previous recorded sales vehicles close august 2014 toyota announced cutting prices china 35 company response earlier month china national development commission toyota lexus policies industry wide investigation chinese considers prices sales november 2015 company announced artificial intelligence robotics 2016 toyota invested invested public march 2016 toyota create engines toyota engines august 27 2018 toyota announced investment 500 autonomous cars 2009 november 2009 2010 toyota cars trucks worldwide recall production sales pressure toyota issued reports vehicles experienced acceleration 2012 october 2012 toyota announced recall 43 vehicles worldwide power window switches largest recall ford motor company 1996 series 2009 2011 cars claims mechanics march 2014 toyota agreed pay fine public safety issues toyota lexus vehicles acceleration toyota agreed fault 2014 november 2014 toyota usa recall involving devices deploy event crash metal fragments vehicle vehicles united recall vehicles equipped released 2000 north america manufactured automotive manufacturing toyota offering repair vehicles worldwide fault air north american automobile manufacturers 2018 december 2018 toyota usa announced recall toyota lexus vehicles replaced company recall specific toyota lexus vehicles 2002 2005 recall announced initially scheduled recall december 2019 logo 1936 toyota entered passenger car market model held competition establish logo speed product receiving 27 000 entries selected additionally change toyota family toyoda believed sound stroke count japanese language original logo vehicles remains corporate japan guidelines existed brand toyota led worldwide marketing toyota introduced worldwide logo october 1989 company newly released lexus brand logo 1989 toyota gained worldwide recognition logo combine form letter stands toyota overlapping larger represents relationship customer company larger surrounding represents global expansion toyota technology potential future logo started printed material vehicles 1990 countries regions traditional chinese characters taiwan toyota countries simplified chinese characters china singapore toyota written chinese characters founding family toyoda japanese japan japan toyota maintains separate sales channels toyota sought hierarchical marketing approach methods north america implemented models exclusive locations sales channel established called toyota store toyota offers toyota century toyota 1955 store originally established sell toyota truck features mid range models toyota channel japan japanese toyota store toyota established 1961 sell toyota 1966 renamed toyota corolla store toyota sell toyota corolla chain focuses budget models toyota auto store toyota sales network established 1967 sell corolla toyota renamed toyota store 1998 vista clone called toyota vista toyota vista network replaced networks toyota toyota august 1998 lexus 2004 vista models lexus products toyota selling toyota toyota network teams targets toyota operated commercial called toyota toyota 1957 1988 sold commercial platform trucks buses toyota toyota products sold specific locations shared toyota store locations toyota acquired company 1967 starting 1980 sold corolla vista installed engines toyota store commercial products divided toyota store store locations 2012 selected japanese locations special called 86 north american toyota network called sell toyota 86 building marketing approach started branded products 2017 86 network racing sharing approach performance division toyota racing development providing 86 prius mark female toyota create named team team created idea meet total 47 representing japan list models retail channels models exclusive retail models prius sales channels retail tokyo century master prius corolla land land 86 classic origin mark prius mark 86 space mark mark mark origin prius corolla 86 corolla corolla corolla origin sports 800 corolla prius vista 86 sports toyota teams purchased naming rights including toyota official sponsor australia england board march 2015 toyota sponsor partner games form vehicles communications vehicles company strategy toyota management philosophy evolved company origins reflected terms manufacturing time production developing toyota values business methods toyota businesses worldwide approach manufacturing april 2001 toyota toyota 2001 expression values conduct guidelines toyota employees respect people continuous improvement toyota values conduct guidelines principles external toyota components toyota incorporates toyota production operations toyota recognized industry leader manufacturing production stories origin studied time distribution principles government training program training industry external toyota principles toyota toyota grown origins japan corporation largest automobile 2008 held title automobile 2006 increasing sales countries united headquarters toyota located country toyota city japan subsidiary toyota financial services lines business toyota brands include lexus corporation toyota toyota 51 16 heavy industries manufactures vehicles acquired motors november 2006 introducing technology products toyota introduced technologies including mass produced hybrid gasoline electric vehicles prius sold globally 2010 advanced guidance automatic speed controlled automatic buttons power economy shifting speed automatic transmission toyota toyota produced lexus automobiles consistently rank quality reliability power consumer reports led automobile time 2009 2005 toyota combined owned subsidiary motor company produced vehicles 500 000 produced toyota market share united market share europe vehicles market leader australia subsidiary market shares fast growing countries 2017 global 500 toyota largest company 2001 gained market share united toyota market share europe lexus brand market share compared market share segment leader months 2007 toyota owned subsidiary reported sales units toyota brand sales demand corolla difference performance attributed demand fuel efficient vehicles november 2006 toyota motor manufacturing texas facility san toyota experienced quality government japan recall 2007 toyota maintained 16 market share listed terms volume toyota century royal official car japanese family current japan toyota hit global financial 2008 forced december 2008 annual loss 70 january 2009 announced closure japanese plants 11 days reduce output vehicles toyoda president ceo company june 23 2009 replacing vice chairman replacing technology 2018 toyota regarded smart car technology innovation company invested robotics institute create vehicles robotics centre toyota launched driving car company called toyota institute advanced development automotive supplier denso toyota invested driverless car company build combined technology network 2019 toyota chinese technology firm build smart car company manufacturing oriented intelligence oriented worldwide presence toyota manufacturing vehicles local markets japan australia 2017 india sri canada indonesia south united kingdom united france brazil mexico thailand china vietnam russia toyota revenue regions march 31 2007 2002 toyota innovative international multi purpose vehicle project optimize global manufacturing supply systems trucks vehicles satisfy market demand countries worldwide called engines thailand gasoline engines indonesia manual india supply countries vehicle production vehicle assembly toyota plants thailand indonesia south main production bases supply asia europe america middle east vehicles toyota toyota north america toyota motor north america headquarters located texas operates holding company north america production engineering manufacturing headquarters located toyota canada production canada 1983 wheel plant british columbia employs roughly vehicle assembly plant cambridge ontario 1988 produces corolla compact cars matrix crossover vehicles lexus 300 workers assembly operation ontario manufacturing late 2008 2006 toyota subsidiary motors heavy truck plant 45 people producing 2000 trucks annually toyota presence united major assembly plants princeton san texas west blue toyota joint venture operation motors united motor manufacturing california 1984 2009 joint venture automotive started 2006 assembly plants manufactured toyota marketing sales distribution conducted separate subsidiary toyota motor sales started producing larger trucks truck market united toyota hybrid vehicles prius hybrid hybrid lexus products toyota plans offer motor options north american products including light trucks australia 1963 australia countries japan february 2014 toyota australia major production australia closure toyota plant completed october 2017 produced total vehicles peak october 2007 toyota manufactured 15 000 cars month toyota ford announced moves citing manufacturing costs product electric technology hybrid electric vehicles toyota market leader sales hybrid electric vehicles largest companies encourage mass market adoption hybrid vehicles commercially mass produce sell vehicles introduction toyota prius 1997 company eventually providing option main passenger cars lexus divisions producing hybrid vehicles labeled technology toyota cars hybrid drive lexus versions lexus hybrid drive cumulative global sales toyota lexus hybrid passenger car models passed milestone january 2017 prius family selling hybrid units sold worldwide toyota motor corporation 33 toyota lexus hybrid passenger car models plug hybrid 90 countries regions achieve annual sales units cumulative sales units prius selling hybrid gasoline electric car sales achieved unit milestone june 2013 cumulative sales 1997 units january 2017 prius selling hybrid car market passed milestone april 2011 cumulative sales prius japan reached mark august 2011 sales prius units japan 75 united cumulative hybrid sales prius introduction europe 2000 passed unit milestone november 2015 worldwide sales hybrid vehicles produced toyota reached vehicles 31 2007 mark reached august 2009 hybrids sold 50 countries hybrid sales milestone reached march 2013 2012 toyota lexus hybrid models sold units time units sold 2013 sold units sales milestone achieved december 2013 months unit milestone sales mark reached september 2014 selling hybrids months sales milestone achieved july 2015 months previous unit milestone sales mark reached april 2016 selling hybrids months milestone january 2017 time months toyota estimates january 31 2017 hybrids saved 66 gasoline 29 compared gasoline powered vehicles size gasoline powered vehicles size driving performance prius generations toyota hybrid includes prius prius prius prius hybrid generation toyota hybrid hybrid japan toyota hybrid toyota hybrid toyota hybrid europe models sold japan hybrid hybrid hybrid toyota toyota toyota hybrid toyota hybrid toyota corolla corolla toyota toyota toyota corolla hybrid toyota hybrid toyota hybrid 2011 introduced prius family prius prius japan prius europe prius toyota japan toyota prius plug hybrid released 2012 japan europe total vehicles sold quarter 2012 toyota prius family selling terms total global sales toyota corolla 300 800 units ford focus 000 units september 2012 prius selling car japan 16 months row toyota prius october 2012 units sold japan 2012 considered successful launch japanese market 20 prius model global sales 100 units january 2017 selling hybrid prius prius 200 units generations hybrid units sold worldwide january 2017 prius family variants japan selling market selling market ranking 000 units sold europe market units sold lexus hybrid consist lexus lexus ct lexus lexus lexus lexus global cumulative sales lexus brand hybrids reached 500 mark november 2012 sales milestone achieved march 2016 lexus selling lexus hybrid 000 units delivered worldwide lexus ct 800 units lexus 200 units plug hybrids toyota plug hybrid electric vehicle project 2007 road prototype vehicle france 2008 toyota prius plug demonstration vehicles government customers delivered japan late december 2009 models released 2010 200 units 18 european countries 2010 france germany largest 150 canada china australia participated global demonstration program production version toyota prius plug hybrid released japan january 2012 united late february europe late june 2012 global sales 75 400 prius 2012 north america leading regional market 42 units japan 22 100 units europe 500 units 100 units rest united country market leader 42 units delivered april 2016 leading european market netherlands units registered market total 27 prius sold worldwide allowing plug version rank sold plug electric car 2012 cumulative sales prius time selling plug electric car december 2014 production generation prius plug june 2015 prius plug hybrid ranked selling plug hybrid family prius plug ranking selling plug cars fell tesla model mitsubishi generation prius plug hybrid named toyota prius prime unveiled 2016 york international auto released november 2016 generation model 50 sales japan started february 15 2017 electric vehicles generation toyota ev united 1997 2003 request units sold vehicle discontinued total sold california meet vehicles mid 2012 500 units 2010 toyota launched collaboration tesla motors create electric vehicles toyota agreed purchase tesla common stock subsequent closing tesla planned initial public offering toyota assistance tesla built 35 converted phase vehicles demonstration evaluation program 2011 metal battery power train components supplied tesla motors toyota position tesla toyota investment toyota ev concept released september 2012 ev assembled toyota facility ontario regular gasoline version tesla built electric plant tesla factory california shipped canada ev sold california san francisco los angeles orange san production limited units period total sold retail customers production september 2014 prototype toyota ev ev 2011 motor ev successor ev electric vehicle based toyota chassis toyota produced generations ev concept cars ev production version concepts incorporating technological design models production version based ev iii concept 2011 tokyo motor launch ev announced 2012 toyota initial roll ev individual consumers decided focus customers car sharing programs ev scheduled produced plant toyota city august 2012 initial production planned limited units 400 japan 100 units 100 europe september 2012 toyota announced customers concerns range charging time production toyota japan limited 100 units special japan ev scheduled released countries december 2012 30 delivered university california march 2013 vehicle network enabled transport 2002 program serving transport community electric vehicles critical train station campus local business offices addition toyota announced electric vehicles company vice chairman current capabilities electric vehicles meet distance cars costs takes time charge toyota emphasis focused hybrid concept 21 hybrid gas electric models scheduled market 2015 toyota project called mobility network toyota road electric vehicle combines potential cars project france toyota city japan tokyo japan hydrogen fuel cell 2002 toyota development demonstration program toyota hybrid hydrogen fuel cell vehicle based toyota production toyota built bus based blue city floor bus toyota built prototypes concepts 1997 including toyota toyota toyota fuel cell concept car unveiled 2011 tokyo motor fuel cell stack including 70 pressure hydrogen deliver range japanese cycle toyota car planned launch 2015 august 2012 toyota announced plans start retail sales hydrogen fuel cell california 2015 toyota leader technology prototype hydrogen fuel cell vehicle november 2013 tokyo motor united january 2014 consumer electronics toyota hydrogen fuel cell vehicles sold commercially toyota japanese future unveiled november 2014 los angeles auto january 2015 announced production fuel cell vehicle increase units 2015 000 2016 000 2017 sales japan december 15 2014 price japanese government plans support fuel cell vehicles retail sales august 2015 price government initially california market release europe september 2015 initially germany countries 2017 germany starts 2015 toyota released patents promote global development hydrogen fuel cell technology cars 2009 toyota officially lists 70 models sold brand including trucks hybrids models produced passenger range toyota compact corolla mid size size include cars sold brand toyota range compact matrix toyota range size land include trucks toyota entered truck market 1947 sold japan limited markets 1954 renamed 1959 1968 compact continued simply markets famous extremely reliable trucks late 1970s road 300 000 extended versions eventually toyota continues produce names depending market success compact toyota decided attempt enter traditionally domestic dominated size market introducing 1993 model production 1998 traditional size feet engine characteristics compact proved reliable typical toyota sales toyota criticized traditional american size popular size truck essential engine additionally truck regular toyota addressed version mid 1995 1999 2000 model toyota replaced larger addressed american style size engine criticized short capacity concerns addressed larger 2007 stronger v6 engine option list 2010 captured 16 size market assembled san texas toyota assembled 150 000 standard double 70 000 max 2007 original produced company san facility united toyota produced standard double gasoline engine versions bbc featured virtually type vehicles 2009 company sold branded models lexus division ranging crossover type produced toyota brand included century limited edition model produced japan century royal toyota branded vehicles tend japan 1997 building previous partnership yamaha toyota created toyota building private ownership sold japan network japan 54 locations called toyota series 2017 labeled lexus brand starting 26 2017 toyota involved global series represent lexus brand sports car racing categories toyota engines auto japanese including super toyota racing series toyota runs driver development toyota drivers program funding future japanese toyota gmbh headquarters germany responsible toyota major development including championship championship series championship toyota success categories toyota entered engine supplier experienced drivers larger budget teams failed match success categories november 2009 toyota announced global economic situation 2018 24 hours toyota finally race toyota hybrid driven toyota driver drivers motor racing series selection 25 drivers participate race 2013 toyota racing development brought develop true performance racing toyota vehicles success tuning designing technology vehicles types racing united responsible toyota development forms include racing league lexus performance division automotive activities aerospace toyota mitsubishi aircraft corporation invested venture produce mitsubishi regional jet 2017 toyota studied market scaled produce proof concept aircraft 2002 toyota supports variety education safety organizations toyota include american red cross environmental action future national center family toyota usa foundation exists support education science technology engineering mathematics addition toyota improve processes operations food bank york city toyota supports variety japan toyota foundation takes global perspective providing human natural environments social education culture education toyota established toyota technological institute 1981 toyoda planned establish university toyota successful toyota technological institute founded toyota technological institute 2003 toyota toyota driving program toyota understanding summer exchange program toyota international program toyota toyota community scholars school students united program toyota funded contributed local education programs university robotics 2004 toyota playing robot toyota developing robots elderly care manufacturing entertainment specific toyota robotics elderly brain machine interface designed person control electric accurately real time mind controls left delay movement toyota played development robotic 2017 company introduced humanoid robot ability remotely controlled robot connected person 2017 version wires connection 2018 version distance toyota start businesses including machine technology toyota developed style machine called type designed user draw ideas art motion environmental record toyota leader friendly vehicle technologies notably ev produced 1997 2003 2012 toyota prius 1997 toyota implemented environmental action plan 2005 plan major involving environment corporation development design production sales plan directed reduction based society toyota released vehicle assessment systematic life cycle assessment vehicle environment including production usage assessment includes fuel efficiency noise vehicle recovery rate reduction environmental concern life cycle vehicle production 2008 marks toyota environmental activities grant program implemented 2001 2008 program consist global october 2006 toyota japanese market vehicle models automatic equipped drive indicator takes rate acceleration engine transmission efficiency speed vehicle operated fuel efficient manner drive indicator instrument panel lights individual vary depending traffic issues starting stopping vehicle total distance drive indicator improve fuel efficiency toyota friendly production company plans vehicles national park money fund environmental programs park program 23 vehicles national national foundation figures united national council continuing hidden health costs auto industry economy 2005 united awarded toyota motor engineering manufacturing north america energy star award 2007 2008 2009 2016 toyota recognized company clean 200 list largest clean energy companies 2007 toyota corporate average fuel economy average major manufacturers selling cars united sports car manufacturer cars models powered toyota engine average production sales note japan production 1987 global production 1998 global japanese production japanese sales 2001 include 2014 2016 total production sales japan production sales sales figures included labor death january 2006 chief engineer hybrid 45 heart failure february 2002 30 quality control manager june 2010 chinese june 21 2010 chinese labor happened toyoda toyoda toyota motor  
31093	computer	acm turing award annual prize association computing machinery acm individual selected contributions major technical field turing award recognized distinction science nobel prize computing award named alan turing british mathematician reader mathematics university turing key founder theoretical science artificial intelligence 2007 2013 award additional prize 250 000 financial support intel google 2014 award prize financial support google 1966 alan carnegie mellon university female allen ibm 2006  
31274	computer	science trie called digital tree tree prefix tree search tree data structure store dynamic set associative array strings binary search tree node tree stores key node position tree defines key node common prefix string node root string tend leaves nodes correspond node space optimized presentation prefix tree compact prefix tree listed nodes values complete english word arbitrary integer trie tree shaped deterministic finite automaton finite language generated trie automaton trie compressed deterministic finite automaton character strings algorithms adapted serve functions lists construct list digits shapes trie individual bits fixed binary integer memory address history 1959 term trie coined tree middle retrieval authors attempt distinguish tree applications replacement data structures discussed trie advantages binary search trees trie replace hash table advantages dictionary representation common application trie storing predictive dictionary mobile telephone applications advantage trie ability search insert entries storing dictionary required storage word required minimal deterministic finite automaton space trie identical branches trie correspond stored suited implementing approximate matching algorithms including spell checking software term indexing tree term stores trie data structure algorithms trie tree nodes supports insert operations returns key string insert string key trie insert time key simple node class represent nodes trie note codice dictionary characters node children terminal node represents complete string trie looked walking trie string inserted nodes suffix string contained trie sorting sorting set accomplished building trie pre printing leaves values algorithm form sort trie forms fundamental data structure 2007 fastest string sorting algorithm faster string sorting algorithms search special trie called suffix tree carry fast searches implementation strategies represent trade memory speed operations basic form linked set nodes node array child symbol alphabet english alphabet store 26 child alphabet bytes 256 simple terms memory alphabet bytes size 256 byte node requires storage overlap strings required nodes roughly combined stored strings nodes tree tend children structure space storing storage implementation technique called alphabet reduction original strings strings alphabet string bytes alternatively regarded string bit units stored trie node nodes worst storage requirements factor alternative implementation represents node links children node linked list node child node child set children represented binary search tree instance idea ternary search tree developed alternative avoid array 256 suggested store alphabet array 256 bits representing alphabet reducing dramatically size nodes normal character based trie individual bits effectively form binary tree implementations special cpu instruction set bit fixed key gcc codice 32 64 entry table item trie leading bits search testing subsequent bit key choosing codice item process sound slow cache local highly lack register dependencies performance modern execution cpus red black tree performs paper highly cache multiple pipeline tlb stalls modern cpus algorithm bound memory latency cpu speed comparison trie rarely accesses memory read avoiding smp cache overhead increasingly algorithm choice code performs rapid memory versions famous trie merging common branches yield performance gains conditions represent sparse subsets larger fixed set trie bit element position set key created string bits encode integral position element form missing branches detecting common patterns unused unique nodes bit strings stored compressed easily reducing size trie compression implementation fast lookup tables character properties include mapping tables greek letter pi lookup tables combination base combining characters german applications representation transforming sparse table code matrix combinations coordinates hyper matrix string key trie represent character compression consist detecting merging common columns hyper matrix dimension key avoid storing code element matrix column code exploited dimension hyper matrix stores start position dimension offset typically single byte stored vector sparse dimension layer level trie compressed separately implementations support data compression dynamic sparse compressed cost compressed segments split merged data compression update speed typical strategy limit range global comparing common branches sparse trie result compression transform trie directed graph reverse transform trie obvious shape determined form key chosen nodes compression compression strategy data structure single byte array approach node reducing memory requirements memory mapping virtual memory efficiently load data disk approach pack trie describes space efficient implementation sparse trie applied automatic node memory external memory trie variants suitable maintaining sets strings external memory including suffix trees combination trie tree called trie suggested task compared suffix trees limited supported operations compact performing update operations faster  
31358	computer	art programming comprehensive written donald knuth covers kinds programming algorithms analysis knuth project originally conceived single book 1962 volumes expected volume set published 1968 1969 1973 published volume appeared 2005 volume combining volume published 2011 volume released december 2015 volume mathematical links planned release september 2019 expected volume history winning westinghouse search knuth institute technology western university performance outstanding faculty award master science completion degree summer knuth hired burroughs corporation write compilers summer months entire knuth topic discussion mathematics department included richard knuth started write book compiler design 1962 realized scope book larger june 1965 knuth finished draft originally planned single volume hand written draft completed 1966 assumed hand written translate printed hand written translated printed meant book accepting project graduate student knuth received support richard scientific visiting john accepted knuth expanded plans expanded version book published volumes growth material plan volume expanded include volumes 1976 knuth edition volume requiring style type edition called hot type 1977 decided time creating suitable returned volumes offer called knuth reward check worth base 16 56 errors correction errors subsequent contributed highly nature publication characteristic volumes variation difficulty level difficulty ranges knuth reads series books dedicated type installed institute technology spent assembly language book examples books language called mix assembly language runs mix mix replaced risc version software gnu exists provide emulation mix architecture knuth considers assembly language speed memory usage algorithms critical response knuth awarded 1974 turing award major contributions analysis algorithms contributions art programming books continuous series title american scientist included 100 books shaped century science referring century science community regarded comprehensive treatment subject covers edition volume gates read knuth art programming send read york times referred defining english editions current editions current editions volume previous editions complete volumes volumes editions published pre pre published references  
31925	computer	ucsd pascal pascal programming language runs ucsd portable highly machine independent operating ucsd pascal released 1978 developed university california san ucsd ucsd pascal 1978 university california san ucsd institute systems developed ucsd pascal provide students common environment microcomputers campus dec pdp 11 minicomputers operating ucsd ucsd operating systems pc dos cp 86 ibm offered original ibm pc vendor microsystems application portability virtual machines 20 cpus ibm pc release predicted users applications purchased future computers running called universal operating pc magazine ucsd ibm pc stating review context written language simply produce code sell ibm pc lack applications expensive choices ibm offered ucsd option based dedicated word processing machine confused ibm word processing software native operating developed completely internally user programming notable extensions standard pascal include separately units string type extensions influenced design language accelerate string processing scanning array search pattern language extensions ucsd hosted ucsd pascal based code machine architecture contribution virtual machines extend code compiler intermediate language execution environment ucsd pascal machine optimized microcomputers addressing restricted 16 bit 64 memory james ucsd pascal key influence virtual machine design java virtual machine ucsd achieved machine independence defining virtual machine called machine pseudo machine users pascal machine ucsd documentation pseudo machine instruction set called code pseudo code student originally code phd thesis ucsd implementation derived pascal implementation ucsd implementation changed implementation byte oriented ucsd code optimized execution pascal programming language hardware platform code interpreter program written port entire tools versions included additional languages compiled code base apple offered fortran compiler written silicon software california producing code apple version located san offered development environment code hardware platforms including motorola 68000 370 pascal ucsd shares concepts current java platform virtual machine operating hardware differences programs written virtual machine provide cross platform support systems virtual machine complete operating target box operating ucsd pascal compiler distributed portable operating history ucsd 1974 idea ucsd believed computing platforms coming time difficult programming languages gain acceptance based ucsd pascal pascal release portable compiler pascal language programming ucsd introduced features improvements original pascal variable strings units independently compiled code idea included programming language ucsd pascal pascal release pascal ucsd version started pascal users pascal ucsd pascal subset pascal implemented pascal designed implementation language minimum subset compile fit function bootstrap kit pascal compilers ucsd strings basic implementation dependent features ucsd pascal features pascal language pascal subset notably pascal copied ucsd versions versions ucsd code engine ucsd pascal revision code engine machine meant change code language compiled code portable machine versions revision represented leading operating dot code represented revision running revision machine version original version officially distributed university california san pascal sources versions freely users patch revision stable version distributed microcomputers numerous versions included apple dec pdp 11 z80 based machines motorola 68000 ibm pc version pc restricted code segment stack data segment version removed code segment limit cost lot project era include dr mark allen richard richard mark john van iii custom version written western digital pascal included support parallel processes time version commercial version developed sold based version include version iii sell combination structure performance code interpreter competition native operating systems dropped product systems company formed users fans sales reasonable structure ucsd pascal gradually lost market native operating systems compilers 99 equipped code card commodore pet systems ucsd pascal user software innovative concept os pascal compiled include common software manual users modify source default era  
32478	computer	vim improved clone editor program unix written based source port editor released publicly 1991 vim designed command interface standalone application graphical user interface vim source software released license includes users software children license compatible gnu public license special allowing distribution modified copies gnu version version originally released vim developed cross platform supporting platforms 2006 popular editor linux journal readers 2015 stack developer survey popular editor popular development environment 2018 history vim 1988 publicly released vim 14 1991 vim based earlier editor atari created thompson vim improved vim extended version editor additional features designed helpful editing program source code originally changed release vim december 1993 reason changing vim feature set interface vim interface based commands user interface gui mode adds commonly commands functionality expressed command mode extension vim row advantage touch vim built accessible codice command vim users manual details vim features manual read vim online vim built facility codice command users query navigate commands features vim power extensively customized basic interface controlled options user define key called sequences internal user defined functions extend add functionality vim complex written vim internal scripting language vim supports scripting vim python scheme projects complex aimed vim tool specific task adding major behaviour examples include vim type editor users unix systems features improvements vim compatibility mode mode vim enhancements compatibility mode vim compatible defined single unix specification posix vim support mode visual mode vim compatible vim enhancements include completion comparison merging files comprehensive integrated extended regular expressions scripting languages native alternative scripting python including support graphical user interface limited integrated development environment features mouse interaction gui folding editing compressed files format files network protocols session spell checking split horizontal vertical windows multi language support syntax session command search position multiple level branching history editing sessions visual mode vim script vim script called scripting language built vim based editor language original editor versions vim commands control flow function definitions version vim script supports advanced data types lists dictionaries simple form object oriented programming built functions map filter basic form functional programming vim script version vim script written programming style vim macros sequence normal mode commands commands functions written vim script complex tasks extensions called commonly core vim functionality written vim script utilize interpreted languages python support compiled vim binary vim script files stored format file extension vim libraries vim script vim examples syntaxhighlight lang vim program vim script simple loop vim script syntaxhighlight availability originally unix operating systems vim ported operating systems including initial target platform atari beos dos windows starting windows 95 os os qnx risc os linux bsd classic mac os vim shipped apple macos independent ports vim android ios extension vim improve vim shares configuration syntax vim result file editors version released december 2015 compatible vim features project started 2014 vim community offering support level effort provide scripting integration modern project source code successful march 23 2014 supporting time developer development capabilities editor package managers install variety linux based operating systems  
32678	computer	vocoder voice encoder category voice human voice signal audio data compression multiplexing voice encryption voice transformation earliest type vocoder channel vocoder originally developed voice telecommunications applications idea code speech bandwidth audio data compression transmission encoder input passed filter band passed control signals transmitted decoder decoder applies amplitude control signals filter channels synthesis control signals change compared original speech bandwidth required transmit speech reduced speech channels share single communication channel radio channel cable multiplexing control signals voice transmission primary fashion secure radio communication advantage method encryption original signal filters receiving unit set filter configuration version original signal spectrum vocoder extensively electronic musical instrument decoder portion vocoder called independently speech synthesis theory human voice consists sounds generated closing vocal produces periodic basic sound filtered complicated produce differences content controlled creating wide variety sounds speech set sounds sounds created modified vocoder speech measuring spectral characteristics change time series signals representing modified frequencies time user simple terms signal split frequency bands larger accurate analysis level signal frequency band representation spectral energy content vocoder dramatically reduces store speech complete recording series speech vocoder simply process processing broadband noise source passing stage filters frequency content based originally recorded series frequency original voice signal distinct spectral characteristic discarded preserve purposes vocoder original encryption aid aspect process creating special voice effects popular music audio entertainment vocoder process parameters vocal model communication link bandwidth required transmit speech reduced analog typically analyze incoming signal splitting signal tuned frequency bands ranges carrier signal series tuned filters typical robot voice microphone carrier noise 20 bands amplitude individual analysis bands generates voltage control carrier bands result frequency components signal mapped carrier signal discrete amplitude frequency bands band channel frequencies analysis bands typical speech speech examples start letters sound mixed carrier output increase clarity result speech mechanical include generating sounds noise generator fundamental frequency channel vocoder algorithm components signal amplitude component simply phase component result voice methods phase vocoder history development vocoder started bell labs engineer granted patents march 21 1939 16 speech synthesis ability decoder voice operating introduced public building york fair consisted pair electronic noise generator sound source band filters variable gain vocal manual controllers including set pressure sensitive filter control pitch control diagram synthesizer filters controlled convert complex machine operate operator produce speech   demonstration vocoder vocoder built bell labs engineers level voice communications war field conducted james modern implementations record frequencies additional sounds compression vocoder systems standard speech recording systems capture frequencies frequencies speech typically sampling rate rate sampling resolution typically 12 bits sample resolution 16 standard final data rate range vocoder provide simulation voice data quality voice telephone networks final data rate voice quality quality data rates voice vocoder systems data rates voice quality drop rapidly vocoder systems nsa encryption systems developing linguistics computational neuroscience modern communication equipment voice storage devices based algorithms linear prediction based late 1970s musical implemented linear prediction target signal spectral estimated filter linear prediction coding filter replaces filter bank predecessor encoder signal spectrum decoder apply spectral shape target speech signal advantage type filtering location linear predictor spectral determined target signal precise allowed time period filtered contrast realized fixed filter banks spectral determined scope frequency band filtering disadvantages signals frequencies frequencies represented linear prediction filter primary reason coding methods compression voice wi vocoder developed bell laboratories 1995 subsequently complexity version developed secure vocoder competition notable enhancements wi university california holds core patents wi institutes hold additional patents patents wi implementation requires licensing effects music musical applications source musical sounds carrier fundamental frequency instance sound synthesizer input filter bank technique popular 1970s history german scientist special electronic voice synthesis published thesis electronic music speech synthesis sound synthesis founding studio electronic music attempts vocoder creating music synthesizer studio electronic music developed 1956 1959 3rd edition 2008   details electronic music studio museum 1968 robert developed solid musical electronic music studio university 1968 bruce built prototype vocoder named michael featured electronic record children released 1969 album electric released 1970   sample earlier vocoder 1970 robert built musical vocoder band device inspired vocoder designs originally called spectrum encoder decoder referred simply vocoder carrier signal modular synthesizer microphone input output band vocoder speech improved pass filter microphone device original speech coding application synthesizer vocoder provide vocal 1981 international hit single air appeared time time simply special featured aspect experimental electronic artists age music utilize vocoder comprehensive manner specific 1984 1980 1982 vocoder module live 1981 dvd track artists essential music extended phase examples include german send love star fusion late 1970s period 1982 vocoder vocoder popular music michael 1982 album song song background spoken heavily sound voice vocoder bridge features vocoder session michael vocoder major album 2011 martin vocoder processed stories 2014 features martin vocoder hidden track marks spot head recorded vocoder band atari variety live live academy 2002 digital audio technology red hot song vocoder consistent vocoder human voice instrument album 1997 random access memories 2013 convergence technological human voice identity musical project instance 1997 vocoder processed 2013 features mix natural processed human voices 2013 features vocoder voice effects arts robot voices element popular music 20th century methods producing variations include talk box auto   sample auto linear prediction speech synthesis   sample earlier based speech synthesis song synthesis john bell labs ibm song musical max scene   sample speech synthesis filter television production games robots computers robot voices created vocoder 2000 1980 version theme arranged recorded peter main generated vocoder vocoder create voice character series 1967 series closing theme 14 provide 1972 electronic music album electric switched attempt applying speech synthesis technique electronic music album featured electronic contemporary utilizing synthesized voices human voices 1974 utilized synthesized voices popular classical music album worldwide success helped electronic music album brain surgery 1973  
33292	computer	wire frame model visual presentation dimensional 3d physical object 3d graphics created edge physical object mathematically continuous smooth surfaces meet connecting object vertices straight lines curves object projected screen space drawing lines location edge term wire frame designers metal wire represent dimensional shape solid objects 3d wire frame construction manipulation solid surfaces 3d solid modeling technique efficiently quality representations conventional drawing wire frame model visualization underlying design structure 3d model traditional dimensional views drawings created rotation object selection hidden removal cutting wire frame simple fast calculate screen frame rate instance complex 3d model real time systems model phenomena graphical desired surface textures automatically completion initial rendering wire frame designer review object desired views delays realistic rendering wire frame format suited programming tool paths direct numerical control machine tools hand drawn wire frame italian wire frame models extensively video games represent 3d objects 1980s 1990s properly filled 3d objects complex calculate draw computers time wire frame models input aided manufacturing types 3d cad models wire frame abstract realistic types 3d cad models surface solid method modelling consists lines curves defining edges object introduction methods geometric modelling systems model represents shape solid object characteristic lines types modelling pro pro user simple input create shape developing systems model include boundary surfaces models define complex solid objects designer model solid object cad operator object including detailed analysis technique advantages dimensional solid objects complex models viewed dimension improving solid object modified designer geometry surface solid modelling designer consistent geometry details models require memory space cpu capacity simple model object tables vertex table edge table vertex table consists dimensional coordinate values vertex reference origin edge table specifies start vertices edge interpretation create wire frame representation simply drawing straight lines screen coordinates vertices edge list representations designed detailed rendering calculated required solid rendering calculations performed transform 3d coordinates vertices 2d screen coordinates  
37096	computer	floating unit fpu math coprocessor designed carry operations floating typical operations addition multiplication division square root systems microcode based architectures perform functions exponential calculations modern processors software library routines purpose architectures integrated execution units central processing unit embedded processors hardware support floating operations increasingly standard 32 bit cpu executing program calls floating operation carry history historically systems implemented floating coprocessor integrated unit addition cpu gpus coprocessors built cpu rule generations gpus single integrated circuit entire circuit board cabinet floating calculation hardware floating calculations software takes processor time avoids cost extra hardware architecture floating unit instructions library software functions permit object code systems floating hardware emulation implemented levels cpu microcode common practice operating function user space code integer functionality floating emulation methods commonly modern architectures division floating operations integer operations division varies architecture intel x86 dedicated floating registers independent schemes routines implemented intel coprocessor series motorola kinds floating instructions reduce gate counts complexity fpu floating operations pipelined earlier superscalar architectures execution floating operations pipelined separately integer operations 1990s microprocessors desktops servers fpu modular architecture microarchitecture special fpu named simultaneous multithreading physical integer core module single contrast intel virtual simultaneous threads share resources single physical core floating library floating hardware supports simplest operations addition multiplication complex floating hardware finite operations support support arbitrary precision arithmetic cpu executing program calls floating operation supported hardware cpu series simpler floating operations systems floating hardware cpu series simpler fixed arithmetic operations integer arithmetic logic unit software lists series operations emulate floating operations packaged floating library integrated specialized divided simpler floating operations addition multiplication complicated operations division simple operations implemented hardware microcode complex operations implemented software current architectures fpu functionality combined units perform simd computation instructions set instruction set x86 64 architecture intel amd processors add 1980s common ibm pc compatible microcomputers fpu separate cpu typically sold optional add purchased speed enable math intensive programs ibm pc based socket optional coprocessor based systems based machines exist companies manufactured processors intel x86 series included coprocessors motorola 68000 family common motorola based workstations sun series commonly models apple macintosh commodore series ibm pc compatible systems adding coprocessor common systems add coprocessor units microcontroller units single board serve provide floating arithmetic capability add host processor independent programming requirements operations instruction sets integrated development environments  
37545	computer	palm os garnet os discontinued mobile operating initially developed palm personal digital 1996 palm os designed ease touchscreen based graphical user interface suite basic applications personal management versions os extended support smartphones manufactured devices powered palm os palm purchase palm trademark licensed version access renamed garnet os 2007 access introduced successor garnet os called access linux platform 2009 main palm os palm switched palm os devices creator ownership palm os originally developed direction palm computing palm acquired robotics bought palm subsidiary independent publicly company march 2000 january 2002 palm set owned subsidiary develop license palm os named palm independent company october 28 2003 palm called regular palm os control operating september 2005 announced acquired access december 2006 palm gained rights palm os source code access palm modify licensed operating access 2005 acquisition rights palm brand palm publish releases operating palm os consequence january 25 2007 access announced change current palm os operating titled garnet os os overview palm os proprietary mobile operating designed 1996 palm computing pilot implemented wide array mobile devices including smartphones handheld gaming consoles readers gps devices palm os versions earlier motorola processors version palm os runs arm architecture based processors key features current palm os garnet included os set standard applications relevant mentioned operations version history technical background manufacturers implement features os devices add features version history describes officially licensed version palm access versions prior palm os based 68000 kernel licensed products kernel technically capable multitasking terms conditions license palm api creating tasks os palm os palm os original version pilot 1000 introduced march 1996 version features classic applications address book pad list included calculator security tool records private palm os ram file storage applications installed ram executed dedicated file supported operating depends constant ram cycles memory os supports output displays user input generated handwriting recognition virtual keyboard supports data synchronization pc technology serial interface release version palm os palm os introduced march 1997 personal professional version adds tcp ip network network display support release version applications mail standard applications enhanced palm os palm os introduced march 1998 launch palm iii series version adds infrared enhanced support version features updated applications update application palm os adds minor features network support introduced palm palm release version palm os adds support palm specific solution bring content screen introduced palm palm os adds faster speeds ability infrared introduced palm palm os version include native bit color support adds major features simplify operation context sensitive bar simpler menu activation application extended additional view version introduced palm device release version palm offered mobile internet kit software upgrade palm os included palm software renamed version 26 mail software version software version browser palm os palm os released palm series march 19 2001 version adds standard interface external file access cards external file systems change operating previous execution application code data loaded device ram desktop operating behavior universal usb support introduced previous optional mobile internet kit operating version adds attention manager coordinate applications user attention including sound led 16 bit color screens time supported version security ui enhancements palm os release introduced launch palm minor os update version includes palm os palm os simplified chinese edition targeted chinese market simplified chinese support released palm os device manufactured version palm os garnet palm os called unveiled palm subsidiary june 2002 implemented palm version support arm devices replaced kernel custom kernel named developer written house palm applications written prior os versions 68k instruction set supported palm application compatibility environment emulator garnet additional overhead palm applications faster arm devices previous generation hardware software advantage arm processors units arm code referred powerful hardware basis palm os adds substantial enhancements multimedia capabilities density screens supported digital sound record api palm separate bluetooth stack ieee 802 wi stack secure network connections supported os customized color schemes palm os developed licensed browser called browser based access browser palm os release implemented samsung march 2003 support resolutions introduced handwriting input called input xerox win palm based release version palm os simplified chinese edition released september 2003 simplified chinese support support resolutions standard api virtual called dynamic input version shipped palm os garnet updated bluetooth libraries support multiple screen resolutions ranging shipped november 2004 version introduced garnet distinguish palm os release version garnet os dropped palm current version developed access version dedicated garnet virtual machine garnet announced released access november 2007 core access linux platform emulator allowing nokia internet tablets applications written garnet os june 2010 access release garnet version garnet beta palm os palm os designated successor palm os introduced february 2004 offered access palm os renamed palm os version initially designated replace palm os palm os garnet time palm os introduced modern operating features embedded operating based kernel multitasking memory protection modern multimedia graphic framework derived palm acquired beos security features file formats outlook palm os standard communication libraries telecommunication wi bluetooth connectivity failed potential palm os party os enhancements custom modifications operating official licensed version attempting create modern successor palm os implement shipped palm os january 2004 release devices major improvements palm os release palm os september 2004 version lead production devices december 2004 announced os strategy acquisition mobile phone software company china planned port palm os linux kernel offering palm os garnet palm os strategy june 2005 device palm os announced announced development efforts product future linux based platform acquisition access palm os linux changed access linux platform announced february 2006 initial versions platform software development kits access linux platform officially released february 2007 january 2011 access linux platform ship devices development kits exists public palm main palm os garnet license access linux platform devices palm developed linux based operating called palm february 11 2009 palm ceo additional palm os devices released carriers palm focusing palm windows mobile devices april 2009 palm announced availability palm os emulator built applications palm os decide applications included palm os devices applications standard palm os applications note models standard apps address book pad replaced improved calendar tasks palm address program stores contact user categories entries displayed changed company slots phone mail designated mail main mobile slot changed app adds features addresses fields phone messaging quick connect palm standard function pocket calculator blue buttons red buttons supports square root percent memory option display running history calculations paper tape common book daily schedule simple view daily schedule hour user selected times creates event lines actual events start times default left margin calendar app adds features day view categories events event location event event details events supports events feature competitors event minutes hours days sound unit switched days weeks months notes common business calculated palm user host view data excel supplied user pc activated press physical button palm station application desktop pc install software backup databases merge pc handheld devices communicate pc physical connection usb models bluetooth wireless connections direct network connections devices networking capability addition developers create integration palm os applications desktop products time tracking package provide communicate palm os windows backup included software data palm os device users hard users palm devices palm os version feature helpful damage device models palm data storage volatile memory require constant power maintain memory attempt save contents memory battery situations leaving handheld extended period time power contents storage memory lost storage pad hold notes 000 characters app increases field size 30 manually user choose user categories pad drawings entered alphabet hardware software keyboards function palm devices palm users started create exchange pad documents list creates personal user list item priority categories organize view items logical attached note add description task list item priority category tasks app features improvements interface tasks preferences referred program files special panel type normal programs changed switching type vice versa palm os 15 panels default panels application panels users manage settings including settings sound settings network settings time security panel palm os devices palm os security settings include display hidden records device locked set automatic time threshold pc palm desktop honors pc programs view data protected files editor word processor common party core os applications starting palm os version palm created customized versions common application features support address categories users texts renamed reflect outlook address calendar pad list tasks browser palm versions palm os server version smartphone current version compliant major standards bundled smartphones palm devices capable accessing internet palm note pad quick drawings handwriting 20 30 fit pad choice sizes pen background color change feature models draw simple map advanced desktop version pad drawings desktop 2006 palm include photos creates digital photo album view pictures palm os device photo programs photos mobile devices photo labeled organized separate photo specific album photo album screen photos edited palm photos pc software windows photos transferred handheld photo palm photos software support video palm photos renamed media videos models feature ability voice voice viewed desktop voice application palm desktop suite party applications successful applications installed palm os device 2008 50 000 party applications palm os platform licensing types including source closed licensing schemes traditional pay purchase application development palm os garnet applications coded officially supported compilers exist commercial product development studio palm os source tool chain called tools based version gcc criticized expensive developed tools features version tools included palm os developer suite compiler programming editor runs palm palm os applications coded variation gcc compilers limitations development tools palm programming require level programming visual basic visual basic handheld basic forms satellite forms palm visual basic languages java virtual machine palm os platform 2008 01 12 palm announced palm alternate java virtual machine aware palm os derivative provide java virtual machine programming language version language called palm requires additional runtime installed application mainstream applications software companies iso standard compiler runs palm interactive console dynamic development debugging environments programming pascal palm os compiler runs handheld ide windows computers visual form designer generates files transferred option developed developer based experience speed pascal compiler 16 bit systems including commodore compiler palm connection drivers enable transfer data server oracle server programmer software enables connectivity roughly compatible implementation scheme palm platform licensed lisp palm os specific compiler produce code operates development environment restricted legal issues palm os involved  
39418	computer	moore law observation transistors integrated circuit observation named moore founder semiconductor ceo intel 1965 paper doubling components integrated circuit projected rate growth continue decade 1975 decade doubling period 18 months prediction intel executive david house combination transistors transistors faster moore prediction proved accurate decades semiconductor industry guide term planning set targets development digital electronics linked moore law quality adjusted microprocessor prices memory capacity sensors size pixels digital cameras digital electronics contributed economic growth late moore law describes driving force technological social change productivity economic growth moore law observation projection historical trend physical natural law rate held 1975 2012 rate faster decade sound historical growth rate future 2010 update international technology semiconductors predicted growth slow 2013 2015 moore rate progress reach moore law decade intel stated 2015 advancement starting 22 feature 2012 continuing 14 ceo intel announced closer intel stated 2017 continue trend moore law offset increased scaling typical doubling transistors cited moore 1975 revision current technical challenges natural history moore law history 1959 discussed projected integrated circuit size article art ideas 1960 international solid circuits conference moore audience issue electronics magazine published april 19 1965 moore director development semiconductor time predict happen semiconductor components industry response article entitled components integrated circuits 1975 65 000 components single quarter inch semiconductor complexity minimum component costs increased rate roughly factor short term rate expected continue increase term rate increase bit reason remain constant reasoning log linear relationship device complexity circuit density reduced cost time 1975 ieee international electron devices meeting moore rate semiconductor complexity continue double annually 1980 decrease rate doubling factors exponential behavior shortly 1975 professor term moore law popular moore predict doubling 18 months david house intel increasing performance transistors integrated circuits double performance moore law accepted goal industry cited competitive semiconductor manufacturers increase processing power moore viewed law moore law law observation rate improvement physical dimensions scaling industry shifted 2016 semiconductor scaling driver focus meeting major computing applications april 2005 intel offered 000 purchase original electronics issue moore article appeared engineer living united kingdom offer intel moore law cost power consumer falls cost producers moore law trend manufacturing costs increased generation chips manufacturing costs moore law led formulation moore law called law capital cost semiconductor increases exponentially time major enabling factors numerous innovations scientists engineers moore law integrated circuit era key innovations listed examples advanced integrated circuit technology magnitude decades industry technology road maps predicted 2001 moore law continue generations semiconductor chips depending doubling time calculations increase transistor count chip decade semiconductor industry technology doubling time microprocessors leading increase decade intel reported 2005 stating silicon chips continue decade 2008 predicting trend trends key challenges engineering future nanoscale transistors design gates device dimension controlling current flow channel difficult compared gate channel gate structure gate control technology advances moore law improved performance reduced feature size physical limits transistor scaling source limited gate limited options channel material reached continued scaling promising approaches rely spin electron advanced channel materials wire geometry comprehensive list device choices wide range device options continuing moore law decades spin based logic memory options developed industrial labs academic labs alternative materials vast majority current transistors ics composed silicon silicon single transistors short channel effects change desired material properties silicon functional transistor silicon transistors proposed material compared silicon transistors promising future speed power logic applications characteristics iii compound semiconductors quantum transistors based proposed alternatives traditional designs biological micro cells capable computational power energy efficient forms studied electronics transistors appearance publications 2008 band gap transistors constant edges introduce energy bands enables switching transistor typical desirable energy performed layers increases electron mobility decreases driving future application focus semiconductor industry including moore expect moore law april 2005 moore stated interview projection continue nature push eventually transistors eventually reach limits atomic levels 2016 international technology semiconductors moore law drive industry 1998 produced final centered development plan moore law called moore strategy applications drive chip development focus semiconductor scaling application drivers range smartphones data centers initiative generalized started ieee initiative computing named international devices systems technological change combination technology 2011 study journal science peak rate change capacity compute 1998 technological capacity compute purpose computers grew technological change times allowed humans carry roughly 60 computation executed existing purpose computers exponential rate technological change varies time primary driving force economic growth growth productivity moore law factors productivity moore 1995 expected rate technological progress controlled financial reverse occur late 1990s productivity growth key economic indicator innovation acceleration rate semiconductor progress contributed productivity growth reached richard notes numerous studies productivity acceleration technological innovations production semiconductors reduced prices components products capabilities products alternative source improved performance microarchitecture techniques exploiting growth transistor count execution chip caching reduce memory latency bottleneck transistors increasing processor complexity increases rule performance increases microarchitecture techniques approximate square root complexity transistors processor processor makers delivered increases clock rates instruction level parallelism single code executed faster processors modification manage cpu power dissipation processor makers favor multi core chip designs software written multi manner advantage hardware multi development paradigms introduce overhead linear increase speed processors true accessing shared dependent resources lock processors increases roughly 45 increase processor transistors translated roughly increase processing power hand processor manufacturers advantage extra space transistor add specialized processing units deal features graphics video cryptography intel parallel javascript extension adds support multiple cores processing features chips client scripting negative moore law technologies continue rapidly improve improvements render predecessor technologies rapidly situations security hardware data resources limited rapid pose obstacles smooth continued operations materials production modern computers properly managed lead environmental hand desirable company profit regular purchase expensive equipment device period time industry aware utilize planned method increasing moore law performance technologies michael wrote moore war apparent success days war progress development guided depends electronic technology improvements circuit density power operation moore law contributed development technologies including mobile printing observations measures digital technology improving exponential rates moore law including size cost density speed components moore wrote density components component transistor minimum cost transistors integrated circuit – popular formulation doubling transistors integrated circuits 1970s moore law limit transistors complex chips graph trend holds true density minimum cost transistor – formulation moore 1965 paper density transistors achieved density transistors cost transistor lowest transistors chip cost transistor decreases chance chip increases 1965 moore density transistors cost observed transistors advances increase rate roughly factor scaling – suggests power requirements proportional voltage current proportional transistors combined moore law performance grow roughly rate transistor density doubling scaling transistor dimensions scaled 30 technology generation reducing 50 reduces delay 30 increases operating frequency 40 finally electric field constant voltage reduced 30 reducing energy 65 power frequency 50 technology generation transistor density circuit 40 faster power consumption transistors exponential processor transistor growth predicted moore translate exponentially practical cpu performance scaling appears broken moore law continued improved performance primary reason cited sizes current challenges chip heat creates thermal increases energy costs scaling switch chip manufacturers focus processors gains offered switching cores gains achieved scaling continued scaling intel microprocessors gate 22 2012 faster power conventional transistor quality adjusted price equipment – price technology computers peripheral equipment adjusted quality 16 average decades 1959 2009 rate quality adjusted microprocessor price improvement varies linear log scale microprocessor price improvement accelerated late 1990s reaching 60 months typical 30 improvement rate earlier laptop microprocessors improved transistors chip explain quality adjusted microprocessor prices moore 1995 paper limit moore law strict transistor count definition moore law refer semiconductor industry semi log paper straight review origins definition hard disk drive density – observation called law 2005 hard disk drive density decades rapid progress density advancement 2010 noise size disk media thermal stability magnetic fields fiber optic capacity – bits optical fiber increases exponentially faster moore law law honor donald network capacity – head lucent optical networking bell labs version called law formulation moore law law data coming optical fiber doubling months cost bit optical network decreases months availability wavelength division multiplexing called increased capacity single fiber factor 100 optical networking wavelength division multiplexing rapidly bringing cost networking progress result price data traffic dot bubble law bandwidth users increases 50 annually pixels – australia pixels basic measure digital camera historical log scale market opportunity predict future trend digital camera price lcd led screens resolution moore law law – referred software principle successive generations software increase size complexity performance gains predicted moore law 2008 article intel introduces term successive versions office 2000 2007 gains computational performance time period moore law office 2007 performed task speed 2007 compared office 2000 2000 library expansion – calculated double capacity 16 sufficient space replacing printed analog photographs demand library institutions digital technology follow decades replace analog digital imaging storage transmission media automated digital technologies allowed vast increases growth era called age curve – term coined equivalent moore law named author rob accurately predicted doubling time dna technologies measured cost performance fast moore law curves illustrate rapid decreases cost increases performance variety technologies including dna dna synthesis range physical computational tools protein expression determining protein structures law – drug development observation written moore law contrast exponential forms technology transistors time cost developing drug roughly experience curve effects doubling cumulative production virtually product service approximate constant percentage reduction unit cost documented description dates power curve phenomenon 1936 discussion cost  
39434	computer	charles richard born 11 january british scientist developed sorting algorithm 1959 1960 developed logic program formal language sequential processes interactions concurrent processes including programming language education life born sri british parents father civil england school oxford king school studied philosophy college oxford 1956 18 months national service royal navy learned russian returned university oxford study statistics programming taught university british council exchange student studied machine translation career 1960 left union manufacturing firm located london implemented algol 60 developing major algorithms professor computing science university 1968 1977 returned oxford professor computing lead programming oxford university computing laboratory department science university oxford death professor principal researcher cambridge england sorting selection algorithm logic formal language sequential processes interactions concurrent processes structuring operating systems monitor concept specification programming languages speaking software conference called london 2009 reference oxford department formal specification languages achieve expected industry 1995 led reflect original assumptions personal 1962 team  
40254	computer	science operations genetic algorithm inspired process natural selection larger class evolutionary algorithms genetic algorithms commonly generate quality solutions optimization search inspired operators mutation crossover selection john introduced genetic algorithms 1960 based concept theory evolution student goldberg extended 1989 methodology optimization genetic algorithm population candidate solutions called individuals optimization evolved solutions candidate solution set properties altered traditionally solutions represented binary strings 1s evolution starts population randomly generated individuals iterative process population iteration called generation generation fitness individual population evaluated fitness objective function optimization solved fit individuals selected current population individual modified randomly form generation generation candidate solutions iteration algorithm commonly algorithm maximum generations produced fitness level reached population typical genetic algorithm requires standard representation candidate solution array bits arrays types structures essentially main property genetic representations convenient easily aligned fixed size simple crossover operations variable representations crossover implementation complex tree representations explored genetic programming graph form representations explored evolutionary programming mix linear trees explored gene expression programming genetic representation fitness function defined population solutions improve application mutation crossover selection operators population size depends nature typically hundreds thousands solutions initial population generated randomly allowing entire range solutions search space occasionally solutions optimal solutions selection successive generation portion existing population selected generation individual solutions selected fitness based process solutions measured fitness function typically selected selection methods rate fitness solution select solutions methods rate random sample population process time consuming fitness function defined genetic representation measures quality represented solution fitness function dependent instance maximize total objects fixed capacity representation solution array bits bit represents object bit represents object representation valid size objects capacity fitness solution sum values objects representation valid hard impossible define fitness expression simulation determine fitness function computational fluid dynamics determine air vehicle shape encoded interactive genetic algorithms genetic operators step generate generation population solutions selected combination genetic operators crossover called mutation solution produced pair solutions selected selected producing child solution methods crossover mutation solution created typically shares characteristics parents parents selected child process continues population solutions size generated methods based parents biology inspired suggests parents generate quality processes ultimately result generation population initial generation average fitness increased procedure population generation selected proportion fit solutions fit solutions ensure genetic diversity genetic parents ensure genetic diversity subsequent generation children opinion divided crossover mutation references 2006 support mutation based search crossover mutation main genetic operators operators genetic algorithms worth tuning parameters mutation probability crossover probability population size reasonable settings class mutation rate lead genetic nature rate lead convergence genetic algorithm mutation rate lead loss solutions selection employed addition main operators employed calculation faster robust heuristic crossover candidate solutions population diversity helps prevent convergence optimal solution process repeated condition reached common conditions building block hypothesis genetic algorithms simple implement behavior difficult understand difficult understand algorithms frequently generating solutions fitness applied practical building block hypothesis consists goldberg describes heuristic lack building block hypothesis consistently evaluated reference estimation distribution algorithms proposed attempt provide environment hypothesis hold reported classes building block hypothesis explanation gas efficiency remains reasonable attempts understand limitations perspective estimation distribution algorithms limitations limitations genetic algorithm compared alternative optimization algorithms variants representation simplest algorithm represents bit string typically numeric parameters represented integers floating representations floating representation natural evolution strategies evolutionary programming notion real valued genetic algorithms offered represent building block theory proposed john 1970s theory support based theoretical experimental basic algorithm performs crossover mutation bit level variants treat list instruction table nodes linked list objects data structure crossover mutation performed respect data element boundaries data types specific variation operators designed data types specific domains bit string representations integers gray coding employed integer prevent convergence called simultaneous crossover events occur change solution approaches involve arrays real valued bit strings represent theory alphabet performance initially researchers real valued explained set real values finite population virtual alphabet selection dominant expected floating representation expansion genetic algorithm accessible domain complex encoding solution types encoded approach solving optimization require definition domains parameters instance controller tuning internal loop controller structure belong conventional parameters external loop implement linguistic controller inherently description form encoding requires specialized crossover mechanism tool modelling simulation complex adaptive systems evolution processes practical variant process constructing population current generation carry strategy selection guarantees solution quality decrease generation parallel implementations parallel implementations genetic algorithms coarse grained parallel genetic algorithms assume population nodes individuals nodes fine grained parallel genetic algorithms assume individual processor node acts neighboring individuals selection variants genetic algorithms online optimization introduce time dependence noise fitness function adaptive gas genetic algorithms adaptive parameters adaptive genetic algorithms promising variant genetic algorithms probabilities crossover pc mutation greatly determine degree solution accuracy convergence speed genetic algorithms fixed values pc utilize population generation adjust pc maintain population diversity convergence capacity adaptive genetic algorithm adjustment pc depends fitness values solutions clustering based adaptive genetic algorithm clustering analysis judge optimization population adjustment pc depends optimization effective combine optimization methods finding global solutions finding absolute techniques simple hill efficient finding absolute limited region hill improve efficiency lack hill rules genetic variation meaning natural instance – steps stored consecutive – sum steps dna adding steps dna adding vectors follow efficiency process increased magnitude operator opportunity steps consecutive suitable efficiency variation population evolved individual gene variations developed attempt improve performance gas degree fitness fitness solution consists subsets variables algorithms aim learn exploiting interactions aligned building block hypothesis reducing prominent examples approach include domains solution genetic algorithms include scheduling scheduling software packages based gas gas applied engineering genetic algorithms applied approach solve global optimization rule thumb genetic algorithms domains complex fitness mutation combination crossover designed population local traditional hill algorithm commonly crossover operators change uniform population mutation provide genetic algorithm process markov chain examples solved genetic algorithms include designed solar designed pick radio signals space walking methods figures optimal design bodies complex algorithm design manual genetic algorithms task history alan turing proposed learning machine parallel principles evolution simulation evolution started 1954 institute advanced study princeton jersey 1954 publication starting 1957 quantitative published series papers simulation artificial selection multiple controlling simulation evolution common 1960s methods books 1970 1973 simulations included essential elements modern genetic algorithms addition published series papers 1960s population solution optimization mutation selection included elements modern genetic algorithms include richard george michael papers 1998 reported 1963 simulated evolution ability play simple game artificial evolution recognized optimization method result paul 1960s 1970s – solve complex engineering evolution strategies approach evolutionary programming technique proposed generating artificial intelligence evolutionary programming originally finite machines predicting environments variation selection optimize predictive genetic algorithms popular john 1970s book adaptation natural artificial systems 1975 originated studies cellular automata conducted students university michigan introduced framework predicting quality generation theorem gas remained theoretical mid 1980s international conference genetic algorithms held pennsylvania commercial products late 1980s electric started selling genetic algorithm product mainframe based toolkit designed industrial processes 1989 released commercial product desktop computers york times technology writer john wrote 1990 remained interactive commercial genetic algorithm 1995 sold 1997 translated languages version techniques fields genetic algorithms field fields evolutionary algorithms evolutionary algorithms field evolutionary computing intelligence intelligence field evolutionary computing evolutionary computing algorithms evolutionary computation field methods methods methods fall stochastic methods  
40277	computer	corpus linguistics study language expressed corpora samples real corpus method approach set abstract rules natural language texts language language languages originally derived manually corpora automatically derived source texts corpus linguistics reliable language analysis feasible corpora collected field natural context minimal experimental interference field corpus linguistics features views corpus annotation views range john minimal annotation texts speak survey english usage team university college london annotation allowing linguistic understanding recording history earliest efforts description based corpora cultural literature sound patterns grammar classical based analysis corpus paid attention language western european scholars detailed study language texts modern corpus linguistics publication computational analysis day american english 1967 based analysis brown corpus carefully compiled selection current american english drawn wide variety sources variety computational compiled rich combining elements linguistics language teaching statistics key publication description english usage 1960 introduced survey english usage shortly boston approached supply word base american heritage dictionary dictionary compiled corpus linguistics innovative step combining elements language suit british dictionary designed users learning english foreign language compiled bank english survey english usage corpus development corpus based grammars comprehensive grammar english 1985 brown corpus structured corpora corpus 1960s british english english english corpus english english corpus 1990s american english corpus 1990s british english corpora represent languages modes include international corpus english british national corpus 100 word collection range spoken written texts created 1990s consortium universities oxford british library contemporary american english american national corpus 400 word corpus contemporary american english interface corpus spoken language constructed 1971 french project inspired larger corpus spoken french corpora living languages corpora collections texts languages database developed 1970s graphs representing levels syntax segment tagged fields corpus corpus classical language project multiple layers annotation including morphological segmentation speech tagging syntactic analysis dependency grammar pure linguistic researchers begun apply corpus linguistics academic professional fields emerging discipline law corpus linguistics seeks understand legal texts corpus data tools methods corpus linguistics generated methods attempt trace path data theory 2001 introduced called perspective annotation abstraction analysis lexical corpora speech tagged tagged corpus apply method terms situations annotation abstraction combined lexical search advantage publishing corpus users perform experiments corpus corpus managers exploit sharing data corpus treat corpus linguistic knowledge studies suggested treatment outcome social language corpus linguistics notes references journals international peer reviewed journals dedicated corpus linguistics corpora corpus linguistics linguistic theory journal journal corpus linguistics book series book series field computers studies corpus linguistics english corpus linguistics  
40351	computer	linux source book raymond software engineering methods based observations linux kernel development process experiences managing source project design author linux 27 1997 germany published book 1999 cover book titled composition figures collection book released publication license 1999 software development models central thesis raymond bugs shallow terms law source code public testing rapidly forms bugs discovered contrast raymond claims time energy spent bugs model version code developers creating source software raymond 19 learned software development efforts describing attributes practice source software development legacy reception 1998 helped final push communications corporation release source code start mozilla project cited employees independent validation arguments public recognition influence brought raymond culture media published book 1999 complete commercially distributed book published publication license wikipedia model raymond defines inspired arguments prior internet age article knowledge society eyes possibility mass collaboration 1999 published cited critical raymond views source software called produced sharp response raymond  
40642	computer	nextstep discontinued object oriented multitasking operating based unix developed late 1980s 1990s initially range proprietary workstation computers ported architectures time scientists researchers original platform development electronic commercial electronic software distribution manage encryption provide digital rights application software digital media modern app store concept platform lee created browser software developed video game purchase apple source popular operating systems macos ios bundled macos applications mail chess nextstep applications overview nextstep nextstep nextstep nextstep combination nextstep notable implementation items offer considerable power development software machine introduced idea carried macos nextstep originated gui concepts common operating systems 3d color wide drop wide range objects file wide services real time window properties boxes called window modification saved status file purpose user interfaces handle publishing color standards sophisticated sound music processing motorola dsp advanced graphics primitives modern consistent manner applications additional kits product include portable distributed objects easy remote enterprise objects framework powerful object database kits custom application programmers nextstep history financial programming community history release nextstep version launch october 12 1988 release nextstep shipped september 18 1989 version released 1995 time motorola 68000 family processors computers intel x86 sun sparc hp risc based systems nextstep modified separate underlying operating level object libraries result api multiple underlying operating systems including windows nt solaris nextstep legacy stands form direct apple macos ios operating systems unix day operating nextstep built bsd legacy browser app store invented nextstep platform features keyboard commonly browsers nextstep basic layout options features class features nextstep 1990s pioneering pc games level editor respective level editor developed software machines games based engine software entertainment developed hardware tools nextstep application called version ported mac os windows version modern notebook interface mathematica advanced developed nextstep software controlled family calling plan program developed nextstep time release nextstep sun microsystems develop product effort separate underlying operating level object libraries create cross platform object oriented api standard derived nextstep api targets multiple underlying operating systems including implementations standard released sun solaris windows nt version kernel implementation called release nextstep sun intel ia 32 systems announcement december 20 1996 apple acquired february 1997 based operating developing api apple created basis mac os eventually ios software implementation standard exists release history versions releases pre release bug release published apple supported september 1997 release  
40874	computer	circuit switching method implementing telecommunications network network nodes establish dedicated communications channel circuit network nodes communicate circuit guarantees bandwidth channel remains connected duration communication session circuit functions nodes physically connected electrical circuit defining circuit switched network analog telephone network telephone switches telephone create continuous wire circuit circuit switching packet switching data transmitted packets transmitted network independently packet switching dedicated communication session time network links shared packets multiple competing communication sessions loss quality service guarantees circuit switching circuit switching bit delay constant connection opposed packet switching packet varying packet transfer delays circuit competing users protected circuit released connection set actual communication channel remains protected competing users virtual circuit switching packet switching technology circuit switching sense connection established packets transferred packets delivered circuit switching commonly connecting voice circuits concept dedicated path parties nodes extended signal content voice advantage circuit switching continuous transfer overhead packets bandwidth communication disadvantage unused capacity guaranteed connection connections network setup control purposes separate dedicated channel node network service separate channel telephone service method connection monitoring progress network utilize separate control channel links telephone packet switched protocol communicate setup control transport actual circuit data telephone suitable circuit switching subscriber operator connect subscriber exchange inter exchange link operator result physical electrical connection duration copper wire connection carry calls time compared packet switching circuit switching packet switching data transmitted units called packets transmitted network independently packet switching shares network bandwidth multiple communication sessions multiplexing multiple telecommunications connections physical time channel link dedicated time idle calls circuit switching route bandwidth source destination circuit switching capacity connection continuous contrast packet switching process data transmitted packets packet labeled destination sequence packets dedicated path packet destination packet independently path destination original message based packet original message result packet switching networks require circuit established pairs nodes communicate concurrently channel  
41229	computer	telecommunications automated process participants exchange protocols communication link start communication communication process takes establish rules communication attempts communicate device signals devices establish communication link device devices signal switched ready protocols parameters acceptable equipment systems communication channel including transfer rate coding alphabet interrupt procedure protocol hardware features technique communication entities tcp ip term commonly reference tcp term covering exception transport layer security setup term term conversation passing commands simple protocol involve sending message meaning received message ready send complex protocol ready receive negative meaning receive message correctly data route connecting heterogeneous systems equipment communication channel human intervention set parameters tcp normal tcp connection requires separate steps factors exchange starting sequence plan client segment initial sequence server sending segment sequence finally client sending segment reason client server default sequence connection protect connection sequence segment earlier connection connection simple mail transfer protocol key internet standard email transmission includes authentication encryption maximum message size transport layer security connection starts record control messaging protocol content type 22 protocol exchange required exchange actual application data defines messages exchange vary demands client procedures set connection initial exchange successful connection parties ready transfer application data message protocol secure attributes session wireless standard wireless defined ieee 802 2004 access classic typically communication parameters period connection established parameters provide optimal transfer channel function quality capacity sound pitch 100 times speaker output connection established sounds procedure procedure completed speaker depending settings operating application controlling  
41408	computer	computing network interface software hardware interface pieces equipment protocol layers network network interface form network address consist node port unique node network interfaces provide standardized functions passing messages connecting  
42799	computer	speech synthesis artificial production human speech purpose called speech speech synthesizer implemented software hardware products speech converts normal language speech systems render symbolic linguistic representations speech synthesized speech created pieces recorded speech stored database systems size stored speech units stores phones largest output range lack clarity specific usage domains storage entire sentences quality output alternatively synthesizer incorporate model vocal human voice characteristics create completely synthetic voice output quality speech synthesizer similarity human voice ability understood speech program people visual reading written operating systems included speech 1990s speech engine composed major tasks converts raw symbols equivalent written process called normalization pre processing word marks units phrases sentences process assigning called conversion symbolic linguistic representation output referred synthesizer converts symbolic linguistic representation sound systems includes computation target pitch contour output speech history electronic signal processing people build machines emulate human speech existence involved german scientist prize competition announced russian academy sciences arts models built human vocal produce sounds notation operated acoustic mechanical speech machine von paper machine models enabling produce charles produced speaking machine based von design design bell labs developed vocoder automatically analyzed speech fundamental vocoder developed keyboard operated voice synthesizer called voice 1939 york fair dr colleagues laboratories built pattern late 1940s completed versions hardware device machine converts pictures acoustic patterns speech form sound device colleagues discovered acoustic cues perception segments 1975 released speech synthesis systems consisted stand hardware specialized software enabled read italian version released 1978 italian style dominant systems 1980s 1990s based mit bell labs multilingual language independent systems extensive natural language processing methods electronic speech robotic quality synthesized speech improved output contemporary speech synthesis systems remains actual human speech kurzweil predicted 2005 cost performance ratio caused speech cheaper accessible people benefit speech programs electronic devices based speech synthesis systems originated late 1950s developed english speech 1968 laboratory japan 1961 john ibm speech event prominent history bell labs voice synthesizer vocoder song bell musical max visiting john bell labs hill facility demonstration scene song success purely electronic speech synthesis mechanical speech continues handheld electronics featuring speech synthesis emerging 1970s systems speech portable calculator blind 1976 devices educational purposes speak spell toy produced texas instruments 1978 released speaking version electronic chess 1979 video game feature speech synthesis 1980 em game japan speak sun electronics personal game speech synthesis released 1980 pet 2001 game developer developed cross programming technique produce synthesized speech version dates 1980 company produced multi player electronic game voice synthesis synthesizer technologies speech synthesis describes closely output sounds human speech ease output understood ideal speech synthesizer natural speech synthesis systems maximize characteristics primary technologies generating synthetic speech synthesis synthesis technology intended synthesis typically determine approach synthesis synthesis based segments recorded speech synthesis produces natural synthesized speech differences natural variations speech nature automated techniques result output main types synthesis unit selection synthesis unit selection synthesis databases recorded speech database creation recorded individual phones phones phrases sentences typically division segments modified speech recognizer set forced alignment mode manual correction visual representations units speech database created based segmentation acoustic parameters fundamental frequency pitch duration position neighboring phones time desired target created determining chain candidate units database unit selection process typically achieved weighted decision tree unit selection applies digital signal processing dsp recorded speech dsp recorded speech sound natural systems signal processing smooth output unit selection systems real human voices contexts tuned maximum typically require unit selection speech databases systems ranging recorded data representing hours speech unit selection algorithms select segments ideal synthesis minor choice exists database researchers proposed automated methods detect segments unit selection speech synthesis systems synthesis synthesis minimal speech database sound sound transitions occurring language depends language spanish 800 german synthesis contained speech database runtime target sentence minimal units digital signal processing techniques linear predictive coding techniques pitch modification source domain discrete transform synthesis synthesis robotic nature synthesis advantages approach size commercial applications continues freely software implementations domain specific synthesis domain specific synthesis phrases create complete applications variety texts output limited domain transit schedule weather reports technology simple implement commercial time devices level systems variety sentence types limited closely match original systems limited phrases databases purpose combinations phrases naturally spoken language variations account english word letter realized french final word called simple word require additional complexity context sensitive synthesis synthesis human speech samples runtime synthesized speech output created additive synthesis acoustic model physical modelling synthesis parameters fundamental frequency noise levels time create artificial speech method called rules based synthesis systems rules based components systems based synthesis technology generate artificial robotic speech human speech maximum goal speech synthesis synthesis systems advantages systems synthesized speech speeds avoiding acoustic commonly systems speed synthesized speech visually navigate computers screen reader programs systems database speech samples embedded systems memory microprocessor power limited based systems complete control aspects output speech wide variety output questions statements variety voice examples real time highly accurate control synthesis include late 1970s texas instruments toy speak spell 1980s machines atari games chips creating proper projects matched real time speech interfaces synthesis implemented hardware yamaha synthesizer speech aspect realized synthesis capable short sequences speak single phrase control interface live speech synthesis synthesis refers computational techniques speech based models human vocal processes occurring synthesizer laboratory experiments developed laboratories mid 1970s paul synthesizer based vocal models developed bell laboratories 1960s 1970s paul colleagues synthesis models incorporated commercial speech synthesis systems notable exception based originally developed marketed sound spin company university original conducted started steve jobs late 1980s merged apple 1997 software published gnu public license continuing marketed 1994 based speech conversion transmission analog human controlled region model developed colleagues incorporate models vocal acoustic wave propagation systems physics based speech simulation hmm based synthesis hmm based synthesis synthesis method based hidden markov models called statistical parametric synthesis frequency spectrum vocal fundamental frequency voice source duration speech modeled simultaneously speech generated based maximum likelihood criterion synthesis synthesis technique speech replacing main bands energy pure deep learning deep learning based deep neural networks trained recorded speech data based speech quality human voice examples deepmind deep voice technology challenges normalization challenges process rarely straightforward texts require expansion representation english based context project learn project voice project speech systems generate semantic representations input texts processes understood computationally result heuristic techniques guess proper neighboring statistics frequency occurrence systems begun discussed generate speech aid technique successful read red typical error rates fashion percent techniques european languages access required training corpora frequently difficult languages convert systems address simple programming challenge convert english occur contexts read expand based surrounding context read depending context reads reads inches word address 12 john street systems intelligent provide result outputs operation rendered company operation challenges speech synthesis systems basic approaches determine pronunciation word based process called conversion term sounds language simplest approach conversion dictionary based approach dictionary language correct stored program determining correct pronunciation word matter word dictionary replacing pronunciation dictionary approach rule based pronunciation rules applied determine based synthetic approach learning reading approach advantages dictionary based approach quick accurate completely fails word dictionary dictionary size grows memory space requirements synthesis hand rule based approach input complexity rules grows takes account word common english word letter result speech synthesis systems combination approaches languages regular writing prediction pronunciation based successful speech synthesis systems languages rule based method extensively dictionaries foreign names obvious hand speech synthesis systems languages english extremely systems rely dictionaries rule based methods unusual dictionaries evaluation challenges consistent evaluation speech synthesis systems difficult lack agreed objective evaluation criteria organizations speech data quality speech synthesis systems depends quality production technique involve digital recording facilities speech evaluating speech synthesis systems differences production techniques facilities 2005 researchers started evaluate speech synthesis systems common speech dataset content study journal speech communication colleagues university reported voice determine chance levels speaker suggested identification vocal features signal content synthesized speech sound natural issues modification pitch contour sentence depending sentence techniques pitch modification discrete transform source domain linear prediction pitch pitch modification techniques pitch synthesis speech database techniques extraction dynamic applied integrated linear prediction regions speech hardware software systems popular systems offering speech synthesis built capability game console offered voice synthesis module 1982 included speech synthesizer chip removable read memory rom utilized store database generic combined phrases games chip accept speech data external memory additional phrases stored data consisted strings analog filter coefficients modify behavior chip synthetic vocal model simple samples released 1982 software automatic commercial software voice synthesis program basis program macintosh apple computers including apple atari models commodore 64 apple version preferred additional hardware contained bit audio output addition distortion card atari embedded audio chip speech atari disabled interrupt requests chip vocal output output extremely speech screen commodore 64 64 embedded audio chip atari speech integrated operating personal computers designed atari chip 1983 computers finite machine enable english speech synthesis personal computers shipped atari computers sold floppy disk apple speech integrated operating shipped apple software licensed 3rd party developers mark featured 1984 introduction macintosh january required ram memory result 128 ram mac shipped accomplished prototype mac told synthesis created considerable macintosh 1990s apple expanded capabilities offering wide speech support introduction faster powerpc based computers included quality voice sampling apple introduced speech recognition systems fluid command set apple sample based voices starting speech apple macintosh evolved supported program people vision time featured 2005 mac os releases standard voice mac os starting user choose wide range list multiple voices voices feature realistic sentences improved clarity read rates mac os includes command based application converts speech standard includes script installed voices control pitch speaking rate spoken apple ios operating iphone ipad touch speech synthesis party applications provide speech synthesis facilitate reading translating operating feature advanced speech synthesis capabilities introduced 1985 voice synthesis licensed commodore international developed original speech featured complete voice emulation american english female voices indicator audio synthesis divided translator library converted english standard set codes device implemented model speech generation featured level speak allowed command users output speech speech synthesis occasionally party programs word processors educational software synthesis software remained release commodore eventually removed speech synthesis support american english limitation version multilingual speech synthesis developed enhanced version translator library translate languages set rules language windows modern windows desktop systems components support speech synthesis speech recognition optional add windows 95 windows 98 windows 2000 utility people visual party programs windows window eyes visual desktop access access perform speech tasks reading email account document windows user keyboard typing programs speech synthesis programs plug extensions add read party programs read speech server server based package voice synthesis recognition designed network applications centers texas instruments 99 1980s pioneer speech synthesis highly popular plug speech synthesizer module 99 speech offered purchase written video games notable titles offered speech synthesizer variant linear predictive coding built vocabulary original intent release synthesizer unit increase device built vocabulary success software speech terminal emulator plan speech systems speech refers ability computers read engine converts written representation converts representation output sound engines languages specialized party android version android support speech synthesis internet applications read messages mail client browser google specialized software hand online simplify delivery allowing users news sources convert hand readers pc connected internet users download generated audio files portable devices walking growing field internet based based technology company deliver functionality reasons entertainment access browser profit project created 2006 provide based interface wikipedia context audio bbc google source source software systems digital sound 2016 introduction adobe audio editing generating software prototype adobe creative suite enabled deepmind deep neural network based audio synthesis software google speech synthesis completely real human voice adobe takes 20 minutes desired target speech generate sound voice training material software ethical concerns voices manipulate desired increases situation coupled speech synthesis languages languages established speech xml compliant format speech synthesis language 2004 speech synthesis languages include java speech language proposed standard speech synthesis languages distinguished languages includes tags speech recognition management addition speech applications speech synthesis technology tool application widespread environmental barriers removed people wide range application screen readers people visual speech systems commonly people reading difficulties pre children frequently employed aid severe speech dedicated voice output communication aid speech synthesis techniques entertainment games 2007 limited announced development software application package based speech synthesis software explicitly customers entertainment industries generate lines user specifications application reached 2008 announced service users create phrases voices characters speech solution systems virtual automated centers vehicle navigation voice operated domestic appliances station learning applications mobile phones speech communication deployed mass transit speech finding applications market speech synthesis combined speech recognition interaction mobile devices natural language processing interfaces speech language acquisition instance educational tool created users create avatar embedded websites shared social media addition speech synthesis valuable computational aid analysis assessment speech voice quality synthesizer developed university physics includes models vocal frequency noise synthesizer mimic speakers controlled levels apis multiple companies offer apis customers accelerate development applications utilizing technology companies offering apis include mobile app development android operating offering speech api time apple started offering api speech  
43218	computer	math generalized zipf law empirical law formulated mathematical statistics refers types data studied physical social sciences approximated distribution family discrete power law probability distributions zipf distribution distribution identical zipf law corpus natural language frequency word proportional rank frequency table frequent word occur frequent word times frequent word rank frequency distribution inverse relation brown corpus american english word frequently occurring word accounts word occurrences true zipf law word accounts 36 occurrences 28 vocabulary items account brown corpus law named american george zipf sought explain zipf 1949 claim originated french appears zipf german datasets relationship occurs language population cities countries corporation sizes people channel appearance distribution cities population data set tested zipf law applies checking fit empirical distribution power law distribution comparing log likelihood ratio power law distribution alternative distributions exponential distribution distribution zipf law cities fit largest size largest theoretical review zipf law easily observed data log log graph axes log rank log frequency word log log plot rank frequency frequency interval rank data zipf law extent plot linear formally zipf law population elements normalized frequency elements rank zipf law holds elements frequency random variable power law distribution claimed representation zipf law suitable statistical testing analyzed 30 000 english texts fit tests yield 15 texts compatible form zipf law variations definition zipf law increase percentage close 50 frequency english language english language classic version zipf law   fraction time common word occurs law written generalized simplest zipf law function set distributed frequencies common common common frequency occur common frequency occur fourth common frequency occur common frequency occur hold items occur integer times occurrences word wide ranges approximation natural phenomena zipf law human languages word frequencies heavy distribution modeled zipf distribution close law hold   function statistical explanation law holds languages natural reason understood partially explained statistical analysis randomly generated texts document character chosen randomly uniform distribution letters space character follow trend zipf law linear log log plot paper statistical laws linguistic distribution offered mathematical derivation class statistical distributions normal distribution expressed terms rank expanded expression series result series zipf law series law principle effort explanation zipf proposed speakers language harder reach understanding process equal distribution effort leads observed zipf distribution attachment intuitively rich success success distribution fit word frequency rank language population city rank zipf law originally derived explain population rank species applied cities laws zipf law refers frequency distributions rank data relative frequency ranked item distribution parameter   family probability distributions zipf law distribution probability distributions called laws distribution called distribution generalization zipf law law proposed frequencies constant function evaluated practice easily distribution corpora observed distribution accurately sum separate distributions subsets follow distribution closed class functional exhibit vocabulary growth document size corpus size require convergence generalized series distributions distributions exchange variables zipf distribution called discrete distribution analogous continuous distribution discrete uniform distribution analogous continuous uniform distribution frequencies distribution choice distribution frequency polynomial rank improve fit simple power law relationship dimension calculate zipf dimension parameter analysis texts argued law special bounded zipf law connection laws explained scale invariant functional relations statistical physics critical phenomena probabilities law constant leading digits data zipf law satisfy law applications theory symbol event signal probability 16 17 bits zipf law natural 18 equivalent 19 20 bits add symbol probability 16 stored natural 19 23 24 25 instance standard binary 26 optimal 27 probability distribution 25 rule probability distribution base asymmetric systems family entropy coding methods data compression distribution zipf law zipf law extraction parallel fragments texts comparable corpora reading primary secondary international conference bioinformatics computational biology 2011  
45146	computer	cp originally control program monitor control program microcomputers mass market operating created 1974 intel 8080 85 based microcomputers digital initially single bit processors 64 memory versions cp multi user variations 16 bit processors combination cp 100 bus computers loosely standard industry platform business late 1970s mid 1980s cp increased market size hardware software greatly reducing programming required install application manufacturer driver software innovation advent cost microcomputers running cp independent programmers bought shared user cp dos 1981 introduction ibm pc hardware model minimal bit cp components hardware cp sold digital support intel 8080 development manufacturers cp compatible systems customized portions operating combination installed memory disk drives console devices cp systems based z80 processor z80 compatible 8080 code digital distributed core cp bdos core commands z80 specific instructions z80 based systems z80 code specific bios applications dedicated z80 based cp machines machines bootstrap minimal rom combined minimal bank switching code bus 8080 boot code address start cp ram bootstrap entered memory panel controls time started cp bit set 128 characters bit byte standardized greek characters machines bit set character bit word international cp systems commonly iso norm character sets replacing characters characters adding bit boundary components operating bit versions running cp operating loaded memory components bios bdos memory memory application automatically application finished running commands standard utilities commands files extension disk bios controlled hardware components cpu main memory contained functions character input output reading writing disk sectors bdos implemented cp file input output bios user commands executed internal commands directory era file loaded started executable file commands files file party applications cp essentially commands bdos standard commands ideally revision cp bios portion adapted hardware adding memory meant cp updated bios capable addressing additional memory utility patch supplied bios bdos memory installed operating bios bdos stored disk boot start contained rom firmware chip load operating disk drive codice modern standards cp extreme constraints program size version detecting changed disk user changed disks manually disk directory write disk disk directory data stored disk version changing disk write directory read error disk required loss data stored disk majority complexity cp isolated bdos lesser extent commands meant limited simple routines bios hardware platform entire os reduced development time support machines main reasons cp widespread sort abstraction common hardware abstraction layer time cp typically intended machine platform multilayer designs considered console command processor console command processor accepted input keyboard terminal cp printing terminal video terminal cp commands command console display codice current default disk drive video terminal supplied terminal input user internal command form drive letter select default drive typing codice enter command change default drive command codice change cp command interface operating systems digital equipment rt 11 pdp 11 os pdp commands form list parameters separated spaces special characters unix internal command recognized carried attempt executable file disk drive versions user load pass additional parameters command referred programs completion cp application programs allowed programs larger memory space commands instance command files named codice peripheral program dec utility purpose format parameters program standardized single option character options file names programs characters basic disk operating basic disk operating bdos access operations file output console printing application programs load processor registers function code operation addresses parameters memory fixed address memory address independent memory application programs type configuration hardware basic input output basic input output bios lowest level functions required operating included reading writing single characters console reading writing sector data disk bdos handled buffering data cp assumed disk sector size fixed 128 bytes single density inch floppy disks 25 inch disk formats larger sectors management disk buffer handled model specific code bios required hardware choices constrained compatibility popular standard manufacturers separate terminal designed built integrated video display serial ports printers types chips port addresses fixed machines memory mapped 8080 address space variations hardware modules bios standard entry services required cp character accessing disk block support serial communication bios common practice cp programs user installed overlay code required access machine serial port file file names string characters period file extension characters format extension identified type file codice executable program file codice file disk drive identified drive letter drive codice drive codice refer file specific drive drive letter file separated codice drive letter access files current default drive format drive letter combination dos drive letter convention windows addition file extensions codice 11 codice 12 compiled file codice 13 executable file identify file types operating systems file size 128 byte records disk sectors inch drives file disk supported byte exact file sizes current size file maintained file file control block operating application programs editors deal files sequences characters sequences records convention files control character determining file involved record file locate control meant control character middle file contents file advent larger removable fixed disk drives disk employed disk blocks logical file allocation block allowed larger file sizes meant file allocated increased size single density drives double density drives file single byte disk space disk contained files file modification time supported releases cp optional feature cp cp file structure 16 numbered user organize files disk change user simply type user command user security believed user concept single user version cp compatible multi user systems common patch cp derivative operating systems user accessible user independent set user user command allowed user changed 15 user default changed user user material saved disk user user user access files stored user accessible users location path files user visible user user feature utility floppy disks organizing files machines hard drives intent feature ease tasks data entry switching user machine files program read write memory address lowest address bdos program cp application programs z80 8080 processors address 64 memory application programs vary depending design computers address space bios video display memory result systems memory bank switching common technique allowed systems switching rom video memory space cp allowed bdos bank switched memory debugging application cp dynamic debugging tool bug allowed memory program modules allowed program executed step time programs cp originally support equivalent stay program dos programmers write software operating calls extend alter functionality capability programmers developed sold desk programs keyboard utility assign string bytes key cp support dynamically extensions rsx solutions cp systems parties installation cp hardware abstraction interface disk console typically application programs required installation features equipment printers terminals controlled sequences altered devices sequence select printer manufacturers models manufacturer range procedure defined operating user typically installation program selection range devices feature feature editing sequences required access function repeated application program central operating service devices codes model printer written application program printer fast dot matrix printer slower presentation quality wheel printer separate version load version printer selected change printers history cp originally developed cp 1974 operating intel development equipped inch floppy disk drive custom floppy disk controller written programming language microcomputers aspects cp influenced operating mainframe development environment cp originally control program monitor implies operating conversion cp commercial product trademark registration documents filed november 1977 product control program microcomputers cp naming scheme time language prime programming language prime ibm ibm cp operating school renaming cp larger effort business partner convert personal project cp intel compiler commercial enterprise intended establish digital brand product lines consumer mind ibm accomplished personal product offerings digital renamed corporation change digital portability companies support cp library software xerox operating thousands programs written advantage xerox 1984 columbia university source code build cp systems generic version operating software bus allowing multiple programs interact hardware standardized programs written cp typically portable machines requiring specification sequences control screen printer portability cp popular software written cp operating systems brand hardware portability programs extended instruction set z80 processor operate 8080 processor graphics routines games graphics programs machine specific direct hardware access speed os bios common dos machines gates claimed apple family 80 single popular cp hardware platform brands machines operating notable examples 8080 computers selling cp capable time cp machines educational computers cp source code published educational resource bbc micro equipped z80 processor series commodore 128 80 models spectrum cp custom handheld designed internal memory applications word processors popular database program microcomputers originally written cp knowledge mind cut successor programming facilities 8080 compatibility written cp dos pascal excel debuted cp dos versions program cp company created cp market leader standard cp market dos cad application debuted cp host compilers popular programming languages time basic pascal fortran earliest products cp software adapted wide variety computers forms protection operating source code basic programs easily accessible lack standardized graphics support limited video games character based games ported video game lunar interactive fiction including series consistently release games cp format started user written software allowed reliable file phone program native cp processor disk formats standard inch cp disk format existed inch single density floppy disk format called distribution format standardized inch formats depending characteristics systems degree choices designers cp supported options control size directory disk mapping logical disk sectors cp programs physical sectors allocated disk parameters set standardized existed load parameters disk pascal versions inch disk north star apple hard sector soft sector single inch version disk formats popular xerox supported software computers compatible format single manufacturer inch era cp disk formats portable hardware manufacturers software manufacturer separate version program brand hardware manufacturers standardization company models situation disk format translation programs allowed machine read formats popular reduced confusion programs allowed transfer data programs machine serial ports cp machines degree portability cp machines type disk drive controller floppy types existed cp era 25 format disks hard soft single double density single double 35 track 40 track track 80 track sector layout size vary translation programs user read disk types machines drive type controller 1982 soft sector single 40 track 25 disks popular format cp software common consumer level machines time apple 80 ibm pc translation program allowed user read disks machine format read 80 ibm pc epson disks disk types 80 track hard completely impossible read double disks epson read cp accessed disk sequentially track track track 79 40 track disk track apple users apple format cp software apple format disks transfer serial link cp market requiring stock multiple formats disks equipment compared standardized ibm pc disk formats factor rapid cp 1981 notable cp capable machines commodore 128 1985 z80 cp support addition native mode derivative cpu cp required disk drive read soft sector 40 track format disks floppy drive sony 70 cp supported cp floppy disks graphics graphics capable 100 systems existed 100 bus cp provide standardized graphics support 1982 graphics extension memory graphics common feature bit cp operating systems systems display art mode custom character set multi user 1979 multi user compatible derivative cp released allowed multiple users connect single multiple terminals provide user screen keyboard versions 16 bit processors cp bit version cp version called cp released 1983 incorporated bank switching memory management single user single task operating compatible cp applications cp 64 memory 8080 z80 processor configured support files operating distribution software included cp generation bit computers notably spectrum commodore 128 machines radio 80 model 16 bit versions cp 16 bit cpus version 16 bit family cp 86 intel cp 68k motorola 68000 original version cp 68k 1982 written pascal 68k ported original bit cp cp 80 avoid confusion 1982 1983 port written named cp cp 86 expected standard operating ibm pcs ibm unable development licensing terms ibm delivered pc dos based cp clone 86 dos cp 86 option ibm pc legal action digital equipment corporation dec 100 compete ibm cp 80 z80 chip cp 86 dos microprocessor cp 86 80 z80 cpus concurrently benefit continue bit cp software user investment moved 16 bit dos cp 68k running motorola systems initially atari atari decided disk operating called cp 68k computers 16 bit versions cp required application programs compiled cpus written assembly language translated tools digital program written 1981 translated source code intel 8080 processor source code intel global data flow analysis 8080 register usage translator optimize output code size care calling cp 80 80 programs ported cp 86 86 platforms automatically written 80 cp 80 platforms dec vax 11 11 dos takes expected cp standard operating 16 bit computers 1980 ibm approached digital gates license version cp product ibm personal failure signed agreement failed ibm provide operating product dos cp basic concepts mechanisms versions dos cp file handling data structures identical referred disk drives letter codice codice dos main innovation fat file similarity easier port popular cp software cp concept separate user files disk ported dos dos access memory ibm pcs sold 64 memory cp 16 commands built command dos faster easier floppy based computers peripherals ibm pc expansion card bit cp software cp rapidly lost market share market moved ibm compatible platform popularity byte magazine time leading industry microcomputers essentially covering cp products introduction ibm pc 1983 100 boards articles cp software 1987 magazine 1984 article stated efforts introduce cp market cp software expensive users 1986 stated stopped production bit cp based models sales dos compatible systems vendors production equipment software cp versions cp 86 performance compatible dos reflect compatibility changed cp 86 dos dr dos z80 command processor replacement introduced february 1982 drop replacement standard digital console command processor initially written called time richard richard driving force maintained contact email released disk special microcomputers jersey released february 14 1983 released set disks upgraded released 8080 code 8080 systems released day july 14 1984 set disks code compiled reduced features 8080 systems z80 microprocessor january 1987 richard stopped developing enhanced continue developed released supported 8080 series microprocessors features upgrade features version included included utilities considerably extended capabilities supported cp user base time slow cp legacy behaviors windows result compatibility dos attempted compatibility cp drive letter dos windows versions originally cp matching characters windows based cp output printer console drive names floppy disk drives cp systems typically hard drives appeared designated dos codice 16 command control character files attributed cp source code releases 1997 1998 caldera released cp source code source license allowing modification collected digital files cp families cp 1997 computers project z80 membership card project  
47087	computer	aibo aibo artificial intelligence robot partner japanese series robotic designed manufactured sony sony announced prototype aibo mid 1998 consumer model introduced 11 1999 models released 2006 models dog included space ers version ers 1000 versions explicitly robotic dog 2006 aibo carnegie mellon university robot hall january 26 2006 sony announced aibo products effort company sony aibo customer support gradually support final ers march 2013 july 2014 sony stopped providing aibo products provide customer support repair aibo robots november 2017 sony announced generation aibo 11 fourth generation model ers 1000 launched japan 11 january 2018 sale set february 2018 14 59 aibo called toy robot people compare actual advanced expensive meant children robot examples robot commonly toy realistic robotic history aibo grew sony science laboratory founded 1990 set emulate innovation center center parc product operating form base software aibo models president sony 1995 sought digital reflected company dream engineer dr original 1994 started robots artificial intelligence expert write robot behaviors complex people care argued entertainment robots robot entertainment effectively designed art technologies speech recognition vision technologies applications perform critical function exists special difficult requirements entertainment applications limited capabilities speech vision systems feature designed entertainment robots prototype included behaviors including tracking yellow hands receive ieee technical award innovation leading production aibo mass market consumer robot entertainment applications artist create initial designs aibo body designs permanent collections museum modern art institution generation aibo design japan design award grand prize special intelligent design award 2000 german red dot awards 1997 received form digital lab robots 2010 aware technology functional decided focus robots entertainment aibo responded 100 voice commands language generation usa york remains display company models designed jointly japanese designers continued gain design awards ers design inspired bodies ers series headed released 2001 designed visual artist winning design award space exploration inspired body ers designed winning design award design asia award ers design award successor closed aibo robotic projects attended 100 colleagues sony aibo symbol risk sony november 2017 sony corporation announced aibo return model capable users models prototypes prototypes displayed sony models legs specifications design 1998 prototype sony press release closely match generation differences include pc cards memory media batteries option module legs generation models ers commercially aibo appearance sales june 1999 limited production 000 japan 000 usa internet sold 20 minutes launch cost 250 000 yen ers ers improved version original aibo initially released november 1999 limited edition model 000 units japanese stock bought 17 launch generation models ers ers designed speech recognition capabilities black silver gold red blue green white ers 300 ers 300 aibo heart original production design price 98 000 yen version model version black version designed version designed ers silver led future oriented design design based concept space exploration robot remote operation optional wireless lan card ers aibo height 29 weight hours continuous operation time 16 degrees freedom drive unit price 000 yen ers variants ers difficult distinguish appearance improved cpu displays logo super core body launch generation models estimated sales generation models 40 000 50 november aibo regarded series explicitly robot dog white packaged mind launch ers november variant ers packaged black white ers october variant ers packaged changed wi white black gold called brown japan final model fourth generation models ers 1000 january model released aibo project discontinued 2006 requires internet connection function card service support interaction learning cloud humanoid robot designed successor aibo runs base code operating hardware initial ers aibo hardware includes 64 bit risc processor 16 ram sensors touch camera range microphone acceleration speaker actuators legs series developed sensors actuators wi add generation final family ers multiple head body sensors actuators mounted sensor wi bundled accessories including charging station toy late model bundled shaped toy playing cards charging station autonomous software bundled software robot ability walk environment camera recognize spoken commands english spanish japanese aibo sounds programmed japanese concepts sounds ers mind custom data composed japanese game designer sony proprietary real time operating consumer devices os intended deployed real time capabilities handle multiple audio visual data streams concurrently operating 2003 sony stopped active development operating pre internet age decided future architecture specific entertainment robots architecture involves modular hardware components easily removed replaced change shape function robots modular software components change behavior movement patterns aibo creator called aibo development project minimize programming individual movements responses nature encourage global community robot programmers add capability generation models aibo load software packages sold sony trademark sony corporation title software aibo runs memory life robot raised grown stages development owner owner interact robot understand 100 voice commands mode perform basic actions generation ers models mind software includes capabilities packages mind software includes process allowing ers autonomously included aibo entertainment player wi based connection pc included speech autonomous mapping aibo complete vision algorithm charging station vision implementation evolution robotics notable party software development environment initially access programming capabilities limited sony organizations participating reverse engineering aibo users developed software operated robotic music copyright milestone sony digital copyright october 2001 code retrieved protection mechanisms aibo owners sony subsequently released programmer kit commercial kit eventually expanded distinct tools code sdk aibo remote framework ers tools combined aibo software development environment tools download commercial commercial sdk commercial sdk sdk based programming sdk based source tools gcc software executes aibo sdk considered level control gain values aibo actuators aibo camera data vision computations pre built standard aibo functionality code aibo remote framework choice researchers level robotic code code code level scripting language aibo code easily create simple programs aibo execute level control sdk power simplicity simple terminal socket connection commercial usage allowed license derivative code code terms language written standard code model aibo basic aibo functions simple recognition registration camera adjustment settings addition standard code terminal socket socket binary data aibo camera image sending receiving sound code extended code offers development environment code programming simplified drop behavior user created tool aibo remote framework remotely access capabilities aibo mind including behaviors pattern recognition windows pc functionality aibo entertainment player aibo remote framework windows pc api based visual framework write code remotely control aibo running wireless lan commercial usage allowed license development environments robot software development frameworks developed support including current projects aibo replacement sony ers project application aibo client connect robot linux windows mac os ios android owner control dog play game robot aibo control android users control aibo ers running gcc based updated community gcc 24 15 improvement 11 14 features modern software program robot packaged version updated aibo education aibo extensively education carnegie mellon offered aibo robotics covering models perception action solving features online simulation challenge based aibo ers model called visual tracking league aibo inexpensive platform artificial intelligence education vision package cheaper conventional robots development league initial standard platform league robot league teams compete identical robots robots operate autonomously external control humans computers specific aibo version changed time ers 1999 2000 ers 2001 2002 ers 2003 ers 2004 2008 replacement current standard platform humanoid robotics sony support universities participate autonomous competition robot league competing teams program team aibo robots play games autonomous robot competing teams league 1999 2008 final universities compete moved platform university south successful team league final times winning times international aibo convention international aibo convention takes sony robotics tower convention 1999 15 set 2009 convention set records convention features aibo accessories source aibo model body color choices release units sold generation models estimated sales generation models 65 generation models estimated sales generation models 60 generation models estimated sales generation models 40 000 50 aibo based aibo ers sounds actions viewer ers 23 episode series broadcast 22 54 23 00 october 11 2001 march 21 2002 popular culture aibo introduced published jack aibo aibo ers matter music video received increased market demand commercial success featured episode aibo ers company visiting scene aibo martin sony south park episode red entire episode list receive robot reference robot dog 2000s started aibo episode receive dog aibo robot sold stores spin children siri ios device pet responses aibo film robotic toy based design aibo toy episode robotic dog aibo named pair robotic based aibo tokyo video game published sony entertainment aibo model ers game aibo ers title sequence 2017 adaptation american  
47772	computer	instruction set architecture isa abstract model referred architecture architecture isa called implementation isa multiple implementations vary performance physical size cost isa serves interface software hardware software written isa implementations isa enabled binary compatibility generations computers easily achieved development families developments helped cost computers increase reasons isa computing isa defines machine language programmer program isa defines differs define supported data types main memory registers semantics memory consistency addressing modes instruction set set machine instructions machine language input output model overview instruction set architecture distinguished microarchitecture set processor design techniques processor implement instruction set processors share common instruction set intel pentium advanced micro devices implement identical versions x86 instruction set internal designs concept architecture distinct design specific machine developed ibm design phase 360 virtual machines support isa java virtual machine common language runtime implement translating commonly code paths native machine code addition virtual machines execute frequently code paths interpretation time compilation implemented x86 instruction set vliw processors fashion classification isa classified common classification architectural complexity complex instruction set cisc specialized instructions rarely practical programs reduced instruction set risc processor efficiently implementing instructions frequently programs common operations implemented additional processor execution time offset types include instruction word vliw architectures closely instruction word explicitly parallel instruction computing architectures architectures seek exploit instruction level parallelism hardware risc cisc compiler responsible instruction issue scheduling architectures complexity studied minimal instruction set instruction set theoretically types instructions machine language built discrete statements instructions processing architecture instruction complex operations built combining simple instructions executed sequentially directed control flow instructions instruction types examples operations common instruction sets include complex instructions processors include complex instructions instruction set single complex instruction instructions computers instructions instructions multiple steps control multiple functional units larger scale simple instructions implemented processor examples complex instructions include complex instructions common cisc instruction sets risc instruction sets risc instruction sets include risc instruction sets include alu operations memory operands instructions blocks memory risc instruction sets include simd vector instructions perform arithmetic operation multiple pieces data time simd instructions ability vectors matrices minimal time simd instructions easy algorithms commonly involved sound image video processing simd implementations brought market trade names instruction traditional architectures instruction includes opcode specifies operation perform add contents memory register operand registers memory locations data operand addressing modes determining meaning fixed fields instruction word vliw architectures include microcode architectures multiple simultaneous operands single instruction instruction sets opcode field transport architectures operand virtual machine operand instruction sets lack operand fields stack machines including conditional instructions bits encode specific condition operation performed performed conditional branch instruction executed branch condition true execution program executed branch condition false execution continues sequentially instruction sets conditional moves executed data stored target location condition true executed target location modified condition false ibm architecture conditional store instruction instruction sets include field instruction called branch operands instruction sets maximum operands explicitly instructions bits encode registers operand instruction risc architectures 16 bit instructions operand designs versions arm thumb risc architectures 32 bit instructions operand designs arm mips power isa sparc architectures instruction specifies operands registers memory locations values explicitly instructions operands stored stack implicit register operands operands instruction destination operand explicitly specifies destination additional operand supplied operands encoded instruction mathematically arguments logical arithmetic operation operands encoded opcode representation instruction values addresses instruction register pressure register pressure measures availability registers time program execution register pressure registers register pressure register contents memory increasing registers architecture decreases register pressure increases cost embedded instruction sets thumb suffer extremely register pressure register sets purpose risc mips alpha register pressure cisc x86 64 offer register pressure register sets addressing modes register addressing memory operands alu instructions absolute addressing pc relative addressing register register cisc offer instruction size instruction varies bits microcontrollers hundreds bits vliw systems processors personal computers mainframes supercomputers instruction sizes 64 bits instruction x86 15 bytes bits instruction set instructions lengths architectures notably reduced instruction set computers risc typically architecture word size architectures instructions variable typically integral byte arm thumb extension mixed variable encoding fixed 32 bit 16 bit instructions mixed freely switched branch exception boundary risc instruction set fixed instruction bytes 32 bits typical cisc instruction set instructions varying 15 bytes x86 fixed instructions complicated handle variable instructions reasons check instruction cache virtual memory boundary instance easier optimize speed code density computers memory expensive minimizing size program fit limited memory central combined size instructions perform task code density characteristic instruction set computers code density complex instructions procedure entry returns loops named complex instruction set computers cisc typical frequent cisc instructions combine basic alu operation add access operands memory addressing modes direct indirect indexed architectures operands including result memory perform functions automatic pointer software implemented instruction sets complex powerful instructions reduced instruction set computers risc implemented period rapidly growing memory code density simplify implementation circuitry increase performance clock frequencies registers single risc instruction typically performs single operation add registers load memory location register risc instruction set fixed instruction typical cisc instruction set instructions varying risc computers require instructions implement task inherently optimal bus bandwidth cache memories embedded risc thumb typically exhibit density technique called code compression technique 16 bit instructions 32 bit instruction decode stage executed instructions minimal instruction set computers form stack machine separate instructions 16 64 multiple instructions fit single machine word types cores silicon implement easily realized multi core form code density code density risc increased instruction density offset requiring instructions task executable compression mechanism improving code density mathematics complexity describes challenges limits representation instructions program rarely internal numeric form machine code programmers assembly language commonly generated programming languages compilers design design instruction sets complex issue stages history microprocessor cisc complex instruction set instructions 1970s ibm instructions set eliminated result risc reduced instruction set architecture set instructions simpler instruction set offer potential speeds reduced processor size reduced power consumption complex set optimize common operations improve memory cache efficiency simplify programming instruction set designers software interrupt technology z80 codes motorola 68000 codes range fast virtual machines easier implement instruction set goldberg virtualization requirements aware programming easier implement memory interpreted systems multiple processors synchronization algorithms easier implement instruction set includes support fetch add load link store conditional atomic compare instruction set implementation instruction set implemented variety implementing instruction set provide programming model implementations instruction set implementing instruction set cost performance power consumption size designing microarchitecture processor engineers blocks hard wired electronic circuitry designed separately registers alus register transfer language decoding instruction isa physical microarchitecture basic build control unit implement description designs middle designs combination design microcode control unit cpu designs writable control compile instruction set writable ram flash cpu processor computing isa software interpreter naturally interpretation overhead slower running programs hardware hardware running emulator magnitude faster common practice vendors software software developers hardware implementation ready details implementation strong influence instructions selected instruction set implementations instruction pipeline single memory load memory store instruction leading load store architecture risc implementing instruction pipeline led delay slot demands speed digital signal processing instructions implemented perform digital filters fast mac instruction typical digital signal processor dsp harvard architecture fetch instruction data simultaneously requires single cycle  
48113	computer	society worldwide financial telecommunication swift network enables financial institutions worldwide send receive financial transactions secure standardized reliable environment swift software services financial institutions network iso business identifier codes bank identifier codes swift codes majority international messages swift network swift linked 11 000 financial institutions 200 countries average 15 messages day compared average daily messages 1995 swift financial messages highly secure hold accounts perform form swift facilitate transfer accounts institutions financial institution exchange transactions relationship bank business features swift society law owned financial institutions offices swift headquarters designed chairman swift originally ceo originally netherlands swift hosts annual conference called aimed financial services industry history swift founded 1973 ceo supported banks countries started establish common standards financial transactions shared data processing worldwide communications network designed developed burroughs corporation fundamental operating procedures rules liability established 1975 message 1977 swift united operating center john 1979 standards swift industry standard syntax financial messages messages swift standards read processed financial processing systems message swift network swift international organizations defining standards message format content swift registration authority iso standards swift defined uniform resource names swift operations centers swift secure messaging network data centers united netherlands secret location restricted employees security reasons centers share real time failure data centers handle traffic complete network swift communications cables transmit data swift fourth data center started operating 2009 data european swift data center distributed architecture messaging messaging european european zone messages stored netherlands operating center zone messages stored united operating center european zone messages countries europe default allocated zone choose messages stored european zone network swift moved current ip network infrastructure 2001 2005 providing total replacement previous 25 infrastructure process involved development protocols facilitate efficient messaging existing message standards technology chosen develop protocols xml messages legacy contemporary communication protocols broken swift centralized store mechanism transaction management bank send message bank institution formats message standard swift swift guarantees secure reliable delivery action swift guarantees based redundancy hardware software people phase 2007 2008 entire swift network infrastructure protocol called phase main difference phase arrangement phase requires banks connecting network relationship management application key exchange swift public database subject software eventually prove secure easier converting meant thousands banks update international systems standards completely replaced january 2009 products interfaces swift financial swift key solutions consisting clients facilitate connectivity swift network based terminals manage delivery messages interfaces key swift services fall financial derivatives trade services management swift global reference data utility swift unique reference data service swift sources data direct data including central banks code banks easy maintain data constantly cross checks data data sets mail swift offers secure person person messaging service mail live 16 2007 swift clients existing email infrastructure pass email messages highly secure reliable network internet mail intended secure transfer sensitive business documents contracts designed replace existing services transmission security sensitive data internet financial institutions including bank standard bank south swift service government tracking program series articles published 23 june 2006 york times wall street journal los angeles times revealed program named tracking program department central intelligence agency united agencies 11 september attacks gain access swift transaction database publication articles swift pressure data privacy customers allowing gain access sensitive personal september 2006 government declared swift american european privacy laws response satisfy concerns privacy swift process improving architecture implementing distributed architecture zone model storing messages operations centers concurrently european union agreement united government permit transfer eu swift transaction united concerns potential contents european position statement september 2009 agreement compliant eu privacy mechanisms ensure data requests handled agreement signed european european council 30 november 2009 day agreement signed terms agreement scheduled january 2010 agreement classified eu restricted translations eu languages published 25 january 2010 11 february 2010 european decided agreement eu week earlier civil committee deal citing legal march 2011 reported mechanisms data protection failed released report usa requests impossible guaranteed european accessed usa practice iran january 2012 united nuclear iran implemented campaign calling swift relations iran including central bank iran iran membership swift eu financial iran swift corporate rules february 2012 committee approved swift aimed financial telecommunications network banks banks swift iran access revenue swift mark president committee initially swift acting european address concerns financial services iran avoid conduct business targeted banks bank iran bank post bank iran bank 17 march 2012 agreement days earlier 27 council european union council subsequent swift banks international network identified institutions current eu financial institutions network february 2016 banks network joint comprehensive plan action control transactions eu 26 february 2012 reported sufficient control swift money transferred european union eu countries germany 26 000 transferred german bank transaction automatically transaction united money batch germany german supplier stated united monitoring nsa reported september 2013 national security agency nsa monitors transactions swift credit card transactions nsa data swift network thousands banks send transaction swift named target documents documents revealed nsa swift variety methods including reading swift printer traffic numerous banks april 2017 shadow released files nsa agency financial transactions swift mentioned swift banks international network iran 2016 banks international lists swift theory enables movement money banks foreign banks remain business country primary transactions banks iran transactions iran remain august 2014 planned press eu block russian swift russian military intervention swift official statement swift pressure surrounding media risk character services swift customers russia based swift equivalent created central bank russia backup measure september 2018 european union foreign policy head proposed development special purpose financial vehicle intended controlled society worldwide financial telecommunication commonly swift founding iran european commission germany france russia china united united iran nuclear deal severe iran designed remove transactions iran nations iran apparent goal encourage iran continue terms testing development manufacture nuclear claims party united time german russian pipeline project swift calls banks network security 2016 central bank account york federal bank swift alliance access software york times report attempt society security transfer reports central bank attack reported occurred commercial bank vietnam attacks involved malware written issue swift messages messages malware swift messages database record steps prevent messages messages appeared paper report malware altered paper reports printer bank report malware altered viewer 2016 12 fund transfer requests swift messages transfer requests altered amounts reports gained access send swift messages detected swift messages normal hours unusual size claims responsible loss gained access swift swift messages 2016 bank episode investigated reported swift network lost money  
48707	computer	gnu octave software featuring level programming language intended numerical computations octave helps solving linear nonlinear performing numerical experiments language compatible matlab batch oriented language gnu project software terms gnu public license octave major alternatives matlab emphasis syntactic compatibility matlab octave history project conceived 1988 intended chemical design real development started john 1992 alpha release dates january 1993 february 17 1994 version released version released 29 2015 program named octave professor principal author ability perform quick calculations developments addition desktops personal scientific computing octave industry octave massive parallel center social security acceleration gpus octave language octave language interpreted programming language structured programming language supports common standard library functions unix calls functions support passing arguments reference octave programs consist list function calls script syntax matrix based functions matrix operations supports data structures object oriented programming syntax matlab programming script octave matlab octave gnu public license freely changed copied program runs windows unix unix operating systems including macos notable features command variable completion typing character command octave attempt complete variable function file names completion octave initial portion complete command history running octave commands internal buffer edited data structures octave includes limited support organizing data structures structure elements integer array string short circuit boolean operators octave codice codice logical operators evaluated short circuit fashion operators language contrast element element operators codice codice operators octave includes operators codice codice prefix forms octave augmented assignment codice protect octave supports limited form exception handling codice lisp form protect block rule gnu octave recognizes codice codice compatible matlab language specific codice 11 consequence codice block codice 13 portable codice block executed exception raised body executed exception block codice gnu octave supports form exception handling compatible matlab language form differs codice block exception handling executed exception raised body execution exception handling exception block codice 17 statement explicitly inserted exception handling code variable argument lists octave mechanism handling functions arguments explicit upper limit list arguments special argument codice 18 argument list variable return lists function set return values special return codice 19 integration execute octave code program code calling codice 20 code integrated gnu octave creating files matlab compatible files matlab compatibility octave built matlab compatibility mind shares features matlab octave matlab bug considered software clone software copyright court matlab repository principle compatible octave users octave compatible proper source bsd license terms usage proprietary matlab syntax compatibility minor syntax function compatibility numerous matlab functions gnu octave accessible packages octave functions core octave packages listed online list functions included octave function functions listed octave packages octave function called error message user interfaces octave official graphical user interface gui integrated development environment ide based qt octave default interface command interface release octave received gui 3rd party graphical developed coding education gui applications octave code user create gui applications https gnu software octave interpreter gui development examples button edit control message boxes advanced octave gui application composition simulation packages octave packages packages located octave https octave packages packages  
49024	computer	wolfram mathematica termed mathematica modern technical computing spanning technical computing including neural networks machine learning image processing geometry data science technical scientific engineering mathematical computing fields conceived stephen wolfram developed wolfram wolfram language programming language mathematica features features wolfram mathematica include notebook interface wolfram mathematica split kernel kernel expressions wolfram language code returns result expressions designed gray 1988 gui creation editing notebook documents program code including mathematics graphics gui components tables sounds content generated edited standard word processing capabilities supported including real time multi spell checking documents structured hierarchy cells document support automatic creation documents environment presentations notebooks contents represented mathematica expressions created modified analyzed mathematica programs converted formats includes development tools input completion automatic syntax alternative wolfram eclipse based integrated development environment ide introduced 2006 project based code development tools mathematica including revision management debugging testing idea based wolfram language code addition syntax auto complete local variables defined functions mathematica kernel includes command interfaces include based gnu runs contained mathematica programs arguments unix command performance computing capabilities performance computing extended introduction arrays version 1999 sparse matrices version 2003 gnu multi precision library evaluate precision arithmetic version 2005 automatic multi threading computations performed multi core computers release included cpu specific optimized libraries addition mathematica supported party acceleration hardware 2002 introduced user level parallel programming heterogeneous clusters multiprocessor systems 2008 parallel computing technology included mathematica licenses including support grid technology windows server 2008 compute cluster server sun grid support gpu hardware 2010 version generate code automatically compiled compiler gcc visual studio deployment deploy applications written wolfram mathematica connections applications communication applications occurs protocol called wolfram symbolic transfer protocol communication wolfram mathematica kernel interface kernel applications wolfram freely developer kit linking applications written programming language mathematica kernel link java program mathematica perform computations mathematica program load java classes manipulate java objects perform method calls functionality achieved link programs java programs languages connect mathematica include visual basic python links mathematical software packages including excel matlab mathematica singular wolfram origin mathematical equations computational software mathematica includes interfaces databases java database connectivity read write mathematica install services services description language description access data mathematica variety cloud services send data including facebook federal google analytics calendar custom search search translate translator wikipedia mathematica capture real time data link financial data hardware devices ieee usb serial interfaces automatically reads devices read range sensors data wolfram mathematica includes collections data computations mathematica integrated wolfram alpha online computational knowledge answer engine additional data updated real time data sets include chemical language biomedical weather data addition mathematical data reception byte 1989 listed mathematica distinction winners byte awards stating macintosh application enable algebra impossible textbook version history wolfram mathematica built ideas wolfram earlier symbolic manipulation program smp program mathematica suggested stephen wolfram apple steve jobs wolfram earlier wolfram released versions mathematica  
49091	computer	optical character recognition optical character reader ocr mechanical electronic conversion images handwritten printed machine encoded scanned document photo document scene photo photo image television broadcast form entry printed paper data records – documents bank statements business cards mail static data suitable documentation – common method printed texts edited stored displayed machine processes cognitive computing machine translation extracted speech key data mining ocr field pattern recognition artificial intelligence vision versions trained images character time advanced systems capable producing degree recognition accuracy fonts common support variety digital image file format inputs systems capable output closely original including images columns textual components history optical character recognition technologies involving creating reading devices blind goldberg developed machine read characters converted standard code concurrently developed handheld scanner moved printed produced specific letters characters late goldberg developed called statistical machine searching optical code recognition granted usa patent patent acquired ibm advent smart phones ocr internet connected mobile device applications extract captured device camera devices ocr functionality built operating typically ocr api extract image file captured device ocr api returns extracted location detected original image device app processing speech display blind visually users 1974 ray kurzweil started company kurzweil products continued development ocr printed virtually kurzweil ocr companies including late 1960s 1970s kurzweil decided application technology create reading machine blind blind people read device required enabling ccd scanner speech january 13 1976 successful finished product unveiled reported news conference headed kurzweil national blind 1978 kurzweil products selling commercial version optical character recognition program customers bought program legal paper news documents online databases kurzweil sold company xerox paper conversion xerox eventually merged communications headed medical intelligence language engineering lab institute science developed tool source gui ocr convert scanned images printed books books 2000s ocr online service cloud computing environment mobile applications real time translation foreign language smartphone commercial source ocr systems common writing systems including chinese japanese korean characters applications ocr engines developed kinds domain specific ocr applications ocr ocr check ocr legal document ocr types ocr offline process static document handwriting movement analysis input handwriting recognition shapes technique capture segments drawn direction pattern pen additional process accurate technology character recognition dynamic character recognition real time character recognition intelligent character recognition techniques pre processing ocr software pre processes images improve successful recognition techniques include segmentation fixed pitch fonts accomplished simply image uniform grid based vertical grid lines black proportional fonts sophisticated techniques letters vertical lines character character recognition basic types core ocr algorithm produce ranked list candidate characters matrix matching involves comparing image stored pixel pixel basis pattern matching pattern recognition image correlation relies input correctly isolated rest image stored scale technique fonts technique physical based ocr implemented feature extraction features lines closed loops direction extraction features reduces dimensionality representation recognition process computationally efficient features compared abstract vector representation character reduce prototypes techniques feature detection vision applicable type ocr commonly intelligent handwriting recognition modern ocr software nearest classifiers nearest neighbors algorithm compare image features stored features choose nearest match software pass approach character recognition pass adaptive recognition letter shapes confidence pass remaining letters pass unusual fonts quality scans ocr result stored format dedicated xml maintained united library list optical character recognition software comparison optical character recognition software post processing ocr accuracy increased output constrained list allowed occur document english language technical lexicon specific field technique document lexicon proper dictionary influence character segmentation step improved accuracy output stream stream file characters sophisticated ocr systems preserve original layout produce includes original image textual representation neighbor analysis occurrence frequencies correct errors washington common english washington knowledge grammar language scanned determine word allowing accuracy distance algorithm ocr post processing optimize ocr api application specific major ocr technology providers ocr systems deal specific types input application specific lexicon performance account business rules standard expression rich contained color images strategy called application oriented ocr ocr applied ocr license cards driver licenses automobile manufacturing techniques solving character recognition improved ocr algorithms input special fonts ocr ocr fonts precisely character shapes accuracy rate bank check processing prominent ocr engines designed capture popular fonts times capturing fonts specialized fonts google trained recognize fonts recognize ocr ocr fonts fields pre printed boxes encourage humans write box printed color easily removed ocr palm os special set printed english characters simplified modified easier recognition platform computationally limited hardware users learn write special zone based ocr image specific document referred template ocr humans perform character recognition process images driven ocr accuracy images computers practical systems include amazon mechanical national library developed online interface users correct texts format perform character recognition software developers develop image processing algorithms rank accuracy department energy science institute mission improvement automated technologies understanding machine printed documents conducted annual ocr accuracy 1992 1996 recognition script 100 accurate imaging study based recognition 20th century concluded character character ocr accuracy commercial ocr software 99 total accuracy achieved human review data dictionary authentication recognition hand printing handwriting printed east language characters single character subject active database commonly testing systems ability handwritten digits accuracy rates measured measured greatly affect reported accuracy rate word context basically lexicon correct software finding character error rate 99 accuracy result error rate 95 accuracy measurement based word incorrect letters difficulties inherent ocr characters based ocr systems hand printed fly commercial products tablet pc history accuracy rates 80 90 clean hand printed characters achieved pen computing software accuracy rate translates errors technology limited applications recognition active recognition rates hand printed rates recognition script entire dictionary easier parse individual characters script reading written dictionary increase recognition rates greatly shapes individual characters simply accurately 98 handwritten script programs users set confidence rates software achieve desired level accuracy user manual review characters support ocr standard june 1993 release version characters mapped fonts specific ocr ocr  
50318	computer	symmetric multiprocessing smp involves multiprocessor hardware software architecture identical processors connected single shared main memory access input output devices controlled single operating instance processors equally special purposes multiprocessor systems smp architecture multi core processors smp architecture applies cores separate processors professor john considers traditionally smp systems processors caches 1998 book parallel architecture hardware software approach term smp bit confusion precise description intended smp shared memory multiprocessor cost accessing memory location processors uniform access costs access memory location cached access faster cache access times memory access times processors smp systems tightly coupled multiprocessor systems processors running independently processor executing programs sets data capability sharing common resources memory device interrupt connected bus design smp systems centralized shared memory called main memory operating single operating processors processor private speed memory cache memory cache speed main memory data access reduce bus traffic processors buses switches chip mesh networks bottleneck scalability smp buses switches bandwidth power consumption interconnect processors memory disk arrays mesh architectures avoid provide linear scalability processor counts programming challenges remain architecture requires distinct modes programming cpus interconnect cpus single programming language partition workload memory locality severe mesh based architecture smp systems processor task matter data task located memory task execution processors time proper operating support smp systems easily tasks processors balance workload efficiently history earliest production multiple identical processors burroughs functional 1961 time asymmetric processor restricted application programs processor handled operating hardware interrupts burroughs implemented smp 1962 ibm offered dual processor systems based 360 model 65 closely model 67 67 operating systems machines os 360 360 software developed universities notably michigan terminal cpus processors access data channels os 360 peripherals attached processor operating kernel processors lock supervisor ability cpus ibm 360 model 67 supervisor protect individual common data structures accessed simultaneously cpu mainframes supported smp included released 1965 supported cpus multiprocessor systems master asymmetric fashion multics multiprocessor systems symmetric fashion starting version 1972 digital equipment corporation operating implemented smp feature earliest running smp dual processor cpus smp manner contrast multi processor vax vax 11 asymmetric vax multiprocessor systems smp commercial unix smp implementations included systems balance released 1984 balance released 1986 models based national semiconductor processors write cache connected common memory form shared memory commercial unix smp implementation based systems italy 100 designed dan vast corporation 1985 design supported 14 processors electrical limitations largest marketed version dual processor operating derived ported vast corporation unix code internally earlier commercial multiprocessing unix ports existed including port named created school 1975 time sharing server systems smp applications multiple processes running parallel process running processes processors personal computers smp applications modified rarely runs process time smp applications modified processing custom programmed software written modified multiple threads multiple processors programs time sharing server systems support multithreading allowing multiple processors advantages disadvantages smp processors tightly coupled box bus switch components shared global memory disks devices os runs processors os designed advantage architecture basic advantages involves cost effective increase throughput solve tasks smp applies multiple processors parallel programming limits scalability smp cache shared objects programming smp systems require programming methods achieve maximum performance programs running smp systems experience increase performance written systems hardware interrupts program execution kernel handles execute idle processor applications games performance increase appearance program running applications building software distributed computing projects faster factor additional processors compilers single building software project multiple compilation units compilation unit handled independently creates parallel situation entire multi compilation unit project allowing linear scaling compilation time distributed computing projects inherently parallel design systems programmers build support smp operating additional processors remain idle functions smp systems lead complexity instruction sets processor typically requires extra registers special instructions simd heterogeneous implement types hardware instructions performance program executes time smp considerably performance processor programs cpus simultaneously asymmetric multiprocessing processor program task time assigning specific tasks cpu based priority task completion created smp terms handling multiple cpus lack performance based smp environment processes jobs experience loss hardware efficiency software programs developed schedule jobs functions processor utilization reaches maximum potential software packages achieve maximum potential scheduling cpu separately integrate multiple smp machines clusters access ram cache issues performance additional processors alternatives smp single shared bus represents earliest multiprocessor machine architectures typically building computers processors larger systems architectures uniform memory access memory banks processors architecture processors access local memory remote memory dramatically improve memory throughput data specific processes processors cost moving data processor workload balancing expensive benefits limited notably servers data tasks users finally multiprocessing memory processors clustering techniques extensively build supercomputers variable smp variable symmetric multiprocessing specific mobile technology nvidia technology includes extra core quad core device called core built executing tasks frequency mobile active mode video music project patented nvidia soc chip implement technology technology reduces mobile power consumption active quad core performance active usage intensive mobile applications technology addresses increase battery life performance active usage reducing power consumption mobile processors current smp architectures core os transparent meaning operating running applications extra core advantage advantages architecture includes cache os efficiency power optimization advantages architecture explained advantages lead architecture considerably benefit architectures technologies  
50408	computer	engineering branch engineering fields science electronics engineering required develop hardware software engineers training electronic engineering electrical engineering software design integration software engineering electronic engineering engineers involved hardware software aspects computing design individual microcontrollers microprocessors personal computers supercomputers circuit design field engineering focuses systems integrate larger picture usual tasks involving engineers include writing software firmware embedded microcontrollers designing chips designing analog sensors designing mixed signal circuit boards designing operating systems engineers suited robotics relies heavily digital systems control monitor electrical systems motors communications sensors institutions engineering students allowed choose depth study senior knowledge design application computers scope degree institutions require engineering students complete engineering engineering primary focus history engineering 1939 john developing electronic digital physics mathematics electrical engineering john physics mathematics university graduate electrical engineering physics created complete original discarded 1940s late 1997 team researchers engineers 000 build history engineering education engineering degree program united established 1971 western university 250 engineering programs europe engineering schools variety agencies network increasing job requirements engineers concurrently design hardware software firmware manage forms systems industry institutions offer bachelor degree called engineering engineering electronic engineering programs include analog digital circuit design engineering disciplines sound knowledge mathematics science engineers education engineering referred science engineering universities entry level engineering jobs require bachelor degree engineering science engineering typically learn array mathematics algebra science classes degree electronic engineering accepted similarity fields hardware engineers commonly software systems strong background programming engineering major electrical engineering science courses specialized jobs require master degree engineers rapid advances technology continue learning helpful learning skills improving existing relative cost bug increases software development cycle cost attributed developing testing quality code process release applications practice major engineering hardware software hardware engineering job outlook hardware engineers expected growth 2014 hardware engineering estimated total jobs slower average compared 2012 estimate 2010 estimate hardware equal electronic engineering divided embedded design software engineering labor statistics applications software engineers systems software engineers projected faster average growing expected growth 2014 software engineering estimated percent total 000 jobs 2012 estimate 22 software developers 30 2010 estimate addition growing concerns security add software engineering average rate increase fields foreign countries job growth fast decade jobs software engineers united software engineers countries india addition job outlook programmers decline program computers embedded systems application developers field engineering coding cryptography protection engineers coding cryptography protection develop methods digital images music copyright forms examples include wireless communications multi systems optical transmission digital communications wireless networks focusing communications wireless networks telecommunications systems networks wireless networks error control coding theory speed network design interference design analysis fault tolerant storage transmission schemes compilers operating systems focuses compilers operating systems design development engineers field develop operating architecture program analysis techniques techniques quality examples field includes post link time code transformation algorithm development operating development computational science engineering computational science engineering discipline career center individuals computational methods applied solve complex mathematical engineering physical social sciences examples include aircraft design processing features semiconductor circuit design radar detection systems transport biological channels networks mobile computing distributed systems engineers build integrated environments computing communications access examples include shared channel wireless networks adaptive resource management systems improving quality service mobile environments examples include wireless network systems fast ethernet cluster wired systems systems architecture parallel processing engineers systems projects reliable secure performance systems projects designing processors multi threading parallel processing included field examples field include development theories algorithms tools add performance systems architecture includes cpu design cache hierarchy layout memory organization load balancing vision robotics engineers focus developing visual sensing technology sense environment representation environment manipulation environment dimensional implemented perform variety tasks include improved human modeling image communication interfaces devices special purpose cameras vision sensors embedded systems individuals design technology speed reliability performance systems embedded systems devices radio space career center ongoing developments embedded systems include automated vehicles equipment conduct search automated transportation systems repair equipment space embedded engineering include chip design architecture edge computing internet integrated circuits design testing cad engineering requires knowledge electronics electrical systems engineers speed reliability energy efficiency generation scale integrated circuits microsystems reducing power consumption algorithms architecture signal image speech processing engineers develop improvements interaction including speech recognition synthesis medical scientific imaging communications systems includes vision development recognition human facial features references 17 https department history history https hardware https software engineer  
51702	computer	superscalar processor cpu implements form parallelism called instruction level parallelism single processor contrast scalar processor execute single instruction clock cycle superscalar processor execute instruction clock cycle simultaneously multiple instructions execution units processor throughput instructions executed unit time clock rate execution unit separate processor core processor multi core processor execution resource single cpu arithmetic logic unit single core superscalar processor classified processor single instruction stream single data stream superscalar processors support short vector operations classified simd single instruction stream multiple data streams multi core superscalar processor classified mimd processor multiple instruction streams multiple data streams superscalar cpu typically pipelined superscalar pipelining execution considered performance enhancement techniques executes multiple instructions parallel multiple execution units executes multiple instructions execution unit parallel execution unit phases superscalar technique traditionally identifying characteristics cpu history cray 1966 mentioned superscalar design 1967 ibm 360 model superscalar mainframe motorola 1988 intel 1989 amd series 1990 microprocessors commercial single chip superscalar microprocessors risc microprocessors superscalar execution risc architectures transistors die include multiple execution units risc designs faster cisc designs 1980s 1990s cpus power applications embedded systems battery powered devices essentially purpose cpus developed 1998 superscalar pentium superscalar x86 processor pentium pro amd designs decode x86 instructions dynamic microcode micro sequences prior actual execution superscalar microarchitecture dynamic scheduling partial instructions enabled parallelism extracted compared methods simpler pentium simplified speculative execution allowed clock frequencies compared designs advanced scalar superscalar simplest processors scalar processors instruction executed scalar processor typically data items time contrast instruction executed vector processor operates simultaneously data items difference scalar vector arithmetic superscalar processor mixture instruction processes data item multiple execution units cpu multiple instructions processing separate data items concurrently superscalar cpu design emphasizes improving instruction accuracy allowing multiple execution units times increasingly units increased superscalar cpus alus single fpu design powerpc includes alus simd units keeping units fed instructions performance simpler cheaper design superscalar processor execution rate instruction machine cycle processing multiple instructions concurrently architecture superscalar pipelined multiprocessor multi core architectures achieve methods superscalar cpu reads instructions memory parallel execution units contained single cpu superscalar processor multiple parallel pipelines processing instructions simultaneously single instruction thread limitations performance improvement superscalar techniques limited key existing binary executable programs varying degrees parallelism instructions dependent executed simultaneously inter dependent instruction resources instructions codice parallel depend calculations instructions codice parallel depending instructions complete units simultaneously issued instructions increases cost dependency checking increases extremely rapidly check dependencies time cpu clock rate cost includes additional logic gates required implement checks time delays gates gate cost gates delay cost instructions processor instruction set simultaneously instructions instruction stream inter instruction dependencies superscalar cpu check possibility failure detect dependency produce incorrect matter advanced semiconductor process fast switching speed practical limit instructions simultaneously process advances execution units alus checking instruction dependencies grows rapidly complexity register renaming circuitry dependencies power consumption complexity gate delay costs limit superscalar speedup roughly simultaneously instructions fast dependency checking logic conventional superscalar cpu instruction stream dependencies limit speedup degree parallelism code stream forms limitation alternatives limits drive investigation alternative architectural instruction word vliw explicitly parallel instruction computing simultaneous multithreading smt multi core computing vliw task dependency checking hardware logic time removed compiler explicitly parallel instruction computing vliw extra cache instructions simultaneous multithreading smt technique improving efficiency superscalar processors smt multiple independent threads execution utilize resources modern processor architectures superscalar processors multi core processors execution units entire processors single processor composed grained execution units alu integer integer fpu multiple versions execution unit enable execution instructions parallel differs multi core processor concurrently processes instructions multiple threads thread processing unit called core differs pipelined processor multiple instructions concurrently stages execution assembly fashion alternative techniques frequently combined single processor cpu core independent processor multiple parallel pipelines pipeline superscalar processors include vector capability  
51706	computer	instruction word vliw refers instruction set architectures designed exploit instruction level parallelism ilp conventional central processing units cpu processor programs instructions execute sequence vliw processor programs explicitly instructions execute parallel design intended performance complexity inherent designs overview traditional improve performance processors include instructions instructions executed partly time termed pipelining individual instructions executed independently processor superscalar architectures executing instructions program execution methods hardware larger circuits cost energy processor decisions internally methods contrast vliw method depends programs providing decisions instructions execute simultaneously resolve practical matter compiler software create final programs complex hardware simpler parallelism motivation processor executes instruction pipelined scalar architecture processor resources potential poor performance performance improved executing sequential instructions simultaneously termed pipelining executing multiple instructions simultaneously superscalar architectures improvement achieved executing instructions occur program termed execution methods hardware complexity executing operations parallel processor instructions instruction result instruction input execute time instruction execute modern processors increased hardware resources schedule instructions determine contrast vliw executes operations parallel based fixed schedule determined programs compiled determining execution operations including operations execute simultaneously handled compiler processor scheduling hardware methods require vliw cpus offer computing hardware complexity compiler complexity superscalar cpus design superscalar designs execution units instruction set instruction operation superscalar designs instruction 32 bits contrast vliw instruction multiple operations operation execution unit device vliw device execution units vliw instruction device operation fields field operation execution unit accommodate operation fields vliw instructions 64 bits wide wider architectures instruction super harvard architecture single chip cycle floating floating add loads 48 bit instruction codice earliest days architecture cpus arithmetic logic units alus parallel superscalar cpus hardware decide operations parallel runtime vliw cpus software compiler decide operations parallel advance complexity instruction scheduling moved compiler complexity hardware reduced occurs result instruction input branch modern cpus guess branch calculation complete load instructions branch architectures start compute cpu wrong instructions context correct loaded takes time led increasingly complex instruction dispatch logic attempts guess correctly simplicity original reduced instruction set computing risc designs vliw logic energy design negative aspects vliw compiler profile guess direction branch operations branch path branch branch takes compiler generated code speculative preserve program semantics vector processor single instruction multiple data simd cores combined vliw architecture fujitsu microprocessor increasing throughput speed history concept vliw architecture term vliw invented yale university 1980s original development trace scheduling method vliw developed graduate student york university vliw notion execution units instruction level parallelism software established practice developing horizontal microcode innovations involved developing compiler target horizontal microcode programs written ordinary programming language realized performance target wide issue machine parallelism basic block developed region scheduling methods identify parallelism basic blocks trace scheduling method involves scheduling path basic blocks code deal speculative scheduling trace schedule complete innovation notion target cpu architecture designed reasonable target compiler compiler architecture vliw processor inspired partly difficulty observed yale architectures floating systems complex instruction set computing cisc architecture separated instruction instructions saved result complex scheduling algorithms developed set principles proper vliw design pipelines wide multi port register files memory architectures principles easier compilers fast code vliw compiler thesis john supervised compiler named yale john developed algorithms scheduling left yale 1984 startup company john john produced trace series vliw machines 1987 vliw issue 28 operations parallel instruction trace implemented mix medium scale integration scale integration lsi scale integration packaged technology grew cost effective integrate components processor memory chip wave chip architectures multiple issue cpus major semiconductor companies recognized technology context compiler architecture subsequently licensed implementations company producing vliw numeric processors coupled logic integrated circuits late 1980s company failed technology hewlett packard joined founder joined hp failed lead architecture hewlett packard 1990s systems time intel implemented vliw intel 64 bit microprocessor processor implement vliw chip processor operate simple risc mode vliw mode 1990s intel introduced risc microprocessor simple chip modes operation scalar mode vliw mode vliw mode processor fetched instructions assumed integer instruction floating vliw mode extensively embedded digital signal processor dsp applications application execution datasets simple allowing designers exploit parallel execution advantages enabled vliw vliw mode maintain floating performance range 20 40 double precision time processor running 25 1990s hewlett packard ongoing risc processor family cpu greatly simplified removing complex dispatch logic cpu compiler compilers day complex 1980s complexity compiler considered cost vliw cpus multiple risc execution units operate independently contemporary main execution units compilers generate initial instruction sequences vliw cpu roughly manner traditional cpus generating sequence risc instructions compiler code dependence relationships resource requirements instructions constraints process independent instructions scheduled parallel typically represent instructions scheduled parallel instruction word incorporates individual instructions opcode termed executes cycle examples contemporary vliw cpus include media processors semiconductors super harvard architecture single chip dsp analog devices digital signal processor dsp family texas instruments family based architecture designed hp lab family contemporary vliw cpus successful embedded media processors consumer electronic devices vliw features processor cores chip soc designs processor incorporates technology named flexible instruction extensions multi operation instructions compiler freely 32 64 bit instructions processor operation risc instructions 16 24 bits wide multiple operations wide 32 64 bit instruction word allowing multi operation instructions shorter risc instructions soc designers vliw performance advantages code vliw architectures dsp vliw processor core intended soc code density improvement method called instruction word embedded processing markets intel ia 64 explicitly parallel instruction computing 2000 examples vliw cpu architectures architecture distinguished pure vliw architecture instruction register files instruction word encode parallel instruction gained consumer graphics processing unit gpu market nvidia amd moved risc architectures improve performance graphics technologies advanced micro devices amd microarchitecture graphics processing units gpus vliw microarchitecture december 2015 pcs based vliw cpu russia compatibility silicon technology allowed wider implementations execution units built compiled programs earlier generation wider implementations encoding binary instructions execution units machine addressed issue including binary binary software compiler layer termed code implementation x86 architecture mechanism basically optimize translate x86 runtime cpu internal machine code chip internally vliw processor effectively x86 cisc instruction set executes intel architecture solved compatibility mechanism multiple opcode instructions bit field allocated denote dependency prior vliw instruction program instruction stream bits set compile time hardware calculating dependency dependency encoded instruction stream wider implementations issue multiple dependent vliw instructions parallel cycle implementations issue vliw instructions cycle perceived vliw designs code occurs execution unit execute operation instructions occurs dependencies code instruction pipelines allowed operations transistors chip grown perceived disadvantages vliw vliw architectures growing popularity embedded market processor application chip embedded vliw products vendors including fujitsu 16 semiconductors dsp dsp systems silicon texas instruments dsp evolved family vliw contrast earlier family  
52469	computer	stephen wolfram born 29 august 1959 british american scientist science mathematics theoretical physics 2012 named fellow american mathematical society founder ceo software company wolfram chief designer mathematica wolfram alpha answer engine knowledge based programming programming language mathematica called wolfram language life family stephen wolfram born london 1959 wolfram german united kingdom wolfram father wolfram manufacturer born germany served managing director company makers author england war left school 15 subsequently hard job regarded correspondence courses philosophy wolfram wolfram born originally germany fellow philosophy hall university oxford 1964 1993 published books logic introduction 1989 translator mind translation expert subject germany england parents stephen wolfram mathematician children stephen degree mathematics science inventor patented method computing device recognizing mathematical expressions led highly regarded conferences events including south interactive university oxford summer school mit independent activities period 2016 awarded technical raw science film movie personal achievements serves programmer wolfram education wolfram college left 1976 entered john college oxford age 17 left 1978 california institute technology received phd particle physics 19 november 1979 age 20 wolfram thesis committee composed richard peter richard field career child wolfram difficulties learning arithmetic age 12 wrote dictionary physics 13 14 written books particle physics particle physics wolfram age 15 applied quantum field theory particle physics published scientific papers topics included matter creation fundamental interactions physics model published professional peer reviewed scientific journals including nuclear physics journal physics physical review independently wolfram published cited paper heavy production age 18 papers continued publish particle physics wolfram theory strong interaction experimental particle physics 1981 letter reference wolfram grant appears collected letters reasonable track phd wolfram joined faculty 1981 age 21 career complex systems cellular automata 1983 wolfram left school natural sciences institute advanced study princeton conducted cellular automata simulations produced series papers class cellular automata wolfram code naming dimensional cellular automata classification scheme complexity behaviour rule cellular automaton turing complete proved correct 1985 letter wolfram appears letters response wolfram writing thinking creating institute study complex systems wolfram understand ordinary people contact technical people mid 1980s wolfram simulations physical processes fluid flow cellular automata connection machine helped field complex systems 1984 founding institute nobel future 1986 founded center complex systems university 1987 journal complex systems journal field complex systems published papers decades complex systems developed broad base readers industry government public 50 countries symbolic manipulation program wolfram led development algebra smp symbolic manipulation program physics department administration intellectual property rights copyright faculty commercial caused smp developed marketed commercially inference los angeles institute advanced study 1983 wolfram joined institute advanced study princeton jersey based time particle physics viewed creative cellular automata wolfram analyzed sets rules developing classification rated complexity cellular view complexity real wolfram mind cellular automata runs deep universe wolfram cellular automata cited 000 papers mathematica 1986 wolfram left institute advanced study university founded center complex systems started develop algebra mathematica released 23 june 1988 left 1987 founded wolfram continues develop market program wolfram life laws program mathematica analyze data wolfram wolfram serves ceo wolfram europe science 1992 2002 book science empirical study simple computational systems additionally argues fundamental reasons types systems traditional mathematics model understand complexity nature wolfram universe digital nature runs fundamental laws simple programs scientific communities major influence physics biology majority scientific reason book title release book 2002 wolfram split time developing mathematica people involved subject matter science holding conferences starting summer school devoted topic 2017 publication electronic version science launched includes complete access resolution images wolfram wolfram result exploration science shortest single equivalent boolean algebra result search operations variables equivalent boolean algebra vertical bar represents logical operation stroke 25 candidates precisely set equal 15 elements images models size equal variables applications science 2003 wolfram hosted wolfram summer school brown program designed provide educational career opportunities learning projects science technology innovation 2007 summer school hosted university exception 2009 held italy 2012 program held college massachusetts 2013 wolfram summer school held annually university massachusetts science idea exploring abstract universe computational universe simple programs science wolfram simple programs computational universe capture complexity systems nature led creation wolfram simple programs wolfram computational universe applying music theory wolfram language algorithms render music program defines virtual special wolfram musical composition science wolfram simplest universal turing colors extensive search simpler turing machines simpler candidate turing machine 14 2007 publication science wolfram announced 25 000 prize person determine turing machine universal provide proof months contest announcement student turing machine universal 40 paper prove wolfram alpha computational knowledge engine march 2009 wolfram announced wolfram alpha answer engine wolfram alpha launched 2009 paid version extra features launched february 2012 engine based natural language processing library algorithms answers queries approach science application programming interface applications extend enhance alpha wolfram believes wolfram alpha common level scientific average person wolfram alpha answer engines apple siri answering questions 2010 wolfram founded gray max john company creating depth apps games covering wide range educational subjects designed children parents students launch published 100 apps wolfram language march 2014 annual south event wolfram officially announced wolfram language multi paradigm programming language multi paradigm computational communication language documentation language pre released october 2013 mathematica wolfram language raspberry pi wolfram language existed 25 primary programming language mathematica officially named 2014 wolfram wolfram appeared program live coding demonstration wolfram language wolfram language wolfram december 2015 wolfram published book introduction wolfram language introduce people knowledge programming wolfram language computation release edition book ceo competition 2017 collision tech conference popular culture 2017 wolfram live stream internal wolfram language development viewers encouraged questions comments development programming language viewers functions developed functions solve complex issues stephen wolfram development team live viewed youtube live facebook live live streams accessed personal personal activities data products wolfram creates life extensive log personal analytics including received events attended phone calls physical movement 1980s stated analytics dimension stephen wolfram wolfram involved create language film wolfram language 2018 wolfram producing stephen topics ranging history science future ethics  
52742	computer	desktop personal designed regular single location desk table size power requirements common configuration power supply motherboard printed circuit board microprocessor central processing unit cpu memory bus electronic components disk storage hard disk drives optical disc drives models floppy disk drive keyboard mouse input monitor speakers printer output oriented horizontally vertically desk history origins prior widespread microprocessors fit desk considered type computers commonly minicomputers desk sized computers space minicomputers fit sized 1970s programmable computers appeared fit desk 1970 introduction smart terminal complete keyboard monitor designed connect mainframe owners built computational abilities stand desktop hp series started programmable 1971 programmable basic 1972 version minicomputer design based rom memory led displays displayed graphics 1973 size ray tube crt tape storage ibm 1975 crt display programmed basic expensive specialized computers sold business scientific growth development apple 80 commodore pet generation personal computers launched 1977 aimed consumer market – byte magazine referred 1977 personal computing 1980s 1990s desktop computers type popular ibm pc apple macintosh commodore success mid 1980s 1990s personal computers original ibm personal desktop horizontally oriented display screen saving space user actual desk support weight crt displays widespread time 1990s desktop gradually common accessible tower tower trademark created agency located floor desk desk tower expansion desk space monitors larger desktop compact form factors remain popular corporate computing environments horizontally desktop mini tower influential games 1990s frequently upgrade cpus graphics cards nvidia desktops tower applications late 2000s growing popularity intel integrated graphics forced game developers scale creative technology sound series standard sound cards desktop pcs 1990s 2000s reduced product oem desktop pcs sound boards integrated motherboard decline desktops common configuration pcs mid 2000s growth shifted desktops laptops notably desktops produced united laptops produced contract manufacturers based asia shift led closure desktop assembly plants united 2010 trend time increasing proportion inexpensive base configuration desktops sold pc manufacturers build desktops features battery powered portable computers worldwide market share 1986 laptops increasingly popular business personal notebook pcs shipped worldwide 2007 growth 33 compared 2006 2008 estimated notebooks sold grow 2009 quarter 2008 time worldwide notebook pc desktops 38 units 38 units sales apple macintosh sales desktop constant mac notebooks sales rate grown considerably sold laptops 2009 ratio projected rise 2010 change sales form factors desktop moving subsequent releases considered contrast laptop lines dropped successive generations air pro lowest price entry mac exception inexpensive mac mini monitor keyboard selling form factors macintosh platform decades development people desktop computers meet technology notably successive release versions windows windows 95 98 xp vista drivers replacement pcs 1990s 2000s poor reception windows vista windows xp analysts suggested windows sales pcs 2012 businesses decided windows upgrade suggested desktop pc death windows offers upgrade desktop pc functionality windows windows innovations mobile post pc trend decline sales desktop laptop pcs decline attributed increased power applications alternative computing devices smartphones tablet computers people exclusively smartphones tablets basic tasks social media gaming devices instances replaced pc performed tasks families powerful pc pc form factors desktops remain enterprise market lost popularity pc makers electronics responded engineering marketing resources laptops initially netbooks late 2000s performance 2011 manufacturers potential pc market desktops april 2017 declared milestone technology history era android operating popular windows operating desktops dominant mainframe computers windows popular desktops laptops smartphones tablets android ios apple products windows mobile types desktop internal components display cables desktops incorporate tower form factor popular 1980s personal computers intended professional 80 model portable manufacturers computers commodore atari included motherboard keyboard systems connected television set display apple manufactured popular examples computers original macintosh mid 1980s late 1990s 2000s desktops laptop components reduce size mid 2000s designs flat panel displays models incorporated touchscreen displays allowing mobile tablet laptops desktop computers characterized upgrade internal components systems provide convenient access components aspects hardware require entire replaced health remaining components exceptions monitor portion hp workstation flat vehicle access internal hardware sized desktops common budget friendly compared market separate display component processing component components connected cables wireless connection execute command computers easy upgrade user requirements theater desktops connected entertainment systems typically purpose definition display video graphics sound systems typical pc features compact desktops comparable sized desktops reduced physical compact desktops difficult upgrade comparison laptops desktops advantage laptops extensions tend standardized prices availability size motherboard standardized form factors desktops standardized expansion slots conventional express laptops tend mini slot pc card slot slot procedures assembly desktops tend simple standardized laptops adding replacing optical drive hard disk adding extra memory module simple desktop configuration tower customized upgraded extent laptops tower popular advantage desktop environmental concerns power consumption critical laptop computers desktop exclusively powered wall socket desktop computers provide space cooling fans heat allowing risk microprocessor manufacturers intel amd developed special cpus mobile computers laptops power heat performance levels laptop computers conversely offer portability desktop systems including form factor desktops compact size design laptop design built keyboard device user draw power supplied battery laptops commonly integrate wireless technologies bluetooth broader range options connecting internet trend changing desktop computers integrated technologies desktop handle electrical short achieving battery time minutes desktop pc requires expensive laptop battery continue hours power short power desktop advantage comparable laptop computational capacity feasible desktop laptop hardware add discrete graphics processors install desktop  
53064	computer	cryptography principle called assumption law stated netherlands born century secure key public knowledge principle independently formulated american mathematician design systems assumption gain form called principle contrast security origins journal articles stated design principles military translated french relevant ability computers perform complex encryption principle explanation principle viewed cryptography alternative encoding common century meaning military messages encoding schemes rely held dictionaries secret meaning dictionaries revealed encoding risk exposure increases users holding secret increases century cryptography contrast simple tables characters row column modified short numeric human memory considered tables meaning secret messages matching set table key message falls hands relevant time frame viewed messages hours relevance systems components character tables easily changed advantage secret secure cryptography supposed replace difficult keeping messages secure keeping secure requires term complex design achieve goal replaces hard secure key manage keeping secret internal details discovered obvious staff customers war capture equipment people method involves software memory software control understand method hardware hardware build programs hardware chip details maintaining security generalization principle simpler ensure security easier maintain security bruce belief security systems designed fail security depends keeping secret principle secret costly change algorithm implemented hardware software distributed users security depends keeping secret leads major logistic difficulties developing testing implementations algorithm – hand keeping algorithm secret algorithm secret simply requires simpler costly process generating applications principle majority cryptography publicly algorithms contrast protect classified government military secret type encryption assumed government military secret maintain security intended sound public algorithms decision secret keeping layered security security common companies standards bodies encryption secret argue security product attack counter argument keeping secret improve security short term systems published analyzed trusted  
53887	computer	linguistics corpus corpora corpus structured set texts stored processed corpus linguistics statistical analysis hypothesis testing checking occurrences linguistic rules specific language overview corpus texts single language corpus data multiple languages multilingual corpus multilingual corpora comparison called aligned parallel corpora main types parallel corpora texts languages translation corpus texts language translations texts language comparable corpus texts cover content translations exploit parallel alignment identifying equivalent segments phrases sentences analysis machine translation algorithms translating languages trained parallel fragments language corpus language corpus element element translation language corpus corpora linguistic process annotation corpus speech tagging tagging word speech corpus form tags base form word language corpus language researchers annotation bilingual corpora structured levels analysis applied corpora corpora called corpora difficulty entire corpus completely consistently corpora levels linguistic structured analysis including morphology semantics corpora main knowledge base corpus linguistics analysis processing types corpora subject computational linguistics speech recognition machine translation create hidden markov models speech tagging purposes corpora frequency lists derived language teaching corpora considered type foreign language writing aid knowledge acquired native language users exposure texts corpora manner sentence target language enabling effective writing corpora corpora study historical documents attempts corpora short duration provide time shortest corpora time letters texts corpus city texts series corpora determined dates  
55359	computer	single instruction multiple data simd class parallel computers describes computers multiple processing elements perform operation multiple data simultaneously machines exploit data level parallelism simultaneous parallel computations single process instruction moment simd applicable common tasks contrast digital image volume digital audio modern cpu designs include simd instructions improve performance multimedia confused utilizes threads history simd instructions completed 1966 simd basis vector supercomputers 1970s star 100 texas instruments operate vector data single instruction vector processing cray 1970s 1980s vector processing architectures considered separate simd computers based vector computers processed vectors word time pipelined processors based single instruction modern simd computers process elements vector simultaneously era modern simd computers characterized parallel processing style supercomputers thinking machines computers limited functionality processors parallel 65 single bit processors thinking machines execute instruction time allowing instance combine 65 pairs bits time connected network processor dedicated ram operands moved simd approach inexpensive scalar mimd approaches based processors intel xp powerful simd current era simd processors grew desktop market supercomputer market desktop processors powerful support real time gaming audio video processing 1990s demand grew type computing power microprocessor vendors simd meet demand hewlett packard introduced max instructions risc desktops 1994 accelerate decoding sun microsystems introduced simd integer instructions instruction set extensions 1995 microprocessor mips suit deployed desktop simd intel extensions x86 architecture 1996 introduction powerful motorola powerpc ibm power systems intel responded 1999 introducing extensions simd instruction sets architectures developments oriented support real time graphics oriented processing dimensions vector lengths depending data type architecture simd architectures distinguished architectures considered short vector architectures earlier simd vector supercomputers vector lengths 64 64 000 modern supercomputer cluster mimd computers implements short vector simd instructions modern desktop multiprocessor mimd processor execute short vector simd instructions advantages application advantage simd data common operation multimedia applications changing brightness image pixel image consists values brightness red green blue portions color change brightness values read memory values written memory simd processor improvements process data understood blocks values loaded series instructions pixel pixel simd processor single instruction effectively pixels varies design design variety reasons time pixel individually traditional cpu design advantage instruction operates loaded data single operation simd loading data codice operation applied data happen values time parallelism separate parallelism superscalar processor values processed parallel superscalar processor superscalar processor perform multiple simd operations parallel examples simd supercomputers including vector processors hardware scale 64 128 bits simd popular purpose cpus 1990s continued 1997 motion video instructions alpha simd instructions degree cpus including ibm powerpc hp risc multimedia acceleration extensions max intel amd arc arc video sparc sun arm technology mips mips 3d ibm sony toshiba developed cell processor instruction set heavily simd based founded developed simd processors named processor elements designed vision tasks modern graphics processing units gpus wide simd implementations capable branches loads stores 128 256 bits time intel simd instructions process 256 bits data intel prototype microarchitecture includes bit simd registers cores wide vector processing units bit simd capability continued intel integrated core architecture intel software simd instructions process 3d graphics modern graphics cards embedded simd task cpu systems include functions pack elements vectors data processing compression cryptography trend purpose computing gpus gpgpu lead wider simd future adoption simd systems personal software slow simd instruction sets slow performance existing floating registers systems offered support data types wide audience expensive context switching instructions switch fpu registers compilers support requiring programmers assembly language coding simd x86 slow start introduction amd intel confused amd compilers result simd enabled software intel amd provide optimized math libraries simd instructions source alternatives started apple success entered simd market rest offered rich programmed increasingly sophisticated compilers motorola ibm gnu assembly language programming rarely additionally systems benefit simd supplied apple 2006 apple computers moved intel x86 processors apple apis development tools modified support apple dominant powerpc chips ibm semiconductor abandoned platform development continued power architecture designs ibm 15 apple announced simd vectors support version programming language swift simd register range techniques performing simd purpose registers hardware provide direct support simd instructions exploit parallelism algorithms hardware support simd simd libraries implement simd package 2013 john announced created interface simd instruction sets programming language bringing benefits simd programs time interface consists types instances types optimized code mapped simd registers operations expressed typically compiled single instruction overhead matrix multiplication 3d vertex transformation set visualization 400 speedup compared scalar code written intel announced 2013 implementing specification javascript compiler extensions enable compilation programs simd gcc style vector code simd api javascript equivalent compared scalar code commercial applications proven difficult commercial applications simd processors measure success developed martin commercial sector spin powerful tool real time video processing applications conversion video standards frame rates formats image noise reduction adaptive video compression image enhancement application simd video games modern video game console 1998 incorporated simd processor architecture unusual vector units function autonomous dsp executing instruction stream coprocessor driven ordinary cpu instructions 3d graphics applications tend simd processing rely heavily operations dimensional vectors runtime processor specific implementations math operations including simd capable instructions processors vector processing cell processor developed ibm cooperation toshiba sony simd processors architecture independent local store controlled purpose cpu huge datasets required 3d video processing applications differs traditional simd ground separate scalar registers produced simd type processor mobile devices media players mobile phones larger scale commercial simd processors technology stream processors 2004 96 cores double precision floating units 2008 stream processors headed processor 2007 80 simd cores controlled mips cpu  
58019	computer	harvard architecture architecture physically separate storage signal instructions data term originated harvard mark based stored instructions tape 24 bits wide data mechanical machines data storage contained central processing unit access instruction storage data programs loaded operator processor processors implement separate signal performance reasons implement modified harvard architecture support tasks loading program disk storage data executing memory details harvard architecture memories share characteristics word timing implementation technology memory address structure systems instructions pre programmed tasks stored read memory data memory requires read write memory systems instruction memory data memory instruction addresses wider data addresses contrast von neumann architectures pure von neumann architecture instructions data stored memory instructions fetched data path fetch data cpu simultaneously read instruction read write data memory harvard architecture cpu read instruction perform data memory access time cache harvard architecture faster circuit complexity instruction data access single memory harvard architecture machine distinct code data address spaces instruction address data address instruction address identify bit data address bit byte bit contrast modified harvard architecture modified harvard architecture machine harvard architecture machine strict separation instruction data cpu concurrently access memory buses common modification includes separate instruction data caches common address space cpu executes cache acts pure harvard machine accessing memory acts von neumann machine code moved data powerful technique modification widespread modern processors arm architecture power architecture x86 processors loosely called harvard architecture modified modification instruction memory rom flash memory cpu instruction memory treated read data technique microcontrollers including constant data strings function tables accessed copied data memory power data memory read write variables special machine language instructions read data instruction memory instruction memory accessed peripheral interface distinct instructions constant data individual mechanisms speed speed cpu grown times comparison access speed main memory care reduce times main memory accessed maintain performance instance instruction cpu requires access memory gains increased cpu referred memory bound extremely fast memory practical amounts memory cost power signal routing reasons solution provide fast memory cpu cache holds accessed data data cpu cache performance cpu data main memory internal external design modern performance cpu chip designs incorporate aspects harvard von neumann architecture split cache version modified harvard architecture common cpu cache memory divided instruction cache data cache harvard architecture cpu accesses cache cache data retrieved main memory formally divided separate instruction data sections separate memory controllers concurrent access ram rom flash memory von neumann architecture visible contexts data code memory controller hardware implementation gains harvard architecture cache accesses main memory accesses addition cpus write cpus writes cached regions von neumann nature memory visible instructions written data cpu software ensure caches data instruction write buffer execute written instructions modern harvard architecture principal advantage pure harvard access memory reduced modified harvard processors modern cpu cache systems pure harvard architecture machines applications trade cost power caches programming featuring distinct code data address spaces common employ special instructions access program memory data read tables processors modified harvard architecture processors  
58205	computer	computing vector processor array processor central processing unit cpu implements instruction set instructions operate dimensional arrays data called vectors compared scalar processors instructions operate single data items vector processors greatly improve performance notably numerical simulation tasks vector machines appeared 1970s dominated supercomputer design 1970s 1990s notably cray platforms rapid fall price performance ratio conventional microprocessor designs led vector supercomputer 1990s cpu designs include multiple instructions vector processing multiple data sets typically mimd multiple instruction multiple data realized vliw instruction word fujitsu vliw vector processor combines technologies history vector processing development 1960s westinghouse project goal dramatically increase math performance simple math processors control single master cpu cpu fed single common instruction arithmetic logic units alus cycle data allowed machine apply single algorithm data set fed form array 1962 westinghouse project effort university version design originally called machine 256 alus finally delivered 1972 64 alus reach 100 150 basic concept sound data intensive applications computational fluid dynamics fastest machine approach separate alus data element common designs referred separate category parallel computing operations functions developed 1967 supercomputers successful implementation vector processing appears control data corporation star 100 texas instruments advanced scientific basic pipe alu pipeline architecture supported scalar vector computations peak performance reaching 20 achieved processing vectors expanded alu configurations supported performance gain memory bandwidth sufficient support expanded modes star slower supercomputers data tasks expensive machine considerable time decoding vector instructions ready process required specific data sets vector technique exploited 1976 famous cray leaving data memory star cray design vector registers held 64 bit vector instructions applied registers faster main memory cray design pipeline parallelism implement vector instructions multiple alus addition design completely separate pipelines instructions addition implemented hardware multiplication allowed batch vector instructions pipelined technique called vector cray performance 80 running peak – faster machine era examples control data corporation enter market machine sold opportunity leave field mid 1980s japanese companies fujitsu hitachi electric corporation introduced register based vector machines cray typically faster based floating systems fps built add array processors minicomputers building cray continued performance leader competition series machines led cray cray cray supercomputer market focused parallel processing implementations vector processors benefits vector processing ibm developed virtual vector architecture supercomputers scalar processors vector processor vector supercomputers cray popular days continued type day series computers processor 24 48 memory module card physically graphics coprocessor serving processor main pc compatible serving support functions gpgpu modern graphics processing units gpus include array pipelines driven compute kernels considered vector processors strategy memory description terms cpus manipulate pieces data time instance cpus instruction essentially add result data theory instruction efficient implementation rarely simple data rarely raw form passing address memory location holds data decoding address data memory takes time cpu traditionally idle waiting requested data cpu speeds increased memory latency historically performance memory wall reduce time steps modern cpus technique instruction pipelining instructions pass units unit reads address values addresses math pipelining start decoding instruction left cpu fashion assembly address decoder constantly instruction takes time complete time latency cpu process entire batch operations faster efficiently time vector processors concept step pipelining instructions pipeline data processor fed instructions add add constantly decode instructions fetch data complete processor reads single instruction memory simply definition instruction instruction operate item data address larger decoding time illustrate difference simple task adding normal programming language write loop pairs cpu vector processor task considerably inherent approach address translations depending architecture represent saving decoding instruction time code lead efficient memory vector processor multiple functional units adding parallel checking dependencies required vector instruction specifies multiple independent operations control logic required improve performance avoiding stalls mentioned earlier cray implementations step allowing types operations carried time code adds cray fetched single operation cray math operations completed faster limiting factor time required fetch data memory sort solution including types instructions adds complexity core cpu complexity typically instructions adding row complex instructions add complexity slow decoding common instructions normal adding vector processors amounts data reason cpus supercomputers supercomputers weather prediction centers physics labs huge amounts data performance speed vector speed ratio ratio time vector unit add array 64 times faster equivalent scalar total operations program 100 scalar 90 vector unit speed performance vector unit speedup suggests ratio performance ratio depends efficiency compilation elements memory programming heterogeneous computing architectures machines designed include traditional processors vector processors fujitsu programming heterogeneous machines difficult developing programs characteristics processors increases programmer increases code complexity decreases portability code requiring hardware specific code application code balancing application workload processors typically performance characteristics conceptual models deal language program building blocks programming libraries functions block native implementation processor type users simply program intelligent compiler implementation based context  
58900	computer	unmanned vehicle uav commonly drone aircraft human pilot uavs component unmanned aircraft include uav ground based controller communications flight uavs operate degrees autonomy remote control human operator autonomously computers compared aircraft uavs originally dirty dangerous humans originated military applications rapidly commercial scientific applications surveillance product photography drone racing uavs military uavs estimates sold 2015 terminology multiple terms unmanned vehicles refer concept term drone public coined reference remotely target aircraft practice term target aircraft service named ultimate replacement term unmanned aircraft united department defense united federal administration 2005 unmanned aircraft international civil organization british civil authority term european union single european air traffic management joint term emphasizes elements aircraft includes elements ground control stations data links support equipment term unmanned aircraft vehicle uavs remotely vehicle remotely aircraft terms uav defined powered vehicle carry human operator forces provide vehicle fly autonomously remotely carry payload considered uavs vehicle unmanned remotely guided relation uavs remote controlled model aircraft uavs include model aircraft base definition size weight federal administration defines unmanned flying uav size drone opposed uav model aircraft person video autonomous capabilities history file iii thumb 1975 modern uav data link live video streaming earliest recorded unmanned vehicle occurred july serving carrier aircraft carrier air power forces attempted launch 200 city launched land launched ship fell city wind changing launch target lines ship uav innovations started originally focused providing practice targets training military uav development continued war company invented time earliest attempt powered uav target tesla unmanned combat vehicles advances war including automatic developments inspired development bug charles initially meant unmanned plane carry payload target scaled remote vehicle developed film star model emerged war train fly attack germany produced uav aircraft war jet engines entered service war vehicles companies offered model navy 1955 remote controlled vietnam war 1959 air force concerned losing planning unmanned aircraft planning union shot 1960 days highly classified uav program started code red august 1964 units north navy america highly classified uavs model 21 combat vietnam war chinese government photographs uavs wide photos official response war uavs installed cameras tested intelligence bringing photos time uavs launched short jet based uavs developed tested 1973 war israel uavs forces expensive anti aircraft 1973 war key people team developed uav joined startup company aimed develop uavs commercial product eventually purchased leading development 1973 military officially confirmed uavs asia vietnam 000 000 missing captured strategic uav war cost uavs lost george brown air force systems command 1972 reason uavs john chief strategic air command stated drone risk loss rate risk save 1973 war supplied surface air batteries caused heavy damage result israel developed uav real time surveillance images radar uavs helped israel completely air start 1982 war time uavs proof concept super post controlled flight combat flight simulations involved technology based dimensional flight control jet steering uavs israel 1987 applicable technologies 1980s 1990s uavs grew military 1990s contract corporation company navy bought pioneer uav developed jointly uavs service 1991 war uavs demonstrated possibility cheaper capable machines risk initial generations involved surveillance aircraft carried launched air ground european union project develop uavs running 2002 31 december 2005 2012 employed uavs aircraft central intelligence agency operated uavs 2013 50 countries uavs china iran israel designed built classification uavs typically fall functional categories multi role platforms military uav military individual aircraft elements usage plan vehicles terms range advanced relevant industry events unmanned systems forum categories include aircraft weight simpler uav components unmanned aircraft type physical components main exceptions environmental control life support systems uavs carry camera considerably human result considerably carry heavy military uavs lighter comparable uavs life critical systems built lighter materials shapes tested electronic control systems uavs design popular layout rarely aircraft powerful technologies feasible aircraft electric motors batteries control systems uavs remote human control camera video link replace windows radio transmitted digital commands replace physical controls autopilot software unmanned aircraft varying feature sets body primary difference absence windows common form factor uavs common platforms power supply platform uavs batteries larger vehicles rely conventional engines scale size aircraft defining limiting characteristic energy supply uav energy density gasoline record travel uav built north held gasoline model uav hill 2003 fuel holds record electric power required flight electric motors properly designed weight ratio electric gasoline motor driving vertically electric uav vertically battery circuitry power distribution microcontroller unit switching platform computing uav computing capability advances computing technology analog controls microcontrollers chip soc single board computers hardware uavs called flight controller flight controller board autopilot sensors position movement sensors aircraft sensors deal external distance measurements internal external sensors detect targets autonomously separation collision degrees freedom refers quality sensors board implies axis typical measurement unit refers adds 11 adds gps actuators uav actuators include digital electronic speed controllers control motors linked motors engines payload actuators speakers software uav software called flight stack autopilot uavs real time systems require rapid response changing sensor data examples include raspberry designed scratch rt linux robot operating ros civil source include loop principles uavs employ loop closed loop hybrid control architectures flight controls uavs programmed perform surfaces communication uavs control flight varying flight designs uavs implement flat vertical surface communications uavs radio remote control exchange video data uavs directional radio links carried command control data status aircraft systems remote operator range military uavs satellite satellite navigation systems video transmission required uavs implement separate analog video radio link modern uav applications video transmission required separate links video traffic broadband link carry types data single radio link broadband links quality service techniques optimize traffic latency broadband links carry tcp ip traffic internet radio signal operator issued autonomy unmanned aircraft remotely aircraft autonomous actual uavs offer intermediate degrees autonomy vehicle remotely contexts autonomous return base operation basic autonomy sensors advanced autonomy calls knowledge environment surrounding aircraft sensors sensor fusion multiple sensors basic principles achieve autonomous control employs multiple control loop layers hierarchical control systems 2016 layer loops flight control fast 32 000 times level loops cycle principle aircraft behavior transitions hierarchical control types range simple finite machines behavior trees hierarchical task common control mechanism layers controller achieve data calculate precise inputs electronic speed controllers motors examples mid layer algorithms evolved uav hierarchical task methods tree searches genetic algorithms autonomy features uav manufacturers build specific autonomous operations functions autonomy specific tasks ground based battery switching level tasks computing sensing capabilities approach autonomous capabilities based terminology suggested 2002 air force laboratory table autonomy autonomy flight real time collision wall relies telecommunication range sensors optic flow light range sensors analyze electromagnetic radiation reflected environment coming sensor cameras visual flow simple sound mechanical waves receive waves measuring transit time uav cameras require power reducing total consumption military applications autonomy forms reached consumer markets decade simultaneous localization mapping slam combines external data represent position uav dimensions navigation require vertical fields view rely gps coordinates simple mapping slam fields 3d environments robot refers networks dynamically elements leave enter network provide flexibility multi agent cooperation path data fusion inspired flight steering behaviors future military potential military sector american operations war sufficient designed air air combat september 2013 chief air combat command stated current uavs environment aircraft protect 2012 service report future uavs perform tasks intelligence surveillance report listed air air combat difficult future task future department defense unmanned systems integrated uavs combat issues include extended capabilities human uav interaction managing increased increased autonomy developing uav specific darpa project systems systems future equipped energy liquid laser defense cognitive radio cognitive radio technology uav applications learning capabilities uavs exploit distributed neural networks market military global military uav market dominated companies based united israel sale held 60 military market share 2017 military uav manufactures american including martin chinese company israel companies focus surveillance uav israel 60 2014 uav market united 23 2014 military uav united kingdom 33 india 13 united operated 000 military uavs 2014 dominant manufacturer global systems product drone market dominated chinese companies chinese drone manufacturer 75 market share 2017 11 global sales french company company 21 2014 march 2018 uavs 000 000 commercial registered 2018 consumers increasingly advanced features 33 percent growth 500 1000 market segments uav market compared military companies emerging developed developing nations time stage received support funding united government agencies india universities offer training programs degrees private entities provide online person training programs commercial uav consumer military organizations worldwide cost effective nature consumer product 2018 military started series uav light mission easier reliability commercial unmanned employed displays advertising purposes transport reports introduced 20 sensor carrying expected 2018 short cities mid passenger rise development 2018 30 development animal – birds field inherent commercially inspired power land vertical surfaces projects include unmanned exploring optic flow sensors called compound eyes formed multiple transmit data chips treat optic flow light intensity uav constrained capabilities human pilot size weight power weight ratio engines uavs engine engine cooling descent require fuel mixture cooling power attributes reduce fuel usage increasing range payload proper drone cooling essential term drone subsequent engine failure common drone failure hydrogen fuel cells hydrogen power extend uavs hours micro air vehicles achieved uavs solar electric uavs concept originally 1974 achieved flight times weeks solar powered designed operating 12 60 000 feet perform earth applications include weather monitoring recovery earth imaging communications electric uavs powered power transmission laser power potential solutions application uav interval integrated sensor structure record events played track activities reliability reliability improvements target aspects uav systems engineering fault tolerance techniques individual reliability covers flight controllers ensure safety redundancy minimize cost weight dynamic assessment flight damage uavs linear analysis designed loops neural networks uav software liability design software involves maintaining operational capabilities tasks unit failures applications numerous commercial military aerospace applications uavs include existing uavs uavs developed deployed countries wide comprehensive list uav systems exists uavs technology capable carrying payload restricted countries technology control safety security air traffic uavs security numerous including interference aircraft attacks flight controllers incident drone collision occurred mid october 2017 city canada recorded instance drone collision hot air occurred august 2018 united damage pilot reported incident stating incident helps create conversation respect nature rules uavs loaded dangerous targets include chemical biological hazards uavs purposes anti uav systems developed counter difficult dr stated interview moment counter uavs causing bit manner 2017 drop caused december 2018 deployment british counter unmanned air uavs led development counter unmanned air technologies drone dome anti aircraft systems dome enhanced technologies security uavs security raised greatly uav video stream incident 2009 equipment stream video uav risk possibility uav flight security researchers public commercial uavs providing source code tools attacks uavs privacy october 2016 researchers federal trade commission consumer uav manufacturers uavs secure basic security measures wi signal adding protection united flying close maximum 25 000 fine 2014 2015 air support california including north response california introduced uavs restricted required registration uavs uavs investigated detect observation devices start regulation ethical concerns uav driven nations uavs authority requires uavs registered uavs requiring license issued netherlands dutch testing trained uavs canada 2016 transport canada proposed implementation require uavs 250 grams registered operators required minimum age pass license expected introduced 2018 south april 2014 south civil authority announced flying uavs south weight restricted visual height uav allowed license required vehicles united fly drone civil authority online italy italian civil authority technical regulation certification control field civil issued 31 2016 detailed regulation uav determining types vehicles purposes control regulation deals usage uav commercial version published december 22 2016 japan 2015 civil japan announced refers accommodate person board remotely automatically fly fly 150 ground water surface fly allowed drone operated manually visual drone fly facilities country including nuclear facilities drone follow japan radio united 21 december 2015 type uavs 250 grams 25 registered 19 february 2016 uav registration process includes requirements 19 2017 court columbia circuit held 2015 drone registration rules 2012 court holding commercial drone operators required register operators 25 2017 week decision introduced drone 2017 commercial 21 june 2016 federal administration announced commercial operation 55 55 250 including payload rules require presence operations licensed remote pilot command certification position 16 age solely passing written application holding pilot license current flight review rule specific charge online comprehensive testing center required review time ratings commercial operation restricted 400 feet class fly people operated moving vehicle organizations rules cnn uavs modified fly people flying special lighting operations track inspection previous announcement commercial required pilot license hundreds granted government uavs law purposes level law allowed operate reason current environment drone acquire assist individuals maximum period 30 days interaction acquired united kingdom december 2018 uavs fly operator built uavs people built july 2018 fly uav fly aircraft  
59592	computer	major heavy industrial manufacturers japan mitsubishi heavy industries prior war kawasaki included kawasaki steel kawasaki war products aerospace kawasaki active diverse range aerospace industry company japanese defense built aircraft transport aircraft intermediate jet 2007 built aircraft 2010 built transport aircraft kawasaki builds including jointly developed manufactured produces commercial business company involved joint international development production passenger aircraft involved joint development production company involved joint international development production engines passenger aircraft kawasaki japan aerospace exploration agency company responsible development production payload payload construction launch complex continues provide services kawasaki participated projects development launch vehicles handle future space transport space robotics projects japanese experiment module international space station experimental plane mechanism main stock kawasaki largest manufacturer stock operations industry manufactures express trains cars trains transit systems kawasaki involved development design speed trains main historical industry kawasaki heavy industries created developed company founding kawasaki kawasaki corporation owned subsidiary kawasaki heavy industries product range include performance carriers carriers company involved development structures kawasaki produces machinery equipment including main engines systems steering machinery kawasaki company builds joint china ship engineering china ship engineering china main plants facilities kawasaki key offering performance gas company involved development energy sources alternative wind power generation power generation systems batteries main equipment kawasaki builds vast array industrial plants equipment including chemical metal plants prime compact precision machinery offers industrial plant engineering design sales kawasaki automation systems industrial robots processes assembly handling welding automation systems distribution automated product handling systems plants main kawasaki involved development equipment wide range industries leading products fuel gas systems handling systems company plants systems treatment plants kawasaki developing systems enable wide range industrial systems include paper fuel production facilities convert easy handle solid fuel equipment converts materials machinery size color main history building steel structures century bridge building businesses company offers storage solutions includes structures dome surface construction kawasaki produces products wheel machines purpose specific machines channel 14 14 machines tokyo construction examples main kawasaki produces motorcycles jet cars motorcycle include dual purpose motorcycles utility vehicles purpose gasoline engines kawasaki jet trademark type personal  
59703	computer	toshiba founded 1939 tokyo merger founded tokyo founded company officially changed toshiba corporation 1978 listed tokyo stock exchange exchange stock exchange toshiba largest semiconductor manufacturer 2017 toshiba filed westinghouse filed 11 protection toshiba stated substantial company ability continue concern exists toshiba organized digital products electronic devices appliances social infrastructure chinese company bought controlling 80 stake toshiba appliances 2016 history 1939 2000 toshiba founded 1939 merger engineering tokyo tokyo electric founded july japan manufacturer equipment renamed decades 20th century major manufacturer heavy electrical machinery japan era industrial power tokyo founded japan producer electric manufacture consumer products renamed tokyo merger tokyo created company called tokyo tokyo electric toshiba 1978 company officially renamed toshiba corporation expanded rapidly driven combination growth heavy engineering primary industry 1940s 1950s created include toshiba music industries toshiba 1960 toshiba international corporation 1970s toshiba electrical equipment 1974 toshiba chemical 1974 toshiba lighting technology 1989 toshiba america systems 1989 toshiba carrier corporation 1999 toshiba responsible japanese including radar digital 1954 transistor television 1959 color video phone 1971 japanese word processor 1978 mri 1982 laptop personal 1986 1991 dvd 1995 notebook personal 1996 hd dvd 2005 1977 toshiba acquired company subsequently toshiba combination companies south american operations 1987 machine subsidiary toshiba selling cnc machines produce union agreement international countries countries toshiba involved subsidiary toshiba company incident relations united japan senior company countries john pennsylvania toshiba security united 2000 2010 2001 toshiba signed contract electric largest oem consumer video electronic makers manufacture supply finished consumer video products toshiba meet increasing demand north american market contract 2008 oem production december 2004 toshiba announced manufacturing traditional house ray tube crt 2006 toshiba production house ensure future flat panel digital television display market toshiba considerable investment display technology called war toshiba family controlled vertical toshiba set companies business relationships bank membership traditionally meant corporate private extend employees toshiba july 2005 confirmed planned sell westinghouse electric company estimated worth companies including toshiba electric mitsubishi heavy industries financial times reported 23 january 2006 toshiba valued company offer sale westinghouse government united kingdom industry experts selling largest producers nuclear shortly market nuclear power expected grow china united united kingdom expected heavily nuclear power acquisition westinghouse completed 17 october 2006 toshiba percent share partners 20 percent share heavy industries percent share late 2007 toshiba discover card sponsor screen times square york city displays 60 screen messages company capital late 2018 january 2009 toshiba acquired business fujitsu 2010 2013 toshiba announced 16 2011 agreed acquire shares based advanced power 2010 company released series television models including designed collaboration designer april 2012 toshiba agreed acquire ibm sale business largest vendor sale systems july 2012 toshiba prices lcd panels united level claims toshiba agreed manufacturers total december 2013 toshiba completed acquisition limited plant set base manufacturing transmission distribution products social infrastructure india toshiba transmission distribution systems india private limited 2014 storage solutions acquisition january 2014 toshiba completed acquisition storage solutions technology stock 27 november 2013 stated expected file toshiba corporation expressed december 2013 announced toshiba agreed purchase 35 deal completed 21 january 2014 technology independently operated subsidiary toshiba named storage solutions technology changed corporation 18 august 2014 corporation subsidiaries storage solutions april 2016 absorbed toshiba america electronic components brand toshiba march 2014 toshiba company technology flash memory october 2014 toshiba united technologies agreed deal expand joint venture japan toshiba announced 2015 2015 toshiba manufacturers european market january 2016 toshiba security division unveiled bundle services schools surveillance equipment program intended 12 education includes education post support features ip based security march 2016 toshiba start construction cutting edge semiconductor plant japan mass produce chips based ultra flash variant toshiba 360 yen project 2019 april 2016 toshiba 100 000 laptop batteries panasonic hazards consumers consumer product safety commission toshiba announced recall january batteries toshiba notebook computers sold june 2011 september 2016 toshiba announced wireless power specification developed association wireless power consortium late december 2016 toshiba announced westinghouse subsidiary nuclear plant construction lead write january 2017 person direct knowledge matter reported company plans chip division separate business 2015 toshiba announced 2015 previous 21 july 2015 ceo announced called event brand company history previous senior including previous chairman acting ceo toshiba removed stock japan companies companies operating return market september 2015 toshiba shares fell lowest firm statement period 12 yen company poor appliances personal businesses december 2015 episode toshiba market record yen annual loss company businesses toshiba week company announced toshiba 2016 seek 300 yen company yen 2016 announced head toshiba medical equipment division named ceo occurred 2017 nuclear construction february 2017 toshiba revealed details yen corporate wide loss majority owned based westinghouse nuclear construction subsidiary written yen 14 february 2017 toshiba delayed financial chairman chairman westinghouse construction delays cost westinghouse built nuclear facilities units summer units south cited main fall toshiba financial performance share price fixed construction contracts westinghouse power left toshiba result sale key toshiba operating subsidiaries secure company future westinghouse filed 11 protection 29 march 2017 estimated cost annual loss 11 april 2017 toshiba filed signed accounts westinghouse toshiba stated substantial company ability continue concern exists 25 april 2017 toshiba announced decision replace earlier april company filed delayed business 20 september 2017 toshiba board approved deal sell memory chip business led capital 18 financial companies apple technologies corporation technology technology 15 november 2017 reached deal acquire 95 toshiba visual solutions month company announced japanese television programs san video screens times square york city company cited reduced consumer oriented lines business april 2018 toshiba announced completion sale westinghouse holding company business partners partners operations toshiba headquartered tokyo japan operations worldwide 000 employees 31 march 2012 toshiba main business digital products electronic devices appliances social infrastructure 31 march 2012 toshiba total revenues 25 percent generated digital products 24 percent electronic devices percent appliances 36 percent social infrastructure percent activities 45 percent toshiba sales generated japan 55 percent rest toshiba facilities worldwide employ people toshiba invested total 31 march 2012 equivalent percent sales toshiba registered total patents united 2011 largest company ibm samsung electronics panasonic principal business divisions subsidiaries toshiba organized principal business divisions subsidiaries products services standards toshiba range products services including air consumer electronics including dvd ray players control systems including air traffic control systems systems security systems traffic control systems electronic sale equipment appliances including machines services lighting materials electronic components medical equipment including ct mri scanners ultrasound equipment ray equipment office equipment business telecommunication equipment personal computers semiconductors power systems including electricity fuel cells nuclear power transmission distribution systems displays 3d television october 2010 toshiba unveiled toshiba 21 led lcd glasses 3d prototype 2010 supports 3d capability glasses integral imaging parallax images vertical sheet retail product released december 2010 4k ultra hd 4k ultra hd times resolution hd toshiba 4k hd led powered 4k quad dual core processor hd dvd 19 february 2008 toshiba announced hd dvd storage format format war ray hd dvd format failed major film studios ray format developed sony panasonic pioneer corporation hd dvd toshiba president concluded swift decision continued created consumers simply chance win toshiba continued supply machines march 2008 continued provide technical support estimated people worldwide owned hd dvd players toshiba announced stand ray players drives pcs laptops subsequently joined industry body development ray format real expression guaranteed architecture unified television brand owned manufactured toshiba 2010 north american market march 2015 carrying toshiba designed produced electronics company toshiba licensed android based smartphones developed fujitsu toshiba mobile communications october 2014 toshiba released version profile improved display runs exclusively chrome os users google drive storage access collection apps extensions chrome store 3d flash memory march 2015 toshiba announced development 48 layer dimensional flash memory flash memory based vertical stacking technology toshiba calls bit cost scaling stores bits data transistor store chip environmental record toshiba efforts impact environment november 2012 edition guide electronics electronics companies policies products energy operations toshiba received company receiving scores received categories clean energy policy products policy practice paper 2010 toshiba reported lcd energy star standards 34 models requirements 30 toshiba china university 2008 form facility focus energy environment toshiba energy environment center located students university electric power equipment technologies global process partnership toshiba develop products protect environment save china contract university toshiba originally october 2007 signed agreement joint energy environment projects conduct reduce car create power systems affect environment 28 december 1970 toshiba construction unit nuclear power plant nuclear 14 march 2011 april 2011 ceo declared nuclear energy remain strong option nuclear late 2013 toshiba japan entered solar power business germany systems  
59944	computer	program counter pc commonly called instruction pointer ip intel x86 microprocessors called instruction address register instruction counter instruction processor register program sequence processors pc instruction holds memory address instruction executed processor fetch pc current instruction executed processors fetch instructions sequentially memory control transfer instructions change sequence pc include branches called calls returns transfer conditional follow sequence conditions branch instruction fetched memory branches preceding contents pc return saved contents pc pc sequential execution instruction hardware implementation typical central processing unit cpu pc digital counter origin term program counter registers cpu hardware instruction cycle fetch cpu pc address bus send memory memory sending contents memory location data bus stored program model executable instructions stored ordinary data memory handled fetch cpu execution action based memory contents cycle pc modified instruction executed typically instruction starting memory address memory location current instruction processor registers pc bank binary representing bit pc bits pc processor architecture instance cpu 32 bits address units memory pc binary counter pulse applied count input cpu compute load pc pulse load input identify current instruction pc combined registers identify segment approach pc bits assuming memory units current machine architecture pc assumes execute linear sequence instructions pc central von neumann architecture programmers write sequential control flow algorithms sequential neumann led parallel computing including von neumann models pc sequential steps level programmer desired function level programmer logic led conventional pc based cpus faster including level programming modern level programming languages follow sequential execution model common identifying programming errors programmer execution pc level language essentially machine language virtual machine complex built hardware interpreted software programming models sequential execution programming  
60136	computer	laws robotics laws asimov laws set rules science fiction author asimov rules introduced short story included collection robot earlier stories laws robotics edition form organizing principle theme asimov robotic based fiction robot series stories linked series fiction laws incorporated robots fiction intended safety feature asimov robot focused stories involve robots unusual counter consequence robot applies laws situation authors asimov fictional universe references science fiction original laws altered asimov authors asimov modifications books short stories develop robots interact humans fiction robots responsibility government human asimov fourth zeroth law laws zeroth science fiction referred books films media ethics artificial intelligence history rest robots published 1964 asimov writing stock science fiction robots created creator knowledge response knowledge knowledge barrier decided stories robots creator purpose demonstrate time 1939 asimov attended meeting york science fiction society published short story robot featuring robot named link motivated love honor series stories link featured thinking robot human asimov story days asimov writing story robot story days john editor science fiction strong published december story robot person falls love creator ideal published story title super science stories september asimov attributes laws john conversation 23 december claimed asimov laws mind simply stated explicitly asimov attributed laws partnership asimov asimov included law includes lines asimov pins creation laws appearance literature happened period wrote robot stories explicit laws reason assumed robots inherent robot story law laws finally appeared stories compiled robot reason updated laws material asimov reason consistent laws idea robot human humans exist reasoning 1950s asimov wrote series science fiction intended originally expected adapted running television series radio stories adapted uniformly programming television channels asimov decided publish books paul french plans television series fell asimov decided brought laws paul french identity reader short story evidence asimov character dr basis laws human typically expected human times extreme war save equivalent robot law society individuals instructions recognized law robotics finally humans typically expected avoid law robot plot evidence question human robot constructed reasons individual laws robot simply character robots human robots essentially asimov wrote creating laws obvious start aware laws happened sentences managed job laws apply matter tool human laws implicit design tools robotic asimov believed ideally humans follow laws asimov asimov stories laws wide variety leading modifications science fiction james writes 1982 asimov robot stories respond analysis basis ambiguity laws asimov played variations theme original set laws stories asimov introduced modified versions time time law modified lost robot robots created law reads modification motivated practical difficulty robots human radiation highly sensitive rays robots rendered safe humans robots attempting humans actual leave exposure time limit removing law creates possibility robot action harm human heavy weight capable harm decide intelligence foundation series law law zeroth law philosophy zeroth law asimov zeroth law named continue pattern numbered laws numbered robot harm humanity robotic character zeroth law robots character concept short story conflict final scenes robots robot zeroth law robot short story apply zeroth law understanding subtle concept harm robots concept zeroth law allowing harm individual human service abstract concept humanity zeroth law programmed brain rule attempts pure fails – ultimately brain choice ultimate humanity – successor abilities thousands zeroth law foundation earth foundation zeroth law reads condition stating zeroth law broken original laws asimov recognized difficulty law pose practice asimov foundation earth translator incorporated concept zeroth law asimov asimov law explicit steel thinking law robot human determines robot actions term 1956 french translation entitled removal laws times writing career asimov robots laws short short story entitled law considered hand short story collection gold told person robot features robot laws writer partly experimental style regarded gold stories short story entitled cars fitted harm humans law brain concept story refer robot stories set title story robot collection robot unusual construction brain dream laws law reads robot protect existence asimov varying positions laws optional simply carefully engineered stories asimov stated mathematical foundation underlying brain basic theory laws fictional scientists asimov universe unable design brain unit historically consistent modify laws occur stories time existing lost robot considers modifying laws idea dr steel believes impossible character dr term robots programmed laws robots asimov stories robots laws principle robot science fiction real asimov editor magazine stories asimov variation insert steel referred appeared characters stories laws exist robot mind written versions humans abstract mathematical concepts robot entire developing based concept earlier stories robots programmed basic physical tasks laws era steel featuring robots human human intelligence laws underlying basic ethical determines actions robots authors allen 1990s allen wrote set asimov fictional universe title prefix asimov asimov approved allen death books inferno introduce set laws called laws asimov differences law modified remove modification lost robot law modified require cooperation law modified law robot finally allen adds fourth law robot likes conflict laws philosophy law robots partners humanity designed law robots book introduction allen laws discussion asimov science fiction permission asimov allen laws developed set jack hands jack hands 1947 deals robot prime serve harm asimov robotic laws meant protect humans harm robots story instructions extreme protect humans including actions dangerous left humans hands foundation officially licensed foundation foundation foundation foundation david future controlled robots follow zeroth law led laws robotics human referred language set laws zeroth law original laws zeroth law robots control law robots existence zeroth law based law robot human strict interference human avoid causing harm based human harm robots government protect humans potential conflict conflict robot brain simulation laws humanity choose future robots claims zeroth law robotics implies law robotics claim robots life benefit humanity zeroth law foundation robotic remain active time foundation future asimov obvious robot presence secret influence history brain technology opportunity sophisticated intelligent machines lack lack opportunity superior physical intellectual power intelligent machines remains robots form laws successful period scientists develop programmable machines modern robots laws robot massive social stability plan eliminate forms plot foundation foundation robot interpret laws wide variety laws robot series set robots robots mark robot updates robot – foundation robotic mainframes humanoid bodies 2002 robotic characters implications cyborg artificial biological asimov viewing technology machines conflict terms machines addition robot series addresses nanotechnology building brain capable human cognitive processes requires degree asimov stories effects fields technology department card readers steel capacity square storage medium sequence historical developments lack nanotechnology partial sense asimov additional laws fourth laws written authors asimov 1974 introduced fourth law robotics reasons fourth law expensive designers form law introduced short story law robotics law plot investigation robot robot law fourth law assumed universe valid establish robot story reviewed review 1986 foundation wrote story entitled fourth law robotics fourth law book robot rights attempt robots builds equipped fourth law robots task version fourth law building robots view creator robots figures 2004 smith film adaptation robot graphic designer mark declared fourth law robotics display red indicator light red light wireless manufacturer active software update robots manufacturer 2013 proposed additional law time considered role artificial intelligence artificial intelligence relationship robots – called law law 2014 character reflects robots multiple layers programming laws laws sun laws robots break law robot knowledge harm human human harm change robots tools aware nature tasks instance add person food divide task multiple robots individual robot recognize actions lead human sun issue communication network millions robots meaning located day robots military purposes built brain carried humans life support systems ship robotic intelligence naturally assume robotic ship operate humans heavily robotic brain equipped humans existence possibility foundation earth discovered strong force size programmed identify race human takes thousands sun modified normal humans extended specialized lack definition laws robotics terms human robot understood defined stories definition human create robots laws meaning human robots told people speaking human enables robots ethical human programmed time period foundation earth revealed modified distinct species biological capable individually controlling robots robots laws regard humans robots definitions guardian robots explicitly robots class robots human asimov addresses humanoid robots times robots short stories evidence incident robots people robots human hand art explore robots change interpretation laws grow sophisticated writes robots robots acting law robotics tend human robots robots wave lead robots true humans art asimov intended ultimate laws finally laws scenario invented prevent takes concept growing development robots mimic human living programs mimic simple animal require laws presence range robotic life serves purpose life humanoid robots life requirement logical consistent definition humanity advanced thinking true humans laws apply story note robots enter time earth biological humans outcome result laws story fit robot foundation series george robots earth time story stories redundant impossible sort asimov fiction led scholars regard robot stories greek unified asimov describes art parallel robots laws robots humans positive light robot human society negative light robots humans considered alternatives possibility robot society continues driven laws foundation series asimov writer robert future andrew martin exists influence humanity idea independent robots creating future foundation rings robot series featuring robots programmed laws john robot master society uniformly appearance master robot shorter human definition robot law robotics robot robot robot definition term apply actions played idea writing robot human understand robot apply laws robotics actions laws advanced robots fiction typically programmed handle laws sophisticated manner stories asimov potential actions robot break laws law robot functioning damage human asimov stories eventually included robot notable robots sophisticated alternatives robot programmed accept damage surgery prevent harm result surgery carried carried human evidence robot american judge sentence capital asimov laws robots robots experience forced situations law discover failure mode occurs story introduced law introduces failure robot humans failure mode brain repair plays role asimov sun describes activities laws support circuits robot equivalent humans robot task normal parameters favor robot specialized task robots stated advanced robots built capable determining action choosing random alternatives equally bad robot capable action interpreted law avoid plot story robot designer creator share basic theory definition person capable robot brain robots proper decision takes robot terms imagine laws extent permanent applications future technology robots artificial inherently laws human choose program robots exist simple understand causing constructed physical safety restricted access prevent complex robots produced understanding applying laws advances artificial intelligence reach human level intelligence inherent ethical complexity cultural dependency laws prevent candidate robotics design constraints complexity robots increased developing guidelines operation 2007 journal science topic robot ethics author robert argues military major source funding robotic unmanned vehicles laws built designs separate argument cover industries stating development business businesses fundamental quick examples industry automotive industry nuclear industry fundamental accepted absolute causing harm humans david suggested set laws wrote pair papers analyzing implementing laws event systems capable argued asimov laws robotics successful device sum asimov stories behaviour robots applying set rules hand asimov robots robots foundation earth robots worst term harm laws humanity risk behaviour march 2007 south korean government announced issue robot ethics setting standards users manufacturers park communication reflect asimov laws attempting set ground rules future development robotics prominent figure movement proposed laws robotics adapted corporate corporations driven robotic manufacturing power believes future contrast david foundation 1999 suggests laws robots zeroth law law robots human law play robots continue laws evolutionary natural selection laws asimov foundation evolutionary computation robots design mutation robots follow laws designing laws design construction errors biological mutation july august 2009 issue ieee intelligent systems professor science engineering texas david director cognitive systems engineering laboratory proposed laws responsible robotics discussion role responsibility authority designing single robotic platform larger platform operates laws laws realistic philosophy people robots – perfect version write laws people thinking human robot relationship realistic october 2013 alan suggested meeting laws published 2010 occurrences media asimov believed laws basis view robots moved complex view robots mechanical eventually spread science fiction stories written authors robots laws asimov laws explicitly asimov believed laws helped rise stories robots star wars laws century episode uncommon asimov mentioned pilot android functions asimov laws 1960s german series – die space – space ship bases episode titled law asimov laws source references laws appeared popular music robot 1979 album cinema series games laws film robot 1956 hierarchical command structure humans conflict lock manner asimov robots robot internal fashion asimov appeared programmed follow laws asimov adapted cinema times varying degrees critical commercial success notable attempts involved robot stories including laws film 1999 features laws robot serial partially reference laws martin family aided holographic projection laws central focus film loosely original story introducing love asimov original short story proposed robot introducing laws issues growing laws form plot development natural inspired frame story surrounding asimov short story book robot stories role introduction filmed 1986 movie scene android game attempts stating impossible harm action human contrast 1979 movie series human android instructions return life form laws behaviour human safety executive 1987 film partially human main character programmed prime question letter similarities asimov laws laws harm human protect human role human law classified fourth senior effectively management law plot film released 2004 robot suggested asimov robot fiction advertising film included featuring laws rules broken film laws implications zeroth law logical major conflict film artificial intelligence foundation series reaching humanity care james applied produce robot prevent harm humans president executive director electronic privacy center professor privacy law law argues laws robotics expanded include laws  
62342	computer	rsx 11 discontinued family multi user real time operating systems pdp 11 computers created digital equipment corporation widespread late 1970s 1980s rsx 11 influential development operating systems windows nt designed process control popular program development history origins rsx 11 port pdp 11 architecture earlier rsx 15 operating pdp 15 minicomputer released 1971 main rsx 15 renamed rsx dan rsx effort produced paper tape based real time rsx rsx gained limited support disks rsx rsx evolved rsx disk based operating appeared pdp 11 40 pdp 11 45 1973 project leader rsx version rsx completed digital set adapt memory rsx released 1973 1971 1976 rsx project operating designer project principles rsx designs led dec windows nt direction derivative rsx called rsx developed pdp 11 40 processor pdp cpu rsx developments direction project leader commercial release support 22 bit pdp 11 70 dr originally set team designed operating variant rsx suitable time sharing development release led digital facilities release dates estimated release dates rsx 11 data printing documentation availability expected closely printing dates rsx proper subset rsx release dates assumed version rsx rsx enhanced version rsx expected version rsx legal ownership development model availability rsx 11 proprietary software copyright binary files source code documentation developed internally digital source kernel source comments removed rsx distribution generation process notable exception rule micro rsx pre generated binary kernel kernel source code separate product binary license reference purposes ownership rsx rsx rsx micro rsx transferred digital march 1994 broader agreement subsidiary limited firm pdp 11 hardware software support december 2006 acquired firm sell pdp 11 services commercial licenses rsx version earlier rsx version earlier emulator license granted 1998 legal ownership rsx rsx rsx rsx changed hands acquired digital 1998 hewlett packard 2002 late 2015 hewlett packard split separate companies hp hewlett packard enterprise current owner established commercial licenses issued october 1979 rsx rsx rsx 1990 operating systems licensed versions 1968 government decided manufacturing copies ibm dec minicomputers cooperation countries practical original designs dec designs 1974 russian electronic computing machines happened mainframes based 360 architecture modified western designs machine compatible dec offerings time operation rsx 11 purpose computing target operating rsx 11 features ensure maximum response time peripheral device input real time processing intended included ability lock process called task rsx memory boot assign process priority execute processes priority support programs pdp 11 virtual address space sophisticated semi automatic overlay program overlay scheme produced rsx program called overlay scheme complex time hours days standard rsx monitor console commands characters entered commands unique characters command executed user chosen command characters relevant user execute command pdp 11 processors dec operating displays characteristic light pattern processor console panel idle patterns created idle task running lowest level rsx light pattern sets lights left center console indirect command file processor program running contrast light pattern single bar lights light pattern memory visible load idle task executed pdp 11 operating systems patterns console lights  
64020	computer	multiprocessing central processing units cpus single term refers ability support processor ability tasks variations basic theme definition multiprocessing vary context function cpus defined multiple cores die multiple package multiple packages unit dictionaries multiprocessor processing units multiple processors sharing main memory peripherals simultaneously process programs 2009 textbook defined multiprocessor processors share memory facilities tightly coupled term operating level multiprocessing refer execution multiple concurrent processes process running separate cpu core opposed single process definition multiprocessing multitasking single processor switch time tasks time sharing multiprocessing true parallel execution multiple processes processor multiprocessing single process task processor simultaneously term parallel processing denote scenario authors refer operating techniques term multiprocessing hardware aspect processor article multiprocessing hardware sense defined mimd machines tightly coupled share memory entire class mimd machines message passing systems pre history expression idea multiprocessing written charles engine translated machine brought play time greatly processes key topics processor multiprocessing cpus equal special purposes combination hardware operating software design determine lack hardware software require cpu respond hardware interrupts distributed equally cpus execution kernel mode code restricted cpu user mode code executed combination processors multiprocessing systems easier design restrictions tend efficient systems cpus utilized systems treat cpus equally called symmetric multiprocessing smp systems systems cpus equal resources divided including asymmetric multiprocessing uniform memory access multiprocessing multiprocessing master multiprocessor master multiprocessor master cpu control cpu performs assigned tasks cpus completely terms speed architecture cpus share common bus private bus private resources isolated common communications cpus share common ram private ram processor access master change cpu master multiprocessor radio 80 model 16 desktop february 1982 multi user multi operating version unix called model 16 microprocessors bit z80 cpu running 16 bit motorola 68000 cpu running intel keyboard 80 master boot process 68000 transferred control 68000 cpus changed 80 processor responsible operations including disk communications printer network keyboard integrated monitor operating applications 68000 cpu 80 tasks earlier 80 model released 1979 considered multiprocessor 80 cpu intel microprocessor keyboard model desktop separate keyboard connected single flexible wire keyboard dedicated microprocessor attributes copied apple ibm instruction data streams multiprocessing processors execute single sequence instructions multiple contexts single instruction multiple data simd vector processing multiple sequences instructions single context multiple instruction single data redundancy fail safe systems applied pipelined processors hyper threading multiple sequences instructions multiple contexts multiple instruction multiple data mimd processor tightly coupled multiprocessor tightly coupled multiprocessor systems multiple cpus connected bus level cpus access central shared memory smp participate memory hierarchy local shared memory ibm smp intel processors dominated multiprocessor market business pcs major x86 option release amd range processors 2004 ranges processors cache access shared memory processors common pipe processors independent ram chip multi core computing involves processor single chip extreme form tightly coupled multiprocessing mainframe systems multiple processors tightly coupled loosely coupled multiprocessor loosely coupled multiprocessor systems referred clusters based multiple standalone single dual processor computers speed communication gigabit ethernet common linux cluster loosely coupled tightly coupled systems perform physically loosely coupled systems historically required initial rapidly nodes loosely coupled inexpensive computers independent machines cluster power consumption tightly coupled systems tend energy efficient clusters considerable economy realized designing components tightly coupled systems loosely coupled systems components intended systems loosely coupled systems ability operating systems os versions systems  
65184	computer	qnx commercial unix real time operating aimed embedded systems market product originally developed 1980s canadian company quantum software systems renamed qnx software systems ultimately acquired blackberry 2010 qnx commercially successful microkernel operating systems variety devices including cars mobile phones description microkernel based os qnx based idea running operating kernel form tasks resource managers differs traditional monolithic kernel operating kernel single program composed huge special abilities qnx microkernel users developers functionality require change os services simply earlier versions fitting single floppy disk qnx 2001 ported platforms runs modern cpu embedded market includes powerpc x86 family mips closely inter family arm cpus qnx offers license commercial academic users blackberry tablet designed blackberry version qnx primary operating devices blackberry running blackberry operating based qnx commonly car systems major car makers offering variants include embedded qnx architecture history bell dan students university 1980 real time operating systems students constructed basic real time microkernel user programs commercial moved tech planned community ontario start quantum software systems 1982 version released intel cpu 1984 quantum software systems renamed qnx effort avoid trademark challenges widespread qnx real time os rtos embedded selected operating ontario education design qnx larger projects kernel fit single chip computers era reliability running machinery industrial applications late 1980s quantum realized market rapidly moving posix model decided kernel compatible level result qnx time time time developed patented concept developed gui named qnx qnx version window 1990s company called qnx software systems version qnx designed ground smp capable support current posix apis posix apis microkernel architecture qnx released 2001 kernel qnx software systems founding eclipse consortium company released suite eclipse plug packaged eclipse 2002 qnx tool suite 2004 company announced sold international industries prior acquisition qnx software automotive industry systems purchase qnx software designed 200 automobile systems navigation units qnx car application platform running 20 vehicles mid 2011 company released products including qnx multimedia suite qnx acoustic processing suite qnx suite cisco ios ultra availability ios built 32 bits version based qnx software ios software introduced 2006 september 2007 qnx software systems announced availability source code april 2010 motion announced acquire qnx software systems international industries day qnx source code access restricted public september 2010 company announced tablet blackberry operating blackberry tablet os based qnx tablet october 18 2011 motion announced renamed blackberry december 2011 blackberry devices build blackberry qnx based operating touch devices adapt user interface smartphones qt based native user interface framework motor apple demonstrated carplay ios user interface head units compatible vehicles configured qnx programmed display functionality apple carplay device december 11 2014 ford motor company stated company replacing auto qnx january 2017 qnx announced upcoming release support intel arm 32 64 bit platforms support 14 released march 2017 technology qnx kernel cpu scheduling communication interrupt runs user process including special process performs process creation memory management operating conjunction microkernel key type communication boot load image kernel desired collection user programs shared libraries device drivers kernel network stack based code support native device drivers qnx supports legacy manager server network drivers ported qnx communication consists sending message process waiting single operation called message copied kernel address space sending process receiving process receiving process waiting message control cpu transferred time pass cpu sending message process waiting result losing cpu integration message passing cpu scheduling key mechanisms qnx message passing usable unix linux communication mechanisms lack integration user space implementation qnx type messaging linux exist subtle issue primary reason performance microkernel systems versions process physical machine operations file operations network operations meant mechanism data transferred copied message passing versions qnx reduce separate processes integrate network stack function blocks single applications performance reasons message handling thread priority requests performed message passing priority threads receive service priority threads essential feature hard real time boot key component minimal microkernel user programs built boot image set device drivers support libraries startup kernel functions program loading kernel shared user space libraries loaded boot image entire boot image rom embedded systems supports symmetric multiprocessing processor called bound multiprocessing qnx terminology improve cache ease smp safe applications multi processor computers supports strict priority scheduling adaptive partition scheduling guarantees minimum cpu selected threads priority adaptive partition strictly priority configured selected set critical threads strictly real time transparent distributed processing microkernel architecture qnx distributed operating dan peter van hold patent distributed kernel operating based qnx operating distributed processing features commercially transparent distributed processing qnx kernels separate devices access services effectively communication mechanism access local services qnx community established independently channel access diverse industries represented developers based qnx community established company serves hub qnx development developers register choose license source code toolkit rtos reception pc magazine stated april 1983 qnx piece software citing multitasking review concluded qnx power maximize utilization pc resources  
65776	computer	law telecommunications network proportional square connected formulated form george 1993 attributed robert regard ethernet law originally 1980 terms users compatible devices machines internet law carry users networks original intent ethernet connections law business management competitive companies merge network effects law network effects communication technologies networks internet social networking wide chairman federal communications commission law understanding internet law unique connections network nodes expressed mathematically proportional law machines single machine machine increases total machines network total people user send receive documents increases social networks users service valuable service community limitations addition difficulty network mathematical law measures potential technological network social utility network depends nodes contact language barriers reasons network contact law assumes node equal benefit machines serves 50 workers company machine serves relative additional connection decreases social networks users network benefit additional user network efficient costs users fixed modified models context social networks including proposed modified models network grows log sought relationships law terms describing relationship network read question costs validation actual data arguments law real data based evidence 30 july 2013 dutch researchers managed analyze european internet usage patterns time values log values months proof facebook data fit law model 2015 extend utilizing data china largest social network company facebook law held difference audience sites facebook serving worldwide audience serving chinese users functions sites paper  
66086	computer	dr dos including version operating dos family written ibm pc compatible personal computers originally developed digital derived advanced successor 86 ownership changed versions produced names including novell dos caldera history origins cp original cp bit intel 8080 80 based systems numerous spin versions notably cp 86 intel family processors cp dominated market shipped vast majority proprietary architecture personal computers 1981 brought eventually massive change ibm originally approached x86 version cp contract ibm deal purchased operating 86 dos dos 86 dos command structure application programming interface cp digital legal action dos cp ibm sell digital x86 version cp cp 86 sold 40 cp 86 price tag proportion pc times cp 86 availability compatible application software favor temporary losing promote cp 86 multi multi user 86 concurrent cp 86 eventually decided beat ibm lead application software availability modified concurrent cp 86 applications dos publicly december 1983 shipped march 1984 concurrent dos bdos hardware vendors concurrent dos continued eventually dos tailored desktop market expensive single user applications time attempts product 1985 digital developed modified single user derivative concurrent dos applications platforms allowed switching tasks original cp 86 dos compatibility limited digital attempt time native dos disk operating launched 1988 based california usa started europe oem support located 1983 1986 operating european development centre dr dos version requested started plan develop dos operating addressing left dos 1987 deal kay corporation japanese oem market version released version chosen reflect features relative dos version public 31 offered features comparable dos 31 disk support 31 reported ibm 31 internal bdos basic disk operating kernel version reported single user nature origin derivative multitasking capabilities cp api support replaced ibm compatible dos bios files named dos bios bdos kernel disk oem label offered extended command tools command error messages sophisticated command history editing history support file directory built kernel cheaper license dos start version named ros rom operating approached pc manufacturers party dos updates time dos bundled hardware achieved success consumers normal retail channels versions 31 bdos 1988 oem 32 bdos 1988 17 oem 33 bdos 1988 01 oem 34 bdos oem 35 bdos 1988 21 oem 40 bdos 1989 01 25 41 bdos 1989 oem retail dos produced hardware oem version called 41 version version code named released 31 compatibility purposes internally single user bdos kernel version avoid dos introduced based gui file management startup screen digital computers dr dos introduced patented power management bundled disk caching software offers improved memory management compatibility purposes files named dos bios bdos kernel oem label boot sectors changed dos include load capabilities kernel structures disk memory extended memory accessible real mode equivalent critical base conventional memory pc ram – dos additionally intel machines memory manager allowed os load dos device drivers upper memory blocks base memory dos integrate functionality base os loading device drivers upper memory blocks party software allowed provide conventional memory dos drivers mouse multimedia hardware network stack loaded dos machine typically 300 conventional memory – late 1980s software manual load conventional memory – allowing dos data structures left conventional memory programs utilizing address techniques failed properly loaded dos memory – segment memory command pre memory start memory map programs load barrier usable conventional memory default configured applications advantage extra memory competition substantial competition dos arena responded announcement released 1990 released june 1991 include advanced features included matches dr enhancements memory management responded code named bdos level internally report ibm 31 normal dos applications compatibility purposes bundled fly disk compression maximize hard disk space file tracking functionality included task named support industry standard task switching api multiple applications time contrast successor multi user products dos applications pre virtual dos machines task background applications brought x86 machines memory machines support facility applications task api graphical user interfaces pc register task manager menu replace mode menu users switch tasks responded matched features pre release version designed return error message detected dos check code detection code disabled windows successor code disabled released version july 1992 digital japan released japanese dos compatible version korean version appears counter simple matter digital patch check windows beta internal tables memory functionality version weeks release 1992 digital bought novell july 1991 spin product code named released netware implies resource light dr dos derivative aimed emerging market operating family bdos kernel native dos compatible internal data structures replacing dos emulation cp kernel true dos compatible kernel helped lot improving compatibility applications dos internal data structures key reducing size kernel code requirement market hand introducing current directory structure limit depth 66 characters dos pc dos previous issues limitation internal organization relative links absolute paths reported pc dos 31 applications kernel compatibility windows expect api implemented dos version rom executing kernel type support features pc cards support power management idle device driver patented dynamic idle detection john constant task support personal modules applications stored executed rom execute stack partially written contribution novell novell dos novell corporation dr dos period novell sold dr dos acquisition digital 1991 features performance typically release dos 1993 pc dos dos pc dos novell novell ceo robert strategy included major selling products database novell dos multimedia main street children titles novell licensed technology electronics novell dos network operating netware novell sold product caldera 23 july 1996 approached novell dos operating bundle distribution novell dos john failure novell bought digital view dr product comprehensive strategy break massive ultimately novell bought corporation time products invested heavily unix planned dr dos internally named intended dos repeatedly delayed novell unix multi user security extension compatible dos graphical user interfaces derivative star true port apple dr dos named dr dos eventually december 1993 versions released march 1994 renamed novell dos components larger germany novell dos marketed dos press campaign aimed 20 dos market copies sold february 1994 carry product novell dos dedicated mail major functional addition novell attempt peer peer networking personal netware predecessor netware networking growing popular support windows os windows nt considerable manual configuration exist pc personal netware achieved success novell dos implemented api internal data structures updated bdos kernel report dos version oem ibm compatibility windows tools report pc dos ibm pc dos reported dos applications novell dos introduced advanced memory management including support dos protected mode interface dos protected mode services flexible options introduced support true pre multitasking multiple dos applications virtual dos machines dos basis dos compatible environment windows enhanced mode gui default bundled dr dos loaded option multi load 32 bit protected mode operating core providing api support pre multitasking multi threading hardware virtualization domain management virtual dos machines api dr dos aware applications api instance current 16 bit dos environment create virtual dos machines applications real mode task support compatible windows tasks started windows tasks windows novell dos personal netware shipped network enabled 3d game novell dos personal netware required bug releases completely stable development occurred beta versions windows 95 novell development novell dos september 1994 stopped maintenance january 1996 15 updates novell caldera approached novell dos operating bundle distribution novell sold product caldera 23 july 1996 time commercial caldera owned dr dos competition ibm pc dos moved impossible subsequent windows version windows 95 dos product claimed purely technical change subject major brought city caldera repeatedly success completion pre stage parties list evidence court january 2000 sum revealed november 2009 august 1996 based caldera approached original dr dos engineers proposal dr dos development windows 95 dr dos court meeting september 1996 love raymond hired set subsidiary september 1996 caldera announced coming release intent release source code caldera incorporated 20 september 1996 hired original developers operating novell continue operating converted nearby digital novell improvements enhancements string key features subsequently including tcp ip stack derived lan dos netware mobile graphical 32 bit dos protected mode browser dr originally based source code browser lan posix extension multi support support hired identifying code 1992 paul secret project create version dr dos compatible windows 95 98 replace dos component demonstrated march 1998 team developed versions dr dos remained played role court caldera officially released caldera 01 february 1997 version novell dos update december 1994 missing worth developed novell dos updates 11 january 1995 15 january 1996 novell dos sources lost novell version reported internal bdos version identical novell dos suite command novell dos updates generation search scanner utility bundled novell dos brought advanced version 01 released source form kit machine readable sources 1997 license terms existing source licenses source closed commercial beta releases september november 1997 official release december 1997 changed caldera dr release march 1998 dr dos returned caldera dr dos time written version bdos incorporated improved bios bdos issues developed paul adding boot configuration options integrating compatibility enhancements bug size speed implementing missing novell dos updates bios improved dr dos windows support party disk compression drivers introduced mode activated lock integrated support loaded flexible capabilities trace commands improving integration alternative command dr chain brought enhanced multi configuration support dr files enhancements basic language powerful boot convenient user interaction acting conditions return codes error levels error allowed change insert settings characters details controlled parameters switch switches optional support device allowed built devices change handling environment variables improved load facilities included options file handles structures typically 15 conventional memory compared previous versions size control pre allocation memory command helped avoid memory typically continuous memory capable party drivers conjunction party command load command option reduced memory version brought enhanced paul multiple distributed user configured country files time hierarchical model dynamic support dos pc dos country file formats addition dr dos country formats introduced support iso international format including automatic detection dr dos 2000 compliant special support updated partition format volumes sources novell external tools drivers germany fitted dr dos finally novell dos true step release updates june august september 1998 updated internal bdos version introduced legacy party applications special support novell dos updated stopped allowed novell dos dos versions file globally version internal bdos version check programs dr dos modified kernel driver paul hierarchical model support load paths distinguish multiple file introduced extended mode dos versions bdos kernel versions versions 128 reported dos versions applications bdos version check disabled versions 100 bdos versions dos revision typically set static pre boot data structure reported version versions dr dos report dos bdos version 72 novell dos 01 compatibility dos feature party memory manager hard wired expect handle structures conventional memory dr dos previous versions 01 version design left handles memory loading files maintain compatibility versions windows compatibility windows 11 maintenance patch single byte switch behaviour 150 bytes conventional memory enabled compatibility dos time compatibility versions windows feature vice versa patch named continued versions dr dos august 1998 based caldera created subsidiaries caldera systems linux business caldera clients embedded client market version dr dos bdos applications pc dos compatibility purposes pre released 1998 officially released january 1999 caldera improved memory managers enhanced support conjunction enhancements utilities changed oem label boot sector volumes dr dos operating systems dr dos version dr dos tailored desktop caldera dr dos business closed successful operation february 1999 set develop split browser development moved total lack expertise field caldera dr dos fell branch company caldera clients renamed 20 july 1999 dr renamed ported linux released dr dos june september 1999 branded caldera dr dos linux embedded systems based version named independently developed versions dr dos oem dr dos 19 august 1999 30 november 1999 branded caldera dr dos variants consisting kernel command specialized native implementation hard disk support bundled easy recovery 2000 replacing dynamically driver easy recovery technology imaging software rom bdos internally versions report pc dos applications integrated support designed compatible dr dos combined dr dos desktop approved dr dos kernel capabilities drives larger specific oem requirements dr dos 14 december 1999 combined kernel files single binary executable windows 98 dos boot sectors dr dos boot sectors dr dos bdos paul introduced bootstrap updated disk tools combine support disk access file systems dr dos pc dos dos windows real 32 single boot sector code continue load version dr dos 31 dr dos support launch pc dos dos files including windows pc dos time kernel sectors dr dos disks disks existing pc dos dos boot sectors variety boot setup multi boot conjunction operating systems versions 2002 bought managers purchased formed company continued sell dr dos embedded systems dr dos released march 30 2004 featuring disk support ability boot rom flash multitasking memory manager version based kernel version company released dr dos support 2005 version based 01 selling copies operating lists option dr dos price 25 000 01 source code base dr dos enhancement project set july 2002 attempt bring functionality dr dos modern pc windows operating systems project native support disks file enhancements including improved memory management support file extension files 256 size normal fat dr dos 01 released july 21 2011 october 2005 discovered dr dos included utilities freedos sources kernel version enhanced dr dos kernel dr dos failed gnu public license freedos utilities authors including source code freedos developers including provide source code dr dos version  
66294	computer	reinforcement learning machine learning concerned software actions environment maximize notion cumulative reward studied disciplines game theory control theory operations theory simulation based optimization multi agent systems intelligence statistics genetic algorithms operations control literature reinforcement learning called approximate dynamic programming dynamic programming reinforcement learning studied theory optimal control concerned existence optimal solutions algorithms exact computation learning approximation absence mathematical model environment game theory reinforcement learning explain bounded machine learning environment typically formulated markov decision process reinforcement learning algorithms context utilize dynamic programming techniques main difference classical dynamic programming methods reinforcement learning algorithms assume knowledge exact mathematical model target exact methods reinforcement learning considered machine learning paradigms supervised learning unsupervised learning differs supervised learning correct input output pairs optimal actions explicitly focus performance involves finding balance exploration current knowledge exploration trade studied multi finite introduction basic reinforcement modeled markov decision process rules stochastic observation typically involves scalar reward transition agent assumed current environmental agent partial set actions agent restricted balance reduced reinforcement learning agent environment discrete time steps time agent receives observation typically includes reward action 11 set actions subsequently environment environment moves 12 reward 13 transition 14 determined goal reinforcement learning agent reward agent randomly choose action function history agent performance compared agent acts difference performance rise notion agent reason term actions maximize future reward negative reinforcement learning suited include term short term reward trade applied including robot control scheduling telecommunications checkers alphago elements reinforcement learning powerful samples optimize performance function approximation deal environments key components reinforcement learning environments situations considered planning form model considered learning reinforcement learning converts planning machine learning exploration reinforcement learning requires exploration mechanisms randomly selecting actions reference estimated probability distribution poor performance finite markov decision processes understood lack algorithms properly scale scale infinite spaces simple exploration methods practical method 15 agent action believes term probability 16 action condition agent action uniformly random 17 tuning parameter changed fixed schedule agent explore based algorithms control learning issue exploration assumed remains experience actions criterion policy agent action selection modeled map called policy policy map probability action probabilistic policies function function 22 defined expected return starting 24 policy 25 roughly speaking function estimates random variable 27 denotes return defined sum future reward step 30 31 rate algorithm policy maximum expected return theory loss search restricted set called stationary policies policy stationary action distribution returned depends observation agent history search restricted deterministic stationary policies deterministic stationary policy actions based current policy identified mapping set set actions policies identified loss force force approach steps policies infinite variance returns requires samples accurately estimate return policy assume structure samples generated policy influence estimates main approaches achieving function estimation direct policy search function function approaches attempt policy return maintaining set estimates expected returns policy current optimal policy methods rely theory defined sense stronger policy called optimal expected return initial initial distributions play role definition optimal policy stationary policies define formal manner define policy 25 27 stands return 25 initial defining 37 maximum 38 25 allowed change policy optimal values called optimal policy optimal strong sense optimal sense expected return 41 42 43 randomly sampled distribution 44 values define define action values action policy 25 action pair 48 25 defined 27 stands random return action 25 theory 55 optimal policy optimal action choosing action 56 action function optimal policy 58 called optimal action function commonly denoted 59 summary knowledge optimal action function assuming knowledge basic approaches compute optimal action function iteration policy iteration algorithms compute sequence functions 60 converge 59 computing functions involves computing space finite reinforcement learning methods approximated samples function approximation techniques represent functions action spaces monte carlo methods monte carlo methods algorithm policy iteration policy iteration consists steps policy evaluation policy improvement monte carlo policy evaluation step step stationary deterministic policy 25 goal compute function values 64 approximation action pairs 48 assuming simplicity finite sufficient memory accommodate action values episode starts random initial estimate action pair 48 computed sampled returns originated 48 time sufficient time procedure construct precise estimate 68 action function description policy evaluation step policy improvement step policy computing policy respect 68 policy returns action 72 practice evaluation computation maximizing actions procedure include temporal difference methods allowing procedure change policy values prevent convergence current algorithms rise class generalized policy iteration algorithms methods belong category issue allowing contribute action pair extent solution returns variance temporal difference methods based recursive equation note computation methods incremental transition memory changed transition batch transitions estimates computed based batch batch methods squares temporal difference method samples incremental methods choice batch methods computational memory complexity methods combine approaches methods based temporal differences overcome fourth issue address issue function approximation methods linear function approximation starts mapping finite dimensional vector action pair action values action pair 48 linearly combining components 75 weights algorithms adjust weights values individual action pairs methods based ideas statistics construct features explored iteration starting rise learning algorithm variants action values highly precise estimates competing action values hard returns noisy extent temporal difference methods called compatible function approximation method efficiency specific recursive equation methods called 78 parameter 79 continuously monte carlo methods rely equations basic methods rely equations effective issue direct policy search alternative method search subset policy space stochastic optimization approaches gradient based gradient methods gradient based methods policy gradient methods start mapping finite dimensional parameter space space policies parameter vector denote policy defining performance function conditions function differentiable function parameter vector gradient 85 gradient expression gradient noisy estimate estimate constructed rise algorithms method likelihood ratio method simulation based optimization literature policy search methods robotics context policy search methods local based local search class methods avoids gradient include simulated cross entropy search methods evolutionary computation gradient methods achieve theory limit global policy search methods converge noisy data variance returns function based methods rely temporal differences methods proposed performed theory finite sample behavior algorithms understood algorithms online performance addressing exploration issue efficient exploration finite time performance appeared algorithms expected understand relative advantages limitations incremental algorithms convergence issues temporal difference based algorithms converge wider set conditions arbitrary smooth function approximation topics include distributed reinforcement learning topic applications reinforcement learning algorithms learning investigation model based learning brain model projections function prediction error reinforcement learning model human learning relation interaction implicit explicit learning acquisition publication application 1995 1996 comparison reinforcement learning algorithms deep reinforcement learning approach reinforcement learning deep neural network explicitly designing space learning atari games google deepmind increased attention deep reinforcement learning reinforcement learning inverse reinforcement learning inverse reinforcement learning reward function reward function observed behavior expert idea mimic observed behavior optimal close optimal learning learning expert target behavior recover policy observation literature conferences journals reinforcement learning papers published major machine learning conferences aaai statistics journals machine learning journal ieee theory papers published papers robotics conferences agent conference operations researchers publish papers conference operation mathematics operations journals control researchers publish papers conferences journals ieee transactions automatic control applied tend published specialized journals simulation conference relevant papers papers published major conferences neural networks evolutionary computation communities annual ieee titled approximate dynamic programming reinforcement learning european reinforcement learning held researchers meet  
66338	computer	holography science practice holograms typically hologram photographic recording light field image formed lens display dimensional image subject aid special glasses intermediate hologram image viewed light encoding light field interference pattern random variations density surface profile photographic medium interference pattern light original light field objects visual depth cues parallax perspective change change relative position pure form holography requires laser light subject viewing finished hologram comparison optimal conditions holographic image visually actual subject level recorded volume space common practice major image quality eliminate laser illumination viewing hologram extent holographic holographic intermediate imaging procedure avoid powered living subjects extremely motion holographic recording process requires holograms generated objects scenes existed holography distinct earlier 3d display technologies produce based conventional lens imaging stage unusual images incorrectly called holograms overview history british awarded nobel prize physics 1971 development holographic method late 1940s built pioneering field ray microscopy scientists including william 1939 discovery result improving electron british company england company filed patent december 1947 patent technique originally invented electron microscopy electron holography optical holography advance development laser 1960 word holography greek writing drawing development laser enabled practical optical holograms recorded 3d objects 1962 union university michigan usa holograms silver photographic recording medium efficient produced absorbed incident light methods converting variation transmission variation developed enabled efficient holograms produced types holograms transmission holograms produced viewed laser light reconstructed image hologram source transmission hologram convenient illumination white light holograms commonly security authentication credit cards product common hologram reflection hologram viewed white light illumination source hologram viewer type hologram holographic displays capable image holography technique dimensional images controlling motion dimensional surface light rays style holography holograms produced static objects systems changing scenes holographic display developed holograms store process days holography required power expensive mass produced cost semi millions dvd common applications holograms holography accessible budget researchers artists dedicated rays holograms objects view visible light holograms rays generated ray electron radiation sources ccds recording medium reconstruction retrieved computation shorter wavelength rays compared visible light approach imaging objects spatial resolution electron provide ray range ray holography capture dynamic processes holography technique enables light field product light source objects recorded reconstructed original light field absence original objects holography sound recording sound field created matter musical instruments vocal encoded presence original matter laser laser holography hologram recorded source laser light pure color composition types holograms involve interaction light coming directions producing interference pattern plate film medium records common arrangement laser beam split object beam reference beam object beam expanded passing lens subject recording medium located light reflected subject edges medium ultimately serve window subject location chosen mind reference beam expanded medium light coming subject create desired interference pattern conventional photography holography requires exposure time correctly affect recording medium conventional photography exposure light source optical elements recording medium subject remain relative quarter wavelength light interference pattern hologram living subjects materials extremely pulse laser light procedure rare rarely scientific industrial laboratory settings minutes powered continuously operating laser typical hologram light beam recording medium object light falls recording medium flexible arrangement recording hologram requires laser beam aimed series elements change element beam beam identical beams aimed directions materials recording medium common film photographic film silver photographic light capable resolution holograms require layer recording medium silver attached transparent commonly process laser beams reach recording medium light waves interference pattern recording medium pattern random represents scene light original light source original light source interference pattern considered encoded version scene requiring key original light source view contents missing key laser identical record hologram developed film beam hologram hologram surface pattern produces light field identical originally produced scene hologram photography holography understood differences ordinary photography physics holography understanding process understand interference diffraction interference occurs diffraction occurs object process producing holographic reconstruction explained purely terms interference diffraction simplified accurate understanding holographic process concepts worth read articles reading article plane diffraction structure pattern simple metal plate cut regular light wave incident split waves direction waves determined wavelength light simple hologram plane waves light source holographic recording medium waves straight pattern intensity varies medium pattern determined angle waves wavelength light recorded light pattern diffraction illuminated waves create waves angle wave originally incident wave constructed recorded light pattern holographic recording defined sources recording medium illuminated source incident plane wave pattern zone plate acts negative lens equal separation source recording plane plane wave negative lens expanded wave appears lens recorded pattern illuminated original plane wave light beam equivalent original wave holographic recording source created plane wave incident normal angle time recording pattern formed complex acts negative lens illuminated original angle complex objects record hologram complex object laser beam split beams light beam object light recording medium diffraction theory object acts source light recording medium considered illuminated set sources located varying distances medium reference beam recording medium source wave reference beam rise zone plate recording medium pattern sum zone combine produce random pattern hologram illuminated original reference beam individual zone object wave produced individual combined reconstruct object beam viewer identical object recording medium appears object removed mathematical model single frequency light wave modeled complex represents electric magnetic field light wave amplitude phase light represented absolute angle complex object reference waves holographic combined beam energy combined beams proportional square magnitude combined waves photographic plate beams developed proportional light energy incident plate constant developed plate illuminated reference beam light transmitted plate equal reference beam amplitude terms representing light beam emerging hologram proportional reconstructed object beam enables viewer original object field view beams modified versions reference beam fourth term object beam reverse object beam forms real image object space holographic plate reference object beams incident holographic recording medium angles virtual real reference angles enabling reconstructed object recording hologram items required hologram required requirements inter essential understand nature optical interference interference variation intensity occur light waves intensity sum individual beams intensity interference pattern maps relative phase waves change relative phases interference pattern field view relative phase waves cycle pattern phase cycle corresponds change relative distances beams wavelength wavelength light optical paths beams holographic recording lead movement interference pattern holographic recording caused relative movements optical components object local air temperature essential wavelength light defined recording interference created exposure time required record hologram depends laser power medium size nature object recorded conventional photography determines stability requirements exposure times minutes typical powerful gas silver elements optical stable period holograms stable objects laser produces energy short time systems produce holograms live people holographic produced 1971 laser laser power recording medium sensitivity recording time mechanical thermal stability requirements object compact optical layout stability requirements holograms objects laser parameter laser producing wave frequency time considered distance maintains single frequency waves frequencies produce stable interference pattern laser determines depth field recorded scene holography laser typically deep hologram objects form scene rough surfaces light wide range angles surface reflects light direction surface light incident recording medium hologram object close recording plate hologram properties hologram defined hologram properties amplitude transmission hologram phase volume reflection hologram amplitude phase holograms amplitude hologram amplitude light hologram proportional intensity recorded light straightforward photographic transparent interference pattern subsequently developed varies intensity pattern – light fell plate developed plate phase hologram changing material proportion intensity holographic interference pattern phase plate illuminated original reference beam original object efficiency fraction illuminated object beam converted reconstructed object beam phase amplitude holograms holograms volume holograms hologram recording medium interference holographic recording hologram material film holograms hold potential integrated consumer electronics smartphones volume hologram recording medium interference pattern recorded hologram dimensional structure incident light angle angle hologram illuminated light source incident original reference beam angle broad spectrum wavelengths reconstruction occurs wavelength original laser angle illumination changed reconstruction occur wavelength colour constructed scene volume hologram effectively acts colour filter transmission reflection holograms transmission hologram object reference beams incident recording medium practice direct beams required directions transmission holograms reconstructed laser source type transmission hologram hologram viewed white light reflection hologram object reference beams incident plate plate reconstructed object viewed plate constructing beam incident volume holograms reflection holograms intensity beam reflected hologram holographic recording media recording medium convert original interference pattern optical element amplitude phase incident light beam proportion intensity original light field recording medium resolve interference object reference beam range tens spatial frequencies ranging cycles ideally recording medium response flat range photographic film response frequencies involved hologram – professional black white film resolution starts 20 lines reconstructed beam film response flat range spatial frequencies interference pattern resolution reconstructed image table principal materials holographic recording note include materials mass replication existing hologram discussed resolution limit table interference lines required exposure expressed energy surface exposure time short exposure times laser require exposure failure mass production existing hologram copied holographic silver surface patterns original illumination intensity method master audio recording involves surface pattern material step process image recorded layer separated master hologram mounted metal plate material copies consists base film separation layer film holographic layer process carried simple press layer film layer takes shape shape film cooled removed press permit viewing holograms reflection additional layer hologram recording layer method suited mass production book feature hologram cover books 1984 featuring record album cover hologram album cover produced 1982 british advanced featured 75 square hologram 3d image letters 44 space picture plane explanation holographic process instructions light hologram national published magazine hologram cover march 1984 holograms credit cards products authentication purposes print holograms steel sheet charge create required surface royal canadian produces holographic gold silver complex process hologram copied laser beam hologram plate illuminated reconstructed object beam beam stability requirements reduced located close matching fluid minimize interference uniform illumination scanning beam shaped viewing holographic image hologram plate illuminated laser beam identical reference beam record hologram exact reconstruction original object imaging eye camera located reconstructed beam scene viewing original lens moved image object objects hologram recorded reconstructed objects relative exhibit parallax original objects common days holography chess board object photographs angles reconstructed light relative positions chess pieces appeared change holographic image laser beam configuration original recording object beam reconstructed image match original laser reconstruct hologram image original image major viewing hologram white light consists light wide range wavelengths hologram illuminated white light source wavelength considered generate holographic reconstruction vary size angle distance image original scene set photographs object sizes holographic image white light specific volume holograms holograms white light source view holograms approximate source spot light sun extended source reconstruct hologram light incident wide range angles multiple white light volume holograms reflection type volume hologram reconstructed image white light source hologram structure effectively filters light wavelengths narrow range theory result image colour laser light hologram practice recording media require chemical processing typically structure processing colour shift shorter wavelength hologram recorded silver red laser light display green image temporary exposure permanent processing artists produce unusual effects holograms method parallax vertical plane defined reconstructed image white light holography recording process standard transmission hologram copies horizontal eliminate vertical parallax output image viewer effectively viewing holographic image narrow horizontal expanded window entire image horizontal parallax movement vertical direction color shift altered vertical perspective perspective effects axis subject hologram viewed distance distortion depth severe distance subject plane hologram substantial stereopsis horizontal motion parallax powerful cues depth holograms credit cards examples holograms technically transmission holograms mounted surface commonly pet reconstructed beam original object beam reference beam identical original reference beam recording medium resolve interference pattern formed object reference beams exact reconstruction required holographic reconstructed coming actual object movement object mapping object moved requires precise developed holographic plate change shape orientation wavelength reference beam rise reconstructed image instance reconstructed image laser reconstruct hologram shorter wavelength original laser reconstruction laser wavelength light white light object hologram object reconstructed hologram hologram broken pieces enable original object spatial resolution size hologram image field view reduced viewer change position scene applications art artists potential holography medium gained access science laboratories create holographic art result scientists artists regard artist scientist claimed employ holography 1972 york exhibit holograms holographic art held academy art michigan 1968 college york 1970 national media attention holography medium late 1960s university art 1969 1970 london london holograms stereoscopic 1970s art studios schools established approach holography notably san francisco school holography established cross museum holography york founded royal college art london forest college studios exist center holographic arts york offers artists create exhibit 1980s artists holography helped diffusion called medium art silver united germany brazil searching proper language dimensional avoiding simple holographic object instance brazil concrete holography express concrete active artists integrate holographic elements holographic techniques artist brand employed computational design eliminate image distortion holography mit museum extensive collections holography art holograms data storage holography variety recording images holographic data storage technique store density ability store amounts medium electronic products incorporate storage devices current storage techniques ray disc reach limit data density diffraction limited size writing beams holographic storage potential generation popular storage media advantage type data storage volume recording media surface produce 1000 images bit resolution type medium result gigabit writing speed read speeds experts 2005 companies produced disc holographic layer store data potential format called holographic disc september 2014 commercial product released company technologies developing competing format 2011 sold holographic data storage models based storage recorded hologram holds data sized potential 3d optical data storage solutions approach data storage data rates based storage technological cost producing commercial product dynamic holography static holography recording developing occur sequentially permanent hologram produced exist holographic materials developing process record hologram short time holography perform simple operations optical examples applications real time holograms include phase time light optical cache memories image processing pattern recognition time varying images optical computing processed operation performed parallel image recording time compared processing time electronic optical processing performed dynamic hologram flexible electronic processing perform operation image operation hologram perform basically multiplication phase addition fourier transform easily performed linear materials simply lens enables applications device images optical search nonlinear optical materials dynamic holography active common materials semiconductors semiconductor quantum atomic generate holograms promising application optical phase removal light beam receives passing medium sending medium phase space optical communications phenomenon rise holography explored 1971 cross san francisco school holography taught holograms typically laser inexpensive equipment holography supposed require expensive metal optical table set lock involved elements blur interference hologram cross alternative block wall base supported ground filled remove dust laser mounted block wall simple lenses splitting laser beam short lengths pipe desired locations subject photographic plate supported light laser beam source controlled shutter loaded plate dark left minutes exposure remotely operating laser shutter produce art holograms 1983 founder san francisco school holography holographic artist published holography easy read guide holograms brought wave simple methods silver recording materials 2000 published holography book introduced inexpensive laser assumed characteristics semiconductor laser virtually creating holograms eventually practical experiment traditional gas development price red laser dropped hundreds 1980s entered mass market component dvd players late 1990s thousands worldwide late 2000 holography kits inexpensive laser pointer entered mainstream consumer market kits enabled students kinds holograms specialized equipment popular items 2005 introduction holography kits developing 2003 create holograms chemical processing 2006 holography quality green holography reach holography community sensitivity green light assumed sensitivity responded formulation increase speed sensitivity major holography quality silver films market manufacturers helped materials blue diffusion method silver published accurate methods lab constructing holograms living subjects moving objects holographic holographic technique enables static dynamic objects rough surfaces measured optical precision wavelength light detect optical path variations transparent media enables fluid flow analyzed generate contours representing form surface regions radiation measure engineering structures microscopy hologram amplitude phase field holograms distribution light directions numerical analysis holograms emulate numerical enables enhancement resolution optical microscopy technique called microscopy achievements microscopy approach quarter wavelength limit resolution sensors hologram modified material molecules generating change color holographic reflection security security holograms difficult master hologram requires expensive specialized advanced equipment 20 50 100 notes british 20 notes south korean 000 50 000 notes japanese 000 yen notes 50 100 500 2000 notes canadian credit bank cards cards books sports equipment storing colour image hologram achieved canada 2008 lab method fourth wavelength rgb components object reference beams record additional data retrieved correct key combination wavelength angle technique remained prototype stage developed commercial applications applications holographic scanners post offices larger automated systems determine dimensional size package automated pre volumes truck holograms produced pressure force applied reflected wavelength color hologram provide protection products products cards food audio visual products hologram protection product covering electrical electronic products hologram tags ability identical product tags electrical electronic products tags variety colors sizes shapes hologram vehicle plate vehicle cars registered hologram purpose identification unique security holograms credit cards holograms security features micro texts texts complex images features holograms cards removed easily offer individual identity brand protection optical principle hologram wave electron holography application holography techniques electron waves light waves electron holography invented improve resolution avoid transmission electron commonly study electric magnetic fields films magnetic electric fields shift phase wave passing sample principle electron holography applied interference acoustic holography method estimate sound field source measuring acoustic parameters source array pressure particle measuring techniques included acoustic holography increasingly popular fields notably transportation vehicle aircraft design idea acoustic holography led versions field acoustic holography optimal field acoustic holography audio wave field synthesis procedure atomic holography evolved development basic elements atom diffraction lens atomic atomic holography natural step development physics applications atomic beams developments including atomic tools creation atomic holograms holograms beam holography solid objects false holograms effects produced printing modern variants tomography displays confused holograms called technique implement methods 3d displays claim referred holographic original theater involved actual physical objects located modern variants replace source object digital screen displays generated 3d graphics provide depth cues reflection mid air flat realistic actual 3d object reflected examples digital version include 2005 europe music awards awards virtual performance music arts 2012 set dr simpler created rear realistic images semi transparent screens rear projection semi screen background illuminated projection break future media music software company produced synthesizer applications produced performing stage holographic characters rear projection semi transparent screen achieve holographic 2011 company produced 2011 hologram included life size projections models company video centered center main dimensional projection screen virtual models claim holography reported trade media april 2015 public visual presentation called holograms featuring virtual spanish law public called hologram news reports actual holography involved updated variant fiction holography referred movies science fiction starting late 1970s science fiction absorbed surrounding holography spread scientists market idea public capability holography fiction dimensional projections force fields examples type include hologram star wars red converted hard light solid star video games fictional holographic technology reflected real life potential military holograms trees holographic games reach fictional holograms inspired technological advances fields augmented reality fictional holograms  
66924	computer	memory management form resource management applied memory essential requirement memory management provide dynamically portions memory programs request critical advanced single process time methods increase effectiveness memory management virtual memory systems separate memory addresses process actual physical addresses allowing separation processes increasing size virtual address space ram secondary storage quality virtual memory manager extensive performance details application level memory management automatic memory management involving collection manual memory management dynamic memory allocation task allocation request consists block unused memory sufficient size memory requests portions memory called store time unused future issues implementation external allocated memory blocks allocation request size individually managed memory management track outstanding ensure overlap memory lost memory efficiency specific dynamic memory allocation algorithm implemented impact performance study conducted 1994 digital equipment corporation involved variety lowest average instruction path required single memory slot 52 measured instruction level variety software implementations precise location allocation advance memory accessed pointer reference specific algorithm organize memory kernel methods fixed size blocks allocation fixed size blocks allocation called memory allocation list fixed size blocks memory size simple embedded systems objects allocated memory addresses reduced overhead method improve performance objects frequent allocation allocation video games blocks memory allocated memory represents blocks memory power size blocks convenient size blocks size linked list tree blocks formed allocation respective memory size requested size selected split selected process request complete block allocated start block avoid breaking blocks block compared combined larger sized block list allocation memory allocation mechanism memory suitable fit objects type size called caches track list cache slots constructing object cache slots object add slot cache slot list technique memory efficient search suitable portion memory slot automatic variables programming language implementations variables declared procedure function local function runtime environment program automatically memory variables program execution entry procedure automatically releases memory procedure special local variables values procedure local variables accessed procedures automatic allocation local variables depth limited memory collection collection strategy automatically detecting memory allocated objects usable program allocated memory memory locations method contrast manual memory management programmer explicitly codes memory requests memory releases program automatic advantages reducing programmer workload kinds memory allocation bugs collection require memory resources compete application program processor time systems virtual memory virtual memory method memory organization physical hardware applications operate memory virtual addresses attempt application access virtual memory address virtual memory address translated actual physical address addition virtual memory enables control memory systems methods access virtual memory systems operating limits process access memory feature called memory protection process read write memory allocated code program operation memory allocated specific processes isolated processes share shared memory fastest techniques inter process communication memory classified access rate primary storage secondary storage memory management systems operations handle moving levels memory  
67065	computer	computational linguistics word sense wsd natural language processing wsd identifying sense word meaning sentence word multiple meanings solution writing improving relevance search engines resolution inference human brain word sense natural language formed requires reflection reality human language developed reflects helped shape ability brain neural networks science technology enables term challenge develop ability computers natural language processing machine learning rich variety techniques dictionary based methods knowledge encoded lexical resources supervised machine learning methods classifier trained distinct word corpus manually sense examples completely unsupervised methods cluster occurrences word senses supervised learning approaches successful algorithms accuracy current algorithms difficult host english accuracy coarse grained level 90 methods achieving 96 grained sense 59 reported evaluation 2007 accuracy simplest algorithm choosing frequent sense 51 requires strict inputs dictionary senses corpus language data methods training corpus language examples required wsd task variants lexical sample task occurrences sample target selected piece running realistic form evaluation corpus expensive produce human read definitions word sequence time tagging block instances target word examples distinct senses exist written word sentences people understand english sentence word fish sense sentence word instrument sense developing algorithms human ability difficult task implicit sound instrument history wsd formulated distinct computational task days machine translation 1940s computational linguistics famous 1949 translation introduced computational context researchers understood difficulty wsd bar 1960 argue wsd solved electronic model knowledge 1970s wsd semantic interpretation systems developed field artificial intelligence starting semantics wsd systems time rule based hand coded knowledge acquisition bottleneck 1980s scale lexical resources oxford advanced dictionary current english hand coding replaced knowledge automatically extracted resources knowledge based dictionary based 1990s statistical revolution computational linguistics wsd paradigm apply supervised machine learning techniques 2000s supervised techniques reach accuracy attention shifted grained senses domain adaptation semi supervised unsupervised corpus based systems combinations methods return knowledge based systems graph based methods supervised systems continue perform difficulties differences dictionaries word sense senses word senses senses closely meaning extension division senses difficult dictionaries provide divisions senses solution researchers choose dictionary set senses broad senses narrow lack coarse grained sense researchers continue fine grained wsd field wsd performed reference sense english computational lexicon concepts sets concept car encoded car auto automobile machine resources purposes include wikipedia multilingual dictionary multilingual wsd speech tagging real speech tagging sense tagging closely constraints question tasks resolved scientists separately competitions speech input compare word sense speech tagging involve tagging senses speech algorithms tend speech word determined adjacent sense word determined success rate speech tagging algorithms wsd art 95 accuracy compared 75 accuracy word sense supervised learning figures typical english languages inter judge variance inter judge variance wsd systems tested task compared human easy assign speech training people tag senses difficult users speech word impossible individuals senses word humans task hand – list senses sentences humans word sense human performance serves standard upper bound performance human performance coarse grained fine grained coarse grained wsd evaluation researchers argue parse meanings form common sense linguistic issue called comparing sentences properly identify senses common sense common sense sense algorithms task dependency task independent sense concept task requires division word meaning senses relevant task ambiguity mouse animal device relevant english french machine translation relevant retrieval true river requires choice french river completely algorithms required applications machine translation takes form target word selection senses target language correspond meaning source language bank translate french financial bank edge river retrieval sense required word sense query retrieved document sense senses finally notion word sense people coarse grained level pen writing instrument level fine grained fine grained sense human agreed 85 word occurrences word meaning principle variable context sensitive divide easily distinct discrete meanings frequently discover corpora overlapping word meanings standard conventional meanings extended exploited variety art corpus definitions explain range meaning word meaning applicable computational applications decisions driven task – named lexical – proposed solution sense task consists providing word context meaning original word chosen lexicon target language approaches methods natural language processing main approaches wsd – deep approaches shallow approaches deep approaches access comprehensive body knowledge knowledge type fish frequency sounds frequency sounds types fish determine sense word approaches successful practice body knowledge exist readable format limited domains knowledge exist deep approaches accurate shallow approaches computational linguistics approaches terms coded knowledge hard knowledge involved linguistic knowledge attempt colleagues cambridge language unit england 1950s attempt data card version numbered indicator topics looked set algorithm successful strong relationships machine learning method 1990s shallow approaches understand surrounding nearby fish sense music song nearby music sense rules automatically derived training corpus tagged word senses approach theoretically powerful deep approaches superior practice limited knowledge confused sentences tree word tree conventional approaches wsd approaches defining window content word corpus analyzing surrounding shallow approaches train bayes classifiers decision trees kernel based methods support vector machines superior performance supervised learning graph based approaches gained attention community achieve performance close art dictionary knowledge based methods algorithm dictionary based method based hypothesis relation observed definitions senses finding pair dictionary senses word overlap dictionary definitions cone definitions senses include tree dictionary approach searches shortest path word definitions semantic variant word definitions semantic variant word previous definitions finally word selecting semantic variant minimizes distance word alternative definitions word sense compute semantic similarity pair word senses based lexical knowledge base graph based methods activation days applied success complex graph based approaches perform supervised methods specific domains reported simple graph connectivity measures degree perform art wsd presence rich lexical knowledge base automatically knowledge form semantic relations wikipedia simple knowledge based methods enabling supervised systems domain specific setting preferences restrictions typically food word musical instrument supervised methods supervised methods based assumption context provide evidence common sense reasoning machine learning algorithm applied wsd including techniques feature selection parameter optimization learning support vector machines memory based learning successful approaches dimensionality feature space supervised methods subject knowledge acquisition bottleneck rely substantial amounts manually sense tagged corpora training expensive create semi supervised methods lack training data word sense algorithms semi supervised learning labeled unlabeled data algorithm algorithm sense sense properties human languages word sense observation tend exhibit sense collocation approach starts data word manually tagged training examples decision rules play context musical instrument train initial classifier supervised method classifier portion corpus extract larger training set included process classifier trained larger training corpus corpus maximum iterations reached semi supervised techniques corpora provide occurrence tagged corpora techniques potential adaptation supervised models domains word language translated language depending sense word word aligned bilingual corpora cross sense semi supervised unsupervised methods unsupervised learning challenge wsd researchers underlying assumption senses occur contexts senses clustering word occurrences measure similarity context task referred word sense occurrences word classified closest clusters senses performance methods difficult senses mapped dictionary word senses mapping set dictionary senses desired cluster based including measures entropy performed alternatively word sense methods tested compared application instance word sense improves search result clustering increasing quality result clusters degree result lists unsupervised learning overcome knowledge acquisition bottleneck dependent manual effort approaches approaches vary methods local summary knowledge acquisition bottleneck major solving wsd unsupervised methods rely knowledge word senses formulated dictionaries lexical databases supervised methods depend existence manually examples word sense testing purposes promising trends wsd largest corpus accessible wide acquire lexical automatically wsd traditionally understood intermediate language engineering technology improve applications retrieval reverse true search engines implement simple robust techniques mining employed wsd lack training data algorithms techniques external knowledge sources knowledge fundamental component wsd knowledge sources provide data essential associate senses vary corpora texts unlabeled word senses machine readable dictionaries classified structured unstructured evaluation comparing evaluating wsd systems extremely difficult sets sense knowledge resources organization specific evaluation systems house scale data sets algorithm developers time word occurrences comparing methods corpus sense define common evaluation datasets procedures public evaluation organized renamed international word sense competition held 1998 1998 2001 2004 successor 2007 objective competition organize hand corpus testing systems perform evaluation wsd systems kinds tasks including lexical sample wsd languages tasks semantic role labeling wsd lexical systems submitted evaluation competitions integrate techniques combine supervised knowledge based methods avoiding bad performance lack training examples 2007 2012 wsd evaluation task choices grown criterion evaluating wsd changed depending variant wsd evaluation task variety wsd tasks task design choices technology word sense wsd tasks grows directions languages  
68181	computer	workstation special designed technical scientific applications intended person time commonly connected local network multi user operating systems term workstation loosely refer mainframe terminal pc connected network common form refers hardware offered current companies sun microsystems silicon graphics dec hp ibm door 3d graphics animation revolution late 1990s workstations offered performance mainstream personal computers respect cpu graphics memory capacity multitasking capability workstations optimized visualization manipulation types complex data 3d mechanical design engineering simulation computational fluid dynamics animation rendering images mathematical typically form factor desktop consist resolution display keyboard mouse minimum offer multiple displays graphics tablets 3d devices 3d objects scenes workstations segment market advanced accessories collaboration tools increasing capabilities mainstream pcs late 1990s lines technical scientific workstations workstation market employed proprietary hardware distinct pcs instance ibm risc based cpus workstations intel x86 cpus business consumer pcs 1990s 2000s 2000s difference workstations highly hardware dominated pc vendors hewlett packard hp fujitsu selling windows linux systems running x86 64 processors history origins development workstation ibm scientific designed single person console introduced 1960 feature machine actual arithmetic circuitry perform addition required memory table addition rules saved cost logic circuitry enabling ibm inexpensive machine code named initially 1000 month 1965 ibm introduced ibm scientific meant successor systems ability programs written fortran languages built roughly desk sized add disk drives printers paper tape card console direct interaction standard examples workstations dedicated minicomputers designed support users exclusively person notable pdp digital equipment corporation regarded commercial minicomputer lisp machines developed mit 1970s principles workstation performance single user systems intended heavily interactive lisp machines 1980 companies lisp machines texas instruments xerox workstations designed single users resolution graphics facilities workstation modern sense term xerox developed xerox parc 1973 workstations include 1977 1979 xerox star 1981 1980s rise popularity 1980s advent 32 bit microprocessors motorola 68000 participants field appeared including sun microsystems created unix based workstations based processor darpa project created graphics products notably silicon graphics range machines uncommon target market products sun considered network workstations machines graphics workstations risc microprocessors mid 1980s workstation vendors workstations expensive typically times cost standard pc car minicomputers cost house components faster local store inclusion features pcs time speed networking sophisticated graphics workstation manufacturers tend balanced approach design avoid data flow additionally workstations specialized nature tend profit driven pcs systems workstation companies feature channel disk storage systems 3d single multiple 64 bit processors amounts ram designed cooling additionally companies products tend repair replacement plans workstation pc increasingly demand fast computers networking graphics common consumer allowing workstation manufacturers pc components graphics solutions opposed proprietary house developed technology cost workstations expensive pc standards offer binary compatibility workstations servers vendor software development cost relative server desktop machines graphics workstations graphics workstations machines silicon graphics shipped graphics clients terminals attempts produce workstation machine lowest price opposed performance approach remove local storage reduce machine processor keyboard mouse screen nodes traditional operating perform computations locally storage remote server approaches intended reduce initial purchase cost total cost ownership reducing administration required user approach attempted replacement pcs office productivity applications 1990s terminals filled role technical computing sun introduced clients notably sun ray product traditional workstations pcs continue drop price market products type 1980s workstation meet called memory display roughly compute performance floating operations limited magnitude capacity personal time original 1981 ibm personal memory display floating performance 30 optional math coprocessor desirable features desktop computers time included networking graphics acceleration speed internal peripheral data buses goal bring price 000 achieved late 1980s workstations mid range cost 15 000 100 000 mid 1990s trends leading decline widespread adoption technologies mainstream pcs direct factor decline workstation separate market segment market definition workstation extent components workstations consumer market price differential workstation consumer pcs consumer market game market difficult desktop pc workstation instance nvidia 256 graphics card gpu driver support tailored unique requirements cad applications price poor workstation card hardware capable soft features exclusive workstations typically drivers cpu technology consumer desktop workstation benefit cpus designed concept essentially multiple processors die application ibm pioneer modern workstations typically multiple cpus error memory larger die caches consumer level cpus power reliability required desktop ibm power based processor boards workstation level intel based processor boards multiple cpus die cache memory features suited content creation engineering scientific desktop computing workstations designed specific application studio hd 3d studio max ensure compatibility software software vendor certification process workstation price jump professional purposes reliability initial purchase cost current workstation market decline risc based workstations january 2009 risc based workstation product lines discontinued 2018 commercially risc based workstations form series ibm based systems computing systems change x86 64 workstations current workstation market x86 64 microprocessors operating systems platforms include windows freebsd gnu linux distributions apple macos os oracle solaris vendors market socket systems workstations types products marketed workstation workstation definition segment desktop market computers expected perform workstations pc operating systems components component manufacturers segment product market components cheaper consumer models feature level performance workstation class pc features  
70370	computer	law claim software development named honor formulated raymond book 1999 law bugs shallow formally beta developer base characterized obvious code multiple developers purpose reaching acceptance simple form software researchers repeatedly effectiveness types process finding bugs security issues software engineering robert refers law source movement calls lack supporting evidence rate additional bugs scale linearly maximum additional bugs rate closed source promote independent code analysis software project development focus depth review detection inserted attributed raymond claim security bug critical piece code considered raymond availability source code developers researchers perform extensive tests closed source software easier bugs remain 2015 linux foundation executive director argued complexity modern software increased levels specific resource allocation desirable improve security 2014 largest global source software scale experiments peer reviewed holds practice performed  
76996	computer	organizing map som organizing feature map type artificial neural network ann trained unsupervised learning produce dimensional typically dimensional representation input space training samples called map method dimensionality reduction organizing maps artificial neural networks apply competitive learning opposed error correction learning backpropagation gradient descent sense neighborhood function preserve properties input space visualization creating dimensional views dimensional data scaling artificial neural network introduced professor 1980s called map network computationally convenient abstraction building biological models neural systems 1970s models alan turing 1950s typical type network structure feedforward networks nodes attached type architecture arrangement motivation extensions include edges connected nodes organizing maps nodes larger organizing maps data character common matrix matrix node average distance node weight vector closest neighbors square grid instance closest nodes von neumann moore nodes grid display properties maps consisting thousands nodes perform cluster operations map structure operations artificial neural networks operate modes training mapping training builds map input examples competitive process called vector mapping automatically input vector visible organizing map map space consists components called nodes neurons map space defined finite dimensional region nodes arranged regular grid node weight vector position input space dimension input vector nodes map space stay fixed training consists moving weight vectors input data reducing distance metric topology map space organizing map describes mapping dimensional input space dimensional map space trained map classify vector input space finding node closest distance metric weight vector input space vector learning algorithm goal learning organizing map network respond input patterns partly motivated visual sensory handled separate cortex human brain weights neurons random values sampled largest principal component eigenvectors alternative learning faster initial weights approximation som weights network fed vectors represent close kinds vectors expected mapping examples times iterations training utilizes competitive learning training fed network euclidean distance weight vectors computed neuron weight vector input called matching unit weights neurons close som grid adjusted input vector magnitude change decreases time grid distance update neuron weight vector step training sample decreasing learning coefficient input vector neighborhood function distance neuron neuron step depending implementations scan training data set training sample size randomly drawn data set bootstrap sampling implement sampling method neighborhood function depends grid distance neuron neuron simplest form neurons close gaussian function common choice functional form neighborhood function time neighborhood broad organizing takes global scale neighborhood neurons weights local estimates implementations learning coefficient neighborhood function decrease increasing scans training data set decrease step fashion steps process repeated input vector cycles network output nodes patterns input data set patterns named names attached nodes trained mapping single winning neuron neuron weight vector closest input vector simply determined calculating euclidean distance input vector weight vector representing input data vectors article object represented digitally distance measure operations training construct organizing map includes matrices continuous functions organizing maps variables variables vectors algorithm variant algorithm som selection initial approximation iterative methods learning neural networks random som weights principal component initial map weights chosen space principal components popular exact comparison random approach principal component dimensional som models principal curves demonstrated advantages principal component som universal method depends geometry specific dataset principal component dimension principal curve dataset linearly projected principal component sets nonlinear datasets random performs examples data array nodes weight vector aware location array weight vector dimension node input vector weights initially set random values input feed map colors represented red green blue components represent colors vectors unit vector space generated basis diagram training data original images note training grid neurons 250 iterations learning rate map detect main differences species interpretation interpret som training phase weights neighborhood moved direction items tend adjacent neurons som forms semantic map samples mapped close matrix euclidean distance weight vectors neighboring cells som weights input space form discrete approximation distribution training samples neurons regions training sample samples som considered nonlinear generalization principal components analysis pca artificial real data som advantages conventional feature extraction methods empirical orthogonal functions pca originally som formulated solution attempts modify definition som maps mechanical approximate principal plate  
79099	computer	maple symbolic numeric computing environment multi paradigm programming language developed maple covers aspects technical computing including visualization data analysis matrix computation connectivity adds functionality physical modeling code generation overview core functionality users enter mathematics traditional mathematical notation custom user interfaces created support numeric computations arbitrary precision symbolic computation visualization examples symbolic computations maple incorporates dynamically style programming language pascal language variables lexical scope interfaces languages fortran java matlab visual basic interface excel maple supports format representing mathematical expressions including display architecture maple based kernel written maple language functionality libraries variety sources libraries written maple language source code numerical computations performed numerical libraries atlas libraries libraries functionality maple requires numerical data formats symbolic expressions stored memory directed graphs standard interface calculator interface written java history concept maple meeting november 1980 university researchers university purchase powerful decided develop algebra cost computers limited version december 1980 maple demonstrated conferences 1982 reference maple canadian heritage 1983 50 universities copies maple installed machines 1984 arranged products license commercially version maple 1988 maple founded original goal manage distribution software eventually company evolved department maple development rest university labs worldwide including symbolic computation laboratory university ontario centre algebra university western ontario 1989 graphical user interface maple developed included version macintosh windows versions interface 1990 maple 1992 maple release introduced maple combined graphics input output 1994 special issue created maple developers called published 1999 release maple maple included numerical libraries 2003 current standard interface introduced maple interface written java portions rules mathematical written maple language java interface criticized slow improvements versions documentation previous classic interface users physical memory mid 1995 2005 maple lost market share competitors user interface 2005 maple introduced document mode standard interface developed september 2009 maple acquired japanese software systems features features maple include examples maple code sample programming simple functions defined maps notation integration compute matrix solve equation polynomial equations functions 17 satisfy integral maple engine maple engine products listed party commercial products maple engine  
81926	computer	blender source 3d graphics software creating animated films visual effects art 3d printed models interactive 3d applications video games blender features include 3d modeling raster graphics editing fluid simulation particle simulation soft body simulation match moving rendering motion graphics video editing current versions feature integrated game engine upcoming release remove history dutch animation studio started develop blender house application based source files january 1994 considered blender version 00 released january 1995 primary author company owner software developer blender inspired song album design choices experiences blender carried earlier software called developed commodore platform period january 1998 blender released publicly online client contracts company founded technologies june 1998 develop blender initially 2002 meant time development blender 2002 started profit blender foundation goal continue developing blender community based project july 18 2002 started blender campaign campaign aimed blender time 000 100 time collected community september 2002 announced collected release blender source code blender source software developed community time time employees employed blender institute blender foundation initially dual licensing addition blender blender license require source code required blender foundation option 2005 blender solely gnu updated benefits january 2019 blender 25 2002 close march release 25 sort personal tag artists developers decided add 3d model head created paul van named smith film blender alternative common models stanford model 500 quick easy material animation texture lighting frequently images included blender largest blender contest award called award release history table lists notable developments blender release history features official releases blender windows linux port freebsd 32 bit 64 bit versions distributed extensive scenes programs software features characteristic 3d software capabilities user interface blender user interface incorporates concepts supported platforms blender windows vista mac os linux blender supported release windows xp file format blender features internal file pack multiple scenes single file called file wide variety import extend blender capabilities accessing object data internal api inter operate 3d tools blender data kinds data blocks objects scenes materials images object blender consists multiple data user mesh consists object mesh data block material linked data blocks refer multiple objects refer mesh subsequent editing shared mesh result shape objects mesh objects materials textures linked files files resource libraries import software supports variety 3d file formats import 3d studio 3d printing video editing blender features functional production ready linear video editor called video sequence editor short blender features including effects gaussian blur color transitions video transformations multi core support rendering video source framework convert blender scenes graphics animation sound physics standard browsers performed single standalone real time toolkit creating interactive 3d experiences blender max development nasa interactive application experience rendering ray cycles path render engine designed interactive easy supporting production features installed add default activated header gpu rendering cycles supports gpu rendering speed rendering times gpu rendering modes preferred method nvidia graphics cards supports rendering amd graphics cards multiple gpus supported create render – multiple gpus increase memory gpu access memory rendering algorithm lighting computations cycles supports path direct light sampling lighting suitable complex lighting situations rays camera scene light source object light background surfaces light indirect light sampling ray follow surface direct light sampling light source ray types language blender users create nodes language note support gpus materials materials define curves geometric objects consist defining mesh appearance surface volume surface surface surface defines light interaction surface mesh incoming light reflected mesh absorbed volume surface reflect light volume volume pass straight mesh defined volume describes light interaction passes volume mesh light absorbed volume shape surface altered textures mesh surface detailed depending settings virtual modifying surface mapping combination real virtual blender features blender rendering engines engines included blender external source external proprietary physics blender simulate dust water bodies simulation piece mesh designated physics fluid simulation physics fluid simulation fluid simulator water lattice boltzmann methods simulate resolution particle fluid simulation particle physics fluid simulation creates follow particle method development source blender experienced initial major feature set improvements include animation stack based updated particle simulate fluid dynamics soft body dynamics support game engine advanced render pipeline allowing separate render passes render texture node based material editing projection developments google summer code program blender foundation participated 2005 blender project official planning major revision blender series 2015 potential targets including ui blender support physically based rendering extra easy virtual environment engine bring improved 3d graphics game engines rendering engine allowing 11 moving version support versions particle constraint systems blender internal removed code project started april 2018 set amsterdam blender institute goal project development team speed development blender june code project april alpha version completed beta testing november 29 2018 support blender extensively documented rest support community discussion internet blender network support social services blender professionals additionally youtube video blender professionals cost blender source nature programs advantage success selling modified versions examples include fluid designer recognized blender based media industry blender started house tool dutch commercial animation company blender television including australia brazil russia blender nasa publicly 3d models 3d models nasa 3d resources native format nasa blender converted blender develop interactive application 3rd operate control cameras robotic arm prominent events science laboratory mission application siggraph 2015 professional project blender create pre department french language film day feature film blender special effects linux workstations prize international film special effects digital graphics blender history channel professional 3d graphics programs moore secret partly produced studio digital graphics category animated feature film commercial animated feature film created blender february 2010 main characters animals special effects episode red season 2012 created blender confirmed gecko animation blender movie special effects series blender particle simulations blender pre visual effects director david blender multiple lights blender credit sequences animation film cat super partially created blender experimental hop death blender produce music videos program visible music video created blender animation team developers improving blender internal planned eventually add improvements official blender build blender create character 2016 film projects 2005 blender foundation creative project drive innovation blender dream movie project orange september 2005 notable blender artists developers short film software initiative orange movie project hosted netherlands media art institute film dream march 24 2006 response success dream blender foundation founded blender institute additional projects announced projects project short animated film project project game collaboration created project video 2012 2013 movie project october 2007 team started project production short movie time creative concept deep style dream official movie april 2008 game project project production game based universe characters movie software game titled project started february 2008 development completed july 2008 product expected august release delayed game released december 2008 gnu content licensed creative movie project blender foundation project keeping code names time chosen action minutes main characters film online september 30 2010 game based officially announced 12 2010 features integrated blender direct result project steel movie project october 2011 fourth movie project codenamed announced blender foundation team artists assembled community blender movie live action started 2012 movie released september 26 2012 previous films footage scenes models content compliant creative license film press release film scientists amsterdam stage event attempt robots movie project january 2011 announced movie project codenamed goal produce feature animated film production 2012 2014 film written produced international animation studios studio announced january 28 2014 production march 2014 constructed development goals set initial minute pilot released youtube august 2015 siggraph 2016 animation choice award project real time rendering capabilities 3d animation series animated short films centers attempts overcome obstacles agent operation agent operation minute planned animated feature based classic series agent hero hero movie project demonstrate capabilities tool blender spring 25 october 2017 upcoming movie named spring announced produced blender institute directed written studio aims spring blender capabilities official release online services blender cloud blender cloud platform launched march 2014 operated blender institute based cloud computing platform blender client add synchronization animation project files launched promote project intended replace selling blender foundation based model file sharing collaboration feature blender cloud blender synchronization blender clients file user preferences features blender blender unified blender software service users providing blender cloud blender store blender conference blender network blender development fund blender foundation program  
82368	computer	structure interpretation programs book science textbook fundamental principles programming including abstraction programming language design implementation considered classic culture written massachusetts institute technology mit abelson edition published 1985 mit press edition published 1996 textbook mit electrical engineering science focuses patterns solving specific building robust software systems patterns content book describes science concepts scheme lisp virtual register machine implement lisp compilers characters fictional characters book license book licensed creative license book textbook mit programming replaced python schools book textbook textbook mit scale symbolic systems class reception byte recommended professional programmers magazine stated book easy read experienced programmers topics influence influential science education books inspired style  
87030	computer	greek language time dealing relationship languages idea developed assumptions exist stable basic vocabulary referred lists languages happen analogous constant time exist methods partly extensions method biological assumptions technique people refers methodology word list original method core vocabulary language replaced constant constant average rate languages measure time process list lexical terms lists compiled assumed originally designed 1952 list 200 items 100 word list 1955 common modern day core vocabulary designed concepts common human language personal body bodies basic actions concepts specific culture time ideal meaning set tailored languages compared alternative word lists compiled meaning slots percentage common origin word lists measured larger percentage languages compared separated constant robert constant 13 pairs languages 200 word list 90 confidence 100 word list 86 constant rate rate replacement base time basic shortest form period time stage language proportion items period rate replacement word list testing historically knowledge linguistic data approximate distance classical modern languages empirical 14 meaning rate replacement 14 100 european variance 1973 chinese 1978 1973 1963 blood note approach gray discussion concept language change history reviewed 1973 1973 dates mid 20th century introduction subject 1986 2005 partly issues accuracy question basis sound 1962 1961 1962 1980 concerns addressed 1972 1973 black 1973 assumption single word replacement rate time estimate included 1988 mathematics model conference yale 1971 published proceedings 1973 conference application theory language 1973 overview arguments papers conference held institute 2000 presentations vary dates discussed original school traditional method discussion modified original concept idea formal method linguistic analysis valid modifications replacement rate van 1966 splitting word list classes rate james 1967 allowed meaning rate simultaneous estimation time replacement rate studied black 1970 allowed chance effects introduced 1959 1973 suggested introducing parameter allowed combination improvements 1972 biological context developed model genetic 1981 simplified version linguistic context simulations improvements statistical methodology completely branch science – dna time – methods robust earlier tree historical events smooth rates change require assumption constant rate change gray 2003 method attempt introduce modifications performed russian proposed account time dependence individual stability reflects replacement process individual rates stable elements replaced square root represents reverse trend – acceleration replacement items original age shifting meaning complicated original yields language separation confirmed historical knowledge hand scientific tool language families historical distinguish time depth estimation institute hosted conference issue time depth estimation 2000 published papers idea views time vary dates discussed note gray paper hold methods called term original method  
87210	computer	sigmoid function mathematical function characteristic shaped curve sigmoid curve sigmoid function refers special logistic function figure defined sigmoid function include curve modeling systems values curve sigmoid functions domain real return increasing alternatively depending convention wide variety sigmoid functions including logistic functions activation function artificial neurons sigmoid curves common statistics cumulative distribution functions logistic distribution normal distribution student probability density functions definition sigmoid function bounded differentiable real function defined real input values negative derivative properties sigmoid function derivative bell shaped sigmoid function constrained pair horizontal examples integral continuous negative shaped function cumulative distribution functions common probability distributions error function cumulative distribution function normal distribution applications natural processes complex learning curves exhibit approaches time specific mathematical model sigmoid function van model based curve applied response yield examples application logistic curve response yield depth water table artificial neural networks smooth functions efficiency hard  
93070	computer	science selling book stephen wolfram published company 2002 empirical systematic study computational systems cellular automata wolfram calls systems simple programs argues scientific philosophy methods study simple programs relevant fields science contents computation implications thesis science nks nature computation explored experiments relevance understanding physical computation approached engineering seeks build practical systems computations mathematics seeks prove computation 1970s computing mathematical engineering empirical wolfram introduces seeks computation argues method traditional mathematics fails complex systems upper limit complexity systems simple programs basic subject wolfram science study simple abstract programs class computational instances complexity simplest time series multiple iterative loops applying simple set rules cycle set rules true components details setup systems explored book include cellular automata dimensions mobile automata turing machines dimensions network systems recursive functions nested recursive functions tag systems register machines addition program simple requirements simple programs tend simple abstract framework simple cellular automata turing machines examples frameworks complex cellular automata simple programs frameworks capture operation natural systems feature simple programs percentage capable producing complexity simply variations class programs leads examples leads question program simple complexity sense program definition encode program simple programs minimal logical phenomenon details program rules direct relationship behavior difficult engineer simple program perform specific behavior alternative approach engineer simple computational framework force search components match simple programs capable range behavior proven universal computers exhibit properties traditional science behavior behavior sensitive dependence initial conditions models traffic material crystal growth biological growth phenomena feature simple programs book complicated complexity science argues evidence simple programs capture complex mapping mining computational universe study simple rules complex behaviour wolfram argues explore computational systems document argues study branch science physics basic goal field understand computational universe experimental methods proposed branch scientific exploration forms scientific production instance initial computational hand explicit systems compute function forms production unique field study discovery computational mechanisms systems forms production involves creation programs analysis computational systems nks framework simple programs subject goals methodology extension idea human mind computational providing raw data effective wolfram believes programs analysis thousands field concerns abstract rules principle address issues relevant fields science wolfram idea ideas mechanisms discovered computational universe represented simplest forms fields choose relevant wolfram expressed central science lot computational universe reason lot purposes systematic abstract science wolfram simple programs scientific discipline argues methodology fields science basis argument study simple programs minimal form science equally abstraction empirical aspect methodology nks optimized direct easy meaningful maximizing experiment methodology computational mechanisms studied simplest forms wolfram argues process mathematical basis physical offer sciences wolfram argues computational universe science hard fundamental reasons argues understanding learn favor instance reverse engineering theories observation systems match behaviors major theme nks structure possibility space wolfram argues science models complicated organized limited primitives traditional mathematics wolfram models variations straightforward compute analyze computational wolfram argues achievements providing ideas computation organizing principle science instance argues concept computational complex computations short reduced ultimately reason computational models nature considered addition traditional mathematical models idea natural systems generate theory stochastic computational models include explicit principle computational equivalence based experimental wolfram developed principle computational equivalence principle systems natural perform computations universal level computational power systems level systems principle compute computation simply question translating input outputs systems computationally equivalent proposed examples systems human brain evolution weather systems principle processes simple equivalent principle wolfram array concrete argues theory explanation experience complexity systems analyze sophisticated complexity special quality systems instance concept heat simply label systems computations sophisticated wolfram argues understanding normal science nks paradigm level wolfram argues scientific principle computational equivalence science humans special claimed complexity human intelligence special principle sense wolfram ideas based understanding scientific human operating universe studies applications specific ideas nks book organized common theme examples applications complexity takes achieve behavior proper methodology discover behavior nks book introduces book composition simplest class characteristic examples include recursive function complexity universal turing machine shortest wolfram simple programs exhibit phenomena phase transitions behavior traditional science simple computational models natural systems growth fluid final category applications fall theme common theme computational universe reason fields instance wolfram computational universe evolutionary theory computational complexity theory fields wolfram suggests theory computational provide resolution existence deterministic universe computational process brain complex captured simpler computation principle computational process deterministic determine experiment book vast individual experimental automaton computes characteristics methods analysis book technical result describing turing rule cellular automaton turing machines simulate rule wolfram symbol universal turing machine wolfram symbol turing machine universal 2007 book wolfram company offered 25 000 prize proof turing machine universal smith science student prize wolfram nks summer school wolfram organize summer school 2003 2006 classes held brown university 2007 summer school hosted university exception 2009 held italy 2012 program held college massachusetts 2013 wolfram summer school held annually university massachusetts 14 consecutive summer schools people participated continued developing week projects master summer school publications reception science coverage including articles york times wired scientists criticized book perceived simple systems cellular automata complex degree complexity evolved systems observed wolfram complexity systems critics accept wolfram result universal computation view minor wolfram claim paradigm shift contained valuable ideas wolfram addressed critics series article published april 2018 science listed books recommended gates scientific philosophy nks simpler version wide variety complicated contexts nks argues exploring space simple programs lead base knowledge scientists parameters occur universe instance symbols equation essentially nks criticized behavior simple systems systems methodology common criticism nks follow established scientific methodology instance nks establish mathematical definitions attempt prove equations written mathematica standard notation lines nks criticized heavily visual pictures formal meaning criticized modern field complexity studied complexity mathematical perspective criticized theory book theory phenomenon sensitive dependence initial conditions utility nks criticized providing specific applicable ongoing scientific criticism implicit explicit study simple programs connection physical universe limited real explained wolfram methods fashion principle computational equivalence criticized predictions criticized mathematical logic computational complexity theory seek fine grained levels computational kinds property critics ray kurzweil argued distinction hardware software computers equivalent power follow programs equivalent thesis fundamental theory nks wolfram direction fundamental theory physics criticized professor science university texas austin claims wolfram methods compatible special bell theorem explain observed bell experiments arguments apply entire scientific field quantum seeks theories quantum mechanics local hidden variable theory bell explored physics nobel criticism digital physics idea universe writing book cellular automaton developed toy model called claimed nks ideas wolfram model universe network cellular automaton wolfram suggested cellular automaton account features absolute time frame turing machine physics idea turing 2002 review nks nobel particle wrote wolfram particle suppose apply experience digital programs laws nature led view considered 1981 paper richard nature discrete continuous suggests space consists set isolated cells cellular automaton time discrete steps idea universe automaton motivation sort wolfram computers moon suppose nobel suggested cellular automaton based theory quantum interpretation theory evolution equations classical string theory theory terms special basis defined space time lattice lattice natural selection wolfram claim natural selection fundamental complexity biology led scientist wolfram understand theory evolution nks heavily criticized original title claims manner nks vast examples arguments criticized leading reader ideas original wolfram substantial technical book rule cellular automaton turing complete proven wolfram assistant notes book scientists citing names historical form traditional additionally idea simple rules generate complexity established idea science theory complex systems  
93547	computer	john 13 january – 20 march 2010 british scientist turing award winner life education career born england military family awarded college 1947 subsequently served royal engineers rank king college cambridge 1957 programmer entering city university london university stanford university 1973 university founder laboratory foundations science returned cambridge head laboratory 1995 eventually laboratory 2009 advanced fellow held time chair science university heart attack 20 march 2010 cambridge shortly contributions regarded major contributions science developed tools automated theorem language developed language type inference type safe exception handling developed theoretical framework analyzing concurrent systems systems successor pi time death computing pi type honors awards fellow royal society distinguished fellow british society 1988 received acm turing award 1991 1994 fellow acm 2004 royal society awarded royal medal bringing public benefits global scale 2008 elected foreign associate national academy engineering fundamental contributions science including development pi selected publications publications  
95171	computer	japanese electronics corporation headquartered japan company founded producer grown largest japanese electronics producers sony hitachi toshiba pioneer addition electronics offers electronic products services services panasonic fourth largest television manufacturer 2012 market share panasonic primary tokyo stock exchange secondary stock exchange october 2008 company electric industrial january 2008 company announced change panasonic corporation october 2008 global brand panasonic change approved meeting june 26 2008 family history 20th century panasonic founded vendor products produced marketed national brand war company operated japan asia produced electrical components appliances light motors electric wireless equipment vacuum war panasonic supply post war japan appliances law founded components war grew panasonic acquired panasonic december 2009 1961 united american company producing television sets market panasonic brand expanded brand europe 1979 company national brand north america 1950s 1970s trademark united national brand led creation panasonic brand united decades panasonic released additional products including black white 1952 electrical 1953 1959 color 1966 company debuted audio speaker japan 1965 brand quality stereo components worldwide famous products record player performance precision 1970s 1980s panasonic continued produce quality specialized electronics markets developed successful stereo players components 1983 launched panasonic senior partner ibm pc compatible japanese november 1990 agreed acquire american media company subsequently sold 80 company april 1995 2000 2002 panasonic canada marked country build music city toronto january 19 2006 panasonic announced producing analog 30 total business month digital 2008 models electric panasonic factory called panasonic dropped national worldwide japanese markets november 2008 panasonic announced holding merger eventually acquisition panasonic merger completed december 2009 corporation revenues announcement pioneer production displays panasonic purchased patents incorporated technologies displays april 2011 announced panasonic cut force 40 000 2012 overlapping operations percent force october 2011 panasonic announced money losing business production plant march 2012 cutting 000 jobs process january 2012 panasonic announced deal venture users watch live television users laptop tablet television partnership integrated panasonic 11 2012 panasonic announced plans acquire stake systems india based company infrastructure protection security solutions video surveillance building management company prediction loss yen november 2012 shares fell lowest level february 1975 yen 2012 shares 41 percent november 14 2012 panasonic cut 000 jobs 18 2013 panasonic announced building factory vietnam completed 2014 july 2013 panasonic agreed acquire 13 stake manufacturer press release announcement 2013 panasonic announced acquired video surveillance service reach cloud based solutions july 2014 announced panasonic reached basic agreement tesla motors participate huge battery plant american electric vehicle manufacturer plans build august 2014 tesla plant built western united plant employ 500 people reduce tesla battery costs 30 percent company potential sites texas mexico california october 2014 panasonic announced initial investment tesla battery factory tens yen firm ceo november 2014 panasonic announced partnership interactive create customized digital stores january 2015 panasonic announced stopped china plans joint venture march 2015 panasonic announced plans based satellite communication service provider global april 2015 panasonic announced range products brand south company south initial targets june 2015 panasonic energy utilities red energy energy based battery storage options november 2015 panasonic corporation announced set plant china subsidiary panasonic systems produce type filter matter contained engine gas november 2015 panasonic corporation start retail locally produce facility life singapore licensed country panasonic technology february 2016 panasonic city formed formal partnership city america chairman ceo panasonic america plans partnership key smart offices energy utilities transportation city services smart increased competition china panasonic auto market share 47 2014 34 2015 june 2016 tesla motors announced panasonic corporation exclusive supplier batteries mass market vehicle model batteries model model supplied panasonic 2016 panasonic president confirmed planned total investment company construct capacity model april panasonic moved production plans announced sale invested 2016 debuted transparent august 2018 company announced avoid potential issues panasonic european headquarters amsterdam october approaches 25 september 2018 panasonic founding mount alliance announced frame cameras range mount lenses launched 2019 47 panasonic 24 panasonic cameras produced panasonic offer pro support service professional cameras equipped dual image technology light current operations march 31 2012 panasonic employed 000 staff subsidiary companies panasonic total revenues 2012 percent generated japan 25 percent asia japan 12 percent percent europe panasonic operations broad business fields – consumer solutions components devices – domain companies – networks generated 17 panasonic total 2012 revenues solutions 15 revenues appliances 15 revenues industrial devices 14 revenues systems communications revenues automotive systems revenues energy revenues healthcare manufacturing solutions panasonic invested total development 2012 equivalent percent revenues march 31 2012 panasonic held total patents worldwide july 2016 reported panasonic artificial intelligence machine learning space source company acquisition joint venture panasonic automotive systems panasonic automotive systems original equipment manufacturer factory installed mobile audio equipment speakers navigation modules major auto manufacturers virtually japanese american european 2015 revenue 12 panasonic manufactured vehicle audio products head units speakers panasonic corporation panasonic corporation subsidiary panasonic corporation north america supplier flight entertainment communication systems headquartered forest california engineering development testing performed installation field engineering major quality functions certification program management performed washington facility – panasonic corporation employs 300 employees based 70 locations worldwide major facilities london singapore majority component manufacturing carried japan february 2017 panasonic reported subsidiary investigated american panasonic mobile communications panasonic mobile communications manufactures mobile phone equipment 2012 20 share japanese market panasonic market mobile phone worldwide december 2005 announced markets poor sales panasonic returned market 2012 release panasonic android powered smartphone july 2013 panasonic announced company supply model smartphone focus sony samsung products 2013 panasonic mobile communications yen operating loss july 2013 january 2018 panasonic india released series android smartphones panasonic series series panasonic corporation north america panasonic corporation north america panasonic principal subsidiary united headquartered newark jersey 2013 headquartered 1980s newark located jersey region founded york city building september 1959 electric corporation america prior 2005 panasonic europe panasonic principal subsidiaries europe panasonic europe panasonic marketing europe gmbh panasonic europe headquartered london england moving headquarters amsterdam netherlands panasonic employs 12 000 people europe region generates total revenues 2012 panasonic share consumer electronics market europe ranking samsung electronics 26 electronics 12 panasonic operates chain stores united kingdom called panasonic store exclusively sell panasonic products prior 2008 chain named panasonic november 2010 panasonic electric established panasonic electric company manufacture energy efficient electronic devices lighting volume production january 2011 2015 panasonic launched virtual solar service consumers service users simulation provide estimate solar installation produce installed panasonic india serves president panasonic regional headquarters india panasonic india panasonic india machines electric electric appliances market company electric switches electrical accessories owned subsidiary panasonic corporation panasonic corporation indonesia panasonic indonesia national indonesia company indonesia division based east current president director current president president panasonic indonesia joint venture panasonic corporation japan indonesia operations universal studios bought american media company 1995 sold 80 shares canadian company renamed universal studios 1996 music division renamed universal music universal studios unit owned based universal music owned french media panasonic panasonic manufacture gaming systems stopped success total systems sold 1993 1996 sold manufacturer panasonic exclusive rights manufacture successor console ultimately releasing highly competitive console gaming market time products panasonic offers wide range products services including air machines lighting personal computers mobile phones audio equipment cameras equipment projectors automotive electronics aircraft flight entertainment systems semiconductors batteries electrical components optical devices electronic materials modules appliances electric fans manufactured panasonic brand names panasonic corporation virtually products services worldwide panasonic brand brand quarter 2012 company sold products brand names history company founder brand product 1955 company audio speakers markets japan panasonic time panasonic brand company brand 1965 audio equipment multiple brands decades 2003 company announced panasonic global brand launched global panasonic ideas life company brands panasonic march 2004 replaced national products japan january 2008 company announced phase brand national japan replacing global brand panasonic march 2010 september 2013 company announced revision decade illustrate company vision life brand electric engineering company panasonic national branded product electric industrial era sold panasonic products original brand names june 1994 panasonic industrial devices sales panasonic industrial sales established joint venture electric industrial product brand subsequent panasonic corporation september 2014 panasonic announced brand panasonic german player plays germany panasonic league main japanese professional league panasonic official partner sponsor league major league 1981 1983 panasonic sponsor english forest january 16 2010 panasonic signed 47 jersey deal india national team panasonic primary sponsor toyota program panasonic toyota racing company founder race car driver company company panasonic sponsor series 2005 67 smith racing smith 2007 panasonic technology partner serve primary sponsor team 24 car 2014 level sponsor games 1988 panasonic official partner sponsor boston 1975 1989 panasonic appeared boston 1980s september 2016 panasonic unveiled title sponsor team february 14 2017 panasonic unveiled main sponsor professional league italy ranked national domestic league europe environmental record panasonic ranked joint 16 guide electronics electronics manufacturers policies reduce impact produce products operations company products criteria product life cycles products scores maximum energy efficiency products 100 percent meeting energy star standards power requirement panasonic score score energy criteria guide stating focus planned set targets reduce 30 2015 increase energy 2014 article guardian reported panasonic workers china hazard pay air  
97923	computer	binary image digital image values pixel typically colors binary image black white color object image color rest image background color document scanning industry referred binary images called level level pixel stored single names black white concept images sample pixel grayscale images binary image image mode binary images digital image processing result operations segmentation thresholding input output devices laser printers machines displays handle images binary image stored memory array bits image requires 37 storage size image files machine document management solutions format binary images simple compression schemes binary images interpreted subsets dimensional integer lattice field morphological image processing inspired view operations binary images entire class operations binary images operates window image pixels 29 values central pixel define remains set based surrounding pixels examples operations finding branch removing isolated pixels shifting image pixel direction breaking connections game life window operation class operations based notion filtering structuring element structuring element binary image passed target image manner filter gray scale image processing pixels values morphological operations erosion pixels structuring element pixel dilation set pixels structuring element pixel set operations morphological morphological closing consist erosion dilation dilation erosion structuring element holes remove objects separate objects closing objects holes objects characteristic binary image distance transform distance set pixel nearest pixel distance transform efficiently calculated efficient computation pixel image assigned nearest set differs recovery original image distance transform determining center object matching image recognition class operations orientation metrics image recognition orientation camera removed orientation metrics connected pixels include holes minimum radius maximum radius image segmentation binary images produced color images segmentation segmentation process assigning pixel source image classes classes usual result binary images simplest form segmentation otsu method pixels background based intensity method algorithm edge detection creates binary image pixels assigned edge pixels step segmentation produces binary images consist pixel wide lines extracted image converted graph image recognition optical character recognition interpretation interpretation pixel binary device dependent systems bit black white meaning values standard pc interface scanners digital cameras called images image sensor capture binary images binary image sensor image sensor traditional photographic film pixel sensor binary response bit measurement local light intensity  
98778	computer	natural language understanding natural language interpretation natural language processing artificial intelligence deals machine reading natural language understanding considered hard considerable commercial field application automated reasoning machine translation question answering news voice activation scale content analysis post processing nlp algorithms identifying speech utilizes context recognition devices automatic speech recognition vision recognition conversation microphone forms meaning sentences execute intent typically voice commands product vertical figure probability intent defined list message payload designated recognition sources provide multiple message outputs separate services software resources hardware single derived intent response voice command visual sentence spoken transformed voice command message output messages communications actions history program student written 1964 phd mit earliest attempts natural language understanding john coined term artificial intelligence titled natural language input solving understand simple natural language input solve algebra word 1965 mit wrote interactive program carried english topic popular simple parsing key phrases program database real knowledge rich lexicon gained popularity toy project current commercial systems 1969 stanford university introduced conceptual dependency theory natural language understanding model partially influenced extensively students yale university robert 1970 william introduced augmented transition network represent natural language input phrase structure rules equivalent set finite automata called format called generalized continued 1971 finished writing phd thesis mit understand simple english sentences restricted children blocks direct robotic arm items successful demonstration continued field continued major influence field publication book language cognitive process stanford founded google 1970s 1980s natural language processing sri international continued development field commercial efforts based 1982 formed corporation originally company developing natural language interface database queries personal computers advent mouse driven graphic user interfaces changed direction commercial efforts started time harris artificial intelligence corporation students cognitive systems 1983 michael developed yale similarities introduction systems machine learning classification ibm watson understanding systems demonstrate john watson understand questions john cognitive scientist inventor theory supports assessment natural language processing applications support human productivity service scope application thousands request human language conventional natural language processing meaningful conversation machines match word correct meaning based meanings sentence – context term natural language understanding applied diverse set applications ranging simple tasks short commands issued robots highly complex articles real applications fall instance classification automatic analysis routing suitable department corporation require depth understanding deal larger vocabulary diverse syntax management simple queries database tables fixed attempts processing natural language english sentences computers varying degrees complexity attempts systems deep understanding helped originally developed program english syntax mimic english speaking star easy syntax effectively launched personal database industry systems easy english syntax distinct systems rich lexicon include internal representation logic semantics natural language sentences depth understanding aimed determine complexity challenges types applications deal measured sizes vocabulary grammar depth measured degree understanding native speaker english command require minimal complexity range applications narrow deep systems explore model mechanisms understanding limited application systems attempt understand contents document news release simple matching judge user broader require complexity shallow systems broad deep current art components architecture approach natural language understanding systems share common components lexicon language grammar rules break sentences internal representation construction rich lexicon suitable requires effort lexicon required person effort semantic theory guide interpretation capabilities language understanding depend semantic theory competing semantic theories language specific trade basis automated semantic interpretation range semantics stochastic semantic analysis meaning context semantic convert natural language texts formal meaning representations advanced applications natural language understanding attempt incorporate logical inference framework achieved mapping derived meaning set logic logical systems based functional languages lisp include represent logical logic oriented systems language rely extension built logical representation framework management context natural language understanding special challenges variety examples counter examples multiple approaches formal modeling context specific  
99207	computer	freedos dos dos operating ibm pc compatible computers provide complete dos compatible environment running legacy software supporting embedded systems freedos floppy disk usb flash drive designed virtualization x86 emulation dos freedos composed source software licensed terms gnu public license base distribution require license creation custom distributions packages form freedos project include software considered worth distributed modified mit license history freedos project 29 june 1994 announced sell support dos hall time student development source replacement weeks programmers including joined project kernel command command interpreter core utilities hall created pooling code written official pre release distributions freedos final freedos distribution gnu dos distribution freedos discontinued version released distribution freedos released january 2012 download rom image limited install disc kernel basic applications disc applications games networking development legacy version 2006 consisted install targeted regular users larger live held source code project commercial freedos companies commercial freedos multiple independent projects compatibility hardware freedos requires pc machine memory programs bundled freedos require additional resources dos console freedos compatible dos supports standard dos 16 bit 32 bit dos operating improvements relative dos involving support standards technologies exist support dos advanced power management dos console applications function properly freedos rare gui programs dos based windows freedos windows releases windows releases support processors enhanced mode partially experimental freedos kernel running windows result efforts prevent products running dos implementations windows 95 98 version dos freedos replacement interfaces dos windows freedos installed systems boot manager program included freedos windows nt windows nt based operating systems including windows 2000 xp vista desktops windows server 2003 2008 2008 servers dos core component systems fat file systems dos earlier versions windows typically technology file default security reasons freedos exist systems separate partition partition fat systems freedos kernel adding windows 2000 xp nt boot configuration file boot equivalent file systems supported preferred format boot drive depending bios logical block addressing hard disks 128 size supported testing disks support produce errors disks larger 32 driver drive freedos driver named enable support windows 95 style file names programs support driver loaded planned support external party drivers purpose access data drives fish freedos designed  
99991	computer	bruce born ceo austin texas prominent researcher artificial intelligence awarded computers award 1976 creating machine learning program symbolic statistical machine learning programs knowledge representation cognitive economy systems 1984 engineering program 1994 military simulations numerous projects government military intelligence scientific organizations 1980 published conventional random mutation series articles journal artificial intelligence exploring nature heuristic rules original aaai individual served scientific advisory boards apple fellow aaai cognitive science society editor automated reasoning learning sciences applied 1991 remains advisory board 2017 named wired 25 running project begun 1984 build basis artificial intelligence manually representing knowledge logical formal language based extensions inference engine efficiently finding hundreds step arguments tens millions knowledge base inductive bias increasingly accelerate continuing education symbolic statistical machine learning symbolic statistical natural language understanding 2010 multi person enterprise entered phase team efforts powered machine learning powered natural language understanding ongoing manual creation knowledge base content background born pennsylvania september 13 grew attended school school job neighboring college cleaning motivated learn program path school summer job eventually career university pennsylvania supported programming notably designing developing natural language interface navy data base serving online operations manual aircraft carriers received bachelor degree mathematics physics master degree applied mathematics 1972 university pennsylvania senior thesis acoustic waves 40 range real objects record interference patterns square plot photo reduce square film image laser film project acoustic hologram argument dr generated dimensional hologram photo reducing interference pattern time reducing dimensional paper square film surface conventional laser beam project dimensional image changed independent changing size film moved left student science stanford university published included automatic program synthesis input output pairs natural language received science stanford university published knowledge based systems artificial intelligence thesis hill 1982 1976 thesis professor green thesis committee included paul allen bruce john donald knuth thesis automated mathematician programs attempted theorem theorem program cycle criticism improvement leading understanding human issues constructing program represent knowledge formally program hundreds heuristic rules judge worth reason reason frequency data architecture design constraints reasoning programs sum future continuous function structure steps science learning discovery creative process programs creative 1976 started teaching assistant professor science carnegie mellon program limitation locked fixed set contrast represented heuristic rules class objects explore manipulate discover explored discovered domain concepts returned stanford assistant professor science 1978 continued building automated discovery heuristic discovery program paper theoretical experimental study heuristic rules winning paper award 1982 aaai conference vast published scientific john brown xerox parc published 1984 analysis limitations lines concluded progress real symbolic require vast knowledge base common sense represented inference engine capable finding tens hundreds deep arguments application knowledge base specific questions applications analysis limitations approach massive multi person decades effort required break bottleneck led attention 1982 consortium austin texas principal scientist 1984 1994 continued period return stanford 400 person researchers common sense knowledge base graduate students decade company 1994 1986 estimated effort complete 250 000 rules 1000 person effort 2017 team spent 000 person building 24 rules 000 person effort emphasizes 60 person team step closure hundreds continues ceo decade 1984 1994 funded american companies pooling term compete japanese generation project decade 1995 2006 funded government agencies contracts decade supported commercial applications including financial services energy healthcare applications unusual involves middle school students understand math people experience understood understood explain aided instruction play role contrast play role fellow student confused user avatar user taught sort learning teaching paradigm broad applications future domains training involved  
105985	computer	lex program generates lexical scanners lex commonly generator lex originally written 1975 standard lexical generator unix systems equivalent tool posix standard lex reads input stream lexical outputs source code implementing programming language source originally distributed proprietary software versions lex source source versions lex based original code distributed source operating systems opensolaris plan bell labs popular source version lex called flex fast lexical derived proprietary coding structure lex file structure lex file file files divided sections separated lines percent lex file lex file flex version lex recognizes strings positive integers input simply input codice converted file compiled executable matches outputs strings integers input program print lex programming tools lex generators lex generators commonly generators formal grammar parse input stream lex simple regular expressions lex limited simple finite automata typically generated fed token stream input input character stream lex produce token stream parsing refers parsing input character stream distinct lex utility maintain programs involving lex assumes file extension codice lex source file internal codice lex options automatically  
113507	computer	digital signal processing spatial anti aliasing technique minimizing distortion artifacts aliasing representing resolution image resolution anti aliasing digital photography graphics digital audio applications anti aliasing removing signal components frequency properly resolved recording sampling device removal sampling resolution sampling performed removing signal artifacts black white noise figure signal acquisition audio anti aliasing anti aliasing filter remove band component input signal prior sampling digital digital photography optical anti aliasing filters materials smooth signal spatial optical domain anti aliasing filter essentially image reduce resolution digital sensor larger pixel pitch resolution sensor level examples graphics anti aliasing improves appearance edges screen performance cost graphics card video memory level anti aliasing determines smooth edges video memory figure visual distortion occurs anti aliasing image board image difficult contrast figure anti version scene board desired resolution image edges anti image figure anti aliasing algorithm based filter considered algorithm figure portions nearest neighbor algorithm figure left comparison figure anti aliasing brightness pixels boundaries produce pixels space black white figure figure original figure anti aliasing boundary pixels sample graphic reduced sharp step boundaries graphic left anti aliasing applied rendering screen smooth contours emulate appearance produced conventional ink paper printing fonts displayed typical lcd screens common rendering techniques pixel rendering requires special colour balanced anti aliasing filters severe colour distortion colour equivalent individual pixels addressable pixels hardware based anti aliasing filter laptop display controller pixel geometry anti aliasing pixel addressing software hardware simplest approach anti aliasing basic approach anti aliasing pixel determining percentage pixel region vector graphic pixel sized square pixels percentage colour basic plot single white black anti method method suited simple graphics basic lines curves applications convert absolute coordinates pixel constrained coordinates graphics fast function quality slower complexity shape increases purposes requiring quality graphics complex vector shapes approach note set colour percent calculated add existing location maximum brightness pixel equal calculated time location produces bad result sets brightness level 90 pixel calculated pixel brightness final set pixel 95 sophisticated shapes algorithm generalized rendering shape pixel grid resolution target display surface multiple power reduce distortion interpolation determine average intensity real pixel display surface signal processing approach anti aliasing approach ideal image regarded signal image displayed screen samples pixel position filtered version signal ideally understand human brain process original signal provide screen image yield response brain accepted tool fourier transform signal basis functions frequencies frequency components amplitude frequency component signal waves form arbitrary negative integers frequency components involving functions dimensions purpose discussion frequency component frequency direction frequency direction goal anti aliasing filter greatly reduce frequencies limit frequency signal accurately represented samples sampling theorem choices detailed algorithm filter transfer functions current knowledge human visual perception sufficient approach dimensional previous discussion assumes mesh sampling dominant filter considered optimal figure data sampled square lattice continuous image sampling pattern signal processing axis traditionally dimensional data based convolution data discrete representation function resolution limited sampling rate source target image ideally filter interpolation functions data dimensional function continuous function radius filter square dimensional dimensional disc amplitude 2d fourier transform circular region 2d frequency space opposed square region gaussian derivative frequency domain spatial domain functions based gaussian function natural choices convolution gaussian gaussian applied radius properties configuration spectral representation interpolation function gaussian spread preserve maximum derivative printing photographic negative processing capability printer pattern reason function interpolation interpolation treat lines horizontal vertical lines weak form aliasing practical real time anti aliasing primitives lowest level real time rendering engine software hardware accelerated include lines draw white black background design edges achieving sort anti aliasing approach difficulty dealing adjacent primitives share edge approximate uniform algorithm extra buffer pixel data initial memory approach 16 extra bits pixel grid primitives create reasonable image requires primitives application programming interface methods simply pixels pixel including color pixel shared pixels buffer approach texture mapping called creating resolution pre filtered versions texture map rendering image resolution chosen texture pixels filtered screen combined forms texture filtering improve final result image extreme pseudo random aliasing noise arithmetic error illustrate aliasing photographs measured data times converted exact pixels infinity set aliasing edges pixels aliasing image original sampling rate modern software anti download size version aliasing image calculated times sampling rate sampled anti aliasing assuming average colour pixel closer properly compare images viewing scale additional calculating distance algorithm identified close edge set fine rapidly changing times edge set derived calculated identified pixels set rapidly single sample pixel replaced image reduces image image larger set calculated discarded background fourth image finally regular systematic aliasing main axis nearest pixel aliasing image appears random levels pixel size level aliasing image sampled anti aliasing image scale image appears systematic aliasing image pure sampling image viewing scale recommended super sampling scene anti aliasing super sampling anti aliasing called scene anti aliasing avoid aliasing screen images type anti aliasing video cards computational cost advent anti aliasing support gpus real time applications graphic quality computational power image realistic photo images simple anti aliasing approach super sampling appearance types art image lines horizontal vertical prior grid fitting step super sampling technique data resolution power final data resolution data combined sampled desired resolution simple average combined data visible aliasing artifacts patterns scene anti aliasing super sampling frame rendered double display resolution sampled match display resolution render super sampled pixels single pixel frame rendering larger resolutions produce processor power performance frame rate implemented hardware graphical application images super sampled sampled displayed object based anti aliasing graphics rendering creates image based objects constructed primitives aliasing effects image reduced applying anti aliasing scheme image representing edges objects edges anti creating anti aliasing primitives vary anti aliasing primitives joined edges create region image objects background method advantages classical methods based buffer generates scene anti aliasing passes require additional memory required buffer object based anti aliasing developed silicon graphics workstation anti aliasing compression digital images stored compressed format optical anti aliasing filters linear sample image match optical convert linear format apply anti aliasing filter finally convert compressed format linear arithmetic compressed image values ideal filter error larger dealing contrast causing contrast details cat visually dark details tree branches relative anti image conversion linear format greatly process differences subtle image editing software including final cut pro adobe process images compressed domain modern gpus support storing textures memory format perform transformation linear space essentially loss performance history history anti aliasing include  
126706	computer	pattern recognition automated recognition patterns data pattern recognition closely artificial intelligence machine learning applications data mining knowledge discovery databases terms distinguished machine learning approach pattern recognition approaches include hand learned rules pattern recognition approach artificial intelligence approaches include symbolic artificial intelligence modern definition pattern recognition article focuses machine learning approaches pattern recognition pattern recognition systems trained labeled training data supervised learning labeled data algorithms discover unknown patterns unsupervised learning machine learning common term supervised learning methods artificial intelligence data mining larger focus unsupervised methods stronger connection business pattern recognition origins engineering term popular context vision leading vision conference named conference vision pattern recognition pattern recognition explain pattern machine learning traditionally focuses maximizing recognition rates domains evolved artificial intelligence engineering statistics increasingly integrating developments ideas machine learning pattern recognition assignment label input statistics analysis introduced purpose 1936 pattern recognition classification attempts assign input set classes determine email spam spam pattern recognition types output examples regression real valued output input sequence labeling class sequence values speech tagging speech word input sentence parsing parse tree input sentence describing syntactic structure sentence pattern recognition algorithms aim provide reasonable answer inputs perform matching inputs account statistical variation opposed pattern matching algorithms exact matches input pre existing patterns common pattern matching algorithm regular expression matching patterns sort textual data included search capabilities editors word processors contrast pattern recognition pattern matching type machine learning pattern matching algorithms carefully tailored patterns providing quality output sort pattern recognition algorithms overview pattern recognition type learning procedure generate output supervised learning assumes set training data training set consisting set instances properly labeled hand correct output training patterns goals training process confused training set learning procedure generates model attempts meet perform training data data simple technical definition simple discussed unsupervised learning hand assumes training data hand labeled attempts inherent patterns data determine correct output data instances combination explored semi supervised learning combination labeled unlabeled data typically set labeled data combined unlabeled data note unsupervised learning training data speak data labeled training data note terms supervised unsupervised learning procedures type output unsupervised equivalent classification clustering based common perception task involving training data speak input data clusters based inherent similarity measure distance instances considered vectors multi dimensional vector space assigning input instance set pre defined classes note fields terminology community term classification refer commonly clustering piece input data output generated formally termed instance instance formally vector features description characteristics instance feature vectors defining space methods vectors vector spaces applied computing dot product angle vectors typically features consisting set items female blood type consisting set items medium integer valued count occurrences word email real valued measurement blood pressure data integer valued real valued data algorithms terms data require real valued integer valued data probabilistic classifiers common pattern recognition algorithms probabilistic nature statistical inference label instance algorithms simply output label probabilistic algorithms output probability instance label addition probabilistic algorithms output list labels probabilities simply single label labels classification set probability labels output probabilistic algorithms advantages probabilistic algorithms feature variables feature selection algorithms attempt redundant features introduction feature selection approaches challenges complexity feature selection character optimization total features powerset consisting subsets features explored branch bound algorithm reduce complexity medium values features scale comparison feature selection algorithms techniques transform raw feature vectors feature extraction prior application pattern matching algorithm feature extraction algorithms attempt reduce dimensionality feature vector dimensionality vector easier redundancy mathematical techniques principal components analysis pca distinction feature selection feature extraction features feature extraction sort original features easily features left feature selection simply subset original features statement supervised version formally supervised pattern recognition stated unknown function ground maps input instances output labels training data assumed represent accurate examples mapping produce function closely correct mapping filtering spam representation email 11 spam spam defined closely defined decision theory defined loss function cost function specific loss producing incorrect label goal minimize expected loss expectation probability distribution 12 practice distribution 12 ground function computed samples 12 hand labeling correct 16 time consuming process typically limiting factor data sort collected loss function depends type label predicted classification simple loss function sufficient corresponds simply assigning loss incorrect labeling implies optimal classifier minimizes error rate independent data fraction instances learned function labels equivalent maximizing correctly classified instances goal learning procedure minimize error rate maximize typical set probabilistic pattern recognizer estimate probability output label input instance estimate function feature vector input 19 function typically parameters 20 discriminative approach estimated generative approach inverse probability 21 estimated combined prior probability 22 bayes rule labels continuously distributed regression analysis involves integration summation 25 typically learned maximum map estimation simultaneously objects perform training data error rate simplest model essentially combines maximum likelihood estimation regularization procedure simpler models complex models bayesian context regularization procedure viewed prior probability 26 values 25 mathematically 29 25 subsequent evaluation procedure 31 posterior probability 25 bayesian approach choosing single parameter vector 34 probability label instance 19 computed integrating values 25 weighted posterior probability bayesian approach pattern recognition pattern classifier – linear – developed approach model parameters considered unknown objective parameters computed estimated collected data linear parameters precisely vectors covariance matrix probability class 22 estimated collected dataset note usage bayes rule pattern classifier classification approach bayesian bayesian statistics origin greek philosophy distinction knowledge defined distinction – observation – empirical knowledge gained observations bayesian pattern classifier class probabilities 22 chosen user experience parameter values weighted empirical observations – beta prior dirichlet distributions bayesian approach expert knowledge form probabilities objective observations probabilistic pattern classifiers bayesian approach medical science pattern recognition basis aided diagnosis cad systems cad describes procedure supports typical applications pattern recognition techniques automatic speech recognition classification categories spam spam email messages automatic recognition handwritten codes automatic recognition images human handwriting image extraction medical forms examples form image analysis pattern recognition deals digital images input pattern recognition systems optical character recognition classic application pattern classifier method captured overlay starting 1990 speed relative relative max acceleration pressure identify identity banks offered technology content bank customers artificial neural networks neural classifiers deep learning real applications image processing examples discussion applications neural networks image processing pattern recognition sense identifying objects closely perception sensory inputs humans receive meaningful pattern recognition template matching feature detection template pattern produce items template matching hypothesis suggests incoming stimuli compared term memory match identified feature detection models letters 1959 stimuli broken component identification capital horizontal lines vertical algorithms algorithms pattern recognition depend type label output learning supervised unsupervised algorithm statistical statistical nature statistical algorithms generative discriminative classification algorithms supervised algorithms predicting labels parametric learning algorithms predicting labels data tensor representations unsupervised real valued sequence labeling algorithms predicting sequences real valued labels supervised regression algorithms predicting real valued labels supervised unsupervised sequence labeling algorithms predicting sequences labels supervised unsupervised  
131823	computer	controlled private network access partners vendors set customers – subset accessible organization access services parties access organization entire network private network organization historically term occasionally sense organizations sharing internal networks vpn enterprise applications late 1990s 2000s industries started term centralized shared data supporting applications accessible multi company project teams applications offered software service basis construction industry project teams access project share drawings photographs documents online applications mark comments manage report project communications 2003 united kingdom leading vendors formed network construction collaboration technology providers promote technologies establish data exchange standards data systems type construction focused technologies developed united australia europe  
137146	computer	architecture memory hierarchy storage hierarchy based response time response time complexity capacity levels distinguished performance controlling technologies memory hierarchy performance architectural design algorithm predictions level programming involving locality reference designing performance requires restrictions memory hierarchy size capabilities component components viewed hierarchy memories typically faster hierarchy limit waiting levels level respond buffer transfer major storage levels memory hierarchy structuring structures algorithm considered level virtual memory designing architecture include level storage online offline storage examples levels memory hierarchy performance level increased time type memory storage components change historically memory hierarchy intel mobile processor 2013 levels hierarchy – disks – storage formal distinction online offline storage disks online disks spin massive array idle disk removable media tape automatically loaded tape library manually loaded offline modern cpus fast program bottleneck locality reference memory accesses efficiency caching memory transfer levels hierarchy result cpu time waiting memory complete called space cost larger memory object fast level require larger slower level load memory pressure register pressure cache pressure main memory pressure terms data missing level fetched level register register pressure register cache cache cache main memory hard fault main memory disk modern programming languages assume levels memory main memory disk storage assembly language languages registers accessed optimal advantage memory hierarchy requires cooperation programmers hardware compilers underlying support operating programmers assume level memory fine application performance wall memory hierarchy code  
147130	computer	virtual private network vpn private network public network enables users send receive data shared public networks computing devices connected private network applications running vpn benefit functionality security management private network vpn technology developed remote users branch offices access corporate applications resources ensure security private network connection established layered tunneling protocol vpn users authentication methods including gain access vpn applications internet users secure transactions vpn restrictions connect servers protect personal identity location stay internet internet sites block access vpn technology prevent restrictions vpn providers developing strategies vpn created virtual connection dedicated connections virtual tunneling protocols traffic encryption vpn public internet provide benefits wide network wan user perspective resources private network accessed remotely types data networks allowed vpn style connections remote sites connections utilizing frame transfer mode virtual circuits networks owned operated telecommunication carriers networks considered true vpns secure data transmitted creation logical data streams replaced vpns based ip ip multi protocol label switching mpls networks cost increased bandwidth technologies digital subscriber fiber optic networks vpns remote access connecting network connecting networks corporate setting remote access vpns employees access company office vpns employees offices share virtual network vpn interconnect networks middle network networks network vpn systems classified security mechanisms vpns online connections completely increase privacy security prevent private vpns typically remote access tunneling protocols encryption techniques vpn security model secure vpn protocols include authentication secure vpn established user created remote access vpns factor authentication methods network network digital store key establish automatically intervention routing tunneling protocols operate network topology theoretically considered vpn vpn definition expected support arbitrary changing sets network nodes router implementations support software defined interface customer vpns simply defined running conventional routing protocols provider vpn building blocks depending provider vpn operates layer layer building blocks l2 combine multi protocol label switching mpls functionality l2 identity device customer network connected service provider network devices aware vpn device edge customer network access provider customer responsibility providers customers device set devices edge provider network connects customer networks ce devices provider view customer aware vpns connect maintain vpn device operates provider core network interface customer provide routing provider operated belong customers device key implementing vpn aware maintain vpn principal role allowing service provider scale offerings acting aggregation multiple connections role capacity optical links major locations providers user visible services osi layer services virtual lan vlan layer technique multiple local network lan broadcast domains ieee 802 protocol protocols including inter switch link ieee 802 originally security protocol subset introduced lan emulation developed institute electrical electronics engineers virtual multiple tagged share common frequently customer owned facilities osi layer services supports emulation method discussed layer technologies 802 802 lan ethernet context layer functionality traditional lan user interconnect lan segments packet switched optical provider core core transparent user remote lan segments single lan provider network learning bridge include vlan service provide l2 protocols typically interface wan protocol transfer mode frame contrast provide appearance lan locations virtual private lan service ethernet ip tunneling protocol specification packet mechanism message integrity protection introduced freebsd network stack vpn server program subset ce devices layer capabilities packets frames support osi layer architectures main architectures addresses single routing instance virtual router virtual router instance vpn approach variants gained attention challenges involves customers address space private address space provider overlapping addresses multiple customers method defined extensions vpn address family form 12 byte strings byte route byte address addresses understand topology vpn mpls routers mpls terminology routers label switch routers vpns virtual router architecture opposed mpls techniques requires modification existing routing protocols independent routing domains customer operating vpn completely responsible address space mpls label routing virtual networks tunneling protocols encryption privacy data vpns provide security overlay network fit secure trusted set hosts generic routing virtual private network secure trusted native tunneling protocols include layer tunneling protocol set tunneling protocol encryption trusted delivery networks trusted vpns tunneling rely security single provider network protect traffic security vpns underlying delivery network security mechanisms vpn trusted delivery network runs physically secure sites trusted secure models authentication mechanism users gain access vpn vpns mobile environments users utilize mobile virtual private networks settings vpn fixed single ip address networks data networks cellular carriers multiple wi access mobile vpns public safety law access mission critical applications assisted dispatch databases travel mobile network field service management healthcare organizations industries increasingly mobile professionals reliable connections mobile vpns networks wireless coverage losing application sessions secure vpn session conventional vpn events network causing applications time fail computing device crash network physical ip address bound ip address device mobile vpn software handles network authentication maintains network sessions manner transparent application user host identity protocol study internet engineering task force designed support mobility hosts separating role ip addresses host identification functionality ip network mobile host maintains logical connections established host identity identifier ip addresses access networks vpn routers increasing vpns started vpn connectivity routers additional security encryption data transmission techniques users deploy vpns routers protect devices smart gaming consoles supported native vpn clients supported devices restricted capable running vpn client router manufacturers supply routers built vpn clients source firmware support additional protocols setting vpn services router requires deep knowledge network security installation minor vpn connections leave network performance vary depending internet service provider networking limitations major limitation traditional vpns tend support connect broadcast domains communication software networking based layer broadcast packets windows networking supported real lan variants vpn virtual private lan service layer tunneling protocols designed overcome limitation vpn connection robust direct connection network vpn connection depends vpn provider fails connection fails  
147585	computer	purpose programming language programming environment developed netherlands interactive structured level intended basic pascal meant systems programming language intended teaching language major influence design python programming language van developed python mid 1980s features designers claim programs typically quarter size equivalent pascal programs readable key features include originally monolithic implementation leading adapt requirements creating graphical user interface access underlying file operating includes programming environment syntax directed editing variables multiple interpreter compiler version ported unix dos atari apple macintosh function set document  
148169	computer	ibm pc dos ibm personal disk operating discontinued operating ibm personal manufactured sold ibm 1980s 2000s version pc dos ibm branded version dos version pc dos ibm independent product history ibm task force assembled develop pc decided critical components machine including operating vendors break company house development key decisions ibm pc industry standard time private company founded earlier gates eventually selected operating ibm ownership software developed task force jack reasons internal people expensive programmers code money lost series product product ibm people product ibm company july 1980 continued months officially signed november ibm expected customers pc dos ibm pc supported cp 86 months pc dos ucsd operating systems ibm expectation proved correct survey 96 pcs 40 pc dos compared cp 86 versions pc dos licensed purchased 86 dos products modified ibm pc rear assistance rear 86 dos prototype pc february 1981 86 dos converted inch 25 inch floppy disks integrated bios ibm write ibm people writing requirements writing code rear people deal entry systems division facility public operating july 1981 byte discussed personal cp dos called simply ibm personal dos 86 dos ibm pc dos august 1981 release ibm pc initial version dos based cp 80 architecture function calls file naming copied os difference introduced file dos versions time commands separate command single 25 disk format supported late 1981 writing pc dos debuted 1982 revision ibm pc support double drives allowing disk bugs fixed error messages utility load files size pc dos programmers paul allen mark pc dos completely dos hard disk support ibm debuted march 1983 sector format capacity floppy disks 360 unix inspired kernel featured file handles cp derivative file control blocks device drivers adding hardware ibm pc bios supported basic utilities dos upgraded major months dos dos ram compared predecessor form basis consumer oriented 2001 windows xp based windows nt released october 1983 officially november dos debuted fixed bugs support height floppy drives ibm 1983 released portable 100 ibm pc compatible licensed oem version dos replaced dos 00 pc suit included hardware specific dos features generic pc dos august 1984 ibm introduced intel derived ibm pc generation machine dos 00 version proved incremental upgrade adding substantial support mb floppy disks planned networking capabilities dos 00 usable disabled prior os release ibm original plans proper generation os extended features pc dos released march 1985 fixed bugs dos 00 supported ibm network adapter card ibm pc network pc dos support inch double density floppy disk drives supporting ibm pc ibm inch floppy disks released april 1986 ibm personal 1987 june 1985 ibm signed term joint development agreement share dos code create operating scratch time advanced dos april 1987 os announced product produced agreement time ibm released generation personal computers ibm personal pc dos released support density inch 44 mb floppy disk drives ibm introduced based models upgrade dos completely written ibm development effort advanced dos dos 30 version designed ibm floppy systems mind popular versions users preferred successor pc dos pc dos internally dos originally shipped july 1988 dos compatibility issues level disk utilities internal data structure dos memory dos 30 newly drivers compatible ibm boards common intel dos notable including version dos screen utility designed command os user friendly control development released bug fixed dos 01 pc dos dos debuted june 1991 biggest dos history dos supported memory upper memory blocks systems reduce conventional memory usage dos commands supported option display command syntax ibm dos version oem editions time pcs 100 compatible hardware differences version dos ibm shared code dos integrated os windows nt virtual dos machine pc dos pc dos remained version dos 1993 ibm dos released march pc dos separately developed june features dos appeared pc dos including boot menu support commands choice dropped dos editor replaced ibm editor pc dos reports dos 00 pc dos pc dos december pc dos os powerpc pc dos featured disk compression technology pc dos pc dos released april 1995 release dos ibm facility closed programming language support floppy disk format extended standard 44 mb floppy disk 86 mb disk compression technology replaced electronics algebraic command calculator utility program load device drivers command pc dos included increase performance reduce memory usage pc dos 2000 retail release pc dos 2000 – released austin 1998 – embedded software market pc dos 2000 applied applications pc dos 2000 reports ibm pc dos 00 revision contrast original pc dos reported ibm pc dos 00 revision hitachi pc dos 2000 legacy drive fitness 15 hitachi feature tool 15 2009 products version pc dos recovery partition pc dos pc dos support logical block addressing builds 1999 2003 released retail products ibm scripting toolkit build version dos appeared version support dos builds version dos limited kernel files command updated programs disks additional utilities pc dos 2000 pc dos distributed file client 1986 ibm announced pc dos support client access file services defined distributed data management architecture enabled programs pcs create manage access record oriented files ibm 36 ibm 38 ibm mainframe computers running 1988 client support stream oriented files hierarchical pc dos server systems  
149963	computer	framebuffer frame buffer portion ram drives video display memory buffer complete frame data modern video cards framebuffer circuitry cores circuitry converts memory video signal displayed monitor computing screen buffer memory application representation content display screen buffer called video buffer buffer buffer short screen distinguished video memory term screen buffer buffer typically consists color values pixel display color values commonly stored bit binary bit bit 16 bit color 24 bit true color formats additional alpha channel pixel total memory required framebuffer depends resolution output signal color depth size history researchers discussed theoretical advantages framebuffer unable produce machine sufficient memory cost 1969 michael bell labs implemented scanned display frame buffer bell labs expanded display image color depth bits standard color monitor earlier scanned display implemented national laboratory advances integrated circuit memory 1970s practical create capable holding standard video image 1972 richard developed xerox parc framebuffer create digital video capture output signal input signal pixel data shifted modifying output signal color tables color tables allowed produce wide variety colors range limited bit data contained scheme 1974 released commercial framebuffer picture 15 000 capable producing resolutions pixels bit grayscale graphics researchers resources build framebuffer york institute technology create 24 bit color framebuffer connected rgb color output red green blue digital equipment corporation pdp 11 minicomputer controlling devices 1975 company produced commercial color broadcast framebuffer coverage 1976 generate picture picture rest picture featured entering rapid improvement integrated circuit technology computers late 1970s color depth computers graphical capabilities utilize framebuffer generating video signal computers created 1980s featured special design attention graphics performance included unique hold modify framebuffer capable colors popular workstations boards 1980s sun microsystems hp dec ibm released workstation computers period quality computers television printing modeling 3d graphics boards quality computers display modes personal computing sets defined modes framebuffer operate modes hardware output resolutions color memory rate unix machines operating systems favor hardware settings manipulation flexible resolution color depth rate – limited memory framebuffer method display device driven capabilities hardware damage display commonly simply produced output modern crt monitors introduction protection circuitry display mode changed monitor attempts signal lock frequency monitor unable signal lock signal range design limitations monitor framebuffer signal user error message lcd monitors tend protection circuitry reasons lcd digitally sample display signal electron beam signal range physically displayed monitor color traditionally supported wide variety color modes memory bit color bit color bit 16 color bit 256 color color color range colors produced solution indexed color adds lookup table framebuffer color stored framebuffer memory acts color lookup table serves limited colors designs write data switch existing allowing picture horizontal render image wider viewing shot picture divided emphasis ground colors required overlapping colors carefully allowed flexibility memory access commonly accessed memory mapping cpu memory space method accessed methods access memory common framebuffer organization pixel framebuffer addressable restrictions updated ram video card video cards ram ram image data display term frame buffer referring ram cpu image updates video card video processor card forms picture screen image stores frame buffer ram ram card screen image virtual systems attempt emulate function framebuffer device reasons compatibility common virtual linux framebuffer device virtual framebuffer window distribution provide method running graphical framebuffer linux framebuffer device developed abstract physical method accessing underlying framebuffer guaranteed memory map easy programs access increases portability programs required deal systems memory maps require bank switching designed handle resolution memory display single frame resolutions memory considerable size developed frames written video memory frame displayed concept framebuffer specific memory display current frame memory displayed completely separate memory filled data frame secondary buffer filled typically referred buffer framebuffer secondary buffer primary buffer typically referred buffer secondary buffer secondary buffer primary switch vertical interval prevent screen frame frame modern manufactured memory perform resolutions result standard technique pc game programmers graphics demand graphics increased hardware manufacturers created decrease cpu time required framebuffer commonly called graphics common graphics drawing commands geometric graphics raw form command framebuffer method save thousands millions cpu cycles command cpu focused improving performance 2d gui systems modern focus producing 3d real time common design send commands graphics library graphics driver translates commands instructions graphics processing unit gpu gpu compute bit framebuffer framebuffer signal produced combination built video overlay devices produce mouse modifying framebuffer data analog special effects produced modifying output signal analog modification spatial anti aliasing technique cards cards add blur output signal aliasing graphics obvious time manufacturers graphics including nvidia radius graphics silicon graphics market graphics x86 based systems dominated nvidia acquired 2002 amd acquired 2006 intel produces integrated gpus discrete video cards display technologies vector displays common prior advent raster graphics concept framebuffer vector display vertices graphics primitives stored electron beam output display vertex vertex analog framebuffer electron beam display technology trace left path entire screen television broadcast signal color displayed screen framebuffer creating set discrete picture elements pixels technology displays buffer holds codes characters individual pixels video display device drives electron beam raster pattern framebuffer generates pixels character buffer beam  
155555	computer	image registration process transforming sets data coordinate data multiple photographs data sensors times vision medical imaging military automatic target recognition analyzing images data registration compare integrate data measurements algorithm classification intensity based feature based image registration image alignment algorithms classified intensity based feature based images referred moving source referred target fixed images image registration involves spatially transforming source moving image target image reference frame target image stationary datasets transformed match target intensity based methods compare intensity patterns images correlation metrics feature based methods correspondence image features lines contours intensity based methods register entire images images images registered centers images treated feature feature based methods establish correspondence distinct images correspondence images transformation determined map target image reference images correspondence reference target images methods combining intensity based feature based developed transformation models image registration algorithms classified transformation models target image space reference image space broad category transformation models includes linear transformations include rotation scaling translation transforms linear transformations global nature model local geometric differences images category transformations transformations transformations capable locally target image reference image transformations include radial basis functions plate surface supported transformations physical models models transformations commonly model parameters instance translation image single parameter translation vector models called parametric models parametric models hand follow allowing image element programs implement estimation application warp field air programs transformations coordinates law function composition addition alternatively advanced methods spatial normalization building structure transformations carry smooth transformation generated modern field computational based additive form law function composition reason ideas additive generating preserve topology providing transformations computational methods generating transformation called provide main computational tool connecting coordinate systems computational programs generate transformations coordinates mapping including mri studio mri cloud frequency domain methods spatial methods operate image domain matching intensity patterns features images feature matching algorithms traditional techniques performing manual image registration operator control cp images control minimum required define transformation model iterative algorithms estimate parameters transformation type registration images frequency domain methods transformation parameters registration images transform domain methods simple transformations translation rotation scaling applying phase correlation method pair images produces image single peak location peak corresponds relative translation images spatial domain algorithms phase correlation method noise typical medical satellite images additionally phase correlation fast fourier transform compute cross correlation images performance gains method extended determine rotation scaling differences images converting images log coordinates properties fourier transform rotation scaling parameters determined manner invariant translation single multi methods classification single multi methods single methods tend register images acquired scanner sensor type multi registration methods register images acquired scanner sensor types multi registration methods medical imaging images subject frequently scanners examples include registration brain ct mri images body pet ct images localization registration contrast enhanced ct images contrast enhanced ct images segmentation specific registration ultrasound ct images localization automatic interactive methods registration methods classified based level automation provide manual interactive semi automatic automatic methods developed manual methods provide tools images manually interactive methods reduce user bias performing key operations automatically user guide registration semi automatic methods perform registration steps automatically depend user registration automatic methods user interaction perform registration steps automatically similarity measures image registration image similarities medical imaging image similarity measure degree similarity intensity patterns images choice image similarity measure depends images registered common examples image similarity measures include cross correlation mutual sum squared intensity differences ratio image mutual normalized mutual popular image similarity measures registration images cross correlation sum squared intensity differences ratio image commonly registration images features derived cost functions based matching methods emerged field computational including uncertainty level uncertainty images temporal differences registration measure uncertainty critical change detection applications medical remote sensing applications digital image pixel represent spatial distance nasa image registration solution ground notable papers attempted uncertainty image registration compare approaches uncertainty computationally intensive applicable limited sets spatial transformations  
157105	computer	vxworks real time operating rtos developed proprietary software wind river systems owned subsidiary capital released 1987 vxworks designed embedded systems requiring real time deterministic performance safety security certification industries aerospace defense medical devices industrial equipment robotics energy transportation network infrastructure automotive consumer electronics vxworks supports intel architecture power architecture arm architectures rtos asymmetric multiprocessing symmetric multiprocessing smp mixed modes multi os type designs 32 64 bit processors vxworks kernel board support packages wind river development suite complementary party software hardware technologies release vxworks rtos engineered os kernel separate applications packages scalability security safety connectivity graphics improved address internet iot history vxworks started late 1980s set enhancements simple rtos called sold ready systems graphics product 1995 wind river acquired rights enhanced adding file integrated development environment 1987 contract ready systems wind river developed kernel replace vxworks vxworks key platform overview vxworks supports intel architecture power architecture arm architectures rtos multi core asymmetric multiprocessing symmetric multiprocessing smp mixed modes multi os type designs 32 64 bit processors vxworks consists set runtime components development tools time components operating smp 32 64 bit software applications support file core network stack usb stack inter process communications hardware support architecture adapter processor support library device driver library board support packages vxworks core development tools compilers gnu intel compiler build configuration tools includes productivity tools development suite intel tools development support tools tracking host support platform modular vendor neutral supports range party software hardware os kernel separate applications packages enables easier bug testing features implementation layered source build multiple versions stack installed time developers select version feature set vxworks kernel libraries optional advanced technology vxworks add technology capabilities features list features os march 2014 wind river introduced vxworks emphasizes scalability security safety connectivity graphics virtualization lists release updates wind vxworks hardware support vxworks ported platforms runs modern cpu embedded market includes intel x86 family including intel soc mips powerpc intel sparc fujitsu closely family arm cpus vxworks standard board support package interface supported hardware os wind river developer kit common application programming interface api stable environment real time operating development development environment common embedded development cross vxworks development host integrated development environment ide including editor compiler emulator software compiled target developer powerful development tools limited hardware vxworks host environments target hardware architectures vxworks supports target architectures target architecture processors board support packages refer vxworks https locate type eclipse based ide vxworks analyze optimize vxworks based development ide vxworks replaced eclipse based ide vxworks ide wind river linux chip debugging wind river compiler product lines vxworks wind river updates eclipse base provide party plug support improvements wind river standalone simulation tool compatible vxworks target hardware software create shared platform software development multiple developers share complete virtual entire including execution history enables continuous integration faster utilizing virtual prototypes physical prototypes notable vxworks products wide range market aerospace defense automotive industrial robots consumer electronics medical networking notable products vxworks operating aerospace defense aircraft  
164346	computer	society motion picture television engineers rarely founded society motion picture engineers global professional association engineers media entertainment industry recognized standards organization 800 standards recommended engineering guidelines broadcast digital cinema audio recording technology medical imaging addition development publication technical standards documents motion imaging journal networking opportunities produces academic conferences performs industry functions membership individual organization subject matter educational professional development activities include technical presentations regular local sections annual conferences australia motion imaging journal society awards progress medal medal david medal student college students motion imaging disciplines profit organization organizations frame rate standard speed film 3d television task force 3d produced report issues challenges suggested minimum standards 3d master distributed post production distribution channels 3d video content standards begun formal definition 3d master digital cinema 1999 technology committee foundations digital cinema honors awards program awards individuals outstanding contributions fields society membership honor roll include progress medal progress medal medal awarded annually contributions engineering aspects film television industries include gold medal gold medal 1967 recognizes outstanding contributions lead unique educational programs utilizing motion pictures television speed photography photography sciences  
172088	computer	machine vision technology methods provide imaging based automatic inspection analysis applications automatic inspection process control robot guidance industry machine vision term technologies software hardware products integrated systems actions methods expertise machine vision systems engineering discipline considered distinct vision form science attempts integrate existing technologies apply solve real term functions industrial automation environments functions environments security vehicle guidance machine vision process includes planning details requirements project creating solution time process starts imaging automated analysis image extraction required definition definitions term machine vision vary include technology methods extract image automated basis opposed image processing output image extracted simple bad signal complex set data identity position orientation object image applications automatic inspection robot process guidance industry security monitoring vehicle guidance field technologies software hardware products integrated systems actions methods expertise machine vision term functions industrial automation applications term universal functions environments security vehicle guidance machine vision systems engineering discipline considered distinct vision form basic science machine vision attempts integrate existing technologies apply solve real requirements industrial automation application term broader sense trade trade automated imaging association european machine vision association broader definition products applications image processing primary machine vision automatic inspection industrial robot process guidance machine vision imaging based automatic inspection sorting primary machine vision imaging based automatic inspection sorting robot guidance automatic inspection process includes planning details requirements project creating solution describes technical process occurs operation solution methods sequence operation step automatic inspection sequence operation acquisition image typically cameras lenses lighting designed provide required subsequent processing software packages programs developed employ digital image processing techniques extract required decisions pass fail based extracted equipment components automatic inspection include lighting camera processor software output devices imaging imaging device camera separate main image processing unit combined combination called smart camera smart sensor separated connection specialized intermediate hardware custom processing frame analog standardized digital interface camera link implementations digital cameras capable direct connections usb gigabit ethernet interfaces conventional 2d visible light imaging commonly alternatives include imaging imaging imaging infrared bands scan imaging 3d imaging surfaces ray imaging key 2d visible light imaging color frame rate resolution imaging process simultaneous entire image suitable moving processes vast majority machine vision applications solved dimensional imaging machine vision applications utilizing 3d imaging growing industry commonly method 3d imaging scanning based utilizes motion product image imaging process laser projected surfaces object viewed angle machine vision accomplished scanning motion moving moving camera laser imaging viewed camera angle deviation represents shape variations lines multiple scans assembled depth map cloud stereoscopic vision special involving unique features views pair cameras 3d methods machine vision time flight grid based method grid array based systems structured light employed kinect 2012 image processing image acquired processed multiple stages processing sequence desired result typical sequence start tools filters modify image extraction objects extraction measurements reading codes data objects data comparing target create communicate pass fail machine vision image processing methods include outputs common output automatic inspection systems pass fail decisions decisions mechanisms failed items sound common outputs include object position orientation robot guidance systems additionally output types include numerical measurement data data read codes characters counts classification objects displays process stored images automated space monitoring systems process control signals includes user interfaces interfaces integration multi component systems automated data imaging based robot guidance machine vision commonly location orientation robot robot properly product capability guide motion simpler robots axis motion controller process includes planning details requirements project creating solution describes technical process occurs operation solution process steps automatic inspection focus providing position orientation result market global machine vision market expected reach 15 46 18 period 2017 machine vision market growing positive growth regions increasing application advancement technology integration driving market global scale asia global market 30 market share europe biggest market heavy demand automotive healthcare industry north america stands biggest market  
172777	computer	machine learning perceptron algorithm supervised learning binary classifiers binary classifier function decide input represented vector specific class type linear classifier classification algorithm predictions based linear predictor function combining set weights feature vector history perceptron algorithm invented 1957 laboratory funded united office perceptron intended machine program implementation software ibm subsequently implemented custom built hardware mark perceptron machine designed image recognition array 400 randomly connected neurons weights encoded weight updates learning performed electric motors press conference organized navy statements perceptron caused community based statements york times reported perceptron electronic navy walk talk write existence perceptron initially promising proved perceptrons trained classes patterns caused field neural network feedforward neural network layers called multilayer perceptron processing power perceptrons layer called single layer perceptron single layer perceptrons capable learning linearly separable patterns 1969 famous book entitled perceptrons minsky papert impossible classes network learn function hold linear classification functions single layer perceptron applying functions extend perceptron abilities including implementation function believed incorrectly result hold multi layer perceptron network true minsky papert multi layer perceptrons capable producing function perceptrons book stephen published series papers introducing networks capable modelling differential contrast functions papers published 1972 1973 minsky papert caused decline funding neural network neural network experienced 1980s 1987 perceptrons expanded edition errors original kernel perceptron algorithm introduced 1964 margin guarantees perceptron algorithm separable 1998 2013 extend previous l1 perceptron simplified model biological neuron complexity biological neuron models required understand neural behavior suggests perceptron linear model produce behavior real neurons definition modern sense perceptron algorithm learning binary classifier called threshold function function maps input real valued vector output single binary vector real valued weights dot product inputs perceptron bias bias decision boundary origin depend input classify positive negative instance binary classification negative weighted combination inputs produce positive push classifier neuron threshold spatially bias position orientation decision boundary perceptron learning algorithm learning set linearly separable vectors linearly separable learning reach vectors classified properly famous perceptron solve linearly vectors boolean exclusive solution spaces decision boundaries binary functions learning behaviors studied reference context neural networks perceptron artificial neuron step function activation function perceptron algorithm termed single layer perceptron distinguish multilayer perceptron complicated neural network linear classifier single layer perceptron simplest feedforward neural network learning algorithm learning algorithm single layer perceptron multilayer perceptrons hidden layer exists sophisticated algorithms backpropagation alternatively methods rule function linear differentiable multiple perceptrons combined artificial neural network output neuron operates independently learning output considered isolation definitions define variables values features represent weights time dependence linear classification algorithms logistic regression learning rate perceptron algorithm update constant simply weights sign prediction steps algorithm updates weights steps weights applied pair training set subsequently updated waiting pairs training set steps convergence perceptron linear classifier input vectors classified correctly training set linearly separable positive examples separated negative examples approximate solution gradually approached standard learning algorithm learning fail completely linear training set training variants training set linearly separable perceptron guaranteed converge upper bound times perceptron adjust weights training suppose input vectors classes separated margin 31 exists weight vector 32 bias term 33 34 35 36 denote maximum norm input vector 1962 proved perceptron algorithm 37 updates idea proof weight vector adjusted bounded direction negative dot product bounded weight vector bounded exists unknown weight vector change progress unknown direction positive depends input vector perceptron algorithm guaranteed converge solution linearly separable training set pick solution solutions varying quality perceptron optimal stability linear support vector machine designed solve 1987 variants pocket algorithm 1990 stability perceptron learning keeping solution pocket pocket algorithm returns solution pocket solution separable data sets aim perceptron solutions purely pocket algorithm approaches gradually learning guaranteed learning steps algorithm 1995 robust sense converge prior knowledge linear data set linearly separable solve training – desired optimal stability maximum margin classes separable data sets return solution algorithm gradually approaches solution learning previous stochastic convergence global separable data sets local separable data sets perceptron 1999 variant weighted perceptrons algorithm starts perceptron time classified weights vector final weights perceptron perceptron weight examples correctly classify output weighted perceptron separable perceptron training aim finding largest separating margin classes called perceptron optimal stability determined iterative training optimization schemes algorithm 1987 1989 optimization convex perceptron optimal stability kernel conceptual foundations support vector machine 38 perceptron pre processing layer fixed random weights output units enabled perceptron classify patterns binary space projection space dimension patterns linearly separable solve nonlinear multiple layers networks pi unit type network element input vector extended combination inputs extended network mind classifier training data prior constraint data variant gaussian distributions linear separation input space optimal nonlinear solution linear classification algorithms include support vector machine logistic regression perceptron techniques training linear classifiers perceptron naturally classification input output 40 drawn arbitrary sets feature representation function 41 maps input output pair finite dimensional real valued feature vector feature vector weight vector 42 score choose outputs learning examples predicting output leaving weights predicted output matches target changing update feedback formulation reduces original perceptron real valued vector 40 chosen 47 48 input output representations features chosen 49 efficiently 40 chosen infinite set 2002 perceptron training popular field natural language processing tasks speech tagging syntactic parsing 2002 applied scale machine learning distributed computing setting  
173332	computer	statistics overfitting production analysis corresponds closely set data fail fit additional data predict future observations model statistical model parameters data overfitting extracted variation noise variation represented underlying model structure occurs statistical model capture underlying structure data model model parameters terms correctly model missing occur fitting linear model linear data model tend poor predictive performance overfitting occur machine learning machine learning phenomena called possibility overfitting exists criterion selecting model criterion judge model model selected maximizing performance set training data determined ability perform unseen data overfitting occurs model training data learning trend extreme parameters observations model predict training data simply data model typically fail predictions potential overfitting depends parameters data model structure data shape magnitude model error compared expected level noise error data fitted model parameters expected fitted relationship perform data set data set fitting phenomenon coefficient relative original data chance overfitting techniques model comparison cross validation regularization stopping bayesian basis techniques explicitly complex models model ability evaluating performance set data training assumed approximate typical unseen data model statistical inference statistics inference drawn statistical model selected procedure cited model selection argue avoid overfitting principle authors overfitting concern theory guide analysis tend models select book model selection model 2008 regression regression analysis overfitting occurs frequently extreme variables linear regression data fitted logistic regression proportional hazards models variety rules thumb observations independent variable rule process regression model selection squared error random regression function split random noise approximation bias variance estimate regression function overcome models set variables relation dependent variable predicted variables researcher model overfitting model machine learning learning algorithm trained set training data situations desired output goal algorithm perform predicting output fed validation data training overfitting models procedures including parameters ultimately optimal complicated approach ultimately optimal parameters dataset training data predicted linear function dependent variables function requires parameters replacing simple function complex function complex linear function dependent variables risk implies complex function simple function complicated function selected simple function gain training data fit offset complexity increase complex function data complex function perform simpler function validation data training dataset complex function performed training dataset comparing types models complexity measured solely parameters exist model parameter considered compare complexity neural track relationships parameters regression model parameters overfitting learning performed training examples rare causing adjust specific random features training data relation target function process overfitting performance training examples increases performance unseen data simple database retail includes item bought time purchase easy construct model fit training set time purchase predict attributes model data times occur learning algorithm relative simpler accurate fitting data accurate predicting data intuitively understand overfitting experience divided relevant future noise equal difficult criterion predict uncertainty noise exists determining learning algorithm reduce chance fitting noise called robust obvious consequence overfitting poor performance validation dataset negative include optimal function completely datasets methods minimum spanning tree life time correlation applies dependence correlation coefficients time series window window correlation coefficients stable depend window size correlation matrix created calculating coefficient correlation investigated variables matrix represented complex network direct indirect variables occurs statistical model machine learning algorithm capture underlying structure data occurs model algorithm fit data occurs model algorithm variance bias contrast overfitting variance bias result simple model  
173787	computer	imax resolution cameras film formats film projectors robert william developed imax cinema projection standards late 1960s 1970s canada conventional projectors film runs horizontally diagram holes image film 2002 feature films converted imax format imax partially shot imax imax special film presentations late 2017 imax theatre systems installed commercial 13 commercial 86 settings 75 countries history increase visual impact film history introduced film format fell 1950s potential film provide wider projected images explored processes 1953 1954 multi projector systems 1952 difficult install 67 national film board canada regions multi projector multi screen systems technical difficulties led company called goal developing simpler approach single projector single camera eventually designed built based loop film transport technology purchased peter machine australia single screen image impact multiple product direction changed imax imax 3d theatre operation 67 science centre port child imax film demonstrated 70 japan permanent imax installation built theatre ontario toronto debuted 1971 film north superior installation remained ontario ontario closed november 2017 imax 70 imax laser washington imax screen measured featured largest structure imax theatre brand movie theaters viewed screen covered viewer total visual field created motion viewers motion imax 3d theater built screen size city decided imax corporation theatre condition imax permanent screen theatre plan material structure constructed expected range weather conditions previous materials concept art released public videos featured budget revealed planned 000 permanent imax dome installation dome theatre science center san park 1973 permanent imax 3d theatre built british columbia transitions 86 september 30 2009 located canada 2008 imax extended brand traditional theaters introduction digital imax cost digital projectors project 90 aspect ratio screen cost option allowed conversion existing theater helped imax grow screens worldwide 2007 000 screens 2015 september 2017 imax located 75 countries commercial technical aspects camera imax cinema process increases image resolution larger film frame relative terms frame imax format film times theoretical horizontal resolution frame film achieve increased image resolution imax estimates 12 000 lines horizontal resolution film stock passes horizontally imax movie camera 15 time 24 frames film moves camera minute conventional camera film passes vertically camera time 34 minute comparison conventional camera film passes vertically camera time translates 27 minute format cinema image film frame imax format cinema film frame dimensions match standard image resolution moving image produced film speed 24 frames imax film requires times negative film stock required film comparable scope technique 65 imax 3d digital camera 2011 imax announced 4k 3d digital camera wide resolution regular imax film cameras camera developed vision integrating 65 engines prototype camera documentary born finished film shot company replacing resolution film cameras digital camera scenes require 3d camera imax completed production camera service films plans produce imax film solely digital feature film partially filmed 65 imax 3d camera imax digital camera 2015 imax announced 2d digital camera developed camera based company 65 technology production camera announced 2018 2019 completely cameras imax cameras combined provide native 3d 98 imax footage film film imax format called 15 70 film referring 15 holes frame film requires horizontal conventional film imax range accommodate 75 hours film hour feature film imax based print film 15 70 loop film projection systems based print film precision chemical development process change size shape print film imax registration camera mechanism film variations double image imax film include embedded imax specifies separate channel magnetic film recorded played film locked picture utilizing 16 inch 33 electrical 20th century technology provide channel films process mid 1950s 1990s separate based track digital sound locked projector time code synchronization audio played series encoded rom late 1990s imax upgraded hard drive single audio file channels converted processed decoding method conventional imax speakers transparent screen theatre create sound imax center speaker addition centre speaker conventional extra channel sound mix engineers advantage screen height projectors drawing film projector challenges camera projector conventional systems projector william adapted patent film transport called loop adding compressed air accelerate film lens projector block projector vacuum film contact lens field image field lens height film connects moved projector running piece dust film lens switch clean lens push button lens material dust lens moves imax projectors registration pins corners projected frame ensure perfect alignment controlled arms frame eliminate frame registration pins projector shutter 20 conventional equipment light source short arc layer gas pressure 25 required body changing handling drop floor flying pressure gas imax projector short imax corporation released projector types 15 film format grand theatre 3d dual designed july 2008 company introduced digital projection distinct brand designed screens wider imax projectors standard project 3d images digital projection digital cinema imax projection debuted 2008 designed shorter 90 aspect ratio screens projectors 2d 3d content imax digital format initially resolution projectors texas instruments digital light processing engine 2012 imax announced switching primary supplier images projected pixel offset super resolution imaging increase perceived resolution 3d presentations projector display image eye 2d presentations images 22 image digital imax projection includes proprietary imax image output digital media server based feedback cameras maintains alignment pixel accuracy inexpensive distribution imax features company announced february 2012 selected locations analog digital presentations imax developed moves projectors accommodate frame film print digital release theaters time release dark july 2012 laser projection april 2012 imax testing 4k laser projection based patents licensed 3d film digital systems projectors improved digital screens traditional imax aspect ratio films screens wide december 2014 imax dual 4k laser projector imax laser installation occurring theatre toronto digital projection 43 aspect ratio surface traditional imax screen wider screens 00 aspect ratio chinese theater replaces arc traditional digital projector laser light source capable 60 fps 50 percent brightness digital cinema contrast ratio double imax 15 film projection contrast ratio imax based projection systems color space features 12 channel sound adds additional speaker theater overhead speakers matching theoretical resolution traditional imax film estimated 12 lines horizontal resolution camera negative release print laser features dual 4k resolution projectors capable times digital imax projector digital imax images projectors projected pixel offset super resolution imaging perceived resolution 4k theater cameras automatically projectors sound 3d presentations projector display image eye 2d presentations images image 3d presentations imax laser systems filter glasses 3d opposed linear polarization glasses digital imax theaters april 24 2018 imax announced single unit version laser projector iteration designed replace imax digital projection screens imax classic design purpose built structures design classic imax theatre construction differs conventional increased resolution audience closer screen typically rows screen height conventional theatre runs 12 screen rows set angle audience screen standard imax screen larger largest imax screen australia measured theater closed 2016 2019 current largest operating imax screen australia measures imax reconstruction includes larger screen record largest imax screen variations dome late 1960s san hall science science center searching north america format film project dome planned dome standard imax projector dome house imax corporation adding projector center dome projection physics designed suitable lens projector 1970 canada optical technologies contract develop manufacture lens projection optimized project image dome flat screen dome san hall science called films shot camera equipped lens highly field view imax film lens aligned center frame circular field falls edge film field fall edge dome camera aimed angle matches dome projected matching lens dome original view horizontally viewer center dome 1973 produced graphic films films double imax renamed imax dome continue theme north american scientific focus technical aspects projection public viewing screen permanent museum science industry worth museum science history institute pennsylvania science center boston museum science science museum imax dome theatre discovery north science center space center museum center union terminal science center raised canadian museum history shares standard imax screen entire dome raised flat screen features dome features flat screen theaters feature screen speakers majority museum focus educational documentary films special entertainment films factory museum science industry largest north america science center jersey city jersey science dome screens size 3d create depth imax 3d process separate camera lenses represent left eyes lenses separated distance average distance human eyes separate film capture images produce imax 3d camera films screen methods direct correct image eye viewers 3d image 2d screen method filters light image viewer glasses filters oriented match projector filters filter eye blocks light project images intended eye method projections rapidly alternate image projection frame increase rate viewer shutter glasses liquid crystal block transmit light projectors eye images meant films produced digital 3d release conventional theaters imax 3d including avatar color imax 3d film 1986 short documentary transitions produced 86 hd variations imax included 48 frames imax hd process sought produce motion reducing moving objects doubling normal film rate imax hd tested 1992 canada film production costs projectors imax hd project 48 frames canada play 1990s theme thailand germany imax hd motion simulator disney california features modification imax hd imax dome 48 frames digital film projectors costly difficult mass produce size house size imax screens expensive construct imax debuted digital projection 2008 shorter 90 aspect ratio screens resolution projectors 2d 3d content imax digital format digital caused theaters branded screens imax standard imax digital projectors screen sizes purpose built original 15 70 imax format limited 90 aspect ratio disadvantage resolution digital imax technology maximum perceived resolution compared traditional imax projection estimated resolution imax theaters films 4k resolution competing brands cinema imax held uniform imax experience underlying technologies screen sizes criticized company marketing approach format max company format screen picture sound standard differences digital imax cost effective format aided company worldwide growth russia china 2016 imax announced launch multimedia concept decided june 2017 virtual reality september 2016 imax announced plans include virtual reality imax theater experience center los angeles created experience intended short interactive videos imax total imax centers established fund creation content google production imax cameras imax centers closed remaining close 2019 films entertainment imax usa applications challenges producing imax films led 40 minute shorter running times conventional films suited science centers imax cameras earth mount exploring visiting film exploration titled 2006 exclusive data attempt mainstream entertainment imax live max 1991 85 minute compilation footage filmed imax band 1990 steel wheels edited single 1990s entertainment short films created notably 1998 2001 3d 1995 french director directed picture shot imax 1998 1999 short films produced imax format earned academy award winning imax film win 2000 disney produced 2000 animated feature initially released exclusively imax format 1990s features impossible imax time technical limitation size film films hours originally imax considered releasing toy story imax 3d render resolution match size imax image 2000s release imax 3d result creative studio failed attempts releases imax experiment improve ability animation theaters compilation result contained original animation imax versions animated tests music videos 3d versions bar sequence segment animated data images disney pictures studio release films imax process released day 2000 2000 studio imax release feature imax theaters originally planned standard release company release film imax sound incorporated multi channel multi layer stereo disney original film company agreed disney terms conditions gain exclusive film included limited months january april 30 50 box office imax accept disney terms film imax release standard june regular theaters 2000 financial critical imax format disney releases screen format pipeline 2002 imax issues king released select theaters digital created original production files select scenes animation resolution imax film released select imax theaters film released regular imax theaters simultaneously releases box office returns disney screen releases including process pictures format 2003 matrix 2004 releasing film imax strong financial success 2004 studio released robert motion capture film express imax 3d express successful film released imax theaters producing quarter film 100 imax screens success imax feet dark studios releasing films imax process earned success 2009 star released imax initial weeks imax 15 filmed imax cameras optimized imax digital screens released movies filmed resolution cameras digital negative ratio equal imax digital frame increased visual entire film optimized james released theaters version imax 2010 successful imax releases signed deal release 20 feature films imax 2013 including educational production 2015 studios announced films 2018 2019 filmed imax feature films modified version 65 digital camera camera film select sequences production 2016 digital media imax proprietary digital media process converts conventional films imax format special digital intermediate technology imax films shot conventional theaters 2002 imax format release 1995 film 13 official applications process projection limitations time studios edit 13 attack shorter playing time imax updated expanded size releases limitation current provide time minutes process visually superior films projected producer comparable films created 15 imax format george expected note decline roughly replacement simpler cheaper technically version view imax originally phrase imax experience true king 2003 studio releasing classic films imax process 2012 ongoing conversion releases continued continued grow james 3d conversion conversion 3d 2012 black august 2012 imax pictures announced week exclusive release lost september 2012 promote release ray collection film 4k digital intermediate sound original negative process imax theaters complete supervised sound designer 1981 print stand imax transfer sort representation movie looked movie feature films features employed imax cameras select scenes 2018 feature film shot imax cameras numerous difficulties format – cameras larger standard cameras noise produced recording difficult cameras short film loads ranging 30 minutes cost film stock standard film issues digital imax camera films shot camera dark features sequences total 28 minutes shot imax film press notes time major feature film partially shot imax cameras dark film imax format scenes entire film imax imax camera mount space feature movie edit imax sequences original camera negative eliminate generation loss scenes digitally scanned printed lines horizontal resolution film imax 2008 sold director michael inspired imax dark feature screen sequences film writer suggested imax footage 3d school 3d imax easier stereoscopic cameras imax version film contained minutes imax filmed footage hour film partially filmed film 3d imax returned imax fourth film 2014 feature film shot digital imax 3d cameras imax 3d cameras film 98 film imax cameras attached special mount 25 minutes footage shot imax cameras believed imax format bring level presentation films believes industry lost emphasis films opposed grand theaters runs favor wider initial releases imax format offered viewer digital 3d quality image projected larger screen glasses protocol december 16 2011 500 imax worldwide week wide release earned box office 12 dark decided film sequences dark 15 imax elected film 3d stated focus improving image quality scale imax format record dark featured 72 minutes footage shot imax roughly times dark 28 minutes record film featured 79 minutes imax considerable noise imax cameras cameras scenes scenes shot imax cameras chairman president imax corporation stated imax plans film theaters months film weeks theaters star films released 2013 2014 sequences filmed 15 imax cameras july 2014 bad robot production company confirmed picture sequence disney captured imax 15 70 film camera addition standard film cameras dan employed movie music video released 2015 music video partially filmed imax cameras april 2015 studios announced film imax 2d digital camera 15 minutes film 2015 announced upcoming films scheduled release 2018 2019 feature films shot imax imax cameras 15 70 film music video released 2016 music video imax 2d digital camera 15 imax cameras film previous films cameras select sequences imax primary format 75 79 minutes minute film featuring footage shot imax breaking record previous film dark held sparsity film 15 imax cameras noisy heavy scenes shot regular film cameras imax cameras hand held time received release imax film film released format 37 theaters space imax cameras space 17 nasa handheld imax cameras document imax camera mounted payload space mission 41 filmed deployment duration exposure facility repair solar max satellite footage included 1985 imax movie dream space center imax 3d theaters space movies including footage shot imax cameras nasa display national air space museum washington awards 1996 imax awarded scientific technical achievement academy motion picture arts sciences award cited imax innovations creating developing method format wide angle motion pictures native format imax format films received academy awards winner technical aspects usage imax dark earned imax films format fit aspect ratio hd hd theatre networks release dvd ray disc july 2005 imax cinema london host live music digital imax projector science museum london imax cinema hosted game digital projectors park integrated imax film segments including universal studios california disney california park technical specifications imax 15 70 imax dome imax competitors late 2014 announced cinema imax super image dynamic range shadow australia event cinema experience screen improved marketed united extreme digital cinema  
173926	computer	inductive bias learning bias learning algorithm set assumptions predict outputs inputs machine learning aims construct algorithms learn predict target output achieve learning algorithm training examples demonstrate intended relation input output values supposed approximate correct output examples training additional assumptions solved unseen situations arbitrary output assumptions nature target function phrase inductive bias classical inductive bias assuming simplest consistent hypothesis target function consistent hypothesis yields correct outputs examples algorithm approaches formal definition inductive bias based mathematical logic inductive bias logical training data hypothesis generated strict fails practical inductive bias rough description artificial neural networks types list common inductive machine learning algorithms shift bias learning algorithms static bias algorithms designed shift bias acquire data avoid bias bias shifting process bias  
177112	computer	memory management unit mmu called memory management unit hardware unit memory references passed performing translation virtual memory addresses physical addresses implemented central processing unit cpu form separate integrated circuit mmu effectively performs virtual memory management handling time memory protection cache control bus simpler architectures bit systems bank switching overview modern typically divide virtual address space range addresses processor size power larger bits address offset left upper address bits virtual table entries memory table items called table table entry map virtual physical main memory associative cache called translation buffer tlb avoid accessing main memory time virtual address mapped private array memory registers hold set table entries physical combined offset complete physical address include written dirty bit accessed bit replacement algorithm processes user mode supervisor mode read write cached access virtual physical random access memory allocated virtual mmu signals fault cpu operating os handles situation frame ram set map requested virtual address ram choose existing replacement algorithm save disk process called os mapping mmu generate access error conditions existing memory accesses leading segmentation fault bus error conditions handled operating benefits fault software bug memory protection key benefits mmu operating protect programs access memory program access typically operating program virtual address space mmu memory blocks memory allocated memory largest block memory total virtual memory range virtual addresses mapped blocks physical memory allocation benefits microprocessor designs memory management performed separate integrated circuit 1986 motorola 1984 motorola cpu macintosh 1985 family processors microprocessors motorola mmu cpu integrated circuit intel x86 microprocessors article modern commonly based systems concept base limit addressing developed segmentation occasionally modern architectures x86 architecture segmentation segmentation processors segmentation 64 bit operation examples modern systems divide memory size capability huge size translations cached translation buffer tlb systems risc designs os translation tlb systems hardware based tree systems mmu disabled mmu os code vax vax bytes os treat multiple single larger linux vax viewed vax memory fixed purpose regions size tables linear arrays addresses range table applications stored kernel memory effectively level tree allowing applications sparse memory layout lot space unused table entries vax mmu notable accessed bit implement emulate accessed bit operate efficiently typically os os set accessed bit arm arm architecture based application processors implement mmu defined arm virtual memory architecture current architecture defines describing sections super sections legacy versions defined arm level table level table sections sections tlb updates performed automatically table walking hardware include read write access permission based privilege bit secure bit ibm 360 model 67 ibm 370 ibm 360 model 67 introduced 1965 included mmu called dynamic address translation box unusual feature storing accessed dirty bits table refer physical memory virtual memory accessed special purpose instructions reduces overhead os accessed dirty bits tables physically oriented data structure os level virtualization easier starting august 1972 ibm 370 mmu initially supported 24 bit virtual address space 32 bit virtual address space 360 model 67 stored accessed dirty bits table 1983 370 architecture expanded virtual address space 31 bits 2000 64 bit architecture introduced address space expanded 64 bits continued store accessed dirty bits table dec alpha dec alpha processor memory tlb level firmware machine code called level tree structured table addresses broken 21 bits unused bits root level tree bits middle level tree bits level tree 13 bits pass physical address modification read write execute permission bits supported mips mips architecture supports 64 entries tlb tlb entries cpu configuration synthesis tlb entries dual tlb entry maps virtual frame depending bit virtual address mask bit mask bits stored tlb entry size tlb entry caching attribute dirty valid status bit global status bit os assigned virtual address tlb entry match global status bit set stores physical address mask bits tlb exception generated entries tlb match mapped virtual address tlb exception generated match entry marked tlb modified exception generated match dirty status set tlb exception occurs processing tlb exception double fault tlb exception exception support 32 bits virtual address space 36 bits physical address space supports 64 bits virtual address space 59 bits physical address space sun original sun single board built motorola 68000 microprocessor introduced 1982 included original sun memory management unit address translation memory protection memory sharing memory allocation multiple processes running cpu access cpu private board ram external memory board mmu translated protected uniform fashion mmu implemented hardware cpu board mmu consisted context register segment map map virtual addresses cpu translated intermediate addresses segment map translated physical addresses map size segment size 16 segment 16 contexts mapped concurrently maximum logical address space context maximum physical address mapped simultaneously context register multitasking operating allowed cpu switch processes translation bit context register switch 16 sections segment map supervisor control allowed 16 contexts mapped concurrently context virtual address space sharing virtual address space inter context communications writing values segment maps contexts additional contexts handled segment map context cache replacing contexts basis context register distinction user supervisor interrupts switch contexts required valid interrupt vectors mapped context valid supervisor stack powerpc powerpc tlb standard powerpc mmu simultaneous lookup attempts match address data block address translation registers instruction block address translation registers registers map linear memory os map portions address space os kernel lookup lookup lookup supported processors family called table acts chip extension tlb bits address select 16 segment registers 24 bits segment register replace bits producing 52 bit address segment registers multiple processes share hash table 52 bit address chip table table entries scanned matches match hash processor hash function fails cpu os mmu disabled resolved os entry hash table space entry os generate entry normal tree table mapping data structures slower space efficient support execute control segment registers leading major design poor cache locality caused hash function tree based designs avoid table entries adjacent adjacent locations operating running powerpc minimize size hash table reduce slow remove table entries process os avoid segment values delay suffer memory process hash tables chips search table entries generate hash expectation os search standard hash table software os write tlb chips hardware search hash table chips os choose method chips optional support os choose tree based table exclusively ia 32 x86 x86 architecture evolved time maintaining software compatibility os code mmu extremely complex operating modes normal operation traditional cpu ia 32 cpu memory segment registers fundamental mmu designs modern major exception access thread specific data applications cpu specific data os kernels explicit segment registers memory access involves segment register chosen code executed segment register acts table offset virtual address os ensures offset offset address larger 32 bits result looked tree structured table bits address split bits branch tree bits leaves branch 12 lowest bits copied result operating systems feature linux limit code segment register execution code regions address space minor mmu introduced pentium allowed level tree leaves bits indexing level hierarchy remaining 12 bits copied result minor mmu introduced pentium pro introduced physical address extension feature enabling 36 bit physical addresses bits level tables 12 lowest bits copied result level tree bits level table hierarchy remaining 12 lowest bits copied addition attribute table allowed specification bits cpu table execute support originally segment basis x86 chips provide execute bit mode mechanisms emulate execute support machines x86 processors bit setting code segment performance loss reduction address space x86 64 x86 64 64 bit extension x86 segmentation favor flat memory model operating systems processors mode segment segments table tree levels virtual addresses divided 16 bits unused bits tree levels total 36 bits 12 lowest bits copied result levels table total 27 bits 21 bits offset cpus support levels offset determine supported bits required equal bit sign extended bits future expansion addressable range compatibility levels table table entry includes execute bit systems burroughs burroughs 1961 commercial support virtual memory atlas mmu functions mmu virtual memory addresses memory protection architectural approach mapping virtual memory addresses mmu systems descriptor based allocated memory block master descriptor properties block size address memory request access block reading writing hardware checks presence presence bit descriptor presence block block accessed physical address descriptor interrupt generated operating block address field access block allocated address field disk address block block fetched disk set physical memory address updated block memory equivalent table entry mmu performance initial level memory allocation completely automatic features modern systems blocks mechanism calls memory blocks automatically discarded scheme block allocated memory set read segments code segments original dirty data segments disk function mmu protection accesses descriptor hardware check accesses write process write permission inherently secure mmu provide level memory protection read user processes updated hardware tag read tag code tag blocks shared processes process stack processes write permission code segment read shared processes 20 bit address field master descriptor master descriptor array implements efficient secure mechanism blocks easily master descriptor update block status aspect performance mmu based mmu based systems provide performance systems implemented standard hardware mmu standard pc implementation mmu visible level  
185529	computer	scalability capability network process handle growing potential accommodate growth considered scalable capable increasing total output increased load resources typically hardware analogous meaning word economic context company scalability implies underlying business model offers potential economic growth company scalability property systems difficult define define specific requirements scalability dimensions highly issue electronics systems databases routers networking performance improves adding hardware capacity scalable algorithm design networking protocol program scale efficient practical applied situations input data set outputs users participating nodes distributed design fails increases scale practice affect scaling resource requirements algorithmic time complexity grow increases search engine scales users objects scalability refers ability increase size demand concept scalability desirable technology business settings base concept consistent ability business technology accept increased volume contribution margin variable costs piece equipment capacity users 1000 users additional equipment performance decline variable costs increase reduce contribution margin incident command ics emergency management response agencies united ics scale resource single engine resource scene authority resources responsibility control managing incident grows senior assume command complexity proven simple scalable saving property century content 44 short scalability measured dimensions horizontal vertical scaling methods adding resources application fall broad categories horizontal vertical scaling models larger computers increased management complexity complex programming model issues throughput latency nodes applications distributed computing model price difference models scale computing applications fit paradigm advances virtualization technology advantage virtual expensive real existing idle expensive model note nfv defines terms scaling ability scale add remove resource instances virtual machine scaling ability scale changing allocated resources memory cpu storage capacity database scalability approaches enable databases grow size supporting increasing rate transactions rapid hardware advances speed capacity mass storage devices advances cpu networking speed technique supported major database management products tables based ranges values key field manner database scaled cluster separate database servers advent 64 bit microprocessors multi core cpus smp vendors supporting multi implementations scale transaction processing capacity network attached storage storage networks coupled fast local networks channel technology enable larger loosely coupled configurations databases distributed computing power supported standard employs global transaction monitor coordinate distributed transactions semi autonomous compliant database resources oracle model achieve scalability based shared architecture relies speed connections servers vendors relative designs companies researchers question inherent limitations database management systems model distributed data access transaction processing space based architecture required achieve performance scalability hand base extreme scalability mainstream database technology specialized applications architectures google enhance scalability google horizontally distributed technology alternative supports purpose database transactions conventional based query language strong consistency storage context scale data storage scalability defined maximum storage cluster size guarantees data consistency meaning valid version stored data cluster independently redundant physical data copies clusters provide redundancy updating copies fashion called eventually consistent type scale design suitable availability rated consistency true file services caches version wait classical transaction oriented applications design source commercial scale storage clusters built standard pc hardware networks provide consistency databases mentioned write operations copies wait read operations typically check redundant prior answering missing preceding write operation signal traffic require specialized hardware short distances handled acceptable performance storage device database strong data consistency expected eventually consistent designs suitable applications performance tuning hardware scalability focus design hardware scalability capacity typically cheaper add node achieve improved performance performance tuning improve capacity node handle approach returns discussed performance engineering suppose 70 program multiple cpus fraction calculation sequential fraction maximum speedup achieved processors amdahl law processors double compute power processors processing power improved speedup roughly speed double hardware optimal approach weak strong scaling context performance computing common scalability  
187398	computer	cisco ios originally operating family software cisco systems routers current cisco network switches earlier switches ios package routing switching telecommunications functions integrated multitasking operating ios code base includes multitasking kernel ios features ported kernels qnx linux cisco products cisco cisco products ios notable exceptions include security products linux derived operating carrier routers ios interface ios command interface fixed set multiple word commands set determined mode privilege level current user global configuration mode commands change configuration interface configuration mode commands change configuration specific interface commands assigned privilege level 15 accessed users privilege commands privilege level defined builds ios include interpreter embedded event manager feature interpreter events networking environment interface failure periodic command modes include cisco ios letters form – compiled single specific ios version 12 14 12 produced repair satisfy customers upgrade major revision running critical infrastructure devices change risk releases – produced basis form roll current development effort cisco advisory list issue reason unknown public maintenance releases – tested releases include enhancements bug cisco maintenance releases releases trains cisco train vehicle cisco software specific set platforms features 12 cisco ios release 15 releases split trains set features trains map distinct markets customers cisco trains time time designed specific 12 train contained code required cisco product 15 starting cisco ios release 15 single train train train includes extended maintenance releases standard maintenance releases releases extended maintenance releases cisco provide bug 44 months releases standard maintenance releases cisco provide bug 18 months feature sets cisco products ios feature sets packages typically packages cisco routers packages cisco network switches cisco ios releases meant switches standard versions providing basic ip routing enhanced versions provide routing support advanced ip services versions provide enhanced features support individual package corresponds service category exact feature set required function determined cisco feature set browser series routers cisco licensing model ios routers ip base installed additional feature pack licenses installed expand feature set device feature interface descriptor block simply portion memory cisco ios internal data structure ip address interface packet statistics networking data cisco ios software maintains hardware interface cisco switch router varies cisco hardware platform type architecture versions cisco ios packet routing forwarding switching distinct functions routing protocols cisco ios processes contribute routing base processed generate final ip forwarding table forwarding base forwarding function router router platforms software forwarding cisco traffic handling including access control list filtering forwarding interrupt level cisco express forwarding distributed ios process context switch packet routing functions process level routers hardware based forwarding cisco series ios computes software loads forwarding hardware network processor performs actual packet forwarding function cisco ios monolithic architecture runs single image processes share memory space memory protection processes bugs ios code data processes completion kernel pre running process process kernel processes chance cisco products required availability cisco limitations acceptable addition competitive router operating systems emerged ios designed limitations cisco response develop version cisco ios called ios offered memory protection processes threads pre scheduling ability independently failed processes ios 3rd party real time operating microkernel qnx current ios code written advantage features offered kernel microkernel architecture kernel processes required kernel executes processes application processes method ios achieve availability desired router platform ios ios functionality design 2005 cisco introduced ios cisco series platform microkernel architecture cisco deployed core router 2006 cisco ios software qnx microkernel traditional ios environment providing software upgrade capabilities customers enterprise switch security ios authentication entered default type router designed prevent attacks viewing router configurations secure – easily software called 1995 modern variant decoded router key chain command entering type key key command program type set enable secret command cisco cisco ios devices implement authentication security model local radius databases local account required emergency situations black conference july 2005 michael internet security systems time ios cisco issued patch cisco filed issued prevent  
188676	computer	hitachi listed tokyo stock exchange ranked 2012 global 500 2012 global 2000 history hitachi founded electrical engineer company product japan motor initially developed copper mining company domestic leader electric motors electric power industry infrastructure company house venture mining company hitachi moved headquarters tokyo coined characters meaning meaning company national original brand mark japan sun flag war company war american forces hitachi founder removed company result hitachi maintain 19 manufacturing plants cost production month labor hitachi reconstruction efforts korean war saved company complete hitachi japanese industrial defense contracts offered american military hitachi public 1949 company hitachi history hitachi america established 1959 hitachi europe established 1982 march 2011 hitachi agreed sell hard disk drive subsidiary western digital combination shares worth concerns technology eu commission federal trade commission hitachi division sold toshiba transaction completed march 2012 hitachi entered mitsubishi heavy industries august 2011 potential merger companies largest merger japanese companies history subsequently january 2012 hitachi announced producing japan september 2012 hitachi announced invented term data solution capable millions october 2012 hitachi agreed acquire united kingdom based nuclear energy company nuclear power plans construct nuclear power plants november 2012 hitachi mitsubishi heavy industries agreed merge thermal power generation businesses joint venture owned 65 mitsubishi heavy industries 35 hitachi joint venture operations february 2014 october 2015 hitachi completed deal controls form joint venture hitachi business hitachi maintained 40 stake company controls hitachi air 2016 hitachi announced iot february 2017 hitachi honda announced partnership develop produce sell motors electric vehicles march 14 2018 announced partnership hitachi software develop data analytics market japan products services digital media consumer products note product hitachi called memory introduced 2015 density storage medium utilizing laser readable power systems nuclear 2011 extended temporary closure japanese nuclear plants hitachi nuclear business 2016 hitachi ceo argued japan merger competing nuclear businesses hitachi 2016 estimated write technology laser joint venture electric 2019 hitachi development british subsidiary nuclear power provide economic private enterprise subsidiaries divisions current hitachi communication technologies america hitachi communication technologies america communications products services telecommunications cable utility enterprise industrial markets hitachi hitachi international management technology firm headquarters texas founded 2000 employs 500 people united japan united kingdom netherlands india germany china brazil vietnam hitachi hitachi owned subsidiary hitachi hardware software services companies manage digital data products virtual storage platform enterprise storage hitachi unified storage sized companies hitachi unified storage mid sized companies hitachi content platform cloud architecture hitachi command suite storage management hitachi hitachi universal remote replication hitachi platform september 19 2017 hitachi data systems hitachi company operations hitachi data systems hitachi company hitachi data systems logo market hitachi electronics hitachi manufactures types electronic products including projectors recording media brand hitachi defense systems hitachi defense derived products services hitachi metal hitachi materials aircraft engines components finished components aerospace applications materials components tools automotive electronics industries hitachi hitachi manufactures types tools including power tools branded march 2016 hitachi acquired german power tools manufacturer capital hitachi plant technologies hitachi plant technologies subsidiaries design development manufacture sale execution social industrial infrastructure machinery air systems industrial plants energy plant equipment asia hitachi hitachi stock manufacturing division hitachi mitsubishi heavy industries agreed field international city systems 2010 hitachi markets purpose train train double body construction train concept form types trains ranging capacity trains automated series train city limited express series jointly produced corporation speed trains class trains trains domestic international operators winning department transport express june 2008 hitachi products include designing manufacturing models including series taiwan speed company markets driverless developed hitachi italy beam technology hitachi form basis trains operating transit network february 24 2015 hitachi agreed purchase italian stock manufacturer acquire stake division purchase completed company renamed hitachi italy hitachi majority stake hitachi solutions america hitachi solutions america firm systems focusing dynamics firm utilizes dynamics family provide customers broad base solutions company international subsidiaries united kingdom canada thailand japan india hitachi solutions america acquired – leading dynamics solution providers december 2015 hitachi solutions 2000 dynamics worldwide acquisition hitachi hitachi hitachi consists founded electrical equipment repair manufacturing facility facility named hitachi hitachi hitachi regarded hitachi management hitachi assigned hitachi divisions senior management participants hitachi career head office result senior managers hitachi passed hitachi spin entities hitachi include hitachi cable 1956 hitachi canadian industries 1988 divisions hitachi global storage technologies hitachi global storage technologies hitachi manufactures hard drives main ranges hitachi hitachi hitachi march 2011 hitachi global storage technologies purchased western digital corporation western digital common stock hitachi printing systems hitachi printing systems established 1980 acquired 2004 printing systems hitachi joint venture public sector company 1963 1989 production electrical equipment collaboration hitachi company manufacture india quality demand power corporate social responsibility august 2011 announced hitachi electron universities indonesia university north university university university university abb power division acquisition december 2018 hitachi abb power grid division japanese biggest deal focus nuclear plants growth market electricity networks hitachi  
195671	computer	born february american scientist distributed systems initial developer document winner 2013 turing award defined chaotic behavior distributed computing systems autonomous computers communicate passing messages algorithms developed formal modeling protocols improve quality real distributed systems contributions improved performance reliability systems life education graduate school science received mathematics massachusetts institute technology 1960 degrees mathematics university 1963 1972 partial differential equations career scientist massachusetts 1970 1977 sri international 1977 1985 digital equipment corporation 1985 2001 2001 joined view california closed 2014 contributions foundations theory distributed systems notable papers papers concepts logical happened relationship failures cited papers field science algorithms solve fundamental distributed systems including temporal logic introduced temporal logic actions contributions language reasoning concurrent systems describes book systems language tools hardware software engineers defines attempt overcome engineers mathematics awards received 2013 acm turing award fundamental contributions theory practice distributed concurrent systems notably concepts logical safety machines sequential consistency 2014 elected fellow acm 2014 received european universities university university 2003 2004 university 2006 2007 2004 received ieee award 2005 paper reaching agreement presence received dijkstra prize honor lecture series 20th principles distributed computing 2001 2008 received ieee john von neumann medal 2011 elected united national academy sciences named acm fellow 2014 fundamental contributions theory practice distributed concurrent systems  
195678	computer	abb brown swedish corporation headquartered operating robotics power heavy electrical equipment automation technology ranked global 500 list 2018 global 500 company 24 abb exchange york stock exchange united history swedish electrical limited company founded manufacturer electrical light generators brown bbc formed charles brown electrical companies producing motors generators abb created result merger bbc 1988 acquired 1967 ceo ceo abb 1996 1990 abb purchased westinghouse control division load control division technologies late 1990s division electricity 2000s 1990s abb purchased engineering headquartered leading firm development conventional fuel power nuclear power supply systems break north american market ceo operation time continuing expansion plans abb purchased process automation 1997 included controls largest acquisition abb history abb bought international 1997 acquired abb fuel operations 2000 nuclear business purchased westinghouse electric company 2000 2000 abb signed contract delivery equipment services north korean nuclear supplied agreement korean energy development organization consortium formed 1995 united japan south korea european union abb formally joint venture named abb power 2000 sold conventional power generation systems power abb nuclear business sold merged westinghouse electric company 2001 abb ranked row 2002 abb company chief executive return 50 pay board called abb chairman pay package size time abb loss 2001 sharp criticism abb building systems business unit sold 2004 private company abb strategy focus power automation technologies abb building systems businesses australia sold 2003 limited building systems services building facilities air quality building automation power distribution management financial liability brought abb 2000s 2006 abb issues brought subsidiaries engineering global august 2007 global sold december 2008 abb acquired mac electrical expand presence western canada oil gas industries 2009 abb automation divisions january 2010 business units automation products robotics divisions divisions – discrete automation motion voltage products process automation division remained addition business automation products division 2010 abb acquired software company vista partners 2011 abb announced acquisition based limited private firm francisco partners sum july 29 2011 acquisition subsequently integrated integrated abb enterprise software product 2011 abb acquired electric usa transaction january 30 2012 abb acquired thomas transaction june 15 2012 completed acquisition commercial industrial wireless technology july 2013 abb acquired power transaction leading global manufacturer solar abb june 30 2018 abb completed acquisition industrial solutions electric global business transaction announced september 25 2017 structure abb largest electricity active sectors core businesses power automation technologies history growth entered phase structure 2014 company corporate division production divisions january 2017 abb implements matrix structure products products division manufactures medium voltage electrical products including electric vehicle infrastructure solar modular distribution automation products protect people electronic equipment electrical cable systems voltage circuit measuring sensing devices control products switches wiring accessories division systems integrate building electrical systems security data communication networks products incorporates solutions unit manufacturing voltage motor control customers include wide range industry utility operations commercial acquisition industrial solutions closed june 2018 abb global position robotics motion robotics motion division products services industrial production includes electric motors generators drives power electronics industrial robots abb installed 300 000 robots 2006 abb manufacturing centre shanghai china wind generators solar power products belong division industrial automation industrial automation division systems control plant optimization industry specific automation applications industries served include oil gas power paper division consists business units control technologies supplier ports measurement analytics oil gas power generation water process industries power power division offers components transmission distribution electricity division incorporates abb manufacturing network circuit voltage equipment digital offers maintenance services division offers systems service power transmission distribution power plants includes electrical automation systems flexible transmission systems voltage direct current systems network management systems division business units voltage products grid automation grid integration 2013 abb joined english power optimization demonstration route charging overhead wires charging accomplished fixed overhead devices located route head isi discussed promising role improved electric transport technology abb abb power division sell december 2018 hitachi abb power grid division japanese biggest deal focus nuclear plants growth market electricity networks implementation abb market change industry ibm ibm player technology industry helped abb managing transition implementing technology core business management chief executive september 2013 board peter elected april 2015 von chairman 2007 chairman 2002 2007 1999 2002 primary largest single stake firm held swedish investment company controlled family holds 48  
197440	computer	fraunhofer society fraunhofer society advancement applied german organization spread germany focusing fields applied science opposed max society basic science 25 000 employees scientists engineers annual budget biggest applied development services europe basic funding fraunhofer society german public federal government fraunhofer society 70 funding earned contract government sponsored projects industry named von fraunhofer scientist engineer goals society organization centers united fraunhofer usa asia october 2010 fraunhofer announced center south america fraunhofer established fraunhofer centre applied march 2012 fraunhofer model called fraunhofer model existence 1973 led society continuing growth model fraunhofer society 70 contracts industry specific government projects 30 budget proportion federal land government support size society budget depends success maximizing revenue funding model applies central society individual institutes serves drive fraunhofer society strategic direction leader applied flexible autonomous approach society institutes fraunhofer society operates 72 institutes units fraunhofer institutes fraunhofer usa addition german institutes fraunhofer society operates based centers american subsidiary fraunhofer usa fraunhofer singapore 2017 fraunhofer society launched direct subsidiary asia history fraunhofer society founded march 26 1949 industry government federal 1952 federal economic declared fraunhofer society university german german foundation max institutes fraunhofer society support applied facilities subject running 1954 society institutes developed 1956 developing facilities cooperation defense 1959 fraunhofer society institutes budget mark 1965 fraunhofer society identified sponsor organization applied 1968 fraunhofer society target public criticism role military 1969 fraunhofer 200 employees 19 institutes budget 33 mark time commission development fraunhofer society planned development fraunhofer society commission developed model society dependent commercial success fraunhofer model model agreed federal cabinet 1973 executive committee central administration moved joint 54 fraunhofer program established gained subsequent 1977 ownership society shared defense 1984 fraunhofer society 500 employees 33 institutes budget 360 mark 1988 defense represented entire fraunhofer society 1989 fraunhofer society 400 employees 37 institutes total budget mark 1991 fraunhofer society challenge integrating numerous east germany branch offices existing institutes fraunhofer society 1993 fraunhofer society total budget mark 1994 society founded based subsidiary fraunhofer usa extend fraunhofer network american clients mission statement 2000 fraunhofer society market customer oriented active sponsor organization institutes applied 1999 fraunhofer fraunhofer venture technology transfer office advance transfer scientific meet growing fraunhofer institutes 2000 2001 institutes centers – society mathematics technology integrated fraunhofer society initiative federal education 2000 marked success fraunhofer integrated circuits audio format developed method digital audio 2002 ownership communications technology gmbh william society transferred fraunhofer society integration fraunhofer society budget time 2003 fraunhofer society headquarters moved building fraunhofer society developed formulated firm specific mission statement fundamental targets desired values guidelines society culture society improving opportunities female employees identify enterprise develop creative potential 2004 fraunhofer electronic media technology fraunhofer integrated circuits gained status independent institute fraunhofer digital media technology topic helped market operational level institutes fraunhofer 2005 institutes fraunhofer cell fraunhofer center electronic technologies founded 2006 fraunhofer institute intelligent analysis systems founded merger institute autonomous intelligent systems institute media communication 2009 institutes converted fraunhofer institutes fraunhofer institute communication processing fraunhofer institute radar frequency technology  
198584	computer	laptop called notebook simply notebook portable personal form factor typically lcd led screen mounted upper keyboard laptops transportation suitable mobile person originally distinction laptops notebooks 2014 difference laptops commonly variety settings education playing games internet personal multimedia laptops combine input output components capabilities desktop including display screen speakers keyboard hard disk drive optical disc drive devices processor memory single unit modern laptops feature integrated built laptops powered internal battery external power supply adapter hardware specifications processor speed memory capacity vary types models price design elements form factor construction vary models depending intended examples specialized models laptops include rugged notebooks construction military applications production cost laptops laptop child organization incorporate features solar charging semi flexible components laptop computers portable computers developed modern laptops originally considered market specialized field applications military sales portable computers evolved modern laptop variety purposes terminology variants terms laptop notebook portable english preferred question original term laptop appears coined 1980s mobile distinguish devices earlier portable computers called term notebook appears gained manufacturers started producing portable devices reducing weight size incorporating display roughly size paper marketed notebooks distinguish laptops late 1990s terms history personal pc feasible 1971 idea portable personal personal portable alan kay xerox parc 1968 1972 paper ibm special machine portable demonstrated 1973 prototype based ibm palm processor ibm commercially portable appeared september 1975 based prototype bit cpu machines accepted increased rapidly laptop sized notebook epson 20 invented patented july 1980 introduced japanese company seiko epson 1981 released july 1982 lcd screen battery calculator size printer chassis size notebook laptop notebook patent portable micro french company officially appeared september 1980 paris portable designed marketed studies developments department request company based intel processor bit equipped central 64 ram keyboard 58 alpha numeric 11 numeric separate blocks 32 character screen floppy disk capacity 00 characters thermal printer speed 28 characters channel channel power supply dimensions 45 45 total mobility operating named released 1981 z80 battery ray tube crt screen dual single density floppy drives hewlett packard hp produced portable computers varying designs period laptops form factor appeared 1980s released australia marketed 150 grid released 1982 nasa military sharp pc released 1983 laptop manufacturer modern design toshiba acceptance pc experts mass market pc portability 1983 input techniques developed included laptops including 1983 ibm 1992 handwriting recognition write 1987 cpus 1990 intel designed minimum power increase battery life portable computers supported dynamic power management features intel amd designs displays reached resolution 1988 color screens started common upgrade 1991 increases resolution screen size occurring frequently introduction 17 screen laptops 2003 hard drives started encouraged introduction drives late 1980s common laptops starting introduction drives 1990 typically physically larger desktop drives optical storage read rom read dvd ray players common laptops 2000s types introduction portable computers late 1970s form changed variety visually distinct legal trademark term notably rarely hard classes usage time sources laptop market continues expand introducing laptops book hp toshiba satellite incorporate laptop computers traditional laptop form traditional laptop screen keyboard screen easily space screen keyboard closed devices form commonly called traditional laptop notebook screen size 11 17 inches measured featured operating windows macos linux traditional laptops common form laptops 1s common performance achieved portable forms laptop designed marketed emphasis portability size weight battery life lighter standard laptops battery life hours introduction netbooks category netbooks basic type screen size fit category notable apple air inexpensive light weight energy efficient form laptop suited wireless communication internet access netbooks commercially 2008 display size short internet device based computing performance netbooks initially sold light weight variants linux operating versions windows xp windows operating systems term machines called inexpensive sold models hybrid trend technological convergence portable industry broad range devices combined features separate device types hybrids 1s emerged crossover devices share tablets laptops devices touchscreen display designed users tablet mode multi touch gestures digital pen devices ability hardware keyboard keyboards devices chassis transforming laptop tablet hybrids keyboard mechanism feature critical components display 1s hybrid form distinguished ability desktop os windows 1s marketed laptop replacement tablets 1s light devices battery life 1s distinguished mainstream tablets feature x86 architecture cpu typically ultra voltage model intel core featured desktop os windows typical laptop ports usb mini 1s designed media consumption device valid desktop laptop ability desktop applications adobe connect multiple peripheral devices mouse keyboard external displays modern surface pro series devices surface book examples modern series computers variant surface rt surface chassis design surface pro arm processors windows rt classify 1s hybrid tablets hybrid laptops mobile operating android include pad devices examples hybrids keyboard design fall category 1s desktop replacement desktop replacement laptop class device intended mobile devices portable laptops intended compact alternatives desktop desktop larger typically classes laptops capable powerful components 15 inch larger display desktop replacement laptops operation time batteries typically shorter laptops rare battery laptops class limited range desktop components provide performance price battery life practice names media center laptops gaming laptops specialized notebook computers overlapping desktop replacement form factor rugged laptop rugged laptop designed operate usage conditions strong extreme temperatures environments rugged laptops designed scratch adapted regular consumer laptop models rugged laptops expensive regular laptops regular consumer design features rugged laptops include keyboard port covers passive cooling displays easily readable frames stronger commercial laptops solid storage devices hard disc drives mounted constant rugged laptops commonly public safety services medical emergency military utilities field service construction mining oil rugged laptops sold organizations individuals rarely marketed retail channels business laptop business laptop laptop designed typically consumer features resolution sound removed device pure productivity hardware basic components laptops function desktop traditionally adapted mobile desktop systems increasingly power originally developed mobile design restrictions power size cooling laptops limit maximum performance laptop compared desktop components difference increasingly laptop components intended exception components battery dvd drive major differences laptops desktop computers tower desktop computers designed hard disks sound cards ram components compact laptop components intel laptop manufacturers created common building block standard laptop address caused lack standards upgrade components sections differences distinguishing features laptop components comparison desktop personal display modern laptops feature larger color active matrix display based led lighting resolutions pixels models led based lighting offer lesser power consumption increased brightness netbooks screen typically resolution netbooks screen standard notebook resolutions resolution display items fit time improving user ability resolutions screens resolution serve display graphics increasing usable introduction pro retina display 2012 increase availability resolution displays systems typical 15 inch screens resolutions external displays connected laptops models mini handle central processing unit laptop central processing unit cpu advanced power saving features produces heat intended purely desktop typically laptop cpus processor cores core models price mainstream performance performance difference laptop desktop cpus fastest core desktop cpus fastest core laptop processors power consumption heat generation fastest laptop processors 56 heat fastest desktop processors 150 wide range cpus designed laptops intel amd manufacturers x86 architectures motorola ibm produced chips powerpc based apple laptops laptops removable cpus common trend lighter models laptops cpu motherboard universal laptops desktop processor laptop version performance gains cost weight heat limited battery life practice 2013 desktop laptop cpus impossible thermal operating mode laptops close limits operating temperature increase possibility improving cooling laptop extremely difficult implement graphical processing unit laptops graphical processing unit gpu integrated cpu power space introduced intel core series mobile processors 2010 accelerated processing unit processors amd prior machines graphics processors integrated machines separate graphics processor laptops separate graphics processor limited utility gaming professional applications involving 3d graphics capabilities cpu integrated graphics dedicated graphics processors laptops intended gaming professional 3d dedicated dual graphics processors motherboard internal expansion card 2011 involve graphics demand performance dedicated graphics processor power efficient integrated graphics processor nvidia sort graphics memory laptops dual memory module memory modules size desktop accessible laptop ease locations intended user replacement laptops memory slots lowest models models mobile engineering workstations models intended gaming slots mid range laptops factory equipped ram netbooks commonly equipped ram laptops memory motherboard space laptop chassis design memory easily upgraded internal storage traditionally laptops hard disk drive main volatile storage proved mobile devices power consumption heat production presence moving damage drive data stored laptop physically drop advent flash memory technology mid laptops compact power efficient fast solid drives eliminated hazard drive data caused laptop physical laptops inch drives version inch desktop drive form factor inch compact power efficient produce heat time capacity slower data transfer rate compact laptops support inch trade designed feature traditional inch laptop specific card form factor data transfer rate power consumption failure rate larger capacity compared cost laptops single inch drive laptops screen wider 15 inches house drives laptops support hybrid mode combining inch drive typically data drive typically capacity faster read write speed operating partition located increase laptop performance increase performance 16 32 cache drive compatible os laptops limited drive standard shape requires proprietary card laptops limited space installed availability cloud storage services storing user data prominent approach variety external data storage servers support technology attached virtually laptop interfaces usb wired wireless network increase space storage data laptops incorporate card reader memory cards digital cameras typically cards enables users download digital pictures card laptop enabling card contents space pictures removable media drive optical disc drives capable playing compact ray universal sized models 2010s disc drive remains common laptops screen wider trend lighter machines gradually drives players drives uncommon compact laptops netbooks laptop optical drives tend follow standard form factor standard replace optical drive model laptop models possibility replace optical drive hard drive extra space optical drive inputs keyboard enter data commands function called control position screen integrated keyboard typing external keyboard mouse connected usb port bluetooth technology advent support touch input screens 2010 era operating systems windows touchscreen displays models models communicate people moving images sound google software laptops typically usb ports microphone jack external laptops card reader reading digital camera cards input output ports typical laptop usb ports external monitor port mini audio port form single socket common connect external displays 2014 era laptop single mini utilizing multi stream transport technology apple 2015 version ports single usb port port charging connecting variety devices google updated version pixel transition trend usb keeping usb type ports compatibility devices common 2000s decade ethernet network port rarely modern laptops widespread wireless networking wi legacy ports keyboard mouse port serial port parallel port models increasingly rare apple systems laptops ports usb laptops typically jack user connect external speaker systems music audio expansion cards pc card slot expansion laptops adding removing functionality laptop powered increasingly rare introduction usb internal ethernet wi wireless cellular implemented internal expansion cards accessible access cover laptop standard cards express mini sizes laptops uncommon micro functionality express mini card slots allowing slots based solid drives battery power supply 2016 era laptops batteries models technology technologies replaced metal batteries battery life highly variable model workload range hour day battery performance gradually decreases time substantial reduction capacity typically regular depending charging pattern design battery innovations laptops batteries situations battery provide 24 hours continued operation assuming average power consumption levels hp ultra capacity battery laptop battery external power supply wall power supply outputs voltage typically range power supply external connected laptop cable charge battery power laptop simultaneously battery laptop continues power supplied external power supply avoiding battery battery shorter period time laptop typically adds weight laptop models lighter 2016 era laptops smart battery battery pack built battery management smart battery internally measure voltage current charge level health parameters cells cooling heat operation difficult remove compact internal space laptop laptops heat components cooled hot components deep device space air heat modern laptops rely heat rapidly heat edges device compact fan heat sink cooling heat device operator rear device multiple air paths device soft surface chair believed designs metal apple pro air employ machine heat sink allowing cooling heat device core secondary device temperature monitoring reduce performance emergency unable heat laptop left running carrying cooling external fans laptops reduce operating temperatures station station referred simply laptop multiple ports expansion slots fixed removable drives laptop connects station typically single proprietary station popular laptop corporate computing environment possibility station transform laptop featured desktop replacement allowing easy release ability road employees travel frequently office ports position laptop cheaper passive device port devices laptop usb charging laptop charging laptop laptop mobile storage charge multiple laptops netbooks tablet computers time schools replaced traditional static labs desktop equipped tower computers plug individual charge devices students building access equipment laptop charging protect organized schools plan designs prime targets items laptops netbooks tablets portable items school laptops easily types designed constructed protect steel laptops remain locked moved mounted locked floor prevent laptops solar panels laptops solar panels generate solar power laptop operate laptop child initiative released laptop tested operated solar panels designing laptop features operate electricity energy resources generate total samsung designed notebook sold commercially market accessories common laptops laptop laptop laptop degree protection distinguished flexible commonly laptop provide measure metal security metal offer protection common laptop device helps internal temperature laptop common active method involves electric fans draw heat laptop passive method involve laptop type pad receive air flow stores sell laptop enable person laptop features features models laptops current laptops include comparison desktops advantages portability feature mentioned comparison laptops desktop pcs physical portability laptop office lecture libraries clients locations meeting portability enables laptop users device living family portability offers distinct advantages advantages laptops disadvantages compared desktop pcs laptops disadvantages performance performance mainstream desktops laptop comparable cost laptops rapidly desktops laptops remain expensive desktop pcs performance level upper limits performance laptops remain desktops workstation class machines processor edge features desktops underlying technology adapted laptops internet typical office applications majority time waiting user input laptops netbooks fast users laptops powerful resolution movie 3d gaming video editing encoding laptop processors dealing database engineering financial software virtualization laptops mobile versions processors power desktop chips performance manufacturers performance desktop cpus laptops laptops limited compared desktops standardized hard drives memory upgraded easily optical drives internal expansion cards upgraded follow industry standard internal components including motherboard cpu graphics intended intel laptop manufacturers created common building block standard laptop address caused lack standards reasons limited technical economic industry wide standard form factor laptops major laptop manufacturer proprietary design construction result laptops difficult upgrade repair costs devices sound cards network hard optical drives numerous peripherals laptop portability add cables boxes setup laptop health effects laptops flat keyboard devices usage separate external keyboards devices recommended prevent time connected laptop easily usb station health standards require keyboards laptop integrated screen requires users view larger quality external screen connected laptop provide additional screen space solution stand study university york researchers heat generated laptops increase temperature users balancing count risk study included roughly 21 35 position required balance laptop increase temperature determine 2010 study 29 published laptops experienced temperatures increased heat increase offset laptop increase common practical solution laptop table desk book body laptop solution cooling unit laptop usb powered consist hard cooling entire assembly designed laptop laptop remaining touch greatly reduces laptop heat heat generated laptop laptops exceptions equipment portability laptops subject physical damage desktops components screen power power gradually ordinary replaced liquid keyboard minor desktop basic keyboard costs 20 damage laptop result costly repair entire replacement laptops study laptop times break desktop maintain laptop recommended clean months dust food cleaning kits consist lcd screen keyboard compressed air dust cooling fan cleaning solution clean laptop damage replacement original external components expensive proprietary power jack cost replacement require extensive laptop inexpensive purchased separately larger expensive components video display cable power cable pass connect motherboard screen eventually break repeated closing cables purchased original manufacturer separate entire lcd panel price hundreds popular models exists repair costs failed motherboard lcd panel laptop party vendors cooling laptops rely extremely compact cooling systems involving fan heat sink fail caused dust laptops type removable dust collection filter air cooling systems gradually heat noise pass laptop starts idle load levels dust fan heat sink meet removed cleaning time compressed air dust remove device cooling fans complete required clean laptop maintenance regular cleaning heat sink compressed air prevent dust build heat sink laptops difficult average user components sensitive battery life battery life limited capacity time eventually requiring replacement battery typically stores energy laptop hours depending usage configuration power management settings battery energy storage minutes battery easily capacity model charging time laptops usual removable battery brought service center manufacturer party laptop service center battery replaced replacement batteries expensive security privacy valuable commonly portable easy type travel bag laptops day laptops missing cost business personal data identity credit card privacy times laptop physical protection laptops data contained laptops security slot desk object security cable lock addition modern operating systems party software offer disk encryption functionality data laptop hard drive key 2015 laptops additional security elements including eye recognition software scanning components software laptops laptop engineered people locate recover laptop event setting laptop firmware protection firmware setup internal protection accessing loading operating user account operating additional security measures user lost laptops companies decrease variety companies software solutions laptop recovery 2010s common availability laptops raised privacy concerns school pennsylvania 2010 school issued laptops loaded special software enabled staff schools secret students students laptops sales manufacturers laptop brands manufacturers major brands offer notebooks classes listed adjacent box major brands offer service support including executed documentation driver remain laptop model produced service support brand image laptops major brands expensive laptops brands brands class laptops gaming laptops performance laptops hp netbooks laptops children brands including major design manufacture laptops original design manufacturers design models laptops brands choose models included 2006 major manufactured laptops largest 30 market share identical models major label profile house brand market share battery powered portable computers worldwide market share 1986 laptops increasingly popular business personal notebook pcs shipped worldwide 2007 growth 33 compared 2006 2008 estimated notebooks sold grow 2009 quarter 2008 time worldwide notebook pc desktops 38 units 38 units 2005 time notebooks desktops month time notebooks sold average desktops sold average operating systems windows laptops average selling price decline 2008 2009 cost netbooks drawing average retail stores august 2008 2009 january february windows machines fell months apple macos laptop 12 laptop list materials laptop lead humans laptop concerns discarded laptops health risk environment damage strong electrical electronic equipment europe laptop computers law environmental protection agency discarded laptop computers laptop computers process method involves physical separation components laptop components materials metal complex items require advanced materials separation circuit boards hard drives batteries corporate laptop require additional process data data process ensures data stored laptops hard drive retrieved overview data protection environmental laws applicable laptop data data protection 1998 eu privacy 2016 financial conduct data security electronic electrical equipment bank security 21 11 health insurance portability 800 add 800 identity assumption data security safe grid days space program commercial laptop space macintosh portable 1991 space mission 43 apple laptop computers continue duration flight international space station 2011 100 laptops international space station purchased public modifications effectively environment updating cooling systems function hot air air pressure laptops operating usage environments conditions strong extreme temperatures conditions space custom designed task commercial hardware  
203619	computer	handwriting recognition ability receive interpret handwritten input sources paper documents photographs touch screens devices image written piece paper optical scanning optical character recognition intelligent word recognition alternatively movements pen pen based screen surface easier task handwriting recognition optical character recognition complete handwriting recognition handles performs correct segmentation characters recognition handwriting recognition involves automatic conversion image letter codes usable processing applications data form regarded static representation handwriting handwriting recognition difficult people handwriting ocr engines focused machine printed hand printed written capital letters traditional techniques domain reduction techniques domain helps increase accuracy handwriting recognition systems form field code characters reduce primary techniques character extraction character recognition involves scanning form document written individual characters contained scanned image extracted tools exist capable performing step common step common characters connected returned single image characters major recognition stage algorithms reduce risk connected characters character recognition extraction individual characters occurs recognition engine identify character recognition techniques feature extraction feature extraction fashion neural network programmers manually determine properties properties approach recognizer control properties identification approach requires development time neural network properties learned automatically modern techniques traditional techniques focus individual characters recognition modern techniques focus recognizing characters focus machine learning techniques learn visual features avoiding limiting feature engineering art methods convolutional networks extract visual features overlapping windows image rnn produce character probabilities recognition handwriting recognition involves automatic conversion written special sensor pen movements pen pen switching data digital ink regarded digital representation handwriting signal converted letter codes usable processing applications elements handwriting recognition interface typically include process process online handwriting recognition broken steps purpose input data affect recognition concerns speed accuracy consists normalization sampling smoothing step feature extraction dimensional vector field received algorithms dimensional data extracted purpose step recognition model data include pen pressure writing direction step classification step models map extracted features classes identifying characters features represent hardware commercial products incorporating handwriting recognition replacement keyboard input introduced 1980s examples include handwriting terminals sale terminal advent consumer market personal computers commercial products introduced replace keyboard mouse personal single handwriting commercially tablet type portable grid systems released september 1989 operating based dos 1990s hardware makers including ibm released tablet computers running operating developed handwriting recognition gestures facilities party software ibm tablet ibm handwriting recognition recognition ported windows pen computing ibm pen os commercially successful electronics allowed computing power handwriting recognition fit form factor tablet computers handwriting recognition input method hand held provide written input apple newton public advantage user interface device commercial success software learn user writing patterns time release newton os handwriting recognition greatly improved including unique features current recognition systems error correction negative apple newton feature ported mac os form macintosh palm launched successful series based recognition improved defining set stroke forms character possibility input stroke patterns increase learning curve user handwriting recognition patent held xerox palm replaced licensed version handwriting recognition supporting forms pre xerox patent court finding parties involved subsequently patents palm os tablet pc special notebook tablet user unit screen operating recognizes handwriting converts windows vista windows include features learn user writing patterns vocabulary english japanese chinese traditional chinese simplified korean features include samples user handwriting accuracy recognition distinct advanced handwriting recognition employed windows mobile os handwriting recognition input form public achieved widespread desktop computers laptops accepted keyboard input faster reliable offer handwriting input accepting natural handwriting accuracy people simple screen keyboard efficient software initial software modules understand print handwriting characters separated author applied pattern recognition program 1962 commercial examples companies communications intelligence corporation ibm 1990s companies international systems understand handwriting recognition based russia founded scientist founded students stanford university deployed apple newton systems commercially windows operating acquired motorola 1993 develop chinese handwriting recognition predictive systems motorola acquired 1997 handwriting recognition team formed division acquired acquired handwriting recognition digital ink technologies developed 1999 wolfram mathematica handwriting recognition function handwriting recognition active community biggest conferences handwriting recognition international conference handwriting recognition held numbered international conference document analysis recognition held numbered conferences ieee active include 2009 2009 recurrent neural networks deep feedforward neural networks developed lab international handwriting competitions directional multi dimensional short term memory lstm competitions connected handwriting recognition 2009 international conference document analysis recognition prior knowledge languages french learned gpu based deep learning methods feedforward networks dan colleagues 2011 offline chinese handwriting recognition contest neural networks artificial pattern achieve human competitive performance famous handwritten digits colleagues references wikipedia wikipedia explanation generate tags template  
205599	computer	stephen richard steve born january scientist originally united kingdom based united career author codice foundation standard command interfaces unix bachelor degree mathematics king college london england science mathematics college cambridge subsequently algol 68 compiler university cambridge laboratory algol cambridge spent bell labs edition unix team wrote codice unix book unix intended bell labs senior engineering management positions silicon graphics digital equipment corporation sun microsystems cisco systems 2000 2002 president association computing machinery computing awarded acm award 2008 fellow organization 2005 fellow royal society chief technology venture partners venture capital firm based park california 2014 chair advisory board acm queue magazine helped president acm  
206586	computer	convergence phenomenon telecommunication media industry integrate services content offerings communication core technology includes cultural society business service technology content aspects considered practical application concrete examples internet digital convergence media convergence applications telecommunication article describes wide aspects convergence merging technologies cognitive technologies convergence media technology definitions convergence deep integration knowledge tools relevant activities human activity common goal society answer questions change respective physical social respective trends opportunities phase process 2002 2016 defines convergence policy initiative media cross national perspective integration integration defined process transformation measure degree diverse media phone data broadcast technology combined single purpose network architecture platform defined physical infrastructure content medium van suggests breaking signals bytes consisting convergence defined 1998 trend evolution technology services industry structures convergence defined coming telecommunications computing single digital bit stream stands statement convergence forms media technology digital computers media technological convergence technology technological performing tasks digital convergence refers convergence industries technologies telecommunication consumer electronics entertainment separate technologies voice telephony features data productivity applications video share resources interact telecommunications convergence called network convergence describes emerging telecommunications technologies network architecture multiple communications services single network involves distinct media telephony data communications common interfaces single devices smart phones phone calls search media convergence computing technologies media content media companies communication networks result evolution internet activities products services emerged digital media space closely linked process media convergence developments media communication sector term media experts view simply activity social life business government art health education increasingly carried digital media spaces growing network communication technology devices included topic basis networks operating systems communicate protocols services voip smart tend replace technologies markets ip based convergence result service demand market technology public owned common ip based services access independent dependent service access dependent history media technological convergence communication networks designed carry types independently media television radio networks passive convergence telecommunication technology manipulation forms voice data video telecommunication changed capacity possibility audience passive audience audience historical convergence mobile telephony internet term properly applies marketing history fixed mobile telephony offered operators joined products fixed mobile operators 1990s independent companies organization marketed products sold independently 1990s implicit explicit assumption media replace media internet replace digital broadcast networks favor era narrow suggests government regulation media monolithic mass media array industries media hold centralized combined forces technology human nature ultimately stronger hand laws media companies claimed media absorbed completely emerging technologies george claims industry television industry sense automobile word processing program cad program board digital desktop publishing machine believes computers transform mass culture media companies media convergence dot bubble concept portable books 1994 news corporations increasingly obvious model based replication internet contents written print radio television sufficient rise digital communication late 20th century media organizations individuals deliver audio video material wired wireless fiber optic connections time inspired media organizations explore multimedia delivery digital convergence news media called researcher https staff 1997 book multi level media modes communication adapt demands technologies changing create learn interact technological fields nanotechnology technology cognitive science 2014 popular term technologies introduced public publication technologies improving human performance report sponsored national science foundation offered concept nanotechnology robotics 2000 future evolution bodies human genetic robotic processes science molecular future nanotechnology robotics artificial intelligence transform robotics artificial intelligence nanotechnology coined technology organization bits atoms neurons science technology fields comprehensive term convergence knowledge technology society 2013 edited reference science technology convergence 2016 defining concept convergence science technology medical fields published principles methods facilitate convergence 2015 examples technology implications solutions include fixed mobile technologies examples services include technologies integrate fixed mobile deliver solutions technologies include convergence appliances media expect eventually access media content device black box media business practice identify black box provide media caused black boxes invented abandoned individual left numerous devices perform task dedicated task video games console subsequently dvd players goal black box theory creates technological convergence experimental nature led consumers technologies additional functions harder specific device people watch duration time examples technological convergence consumers specialized media device black box devices perform task suit current situation 2002 report explained email school devices designed suit accessing content depending context creation black boxes intended perform tasks trend devices suit consumer physical position variable utility portable technology convergence occurs mobile devices incorporate multimedia services gps internet access mobile telephony single device rise termed smartphone device designed remove carry multiple devices convergence media occurs multiple products form product advantages black box idea technology technical pieces people mail internet phone computers internet mail addition mobile phones incorporate digital cameras players voice devices type convergence popular consumer features space media remaining competitive convergence initial forms devices frequently functional reliable component mobile phone browser render correctly supporting rendering methods iphone browser supporting flash content functions single device ability device serve original function decreases technological convergence holds potential improvement life believes technology potential social control technology evolved companies converge technologies create demand products includes phone companies integrating phones mid 20th century television technologies movies radio television mobile phone industry internet phone calls personal computers technologies combine multiple technologies mobile phones feature cameras hold images videos music media manufacturers integrate advanced features video recording gps data storage security mechanisms traditional convergence internet role internet changed original communication tool easier faster access services broadband connection television radio media accessing news entertainment media people read news internet convergence internet conventional popular 2010s smart referred connected hybrid confused internet smart current trend integration internet features modern television sets set boxes technological convergence computers television sets set boxes devices focus online interactive media internet content demand streaming media focus traditional broadcast media previous generations television sets set boxes digital convergence digital convergence innovations media sources content time enables convergence access devices content industry operations strategy type technological convergence creates opportunities product development growth strategies digital product companies individual content producers youtube video sharing platform convergence demonstrated internet devices smart television camera youtube application digital content setup called devices connect central hub smart pc internet serves tools social networking create unique products services horizontal integration digital convergence phenomena convergence types digital contents convergence impact people style hot trend digital convergence content personal user generated content professional copyright protected content personal music videos combine user generated photos music german startup gmbh developed enables users create personal music videos popular music share social communities facebook convergence convergence global dynamic companies sectors brought competitors traditional boundaries industry technology dominated convergence traditional products services types companies relevant array array technology developments convergence including mobility analytics cloud digital social networks force convergence growth opportunity companies execute list competitors dramatically rules convergence lines companies original markets instance mobile services increasingly automobile companies device manufacturers sell music video books consumer device companies search advertising companies telecommunications companies media companies vice versa financial services companies vice versa companies companies mobile phone usage dramatically enabling users online watch videos media convergence media convergence refers merging media product process convergence flow content multiple media platforms cooperation multiple media industries behaviour media search kinds entertainment experiences convergence technological economic social cultural global media convergence technological shift technological process includes industrial cultural social paradigms encourage consumer seek convergence simply individual consumers interact social level media platforms create experiences forms media content connect consumers corporate producers media accessible argued media convergence takes technology content consumer business model management level argue media convergence matter evolution phenomenon convergence digital media mobile app stores provide vendor lock systems technology platforms technology usage common communication protocols digital media media content offerings space media advances technology bring ability technological convergence believes alter social effects virtual social physical merging predicted late 1980s time rom digital revolution media media increasingly replaced internet enabling consumers freedom access preferred media content easily rate dot bubble 1990s water talk digital revolution society idea media convergence emerged key reference established media companies attempt future entertainment industry digital paradigm shift media increasingly replaced media convergence paradigm emerging suggests media interact complex predicted paradigm shift digital revolution assumed media change dot market imagine changed real aspects current media environment industry increasingly media convergence sense era change respect media convergence theory essentially concept meaning media convergence reality shift technology relationships industries technologies markets media convergence media industries operate media consumers process news entertainment media convergence essentially process outcome single black box controls flow media media channels increasing portability telecommunications computing technologies entered era media constantly media convergence requires media companies existing assumptions media consumer view affect marketing programming decisions media producers respond newly consumers conversely hardware media content media developed brands offer content forms examples star wars matrix films books video games action figures expansion concept creation ideas contrast hardware accommodate media convergence hardware specific function scholars argue flow cross media suggests films video game media convergence people media production industry media industry continues sell story media films games data create image media created individually teams character visual media media industry addition convergence happen game consoles produced consoles faster create game scratch industry media forms virtual reality major international news service created news popular online virtual reality environment life accessed january 2008 life emerged 3d virtual reality millions created virtual representations live altered personal flight reality altered real money spent 24 hours time january 2008 setting real life virtual version real news service covering domain life life 11 january 2008 media convergence digital era forms media media companies media convergence technological merging media channels – radio programs movies internet laptops smartphones discussed media culture convergence technology late radio corporation america purchased machine company introduced machines receive radio play recorded music radio lost people started television music technology advances convergence media change definition media convergence cross platform media companies involves media cable phone television air satellite cable internet access corporate consumer media choices benefit company cut costs maximize stated article convergence culture media mark convergence production consumption media companies channels technologies expression convergence aspects life play local global social identity convergence culture determines convergence culture flow content multiple media platforms cooperation multiple media industries behavior media search kinds entertainment experiences convergence culture factor convergence culture introduces stories arguments form media defined process integral elements fiction multiple delivery channels purpose creating unified entertainment experience ideally medium unique contribution story instance matrix starts film convergence culture constrained form story told movies animated shorts video games books media platforms online created track story fan films discussion social media form matrix online platforms convergence culture started film expanded type media images appeared cnn coverage anti american september 11 association links project convergence culture culture average people access types media fans consumers participate creation content companies advantage search feedback customers social media sharing sites youtube marketing entertainment convergence culture interact news access news multiple levels media radio internet internet people report news independent accessed people convergence news larger scale instance photographs abu photos shared eventually internet led breaking news story internet media media convergence culture cell phone convergence social function cell phone technology technological advancement cell phones function phone internet connection video players players gaming camera 2004 india edge enabled mobile phones live video streaming facility social movements integration social movements potential strategies social movements age media convergence internet design power structure internet designed avoid applications mexico campaign land rights influential age defines movement popular press construct social movement internet observed continues organize social movements global scale sophisticated analysis maps links websites seeks identify network hundreds global majority social movement organized targets campaign global successful social movement online support street wrote social media social media social movements organization online offline study age media convergence survey technology news concluded focus reported media convergence viewing online story based news consumption students interactive features online news media convergence examples regulation voip federal communications commission decide voip internet telephony technology growing changing addition growth set regulation voip promote competition telecommunication industry telecommunication service service growth media historically telecommunication subject regulation california concerned increasing popularity internet telephony eventually funding universal service fund attempt traditional role common carrier technology 2005 suggests federal bodies access impact speed internet telephony market grows hand technology voip feature telecommunication fixed model build hand service internet replaced telecommunication service affect entire economy convergence raised classification telecommunications services lines data transmission voice media transmission task classify segments telecommunication sector traditionally telecommunication regulation focused operation physical infrastructure networks access network content telecommunication content considered private contrast film television contents distribution audience regulation industry senior entire industry pay percent advertising money authority advertising standards authority government setting media industry premises media communications concerns change media media medium features characteristics internet medium form – voice data video regulation media radio television regulation channels internet hand capacity design communication content producers fundamental basis classification regulation terms market failure public electronic foundation founded 1990 profit organization speech privacy innovation consumer rights digital copyright protect digital content producers consumers emerging trends communications network emerged issue 2004 set reasons adapt neutral network model networks neutral network risk future providing broadband application development neutral network fair competition application bias applications reasons investment enhance innovation broadband technology services efforts infrastructure barrier negative factor achieving effective competition argues ip telephony application infrastructure internet telephony network fair competition michael internet designed creating prevent government corporation controlling designed users ideas technologies reasons application infrastructure separately layered model proposed supported layered model telecommunications industry convergence services researchers layered approach technology create challenges key layered model reflects reality network architecture current business model layered model consists access layer – physical infrastructure copper wires cable fiber optic transport layer – provider service application layer – interface data users content layer – layer users convergence technologies layered policy model future communications combines layered model network principle future media industry messaging combination services include integrate voice voice providers include bubble motion operators launched services combine mobile messaging presence services exist send messages phone standard rates messages converted spoken language service popular america fixed mobile enable reception formats voice companies including consumer companies media consumers contact voice video april 2008 launched voice enabled adding voice functionality codes type convergence helpful media companies develop consistent contact strategy consumer popular relevant include messaging contact possibility consumers avoid multiple voice calls simple merge reception formats consumer message received mobile mobile service refers ability purchase mobile phone services ability access voice internet audio video leading edge technologies provide ability transfer wireless link variety speeds distances conditions multi play telecommunications multi play marketing term describing telecommunication services internet access television telephone mobile phone service traditionally offered services multi play phrase terms play voice video data play voice video data wireless specific meaning dual play service marketing term services speed internet digital subscriber telephone service single broadband connection phone companies speed internet cable service single broadband connection cable companies convergence concern underlying communication infrastructure play service communication services packaged allowing consumers purchase internet telephony broadband cable market transforming pay providers considered space customer consumer business customers seek rich content multi devices products services including demand video digital speed internet voip wireless applications broadband companies play service combines play service broadband internet access television telephone wireless service service set referred grand slam fundamental aspect play broadband convergence players involved largest global service providers connect wires cables startup service providers opportunities services – telephony cable television combine industries merger mobile company offering play cable television broadband internet telephone mobile telephone services network century lan convergence rapidly integrated routers wireless access users hard identify box connect computers internet service term combined device  
209673	computer	born december 1936 main developers theory statistical learning inventor support vector machine method support vector clustering algorithm life education born union received master degree mathematics university statistics institute control sciences 1964 institute 1961 1990 head science department academic career 1990 moved usa joined adaptive systems department bell labs jersey colleagues developed theory support vector machine demonstrated performance machine learning community including handwriting recognition image processing department laboratories lucent technologies 1996 2000 neural networks expert developed support vector clustering enabled algorithm inputs labels data clustering applications left 2002 joined laboratories princeton jersey machine learning holds professor science statistics position royal university london 1995 position professor science columbia university york city 2003 february 2017 publications cited close 000 times book statistical learning theory cited close 60 000 times november 25 2014 joined facebook 2016 joined labs honors awards national academy engineering 2006 received 2005 award 2008 paris award 2010 neural networks pioneer award 2012 ieee award 2012 medal cognitive science institute 2013 prize foundation 2014 award 2017 ieee john von neumann medal 2018 received medal university london delivered lecture  
219558	computer	network segment portion network nature extent segment depends nature network device devices interconnect stations ethernet defining ieee 802 standards ethernet network segment electrical connection devices shared medium original ethernet segment correspond single cable devices evolution ethernet multiple network segments connected rule ethernet form larger collision domain pair ethernet electrical segments joined ethernet corresponds extent osi layer network equivalent collision domain rule applies collision domain switches bridges multiple layer segments combined common layer segment nodes communicate mac addressing layer segment equivalent broadcast domain traffic layer segment separated virtually distinct virtual vlan forms logical layer segment layer segment layer segment ip network called formed nodes sharing network prefix defined ip addresses network mask communication layer requires router hosts communicate layer segment connects corresponds underlying layer segment multiple single layer segment  
220314	computer	science instruction pipelining technique implementing instruction level parallelism single processor pipelining attempts processor instruction incoming instructions series sequential steps pipeline performed processor units instructions processed parallel faster cpu throughput clock rate increase latency overhead pipelining process concept motivation central processing units cpus driven clock clock pulse logic cpu successive perform sequence reasons entire execution machine instruction happen pipelining effects happen time dependent steps instruction clock pulse register calculation time stable outputs register calculation complete reading instruction memory unit time instruction writes result memory unit steps dependent steps varies machine architecture pipeline dependent steps step implemented simpler circuitry processor clock faster pipelines called processor pipelined fetch instruction cycle instructions conditions require delays instructions processor pipelined history pipelining project ibm project simple version earlier 1939 pipelining late 1970s supercomputers vector processors array processors supercomputers series built control data corporation main cray headed cray cray developed supercomputers pipelining add functions star technologies parallelism pipelined functions parallel developed 1984 star technologies pipelined divide circuit developed james mid 1980s pipelining companies pipelining limited supercomputers 1976 amdahl corporation series purpose mainframe step pipeline patented branch prediction circuit pipelining innovations implemented instruction unit microprocessors hazards model sequential execution assumes instruction assumption true pipelined processor situation expected result hazard imagine register instructions processor processor steps listed initial instruction fetched time execution complete instruction fetched complete instruction step register write instruction step instruction decode register fetch time instruction code hazard writing programs compiled language concerns compiler designed generate machine code avoids hazards dsp risc processors documentation programmers avoid dependencies adjacent adjacent instructions called delay slots instruction desired processor counter intuitively programmer processor ensure correct programmer insert code partly advantages pipelining solutions pipelined processors commonly techniques expected programmer assumes instruction branches branch normal instruction sequence involves hazard processor branch single time cycle pipeline continue instructions sequentially instructions allowed programmer control program conditional branch processor branch depending calculation occurred processors attempt branch prediction execute program sequences execution assuming branch incorrect guess processor implementation branch prediction correct predictions minimize performance penalty branching branches predicted create processor pipeline incorrect code path begun execution execution correct location programs written pipelined processor avoid branching minimize loss speed programmer handle usual sequential execution branch detecting unusual programs analyze code coverage programmer measure branches executed gain optimize code generic pipeline stages fetch decode execute write gray box list instructions waiting executed gray box list instructions execution completed middle white box pipeline execution pipeline bubble pipelined processor deal hazards creating bubble pipeline cycles cycle processor decode instruction processor determines decoding depends produced execution green instruction green instruction execute stage write stage scheduled instruction cycle fetch stage blue instruction fetched cycle cycle red instruction bubble blue processor decode circuitry idle cycle execute circuitry idle cycle write circuitry idle cycle bubble moves pipeline cycle normal execution cycle late cycles cycle completely execute instructions colors  
222349	computer	classification architectures proposed michael 1966 classification tool design modern processors rise multiprocessing central processing units cpus context evolved extension classification defined based concurrent instruction control streams data streams architecture single instruction stream single data stream sequential parallelism instruction data streams single control unit single instruction stream memory generates control signals direct single processing element operate single data stream operation time examples architecture traditional machines personal computers pcs 2010 pcs multiple cores mainframe computers single instruction stream multiple data streams simd single instruction operates multiple data streams instructions executed sequentially pipelining parallel multiple functional units single instruction multiple threads execution model parallel computing single instruction multiple data simd combined multithreading distinct classification subset simd nvidia commonly term marketing materials argues supposed nvidia architecture multiple instruction streams single data stream multiple instructions operate data stream uncommon architecture fault tolerance heterogeneous systems operate data stream result examples include space flight control multiple instruction streams multiple data streams mimd multiple autonomous processors simultaneously executing instructions data mimd architectures include multi core superscalar processors distributed systems shared memory space distributed memory space diagram comparing architectures visually processing unit core multi core divisions supercomputers based mimd architecture divide mimd category categories considered single program multiple data streams multiple autonomous processors simultaneously executing program independent simd data termed single process multiple data terminology technically incorrect parallel execution model assumes multiple processors executing program common style parallel programming model term proposed manager project team multiple programs multiple data streams multiple autonomous processors simultaneously operating independent programs typically systems pick node host explicit host node programming model manager manager strategy runs program data nodes program nodes return manager sony game console processor  
222573	computer	voxel represents regular grid dimensional space pixels typically position coordinates explicitly encoded values rendering systems position voxel based position relative position data structure single image contrast pixels explicitly represented coordinates vertices direct consequence difference efficiently represent simple 3d structures filled space excel representing sampled spaces filled frequently visualization analysis medical scientific data displays resolution display word voxel originated word pixel representing volume representing element   element include pixel rendering volume direct volume rendering extraction iso surfaces follow contours threshold values algorithm extraction methods exist ray ray applied voxel data 2d raster graphics monitor incremental error technique involves raster graphics simply pixel display scene tracking error term determine step typical implementation pixel display starting screen buffer voxel reached display buffer previous connected previous screen color values major voxel transformation applied severe aliasing advantage ability integer calculations cpu hardware acceleration 1990s video games employed graphics technique effects reflection mapping terrain rendering graphics engine combination ray engine render texture mapping engine render objects engine programming games manual graphics engine engine water engine special effects engine cited voxel technology game model dimensional volumes models ground surface ground objects modeled texture mapped developed term voxel engine applied games commonly referred ray engine engine engine technology game engine referred engine engine purely software based rely hardware acceleration 3d graphics card john iii engine cited lack graphics cards designed rendering requiring software rendered commercial flight simulation based voxel technology proprietary voxel space engine developed company written assembly language create rendering technique allowed detailed realistic terrain compared simulations based vector graphics time voxel data voxel represents single sample data dimensional grid data consist single piece data multiple pieces data color addition voxel represents single grid volume space voxel represented voxel based dataset depending type data intended dataset missing reconstructed approximated interpolation voxel represent properties ct scans values units material rays types acquired mri ultrasound multiple scalar values essentially vector tensor data ultrasound scans mode data density flow rate captured separate channels data voxel positions provide benefit precision depth reality typically data sets manage bandwidth common computers efficient compression manipulation data files interactive visualization enabled consumer market computers values 3d rendering surface normal vector color common include imaging medicine representation terrain games simulations voxel terrain ability represent 3d terrain features features represented layer data represented leaving filled volume voxel editors scientific volume visualization require modifying actual voxel data voxel editors create art 3d pixel art models voxel based games editors focused single approach voxel editing mix approaches common approaches voxel editors games game developers house editors released public games publicly editors created players purpose voxel editors voxel editors tied specific games engines alternatives traditional 3d vector modeling extensions generalization voxel dynamic voxel dataset image sequence represents 3d space dimension time image series 100 frames volume image equivalent 3d image 2d cross image frame storage manipulation data requires amounts memory representation analysis systems  
224786	computer	formal definition 16 bit instruction set architecture isa including required optional components military standard document 1980 addition core isa definition defines optional instructions fpu mmu standard define implementation details processor supports 16 bit memory core standard standard defines optional memory management unit 16 bit memory mapping registers space defining separate instruction data spaces memory access control instructions 16 bits 16 bit extension standard 16 purpose 16 bit registers 15 registers 15 registers registers 12 15 base registers 16 registers stack pointer instructions stack jump return register 15 stack pointer instructions push multiple multiple instructions 16 32 bit binary arithmetic 32 48 bit floating instructions separate 16 bit word address space specialized bus implementations define implementation details products wide variety companies form component board level offerings implemented technologies advanced respective systems offer levels radiation environment protection suited military space applications examples implementations include programming processors based programmed level programming language defined united department defense derived algol 58 lesser extent compilers versions gnu gcc support declared version removed subsequent versions addition score integrated development environment ide compilers development development environment processors based air force defined standard common computing architecture reduce costs software systems military computing includes embedded tasks aircraft control systems military computing advantages concept recognized numerous organizations european space agency nasa aircraft industries projects examples military aircraft include space space rated implementations types computers applicable deep space applications  
230359	computer	embedded operating operating embedded systems type operating typically designed resource efficient reliable resource efficiency cost losing functionality larger operating systems provide including functions specialized applications depending method multitasking type os frequently considered real time operating rtos hardware running embedded operating limited resources ram rom embedded design operating systems narrow scope tailored specific application achieve desired operation constraints advantage processing power cpu software developers write critical code assembly machine efficient language result gains speed cost portability times embedded operating systems written portable languages difference embedded operating systems desktop operating systems application including operating linked single executable image desktop operating embedded operating load execute applications single application  
230834	computer	captcha completely automated public turing computers humans type computing determine user human term coined 2003 von hopper john common type captcha displayed version invented 1997 parallel consisted mark martin consisted form captcha requires user type letters image addition sequence letters digits appears screen contrast standard turing human captcha reverse turing user identification procedure received disabled people people difficult read takes average person solve typical captcha history days internet users computers people sensitive topics internet automatically filters replace word characters numerous variants filter detect earliest commercial captchas 2000 protect captcha file patent technique 2001 tests strategy humans programs difficulty recognizing max helped popular deployment captcha technology acquired google 2009 addition bot users google captcha technology york times books google books 2011 google image based captcha improve driverless car data set identifying objects trees critics user google commercial response competitors emerged alternative models including host user effort claims teams people claimed captchas team consists mark captchas 1997 prevent adding search engine images ocr attack team looked manual scanner improving ocr team created attempting simulate manual claimed bad ocr team claim captchas consists von hopper john captchas 2003 publication subsequently received coverage popular press notion captcha covers program distinguish humans computers including examples captchas resolved existence 1997 priority patent application application security patent application details based applying human advantage applying sensory cognitive skills solving simple prove extremely hard software skills include limited processing sensory identification objects letters noisy graphical environment 1998 patent patents publications term captcha ideas precisely graphical captchas characteristics captchas definition automated requiring human maintenance intervention producing benefits cost reliability algorithm create captcha public covered patent demonstrate breaking requires solution difficult field artificial intelligence discovery secret algorithm reverse engineering modern based captchas designed require simultaneous separate recognition segmentation correctly complete task consistency challenge isolation presence time captchas difficult solve computers humans excel type task segmentation recognition separate processes understanding image process person individual letter captcha individual contours contours letter additionally human brain capable dynamic thinking based context multiple pick explanation input based variations letters relation security reasons captchas serve benchmark task artificial intelligence technologies article program passes tests generated captcha solve hard argue advantages hard security remains reliable method distinguishing humans computers solved difficult resolved image based captchas capable accurately task exploiting captcha design solved developing capable complex object recognition scenes captchas based reading visual perception tasks prevent blind visually users accessing protected resource captchas visual hard artificial intelligence speech recognition basis captcha implementations captchas permit users audio captcha 2011 paper demonstrated technique popular schemes time users blind users color blind people color visual captchas captchas designed machines common technology tools screen readers interpret sites captchas initial registration process challenge completely block access owners targets captchas people captcha united difficulties choose identify word read providing audio captcha blind users read blind sense people 60 vision 23 000 people vision national technical assistance consortium children blind children usa increased period 2004 2012 university 1980 2007 estimates 35 000 usa population estimates depend heavily degree definition captcha individuals subsets common based services forum systems individuals generations graphical captchas designed overcome sophisticated recognition software hard impossible read method improving captcha ease proposed called smart captcha developers combine captcha javascript support hard spam robots parse execute javascript simple script captcha fields image field human eyes proposed alternative method involves user simple mathematical equation requiring user enter solution easier software suitable graphical provide level blind users image based captchas referred mathematical difficult users cognitive kinds challenges require understanding meaning logic question instructions create captcha approaches captchas human labor recognize exploiting bugs implementation completely captcha finally machine learning build automated google numerous services solve captchas automatically machine learning based attacks earliest iterations systematic methodology designing evaluating captchas result instances captchas fixed automated tasks constructed segmentation captchas contained limited sets easier game heavily background confusion image algorithms created complete task exploiting design methods proved captcha easily modern captchas rely fixed patterns variations characters segmentation impossible iterations successful automated tasks october 2013 artificial intelligence company claimed developed generic captcha solving algorithm solve modern captchas character recognition rates 90 von pioneer captcha founder expressed stating hard months 50 claims 2003 august 2014 conference generic captcha solving algorithm based reinforcement learning demonstrated efficiency popular captcha concluded distortion based captchas schemes considered moving october 2018 acm 18 conference deep learning based attack solve 11 captcha schemes 50 popular 2018 success rate effective captcha trained 500 real captchas launch attack captcha scheme human labor captchas human operators employed decode captchas 2005 paper stated operator easily hundreds hour 2010 university california san conducted scale study captcha retail price solving captchas 000 technique consists script post target captcha captcha owned humans correctly solve short script economic attack paid services multiple internet companies offer human machine captcha solving services 50 1000 solved captchas services offer apis libraries enable users integrate captcha tools captchas designed block implementation identified implementation issues designed captcha systems software generating captcha client validation server user required identify rendered client users modify client display rendered captcha systems stored client leave captcha force attack notable attacks notable attacks captchas include alternative captchas demonstration distortion based captchas machine learning based attacks researchers proposed alternatives including image recognition captchas require users identify simple objects images argument favor schemes tasks object recognition typically complex perform recognition machine learning based attacks notable alternative captcha  
233488	computer	machine learning scientific study algorithms statistical models systems effectively perform specific task explicit instructions models inference subset artificial intelligence machine learning algorithms build mathematical model sample data training data predictions decisions explicitly programmed perform task machine learning algorithms applications email filtering detection network vision develop algorithm specific instructions performing task machine learning closely computational statistics focuses predictions computers study mathematical optimization methods theory application domains field machine learning data mining field study machine learning focuses data analysis unsupervised learning application business machine learning referred predictive analytics overview machine learning machine learning coined 1959 formal definition algorithms studied machine learning field program learn experience respect class tasks performance measure performance tasks measured improves experience definition tasks machine learning concerned offers operational definition defining field cognitive terms alan turing proposal paper computing machinery intelligence question machines replaced question machines thinking entities turing proposal characteristics thinking machine implications constructing machine learning tasks machine learning tasks classified broad categories supervised learning algorithm builds mathematical model set data inputs desired outputs task determining image contained object training data supervised learning algorithm include images object input image label output contained object special input partially restricted special feedback semi supervised learning algorithms develop mathematical models training data portion sample inputs missing desired output classification algorithms regression algorithms types supervised learning classification algorithms outputs restricted limited set values classification algorithm filters input incoming email output file email algorithm spam output prediction spam spam represented boolean values true false regression algorithms named continuous outputs meaning range examples continuous temperature price object unsupervised learning algorithm builds mathematical model set data inputs desired outputs unsupervised learning algorithms structure data clustering data unsupervised learning discover patterns data inputs categories feature learning dimensionality reduction process reducing features inputs set data active learning algorithms access desired outputs training labels limited set inputs based budget optimize choice inputs acquire training labels human user labeling reinforcement learning algorithms feedback form positive negative reinforcement dynamic environment autonomous vehicles learning play game human opponent specialized algorithms machine learning include topic modeling program set natural language documents documents cover topics machine learning algorithms probability density function density estimation learning algorithms learn inductive bias based previous experience robotics robot learning algorithms generate sequences learning experiences acquire skills guided exploration social interaction humans robots guidance mechanisms active learning motor history relationships fields american pioneer field gaming artificial intelligence coined term machine learning 1959 ibm scientific machine learning grew artificial intelligence days academic discipline researchers machines learn data attempted approach symbolic methods termed neural networks perceptrons models generalized linear models statistics probabilistic reasoning employed automated medical diagnosis increasing emphasis logical knowledge based approach caused machine learning probabilistic systems theoretical practical data acquisition representation 1980 expert systems statistics favor symbolic knowledge based learning continue leading inductive logic programming statistical field proper pattern recognition retrieval neural networks abandoned science time continued field researchers disciplines including hopfield hinton main success mid 1980s backpropagation machine learning separate field started 1990s field changed goal achieving artificial intelligence practical nature shifted focus symbolic approaches methods models statistics probability theory increasing availability ability internet relation data mining machine learning data mining employ methods overlap machine learning focuses prediction based properties learned training data data mining focuses discovery unknown properties data analysis step knowledge discovery databases data mining machine learning methods goals hand machine learning employs data mining methods unsupervised learning step improve accuracy confusion communities separate conferences separate journals major exception basic assumptions machine learning performance evaluated respect ability knowledge knowledge discovery data mining key task discovery unknown knowledge evaluated respect knowledge unsupervised method easily supervised methods typical task supervised methods training data relation optimization machine learning optimization learning formulated minimization loss function training set examples loss functions express predictions model trained actual instances classification assign label instances models trained correctly predict pre assigned labels set examples difference fields goal generalization optimization algorithms minimize loss training set machine learning concerned minimizing loss unseen samples relation statistics machine learning statistics closely fields michael jordan ideas machine learning principles theoretical tools pre history statistics suggested term data science field distinguished statistical modelling paradigms data model algorithmic model algorithmic model machine learning algorithms random forest methods machine learning leading combined field statistical learning theory core objective experience generalization context ability learning machine perform accurately unseen examples tasks experienced learning data set training examples unknown probability distribution considered space occurrences build model space enables produce accurate predictions computational analysis machine learning algorithms performance branch theoretical science computational learning theory training sets finite future learning theory yield guarantees performance algorithms probabilistic performance common decomposition generalization error performance context generalization complexity hypothesis match complexity function underlying data hypothesis complex function model data complexity model increased response training error decreases hypothesis complex model subject overfitting generalization addition performance computational learning study time complexity learning computational learning theory computation considered feasible polynomial time kinds time complexity positive class functions learned polynomial time negative classes learned polynomial time approaches types learning algorithms types machine learning algorithms approach type data input output type task intended solve supervised semi supervised learning supervised learning algorithms build mathematical model set data inputs desired outputs data training data consists set training examples training inputs desired output signal semi supervised learning algorithms training examples missing desired output mathematical model training represented array vector training data matrix iterative optimization objective function supervised learning algorithms learn function predict output inputs optimal function algorithm correctly determine output inputs training data algorithm improves accuracy outputs predictions time learned perform task supervised learning algorithms include classification regression classification algorithms outputs restricted limited set values regression algorithms outputs numerical range similarity learning supervised machine learning closely regression classification goal learn examples similarity function measures objects applications ranking systems visual identity tracking speaker unsupervised learning unsupervised learning algorithms set data inputs structure data clustering data algorithms learn data labeled classified feedback unsupervised learning algorithms identify data based presence absence piece data central application unsupervised learning field density estimation statistics unsupervised learning domains involving data features cluster analysis assignment set observations subsets called clusters observations cluster criteria observations drawn clusters clustering techniques assumptions structure data defined similarity metric evaluated internal similarity cluster separation difference clusters methods based estimated density graph connectivity reinforcement learning reinforcement learning machine learning concerned software actions environment maximize notion cumulative reward field studied disciplines game theory control theory operations theory simulation based optimization multi agent systems intelligence statistics genetic algorithms machine learning environment typically represented markov decision process reinforcement learning algorithms dynamic programming techniques reinforcement learning algorithms assume knowledge exact mathematical model exact models reinforcement learning algorithms autonomous vehicles learning play game human opponent processes techniques processes techniques methods applied types machine learning algorithms enhance performance feature learning learning algorithms aim representations inputs training classic examples include principal components analysis cluster analysis feature learning algorithms called representation learning algorithms attempt preserve input transform pre processing step performing classification predictions technique reconstruction inputs coming unknown data generating distribution configurations distribution replaces manual feature engineering machine learn features perform specific task feature learning supervised unsupervised supervised feature learning features learned labeled input data examples include artificial neural networks multilayer perceptrons supervised dictionary learning unsupervised feature learning features learned unlabeled input data examples include dictionary learning independent component analysis matrix forms clustering learning algorithms attempt constraint learned representation dimensional sparse coding algorithms attempt constraint learned representation sparse meaning mathematical model learning algorithms aim learn dimensional representations tensor representations data dimensional vectors deep learning algorithms discover multiple levels representation hierarchy features level abstract features defined terms generating level features argued intelligent machine learns representation underlying factors variation explain observed data feature learning motivated machine learning tasks classification require input mathematically computationally convenient process real data images video sensory data attempts define specific features alternative discover features representations explicit algorithms sparse dictionary learning sparse dictionary learning feature learning method training represented linear combination basis functions assumed sparse matrix method hard difficult solve popular heuristic method sparse dictionary learning svd algorithm sparse dictionary learning applied contexts classification determine classes unseen training dictionary class built training class represented dictionary sparse dictionary learning applied image key idea clean image patch represented image dictionary noise anomaly detection data mining anomaly detection detection identification rare items events observations majority data typically items represent issue bank structural medical errors referred noise exceptions context network detection objects rare objects activity pattern common statistical definition rare object detection methods unsupervised algorithms fail data cluster analysis algorithm detect micro clusters formed patterns broad categories anomaly detection techniques exist unsupervised anomaly detection techniques detect unlabeled data set assumption majority instances data set normal instances fit data set supervised anomaly detection techniques require data set labeled normal involves training classifier key difference statistical classification inherent nature detection semi supervised anomaly detection techniques construct model representing normal behavior normal training data set likelihood instance generated model decision trees decision tree learning decision tree predictive model observations item represented branches item target represented leaves predictive modeling approaches statistics data mining machine learning tree models target variable discrete set values called classification trees tree structures leaves represent class labels branches represent features lead class labels decision trees target variable continuous values typically real called regression trees decision analysis decision tree visually explicitly represent decisions decision data mining decision tree describes data classification tree input decision association rules association rule learning rule based machine learning method relationships variables databases intended identify strong rules discovered databases measure rule based approach generates rules data ultimate goal assuming set data machine mimic human feature extraction abstract association capabilities data rule based machine learning term machine learning method learns rules store manipulate apply knowledge defining characteristic rule based machine learning algorithm identification utilization set rules represent knowledge captured contrast machine learning algorithms commonly identify singular model applied instance prediction rule based machine learning approaches include learning classifier systems association rule learning artificial systems based concept strong rules introduced association rules products scale transaction data recorded sale systems rule sales data customer basis decisions marketing activities product addition market analysis association rules employed application including usage mining detection continuous production bioinformatics contrast sequence mining association rule learning typically items transaction transactions learning classifier systems family rule based machine learning algorithms combine discovery component typically genetic algorithm learning component performing supervised learning reinforcement learning unsupervised learning seek identify set context dependent rules store apply knowledge manner predictions inductive logic programming ilp approach rule learning logic programming uniform representation input examples background knowledge encoding background knowledge set examples represented logical database ilp logic program positive negative examples inductive programming field considers programming languages representing logic programming functional programs inductive logic programming bioinformatics natural language processing initial theoretical foundation inductive machine learning logical setting built implementation model inference 1981 program logic programs positive negative examples term inductive refers theory explain observed mathematical property set models artificial neural networks artificial neural networks systems computing systems inspired biological neural networks animal neural network algorithm framework machine learning algorithms process complex data inputs systems learn perform tasks examples programmed task specific rules ann model based collection connected units nodes called artificial neurons loosely model neurons biological brain connection biological brain transmit signal artificial neuron artificial neuron receives signal process signal additional artificial neurons connected common ann implementations signal connection artificial neurons real output artificial neuron computed linear function sum inputs connections artificial neurons called edges artificial neurons edges typically weight learning weight increases decreases strength signal connection artificial neurons threshold signal signal threshold typically artificial neurons layers layers perform kinds transformations inputs signals travel layer input layer layer output layer layers multiple times original goal ann approach solve human brain time attention moved performing specific tasks leading biology artificial neural networks variety tasks including vision speech recognition machine translation social network filtering playing board video games medical diagnosis deep learning consists multiple hidden layers artificial neural network approach model human brain processes light sound vision successful applications deep learning vision speech recognition support vector machines support vector machines support vector networks set supervised learning methods classification regression set training examples marked categories training algorithm builds model falls category training algorithm probabilistic binary linear classifier methods scaling exist probabilistic classification setting addition performing linear classification efficiently perform linear classification called kernel mapping inputs dimensional feature spaces bayesian networks bayesian network belief network directed graphical model probabilistic graphical model represents set random variables conditional independence directed graph bayesian network represent probabilistic relationships network compute probabilities presence efficient algorithms exist perform inference learning bayesian networks model sequences variables speech signals protein sequences called dynamic bayesian networks bayesian networks represent solve decision uncertainty called influence genetic algorithms genetic algorithm search algorithm heuristic technique process natural selection methods mutation crossover generate finding solutions machine learning genetic algorithms 1980s 1990s conversely machine learning techniques improve performance genetic evolutionary algorithms applications applications machine learning include 2006 online movie company held prize competition program predict user preferences improve accuracy existing movie algorithm joint team researchers labs collaboration teams theory built model win grand prize 2009 shortly prize awarded realized viewers ratings viewing patterns changed engine 2010 wall street journal wrote firm machine learning predict financial 2012 founder sun microsystems predicted 80 medical jobs lost decades automated machine learning medical diagnostic software 2014 reported machine learning algorithm applied field art history study fine art revealed artists limitations machine learning fields machine learning programs fail deliver expected reasons numerous lack suitable data lack access data data bias privacy chosen tasks algorithms wrong tools people lack resources evaluation 2018 driving car failed detect collision attempts machine learning healthcare ibm watson failed deliver time investment bias machine learning approaches suffer data healthcare data measurement errors result bias machine learning applications machine learning trained current customers predict customer represented training data trained data machine learning pick society language models learned data human machine learning systems risk assessment black people 2015 google photos tag black people 2018 resolved google remove training data recognize real issues recognizing white people systems 2016 tested learned language challenges effective machine learning domains model classification machine learning models accuracy estimation techniques method splits data training set training set set performance training model set comparison cross validation method randomly splits data subsets instances data train model instance predictive ability training model addition cross validation methods bootstrap samples instances replacement dataset model accuracy addition accuracy frequently report sensitivity meaning true positive rate true negative rate report false positive rate false negative rate rates fail total operating characteristic effective method express model diagnostic ability mentioned rates commonly operating characteristic curve ethics machine learning host ethical questions systems trained datasets collected exhibit algorithmic bias cultural job data firm policies lead machine learning bias job similarity previous successful responsible collection data documentation algorithmic rules critical machine learning language machines trained language corpora learn bias forms ethical challenges personal health care concerns health care professionals systems designed public generating machines true united ethical improving health care increasing algorithms designed provide patients tests algorithm proprietary owners hold huge potential machine learning health care provide professionals tool plan recovery paths patients happen personal mentioned addressed software software variety machine learning algorithms include reading artificial intelligence modern approach 3rd edition  
233497	computer	unsupervised learning branch machine learning learns data labeled classified feedback unsupervised learning data based presence absence piece data alternatives include supervised learning reinforcement learning central application unsupervised learning field density estimation statistics unsupervised learning domains involving data features supervised learning supervised learning conditional probability distribution label input data unsupervised learning probability distribution approaches compared supervised learning training data labeled models unsupervised learning learn relationships elements data set classify raw data relationships algorithmic forms models goal human logic searching indirect hidden structures patterns features analyze data common algorithms unsupervised learning include neural networks classical unsupervised learning study neural networks donald principle neurons wire learning connection error exclusively function action neurons version weights takes account time action timing dependent learning range cognitive functions pattern recognition learning neural network models organizing map som adaptive theory art commonly unsupervised learning algorithms som organization nearby locations map represent inputs properties art model clusters vary size user control degree similarity clusters user defined constant called parameter art networks pattern recognition tasks automatic target recognition signal processing method statistical approaches unsupervised learning method method unknown parameters model random variables unknown parameters estimated estimated samples basic random vector moment vector moment covariance matrix represented generalization matrices multi dimensional arrays method effective learning parameters latent variable models latent variable models statistical models addition observed variables set latent variables exists observed highly practical latent variable models machine learning topic modeling statistical model generating observed variables document based topic latent variable document topic modeling document generated statistical parameters topic document changed method tensor decomposition techniques consistently recover parameters class latent variable models assumptions algorithm em practical methods learning latent variable models local guaranteed algorithm converge true unknown parameters model contrast method global convergence guaranteed conditions  
234714	computer	medical imaging technique process creating visual representations body clinical analysis medical intervention visual representation function medical imaging seeks internal structures hidden treat disease medical imaging database normal identify imaging removed performed medical reasons procedures considered medical imaging discipline sense biological imaging incorporates imaging technologies ray magnetic imaging medical ultrasound imaging medical photography nuclear medicine functional imaging techniques tomography pet single computed tomography measurement recording techniques designed produce images represent technologies produce data representation parameter graph time maps data measurement locations limited comparison technologies considered forms medical imaging discipline 2010 medical imaging studies conducted worldwide radiation exposure medical imaging 2006 50 total radiation exposure united medical imaging perceived set techniques produce images internal aspect body restricted sense medical imaging solution mathematical inverse properties living tissue observed signal medical consists pressure waves tissue internal structure ray radiation absorbed rates tissue types fat term denote procedure instrument introduced patient body imaging techniques imaging image medical imaging techniques thumb ct scan head sections mri machine generates magnetic field patient pet scans create images active blood flow activity ultrasound technology monitor electromagnetic radiation clinical context light medical imaging clinical imaging medical responsible images visible light medical imaging involves digital video pictures special equipment care visible light diagnostic technical aspects medical imaging acquisition medical images responsible medical images diagnostic quality performed field scientific investigation medical imaging discipline biomedical engineering medical physics medicine depending context development image acquisition modeling preserve biomedical engineering medical physics science application interpretation medical images preserve medical discipline relevant medical condition medical science neuroscience investigation techniques developed medical imaging scientific industrial applications forms images medical imaging projection guidance 2d techniques wide advance 3d tomography cost resolution depending application radiation 2d technique imaging utilizes wide beam rays image acquisition imaging technique modern medicine magnetic imaging magnetic imaging instrument mri scanner nuclear magnetic imaging scanner originally powerful hydrogen single water molecules human tissue producing signal spatially encoded images body mri machine radio frequency rf pulse frequency hydrogen atoms water molecules radio frequency rf send pulse body rf pulse absorbed causing direction respect primary magnetic field change rf pulse alignment primary radio waves process radio frequency hydrogen atoms water detected reconstructed image frequency magnetic called frequency determined strength main magnetic field chemical environment mri electromagnetic fields strong typically static magnetic field hydrogen called primary field gradient fields modified vary space time spatial encoding simply called gradients spatially radio frequency rf field manipulation hydrogen produce signals collected rf ct mri traditionally creates dimensional image slice body considered imaging technique modern mri instruments capable producing images form 3d blocks considered generalization single slice concept ct mri involve radiation health hazards mri 1980s term effects exposure strong static fields subject safety mri limit scans individual contrast ray ct identified health tissue exposure rf field presence devices body strictly controlled design instrument scanning protocols ct mri sensitive tissue properties images techniques ct rays form tissue create image image quality soft poor mri nucleus nuclear spin hydrogen atom remains clinical setting returns signal nucleus water molecules soft tissue contrast mri pulse sequences specific mri diagnostic imaging mri tissue characteristics combining imaging sequences depending sought weighted mri weighted mri diffusion weighted imaging mri dynamic contrast enhancement mri mri imaging accomplished mri mri weighted imaging applications detecting disease continues expand including studies effects cancer nuclear medicine nuclear medicine diagnostic imaging treatment disease referred molecular medicine molecular imaging nuclear medicine properties material treat typical concept nuclear medicine enables assessment function based approach medical evaluation applications notably cameras pet scanners pet detect regions activity disease short patient absorbed active tissue body identify images acquired detected crystal light signal converted count data wide range medical imaging applications images subject produced imaging systems called image registration systems visible images produced imaging method functional tomography magnetic imaging mri established mri brain images generated source brain activity ultrasound medical frequency broadband sound waves range reflected tissue varying degrees produce 3d images commonly imaging women ultrasound broader include imaging heart provide techniques ct mri advantages ideal numerous situations studies function moving structures real time radiation ultrasound popular tool capturing raw data ultrasound interface purpose tissue implementation image processing techniques concepts ultrasound medical imaging operated transmission sound waves frequency sound waves tissue depending composition signal returned separate path reflected sound waves structure defined input acoustic ultrasound sound wave reflection transmission coefficients relative structures safe effects inexpensive quick perform ultrasound scanners patients intensive care units avoiding caused moving patient department real time moving image guide procedures capabilities modern scanners blood flow imaging maps properties soft tissue emerged decades medical tissue specific harder surrounding tissue techniques based ultrasound magnetic imaging imaging wide clinical ultrasound result implementation technology clinical ultrasound machines main branches ultrasound include imaging wave imaging acoustic radiation force imaging imaging decade increase activities field observed successful application technology medical treatment monitoring imaging imaging developed hybrid biomedical imaging based combines advantages optical contrast spatial resolution deep imaging optical studies imaging monitoring blood mapping functional brain imaging detection tomography tomography imaging sections main methods medical imaging ultrasound image heart referred detailed structures heart including size heart function heart heart 2d 3d imaging create pictures heart blood heart array patients ranging cancer ultrasound proven safe patients elderly risk effects radiation imaging commonly imaging portability variety applications emergency situations quick easily accessible performed choice functional infrared imaging technique infrared purpose functional accepted brain imaging technique magnetic particle imaging magnetic particle imaging developing diagnostic imaging technique tracking primary advantage sensitivity lack signal decrease tissue depth medical image performance cell tracking medical imaging care magnetic imaging mri mri contrast risk imaging techniques choice women ray computed tomography nuclear medicine imaging result degree radiation exposure exceptions absorbed harm effects include intellectual maximizing imaging procedure data single ct scan extensive data save patients time money reducing exposure radiation risk procedures approach procedures efficient based utilizing additional constraints medical imaging improve efficiency data acquisition account reconstructed density positive creation dimensional images volume rendering techniques developed enable ct mri ultrasound scanning software produce 3d images traditionally ct mri scans produced 2d static output film produce 3d images scans combined computers produce 3d model 3d produced technique disease ultrasound sensitive imaging female diagnosis common common ability structures 3d visualization methods valuable resource diagnosis surgical treatment key resource famous ultimately attempt separate 2003 3d equipment operations success proposed developed techniques include techniques stage clinical routines diagnostic imaging experimental people disabled control devices acting brain interface medical imaging software applications diagnostic imaging allowed clinical patient diagnosis note clinical studies designed patient diagnosis recording ultrasound imaging capturing image produced medical imaging device required applications frame capture video signal medical device processing operations digital imaging communication medicine standard globally store exchange transmit medical images standard incorporates protocols imaging techniques computed tomography ct magnetic imaging mri radiation includes standards image exchange portable media image compression visualization image presentation compression medical images medical imaging techniques produce amounts data ct mri pet result storage communications electronic image data compression 2000 art image compression standard storage transmission medical images cost accessing image data sets addressed standard called enable efficient streaming 2000 compressed image data medical imaging cloud growing trend cloud based article applied digital imaging healthcare enterprise swift transition data cloud computing offers imaging department future tools manage data clinical medical imaging major tool clinical enables rapid diagnosis visualization quantitative assessment typical clinical multiple phases clinical determine safe effective patient reaches experimental interaction rely solely clinical costly tend patients contrast clinical cut time required drug clinical benefits imaging characteristic measured imaging technique indicator response facilitate sizes quick statistical power imaging subtle change traditional approaches statistical bias reduced evaluated direct patient contact imaging techniques tomography pet magnetic imaging mri neuroscience measurement commonly solid response evaluation faster objective assessment effects disease mri scans entire brain accurately rate pet scans measure brain activity measuring regional beta compound historically quantitative medical imaging drug development growing imaging based components lead main material rays magnetic imaging mri rf magnetic prevent external image quality privacy protection medical imaging covered laws medical privacy united health insurance portability sets restrictions health care providers utilizing protected health individually future physical health individual legal decision matter study medical imaging identify person medical council ethical guidelines council require prior secondary ray images copyright united 300 copyright office office register produced machine mechanical process operates randomly automatically creative input intervention human author including medical imaging produced rays magnetic imaging diagnostic equipment position differs broad copyright photographs copyright agency interpretation reasonable federal law addressing issue ray images derivatives extensive definition term derivative united copyright based translation art form transformed adapted consisting modifications represent original copyright compilation derivative material contributed author distinguished material employed exclusive material copyright independent affect scope duration ownership copyright protection material germany germany ray images ultrasound pet images protected copyright rights rights protection require regular copyright protection 50 image creation published 50 50 publication letter law internet 72 person created image literature uniformly medical rights result germany rays performed setting settings individual imaging united kingdom medical images created united kingdom protected copyright level required produce quality ray contrast soft society copyright owned contract require transfer ownership hospital copyright owner grant ownership copyright hospital employees permission images purposes require medical care employed hospital contracts publish patient journal papers books write providing patients granted permission images law 96 pictures protected photographic photographic pictures requires level types photographs medicine science protection requires sort photographic technique includes digital cameras holograms created laser technique difference types term protection amounts death author photographic opposed photographic picture medical imaging included scope photography statement mri images ct scans analogous photography  
238604	computer	ux discontinued apple implementation unix operating macintosh computers apple attempt developing marketing unix based operating macintosh ux requires 68k based macintosh fpu memory management unit versions macintosh 30 series machines ux released 1988 final version released 1995 apple current unix branded macos systems solution macintosh heart operating based unix release includes additional features releases bsd versions posix interface definition compliant includes tcp ip networking version unix compatible posix compliant operating apple contracts supply computers federal government institutes features ux graphical user interface windows controls ux program customized version adapted unix process designed interact underlying unix kernel file systems ux includes terminal program offers command interface underlying unix window server application called terminal program interface applications alternatively user choose session based apple compatibility layer ux macintosh unix hybrid applications hybrid application macintosh unix functions macintosh application calls unix functions unix application calls macintosh functions compatibility layer existing functions rom function calls translated native unix calls ux includes utility called tool included macintosh programmer assist users entering unix commands unix executable file box user choose command options program standard controls radio buttons check boxes display command argument user executing command program feature intended ease learning curve users unix decrease user unix manual ux utility allowed user party drives era ux runs 68k based floating unit fpu memory management unit select models apple fastest 68k macintosh ux history ux announced february 1988 conference months schedule based unix additional features bsd unix initially sold bundled macintosh larger monitor mac upgrade kit initially aimed existing unix customers universities party software announced release includes database developer tools productivity software packages networking support consists tcp ip implementations developed product release runs macintosh application base display program time version situation add window draft posix standard posix support ux released 1989 1991 apple formed business division enterprise systems serve businesses government education based ux division intended address company major player unix market performed marketing operating improve 1992 november 1991 apple launched ux planning ongoing release ux time company ux expected release 1993 1994 announcement technology partnership apple ibm merge apple user friendly graphical interface desktop applications market ibm highly scalable unix server market allowing companies enter apple believed emerging desktop systems market upcoming ux target environment merge features ibm variant unix ux kernel software foundation ux serve path path unix applications compliant future ux operating systems intended variety ibm power powerpc hardware apple powerpc based hardware 1992 level secure version ux released apple eventually abandoned plans ux releasing product company deployed mid 1990s platform apple network server hardware running customized ibm operating apple 1996 acquisition apple introduced 1999 mac os server based unix nextstep operating final release ux version 1995 apple abandoned ux platform completely 1996 reception byte 1989 listed winners byte awards stating unix multitasking operating choice decade challenge os compared contemporary workstations unix vendors macintosh hardware features demand versions ux suffer poor performance poor sales users disk space version criticized 1988 review user interface command driven unix variants graphical mouse driven networking support august 1992 issue author reviewed ux describing systems solution macintosh heart apple finally unix gui single button personal tech support graphical user ux unix difficult version unix learn list price competing pc operating systems os dos windows compared proprietary unix licenses review speed acceptable fastest software unix optimization apple hardware price performance ratio sun users ux awarded score os proprietary macintosh hardware report unix super users reason apple unix apple ux sell unix check item users legacy ux users central repository ux applications internet server nasa called editor ux maintained ux hardware requirements include memory management unit execution ux macintosh emulation software 2014 introduction macintosh emulator named  
238725	computer	prize annual competition artificial intelligence awards prizes programs considered judges human format competition standard turing human judge simultaneously holds textual conversations program human based responses judge decide contest launched 1990 conjunction cambridge center studies massachusetts united 2014 park university college science museum london university reading university campus city culture 2004 2005 held york city field artificial intelligence prize prominent minsky called field prizes originally 000 awarded human program competition prize 000 2005 250 2006 2008 000 awarded addition time prizes awarded 25 000 offered program judges distinguish real human judges human program 100 000 reward program judges distinguish real human turing includes understanding visual input achieved annual competition competition rules restrictions rules competitions featured restricted conversation turing tests 1995 discussion entries 2007 robert basic questions sponsor evaluate technology included simple questions time contest knowledge faster train plane questions memory preceding conversation dictionary suitable children age 12 entries respond questions accepted time 2008 sponsor allowed introduction preliminary phase contest competition based entries variety invited rules selected judge systems limited time minutes entity 2003 competition 20 pair competitions minutes conduct simultaneous conversations human program 2008 2009 increased 25 minutes simultaneous conversation 2010 prize experts field variety reasons regarded minsky offered prize competition responded minsky offering prize competition effectively sponsor rules competition encouraged judges rapid interactions judges competitors originally effectively questions initially restricted conversation domain standard competition aim understanding intelligence basic style successful annual competition intelligence typical introduction article mind machine march 2011 stating race build computers humans ground turing 2006 2006 contest child ceo august 30 announced contest held 17 september theatre campus university college london judges included university reading professor professor artificial intelligence john university experience event article technology review winner based created 2007 2007 competition held october 21 york city judges science professor philosophy professor field assistant professor english bot passed turing judges ranked winner received 250 annual medal received 250 2008 2008 competition professor held october 12 university reading testing judges preliminary phase june july 2008 selected original artificial entity invited judges minutes conduct simultaneous split screen conversations hidden entities artificial solutions 2008 prize award human artificial entity judges human parallel human coming close 30 traditionally required program passed turing ultra judge human times written experience judge reported parallel turing tests 2009 2009 prize competition held september 2009 centre conjunction 2009 conference prize 2009 000 david finished writer participated 2009 prize competition human experiences competition book human human 2010 2010 prize competition held october 23 california university los angeles 2010 competition 20th running contest winner bruce 2011 2011 prize competition held october 19 university united kingdom prize 2011 000 bruce chip lee finished addition panel judges paul william contest main contest chip coming fourth 2012 2012 prize competition held park england honor alan turing prize 2012 000 local david prize 1997 2009 chip bruce finished team university science department max conducted live conversations 2013 2013 prize competition held time september 14 university college steve dr lee bruce finished judges professor arts professor university professor university university professor university 2013 prize competition tied 3rd 2014 2014 prize competition held park england 15 november 2014 event filmed live news judge television james hours bruce declared winner bruce receive medal rank medal rank 25 rank 25 1000 rank 500 judges dr writer senior college dr science technology university james television dr paul dean university 2015 2015 prize competition bruce judges physical sciences scientist technology bbc film director writer 2016 2016 prize held park 17 september 2016 hours final announced winners official list winners  
245926	computer	driving car robot car autonomous car driverless car vehicle capable sensing environment moving human input autonomous cars combine variety sensors radar vision gps measurement units advanced control systems interpret sensory identify navigation paths obstacles relevant potential benefits include reduced costs increased safety increased mobility increased customer reduced safety benefits include reduction traffic costs including insurance automated cars predicted increase traffic flow provide enhanced mobility children elderly disabled poor driving navigation increase fuel efficiency vehicle reduce space reduce facilitate business models transportation service sharing economy include safety technology liability legal framework government risk loss privacy security concerns concern loss driving jobs road transport industry risk increased travel convenient history experiments conducted automated driving systems 1950s automated car developed 1977 japan mechanical engineering laboratory vehicle white street interpreted cameras vehicle analog signal processing vehicle reached speeds support autonomous prototype cars appeared 1980s carnegie mellon university projects funded darpa starting 1984 university project 1987 1985 demonstrated driving speeds roads 1986 road driving day conditions 1987 1960s darpa grand challenge 2005 automated vehicle funded darpa navy incremental advances speeds driving complex conditions controls sensor systems companies organizations developed prototypes allocated 1991 national automated demonstrated automated driving combination automation embedded automated technology vehicles networking vehicles infrastructure program concluded successful demonstration 1997 direction funding implement larger scale partly funded national automated darpa carnegie mellon university america 1995 98 autonomously record achievement decades 2015 improved augmented technology 15 remaining driving mode 99 time 2015 california michigan washington allowed testing automated cars public roads 2017 stated automated speeds driver safety checks frequently steering wheel claimed production car reach level automated driving manufacturer laser scanners addition cameras sensors november 2017 announced begun testing driverless cars safety driver driver position car october 2018 announced vehicles automated mode increasing month december 2018 autonomous service definitions terminology driving car industry organizations proposed define accurate consistent vocabulary confusion documented associate autonomous driving automation level apply levels driving automation defined correspond level vehicle equipped definition safety modern vehicles provide partly automated features keeping car speed controls emergency differences remain autonomous driving car hand driver assistance technologies hand bbc confusion concepts leads association british considers usage word autonomous marketing modern cars dangerous car autonomous autopilot vehicle drive rely driver ensure safety technology drive car car makers claim vehicles driving partly automated drivers risk leading driving cars autonomous automated autonomous historical projects vehicle automation automated automatic subject heavy artificial environment magnetic autonomous control implies performance environment ability failures external intervention approach implement communication networks collision management decision process reduce individual vehicle autonomy requiring human intervention 2012 wrote article term autonomous term automated term autonomous chosen term widespread public term accurate automated control operation machine autonomous acting independently vehicle concepts aware person utilize communication connection cloud vehicles independently select reaching term automated accurately vehicle concepts 2017 commercial projects focused automated vehicles communicate vehicles management engineer autonomous car request defines autonomous autonomous emergency acts independently driver avoid accident implies autonomous driver autonomous car travel driver embedded vehicle makers remote driver driving car pc definition definition definition definition classification classification based levels ranging manual automated systems published 2014 international automotive standardization body definitions terms road motor vehicle automated driving systems classification based driver intervention required vehicle capabilities loosely united 2013 national traffic safety administration released formal classification abandoned favor standard 2016 2016 updated classification called levels driving automation automation level definitions driving mode type driving scenario characteristic dynamic driving task requirements merging speed speed traffic closed campus operations formal definition note shift human driver monitor environment final aspect dynamic driving task passed human automated human driver responsibility automated human driver responsibility automated intervention legal definition columbia code code considered semi automated vehicles manually driven vehicles level autonomous vehicles level variety vehicle types degree automation semi automated vehicles technology infrastructure developed automation vehicles increasing levels automation semi automated vehicles advantages automated vehicles keeping driver charge vehicle technical challenges challenge driverless car designers produce control systems capable analyzing sensory data provide accurate detection vehicles road modern driving cars bayesian simultaneous localization mapping slam algorithms data multiple sensors map current location estimates map updates developed variant slam detection tracking moving objects handles obstacles cars simpler systems real time technologies aid localization typical sensors include stereo vision gps developing source software stack control systems automated cars sensor fusion approach variety sensors car produce consistent accurate view environment driverless vehicles require form machine vision purpose visual object recognition automated cars developed deep neural networks type deep learning architecture computational stages levels neurons simulated environment network neural network depends extensive data extracted real life driving enabling neural network learn execute action 2018 researchers mit announced built automated car navigate roads researchers science artificial intelligence laboratory developed called driving cars drive roads 3d maps combines gps position vehicle sparse map 2d features roads series sensors road conditions heavy car sensors nature digital technology autonomous vehicles digital technology characteristics types technologies vehicles characteristics autonomous vehicles characteristics explained based subjects connectivity smart digital digital assumes form ongoing evolution digital era industry standards developed store digital type format concept implies autonomous vehicles autonomous vehicles techniques digital radar gps motion sensors vision digital techniques stored implies digital form differences digital transmitted stored computed vehicles operating understand helps exponentially increase computing power hard software moore law supports autonomous vehicles understand digital cost effective costs connectivity connectivity users digital technology connect easily users applications autonomous vehicles essential connect function effectively autonomous vehicles equipped communication systems communicate autonomous vehicles units provide road traffic addition scientists future programs connects individual autonomous vehicle type connectivity replace traffic lights types characteristics drive develop ability autonomous vehicles understand products services systems autonomous vehicles market lead network autonomous vehicles network network eventually lead autonomous vehicles network usage autonomous vehicles movements network called network smart characteristic autonomous vehicles core product emphasis software chassis engine autonomous vehicles software systems drive vehicle meaning updates editing software enhance benefits owner update distinguishing blind person blind person vehicle extra blind person characteristic autonomous vehicles updates supplier machine learning smart autonomous vehicles generate updates install navigation maps systems characteristics digital technology possibility smart machine learning manufacturers autonomous vehicles opportunity software implies autonomous vehicles finished product continuously improved digital autonomous vehicles equipped sensors connect computers autonomous vehicles units implies autonomous vehicles leave digital connect data digital develop determined products updates enhance autonomous driving ability safety traditional vehicles traditional technologies manufactured product complete autonomous vehicles improved autonomous vehicles produced digital characteristics finished autonomous vehicles modular modules explained layered modular architecture layered modular architecture architecture purely physical vehicles incorporating loosely coupled layers devices networks services contents autonomous vehicles loosely coupled layers interact standardized interfaces human factor challenges driving cars exploring difficulties determining animals models behavior programmed driving algorithms human road users challenge determining autonomous vehicles driver eye contact exchange hand signals drive testing solution involves led mounted vehicle status cross waiting cross human factor challenges safety automated driving manual driving unusual road conditions vehicle limited capabilities leave human driver moment term humans practice driving level dangerous manual mode challenge risk perceived increased safety people behavior benefits semi automated cars suffer users tesla autopilot road electronic devices company car capable autonomous future travel street fashion driving cars capable avoiding people driving cars government roads technology trusted safe driving invented people adoption decades operator increased demand built advertising features emergency button testing testing vehicles varying degrees automation physically closed environments public roads typically license permit specific set operating principles virtually simulations driven public roads automated vehicles require person monitor proper operation york strict requirements driver times vehicle licensed driver company application york apple testing driven cars increased vehicles 27 january 2018 45 march 2018 russian internet company start project driven cars 2016 february 2018 passed prototype unmanned august 2018 start driven cars operate unmanned vehicles clients land time testing unmanned vehicle russia held january 2019 testing continued international consumer electronics january 11 received permission transport israel unmanned vehicle public roads progress automated vehicles compute average distance driven automated typically human driver 2017 reported testing average companies figures distance total 2017 rate 18 improvement 2016 2015 march 2017 reported average final months 2017 automation owned july 2018 electric driverless racing car completed track navigation artificial intelligence fields application automated trucks companies testing automated technology semi trucks driving company acquired august 2016 demonstrated trucks acquired 2017 san francisco based startup announced partnership truck manufacturer deploy automated technology vehicles testing automated technology trucks project march 2018 robotics san francisco based automated truck company completed driverless single human truck robotics player driving truck game drive automated mode public road person europe truck considered safe road trains environment approach martin funding developed automated truck lead truck operated human driver trucks autonomously developed autonomous mobility consists automated driving package installed types vehicles completed 55 000 hours driving speeds 2014 2017 planning field trucks rapid program transport systems europe cities france italy planning operate transport systems automated cars germany netherlands allowed public testing traffic 2015 launched public automated summer 2015 french government allowed real conditions paris experiments planned extended cities 2016 alliance french companies provider car testing planning automated vehicles public transport china king produce automated vehicle 14 driving 100 vehicles produced 2018 commercial automated service china level driverless closed roads potential advantages safety driving safety experts predict driverless technology developed traffic costs caused human error delayed time forms driving reduced firm company estimated widespread autonomous vehicles eliminate 90 auto united prevent health costs annually save thousands operated time magazine driving safety experts contact rank driving autopilot time 2017 achieved level safety traditional hands driving degree benefits practice factors reduce safety include interactions humans partly automated vehicles types vehicle boundaries functionality automation level vehicle reaches limit capacity bugs occur complex software systems sensor data successful automated cars reduce labor costs driving navigation replacing wheel hours time constraints ability drive driving elderly people automated cars provide enhanced mobility removal steering remaining driver interface requirement assume flexibility vehicles enhanced ease traffic additional advantages include speed limits increased capacity traffic safety speeds maximum controlled access throughput capacity capacity manual 200 passenger vehicles hour road space cars study estimated automated cars increase capacity 200 cars hour study estimated 100 connected vehicles vehicle vehicle communication capacity reach 12 000 passenger vehicles hour gap speeds drivers car increases capacity impact traffic effectively ability manage traffic flow increase extra data driving behavior combined traffic road costs driving expected reduce costs vehicle insurance energy environmental vehicle automation improve fuel economy car drive cycle reduced traffic improvements traffic flow widespread automated cars translate fuel efficiency additionally driving cars accelerate efficiently meaning fuel economy reducing energy typically speed improvement vehicle energy efficiency translate reduction energy consumption positive environmental expected automated vehicles consumers travel demand partially offset fuel efficiency improvement brought automation vehicle automation global energy demand highly heavily depends combined consumer behavior policy intervention technological progress vehicle technology space manually driven vehicles reported time unused remaining time autonomous vehicles hand continuously reached destination dramatically reduce space los angeles 14 land equivalent 17 square combined potential reduced road space improved traffic flow amounts land cities effects reducing labor cost mobility service automated cars reduce cars individually owned replaced pooling car sharing services dramatically reduce size automotive production industry environmental economic effects assuming increased efficiency offset increases demand efficient traffic flow space support vehicles increased aid passenger behavior enabling vehicle lead expanded mass surveillance wide access granted parties data sets generated future passenger transport era automated cars potential limits obstacles sort potential benefits increased vehicle automation limited challenges liability company operating vehicle accept driver responsible car project liability control time existing stock vehicles automated automated period humans autonomous vehicles sharing roads individuals control cars concerns safety driverless practice implementation legal framework consistent global government driving cars obstacles include levels driver experience dealing dangerous situations ethical automated vehicle software forced crash choose multiple courses action concerns people employed drivers time alternate blue automation potential mass surveillance location association travel result intelligence agency access data sets generated sensors pattern recognition travel difficult understanding sounds gestures cues drivers technological obstacles automated cars social challenges include potential disadvantages direct impact widespread adoption automated vehicles loss driving jobs road transport industry professional drivers job addition job public transit services crash repair automobile insurance industry suffer technology aspects frequently cited paper michael automated cars jobs redundant privacy issue vehicle location position integrated interface people access addition risk automotive sharing vehicle vehicle vehicle infrastructure protocols risk attacks driving cars loaded lack driving time potential travel time cost live cities land cheaper city core increasing travel distances fuel consumption increase travel risk traffic increase decrease public policies design required avoid negative increased distance travel automation vehicles reaches levels reliable drivers pay attention road drivers automated cars critical situation compared driving manually depending capabilities automated vehicles frequency human intervention increase safety compared human driving delivered factors ethical reasoning programming software action car takes crash automated car crash bus people nearby question programmers systems difficult answer ordinary people decision car damage people proposed solution implementation ethics driving vehicles learn user preferences ultimately guide autonomous instruments owner values preferences ethics automated vehicles lead require closer context dependency complexity deterministic nature human ethics human drivers ethical decisions driving avoiding harm risk protect decisions range rare decisions traffic bad road human time slow detect risk upcoming crash ethical implications options action implement ethical choice automated vehicle capacity correctly detect upcoming risk options choose option bad choices human difficult predict difficulty level automated vehicle understanding ethical issues play road scenario continuous stream synthetic physical predictions future dependent layers pattern recognition intelligence human inspection origins probabilistic machine learning simple english human values logic rules depth understanding predictive power ethical hard implement harder scale challenge effects entities resources capacity meet capital automated vehicle market life vehicle legal government capacity deal potential liability proportion traffic diverse global vehicle market potential industries traditional automobile industry subject driven technology market demands include technological advances market demands technology rapid advance factors era incremental change recognized transition technology automotive industry distinguished mobility providers tech google nvidia industry market uncertainty naturally occurs changing dynamics tech traditional car manufacturers variation innovation production process autonomous vehicles additionally mobility providers caused user preferences result rise mobility providers vehicles addition rise sharing economy market uncertainty question private ownership vehicles relevant transportation technology mobility providers preferred consumers user private ownership autonomous vehicles current mobility provider trend continue popularity established providers industry enter business opportunities healthcare car repair car insurance increasing autonomous vehicles availability data usable form real time maps driving decisions faster prevent government vehicle human failures result major healthcare industry apparent national safety council people roads average costs single incident estimated 500 loss healthcare industry autonomous vehicles roads decrease traffic contribute widespread acceptance autonomous vehicles possibility healthcare resources occur risk human errors reduced repair industry reduction car frames generated data autonomous vehicle predict maintenance car owners repair industry replace fail efficiency productivity gain automotive repair industry money spent repair costs role insurance industry altered expected increased safety transport autonomous vehicles lead decrease positive industry demand drop insurance industry create insurance models future accommodate disadvantage widespread acceptance autonomous vehicles reduction emergency response military technique autonomous driving ensures life industries implementation autonomous vehicles emergency response military applications led decrease military autonomous vehicles reach dangerous remote earth deliver fuel food people addition future autonomous vehicles lead reduction deployed lead decrease technological development autonomous vehicles autonomous future reduction emergency drivers autonomous vehicles deployed trucks advantage real time traffic generated data determine execute efficiently human drivers time situations design entertainment design industry times driver focused actual driving implies design media entertainment industry autonomous vehicles road vehicles usage practice time business increasing opportunities media entertainment industry demand attention business provide location based driver safety telecommunication energy autonomous vehicles producing amounts data transferred analyzed upcoming cellular network play role addition earlier mentioned entertainment industry highly dependent network active market segment implies revenues telecommunication industry autonomous vehicles rely electricity operate demand batteries increases radar sensors speed internet connectivity require power vehicles power draw batteries larger battery requirement increase supply type batteries chemical industry hand expected increase battery powered autonomous vehicles industry expected decline demand depends adoption rate autonomous vehicles extent industry transition phase oil electricity companies explore business opportunities energy driver interactions vehicle common future future responsibility vehicle implications entertainment design industry customers driving enter autonomous vehicle double function rise platforms industry fast increase developments autonomous vehicle industry customer bases future decrease occur autonomous vehicles equipped improvements vehicles additionally implications industry short waiting times gate lost time customers improved future car travel customers option causing loss customer bases industry elderly disabled children autonomous vehicles severe impact mobility options drive vehicle remain society elderly people depending drive addition perceived freedom elderly people future demand human decrease increased health elderly safe care centers experience decrease clients elderly people difficulties physical abilities disabled people benefits autonomous vehicles future causing dependency decrease industries depending time experience decrease costs allocated matter children drive vehicle introduction autonomous cars schools automated pick drop systems causing decrease parents workers extent human actions driving current vehicles require human actions extent driving school industry majority autonomous transportation switched emerged dominant design future driving vehicle considered implies structure industry based market tesla autopilot 2015 tesla motors version software included tesla autopilot capability january 2016 tesla version air update adding feature cars park locations driver car tesla automated driving features classified level driver assistance society automotive engineers international levels vehicle automation level car automated requires attention driver control moment autopilot limited access fail detect driving read traffic signals detect 20 january 2016 crash tesla autopilot occurred china china news channel marked china death tesla automatic driving initially tesla vehicle impact prove car autopilot time factors car absolute failure actions prior speed crash driver driving record strong likelihood car autopilot time crash occurred months 2018 subsequent civil suit father driver tesla tesla car autopilot time accident evidence father accident involving vehicle driven 2016 tesla model electric car autopilot mode crash 18 wheel 28 june 2016 national traffic safety administration formal investigation accident preliminary reports crash occurred left tesla controlled access car failed apply car continued travel passing truck preliminary evaluation design performance automated driving systems time crash involved population estimated 25 000 model cars july 2016 requested tesla motors provide agency detailed design operation testing autopilot technology agency requested details design updates autopilot introduction tesla planned updates schedule months tesla autopilot driver white applied car attempted drive speed model tesla claimed tesla autopilot death driven customers autopilot statement tesla claims january 2016 china result autopilot error tesla type vehicles includes instance motorcycle drivers july 2016 national transportation safety board formal investigation accident autopilot body power policy agency worth learn event automation introduced january 2017 released report concluded tesla fault investigation revealed tesla cars crash rate dropped 40 percent autopilot installed tesla starting 19 october 2016 tesla cars built hardware driving capability safety level level hardware includes cameras sensors addition radar enhanced processing capabilities operate shadow mode processing action send data tesla improve abilities software ready deployment air required testing tesla enable driving 2019 conditions originated driving car project google august 2012 google announced vehicles completed 300 000 automated driving 500 accident typically involving cars road time starting single drivers pairs late 2014 google revealed prototype steering wheel gas automated google driven automated mode total december 2016 google corporation announced technology company called google subsidiaries company called alphabet google accident reports 2016 cars involved 14 drivers fault 13 times 2016 car software caused crash june 2015 confirmed 12 vehicles involved rear sign traffic light vehicle driver driver sign google controlling car manually july 2015 google employees minor vehicle rear car driver failed traffic light time collision 14 february 2016 google vehicle attempted avoid path bus google stated responsibility car moved collision google characterized crash learning experience reported crash march 2017 vehicle involved crash car failed yield vehicle accident 22 december 2017 completed automated mode 18 march 2018 driving car united hit vehicle 400 feet include driver portion road road speed limit checking cars street marks time individual auto car car death essentially party questions concerns safety automated cars experts human driver crash company ability operate automated cars public citing failure expectation public safety priority driving car testing california result accident 24 2018 national transport safety board issued preliminary report automated bus driving november 2017 automated driving bus involved crash truck truck fault crash stationary automated bus automated bus actions apply driving flash sound passenger ability policy implications planning automated cars commercially potential innovation major implications society likelihood widespread adoption wide scale policy makers questions effects fundamental question travel behavior people increase car ownership car easier ultimately encourage ultimately total private vehicle argue easier share cars ownership decrease total usage cars efficient forms transportation relation situation policy makers infrastructure built money build automated vehicles traffic signals reduced adoption smart smart assistance smart technological advances implemented policy change dependence oil reduced time spent road individual cars policy energy hand automated vehicles increase cars road lead dependence oil smart systems impact vehicles uncertainty future automated vehicles policy makers plan effectively implementing infrastructure improvements human drivers automated vehicles public transportation greatly reduced automated vehicles policy infrastructure job loss increased effects automated vehicles carry driving potential cheaper transforming retail redundant government defines automation levels starting level human driver level automated performs driving tasks current law manufacturers responsibility vehicles public roads vehicle compliant framework specific federal legal barriers highly automated vehicle offered sale associate professor mit media lab people live cars minimize car protect costs industry standards practice systems considered safe real conditions 1968 convention road traffic 70 countries worldwide principles traffic laws fundamental principles convention concept driver control responsible behavior vehicle traffic progress technology takes functions driver principle legal status united united country convention vehicle codes highly automated vehicles legal status vehicles specific laws 2016 california michigan washington columbia laws automated vehicles accident tesla autopilot led discussion laws standards automated cars september 2016 national economic council department transportation released federal standards automated vehicles technology fails protect passenger privacy protected event accident federal guidelines meant avoid laws avoiding innovation june 2011 passed law automated cars automated vehicles operated public roads law department motor vehicles responsible setting safety performance standards agency responsible automated cars tested supported google effort conduct testing google driverless car law defines automated vehicle motor vehicle artificial intelligence sensors global coordinates drive active intervention human operator law operator pay attention car operating google driving permit send messages wheel law require person wheel passenger tests april 2012 testing automated cars public roads california brown signed law google headquarters view december 2013 michigan fourth testing driverless cars public roads july 2014 city robotics includes driving cars 19 february 2016 assembly introduced california automated vehicles operate road including driver steering wheel department motor vehicles july 2018 rules pass house origin september 2016 department transportation released federal automated vehicles policy california published subject october 2016 december 2016 california department motor vehicles remove driving vehicles road response red light human error drivers europe 2013 government united kingdom testing automated cars public roads testing robotic vehicles conducted private property 2014 government france announced testing automated cars public roads allowed 2015 road national france 2015 conference dedicated intelligent transport systems demonstration automated vehicles road france carried october 2015 2015 automobile companies ford toyota vehicles control essential functions steering spring 2015 federal department environment transport energy communications allowed driverless april 2017 conduct public road tests development vehicles construction closed track zone track suitable testing highly automated functions city asia 2016 singapore land transit authority partnership automotive supplier automotive launch automated demand automated service 2017 liability driving car liability developing law policy determine automated car physical damage road rules automated cars shift control driving humans automated car technology existing liability laws identify parties responsible damage address potential human operator public increases automated car technologies advanced driver assistance systems incremental responsibility driving claimed potential affect frequency road difficult claim absence data substantial actual improvement safety operators seek project liability remaining reward improvement obvious reason liability effects purpose liability party controlling avoid causing harm potential users operator seeks pass normal liability person controlling car level accept liability control degree sharing control level person concerned vehicle pass control accident pass responsibility liability potential driver avoiding crash vehicle close attention hard smart car hard human operators existing legal permission expected avoid responsibility maximum degree potential attempt operators held control levels automation commercially introduced level insurance industry proportion commercial product liability lines personal automobile insurance communication systems individual vehicles benefit vehicles traffic safety hazards communication systems vehicles units nodes peer peer network providing approach communication systems vehicles effective 2010 study national traffic safety administration communication systems avoid 79 percent traffic 2012 scientists university texas austin developing smart designed automated cars traffic lights programs communicate car road 2017 researchers university developed scale proposed management technique called network delay communication worst execution time manager 2018 robust approach introduced model external wind connected cars link increasingly speed roads predicted january 2016 public opinion 2011 online survey consumers 49 driverless car 2012 survey 17 400 vehicle owners power 37 initially autonomous car figure dropped 20 told technology cost 000 2012 survey 000 german drivers automotive researcher 22 positive cars 44 24 2013 survey 500 consumers countries cisco systems stated car controlled technology require human driver brazil india china automated technology 2014 telephone survey insurance licensed drivers driving car 86 car insurance cheaper 31 continue drive automated car february 2015 survey auto 46 predict tesla market autonomous vehicle 38 predicted functional safe demand autonomous vehicle 2015 survey university technology explored opinion 000 people countries automated driving average manual driving mode driving 22 money automated driving concerned software concerned legal issues safety finally developed countries terms accident statistics education vehicle data survey potential consumer opinion automated car stating 37 current owners automated car 2016 survey germany opinion people terms age education german population partially highly automated cars women automated cars women exact difference women participants age 2016 survey united opinion people 66 percent autonomous cars average human driver people safety car 13 advantages cars center survey conducted 2017 automation technologies widespread adoption automated vehicles replacement entire job categories robot workers issues automated automobiles ethical issues introduction automated vehicles mass market potential reduction 90 potential disabled elderly range ethical issues addressed include limited financial responsibility law decisions car crash privacy issues including potential mass surveillance potential massive job drivers loss independence vehicle users exposure malware market data power hands global capable capacity facilitate shift liability potential existing industries held crash people experts car manufacturers responsible occur technical car manufacturer source situation car technical issue reason car manufacturers held responsible encourage heavily issues protection brand image financial voices argue vehicle held responsible involved vehicle experts introducing protect owners users automated vehicles claims accident parties held responsible technical failure include software engineers programmed code automated operation vehicles components question legal liability responsibility question automated vehicles programmed emergency situation traffic participants drivers software engineer car manufacturer programming operating software ethical experiment choice planned track running people track person assuming traffic driving car scenario driving person appears car decide options person avoid person wall main addressed basis automated vehicle decisions translated software code researchers suggested ethical theories applicable behavior automated vehicles emergency asimov laws robotics typical ethics theory suggests automated car follow strict written rules follow situation suggests idea decision based goal maximize utility definition utility maximizing people crash critics automated vehicles adapt mix multiple theories respond instance crash privacy issues automated cars mobile device individual ranges tracking voice recording video recording preferences media car patterns streams data communications infrastructure support vehicles capable surveillance coupled data sets advanced analytics implementation automated vehicles mass market cost jobs jobs include drivers buses trucks vehicles industries auto insurance industry industry generates annual revenue supporting 000 jobs perspective – mechanical engineering jobs potential loss majority jobs impact individuals involved india china automated cars citing protection jobs launch cars december 2015 tesla ceo predicted completely automated car introduced 2018 december 2017 announced launch driving tesla market fiction film automated occasionally driving car story earned science fiction literature intelligent driving cars common theme science fiction literature examples include  
245960	computer	instruction level parallelism ilp measure instructions program executed simultaneously approaches instruction level parallelism hardware level dynamic parallelism software level static parallelism dynamic parallelism processor time instructions execute parallel static parallelism compiler instructions execute parallel pentium processor dynamic sequence parallel execution processor static level parallelism program operation depends operations calculated completed operations depend operation calculated simultaneously assume operation completed unit time instructions completed total units time ilp goal compiler processor designers identify advantage ilp ordinary programs typically written sequential execution model instructions execute programmer ilp compiler processor overlap execution multiple instructions change instructions executed ilp exists programs application specific fields graphics scientific computing cryptography exhibit parallelism micro architectural techniques exploit ilp include ilp exploited compiler hardware support compiler inherent implicit ilp programs hardware compilation optimization optimization techniques ilp programs include scheduling register allocation renaming memory access optimization architectures class architectures ilp explicitly architecture ilp techniques provide performance improvements growing processor operating frequencies memory access times ilp designs ibm 360 model ilp techniques overcome limitations register file cache penalty main memory costs hundreds cpu cycles principle ilp memory resource power dissipation costs complexity latency underlying hardware structures reduced operating frequency reducing benefits techniques prove cpu chip data industry exploiting levels parallelism exploited techniques multiprocessing multithreading  
246007	computer	dimensional stereoscopic film dimensional film 3d film film motion picture depth perception adding dimension common approach production 3d films derived stereoscopic photography approach regular motion picture camera record images generated generates post production special projection hardware limit image viewer left eye 3d films limited releases television direct video films incorporated methods advent 3d television ray 3d 3d films existed form motion picture industry costly hardware processes required produce display 3d film lack standardized format segments entertainment business 3d films featured 1950s american cinema experienced worldwide 1980s 1990s driven imax theaters disney 3d films successful 2000s success 3d presentations avatar december 2009 january 2010 patents tests stereoscopic era motion pictures late british film pioneer william filed patent 3d film process patent films projected screen viewer looked converge images mechanics method practical patented stereo camera camera lenses coupled inches 45 june william tests audience theater york city red green anaglyph audience tests included scenes segment john playing film released famous players 3d footage falls 1953 public wrong 50 motion picture industry produced process tests systems stereoscopic pre 1952 earliest confirmed 3d film house audience power love theater los angeles 27 september camera product film producer robert projected dual red green anaglyph format earliest film utilized dual projection earliest film anaglyph glasses filters projection ports unknown press york city film dropped considered lost december william van inventor color growing 3d films started demonstration shot footage camera design deal series shorts entitled movies future theater york city december inventor trade press october frame 3d public left eye eye projectors left frames projected pair times viewing devices attached theater operated projector producing clean stereoscopic result theater installed theater york city short films live 3d feature weeks business poor reviews releasing stereoscopic shorts period film entitled distributed educational pictures red blue anaglyph format produce stereoscopic shorts series released films april 18 december 17 december 17 22 september released sound film late stereoscopic pictures paris shot footage stereoscopic camera september march short film train time 3d meeting french academy science 1936 john hired based footage film series red green anaglyph format smith film january 11 1936 january 15 academy award category short subject 1936 success films produced short anaglyph 3d smith called dimensional short shot studio built camera red blue anaglyph short notable live action conceived jack universal studios company films printed color systems color color printing achieve anaglyph introduction harvard university land conceived idea reducing light leave absence harvard set lab invented patented sheet introduced sheet commercial product original create filter reducing car land utility newly filters stereoscopic presentations january 1936 land demonstration filters conjunction 3d photography installation york museum science unknown film filters meant form projection carrying left eye view projection external motor polarized light white screen silver screen screen material correctly reflect separate images feature appeared italy germany touch 1939 germany drive italian film camera german camera films filters company germany manufactured glasses commercial basis 1936 independently time germany 1939 john shot commercial 3d film short 1939 york fair created motors 1939 set music originally black white film popular shot color fair title dimensions 1953 motor short utilized 3d process produced pennsylvania gate international produced john filmed consisted views pennsylvania trains 1940s war military applications stereoscopic photography producers era era 3d late 1952 release color stereoscopic feature produced written directed film shot natural vision process created controlled built success studios feature production title film highly successful 3d increased 3d period box office features projected dual filters 1950s anaglyph glasses books shorts dan shorts produced shorts dual format alternatively features utilized projectors capacity limit film loaded projector hour worth film meant feature film written script major plot 1952 producer lesser dual called stereo techniques lesser acquired rights dual shorts time glasses directed national film board canada films produced raymond solid explanation royal river black james pioneer 3d 3d program february 1953 shorts stereo summer american life stereo considered lost 3d film short day country composed footage shorts dual anaglyph production released anaglyph april 1953 features 3d columbia dark house 3d feature sound house time american recorded sound film price star king star 3d features dangerous mission success films proved major studios method theaters television sets causing decline disney studios 3d 28 1953 release 3d western columbia los angeles theater 1957 program disney short entitled hosted color universal international released 3d feature 27 1953 space sound feature columbia released 3d produced directed william technical theater columbia artists features 13 house hill columbia produced conceived 3d producer white 3d applied aimed audience stereoscopic shorts 3d released conventional flat motion picture columbia printed 3d film john jack color production lee june 19 1953 film directed counter production costs film famous entry era 3d dimensional pictures production robot film hour filmed period weeks budget previous experience newly built camera 3d photography film shot aligned robot notable score coming film released june 24 1953 short eyes 20th century produced 3d feature inferno 1953 shares spot 3d features expressed stereoscopic systems film decline 3d started august september 1953 factors causing decline projection operators times 3d films trade critics claimed films hard eyes lesser attempted follow stereo techniques time shorts produced project called distributed financial difficulties loss 3d lesser project summer 1953 3d film production shorts shot sun sports short directed set designer director william directed 3d feature artists expensive install major competing process utilized september features single print synchronization issue start quality control 3d owned company focused quality control 3d features summer 1953 released flat formats ranging 66 85 studio articles 3d formats systems referred 3d causing confusion scholars single instance combining 3d 1960 film called september negative september dual short space attack shot 1954 title space december 1953 3d release 3d films including musical hill 3d pass tested theaters 3d flat trade time 3d version received film wide stereoscopic release publications including classic film reference book screen film regular release film adapted popular musical team leads supported ann van james film sound features helped 3d map month john feature distributed columbia thompson money dean martin released shorts moon friendly space pictures released 3d korean war film filmed actual korean locations 1953 based popular stage musical brought screen original filmed stage production idea audience house color photography 3d film shot edited 3d united artists production stereoscopic form released film flat january 27 1954 remains era 3d features united artists feature john considered lost flat versions string successful films filmed 3d wave exclusively flat 3d final decline late spring 1954 reasons previous success formats theater operators created designed filter kit purpose recognizing phase 3d focus processes 3d feature released format era february 23 1955 film wide release 3d received box office single format stereoscopic films remained 1960s released anaglyph films film champion production mask 1961 film shot enhance dream main character mask scenes anaglyph 3d scenes printed red green anaglyph 3d films appeared 1960s true wave 3d cinema set motion producer started 1950s technology called space vision 3d origin space vision 3d robert history stereoscopic motion pictures space vision lens gold standard production films 30 space vision 3d stereoscopic films printed images single academy ratio frame single projector fitted special lens called technique eliminated dual projector set produced polarized 3d images earlier dual stay perfect synchronization repair vision touch film entitled bubble michael critics bubble sound promote studios money expensive dual 1970 entity founded director inventor optical designer developed single format printed images lens pictures filters released sex rated rated film cost 100 000 produce months markets eventually north america constant 2010 800 theaters dimensional film purely relative terms films released 3d 36 films worldwide 25 3d formats 2009 director releasing 3d cinema 3d quality 1970s 3d films films films combination paul combination 1981 1983 3d started western released film 3d 20 films 1950s 3d dominated 3d releases series iii released 3d considered titles screen effects times eyes audience science fiction film expensive 3d film production costs star wars box office success causing spring 1983 films released including criticized poor editing plot holes feature 3d releases included 1983 1985 animated film plot heavily star wars iii officially released dvd 3d united 3d 3d dvd release united kingdom 1980s 3d films classic 1950s films house released video disc format japan shutter glasses transferred dvd market sites stereoscopic movies popular film shot stereoscopic 3d released 1984 3d mid 1980s imax producing fiction films 3d business starting born 1985 key production subsequent imax mathematical 3d eliminated eye approximate previous 3d addition contrast previous based 3d presentations field view imax allowed broader 3d stage 3d film theatre disney company prominent 3d films special 1982 ford 1986 michael notable examples national film board canada production transitions created 86 imax presentation polarized glasses sun 1990 imax film alternate eye technology development required dome screen polarized technology 1990 numerous films produced parties satisfy demands profile special imax 3d network films special note period include extremely successful deep 1995 imax 3d fiction film 1996 director pilot stereoscopic films produced period include 2004 54 imax theaters capable 3d films shortly quality animation competition media digital projection digital video capture sophisticated imax film projectors created opportunity wave 3d films mainstream 2003 james released 3d imax feature filmed reality camera camera hd video cameras film built specifications camera film 2003 deep imax 2005 2005 2004 released included films films 3d august released studio album versions album contained dvd featuring 3d short film track shot definition video november 2004 express released imax animated 3d feature released theaters 2d 66 imax locations return 3d theaters 25 total 3d version earned 14 times screen 2d version pattern continued greatly 3d 3d presentation animated films june 2005 chinese theatre commercial film theatre equipped digital 3d format express tested digital 3d format months november 2005 disney studio entertainment released digital 3d format love short film directed david thomas released june 23 2008 film shot industrial light studios prototype stereoscopic camera suggests film 3d film 3d equipment films shot 3d format technology 3d format limited result stable 2d sales decline revenues 3d continue grow entire history 3d presentations techniques convert existing 2d images 3d presentation existed effective combination digital source material cost effective digital post processing wave conversion products june 2006 imax released returns including 20 minutes 3d images converted 2d original digital footage george announced release star wars films 3d based conversion process company 2011 announced company prime focus conversion late 2005 told press involved 3d cinema glasses based screens splits film frame projects split images screen angles screen animated films season released analog 3d 2006 house released 3d 3d systems 2006 19 2007 film market produced 3d feature film completed real 3d film box office countries including russia 3d screens january 19 2008 3d released live action digital 3d film 3d films included center earth january 16 2009 released 3d film rated film projected real 3d released 3d screens format regular screens rated film final destination released august screens series released hd 3d major 3d films 2009 included final destination disney avatar avatar expensive films time budget film time main technologies exhibit films released time real 3d 3d 3d 3d imax 3d march april 2010 major 3d releases theaters march 2010 train march 26 2010 april 2010 13 china imax 3d film started pre production 3d film shot france 2010 released mid 2011 october 2010 stereoscopic 3d video demand film released major cable 3d united released united 21 2010 animation pictures real 3d released imax 3d september 2003 organized original held theatre week 30 50 era stereoscopic features shorts coming collection film robert spent previous 15 tracking film original film moved sold film previous 2006 announced september film fund previous newly discovered features shorts previous film announced films 3d including universal short van lee films original release stereoscopic form included lost shorts day country 1953 william van shorts reported audience decline initial popularity increase screens films released 3d format instance 45 box office 3d opposed 60 2010 addition cars consisted 37 3d – major releases achieved 43 40 view trend box office analysis implementation 3d presentation people film gray box office notes 3d money people approach simply led money people motion picture association america record total 47 3d films released 2011 domestic box office 18 2010 revenues increased 2012 2d presentations 50 likes 32 choosing 3d versions reasons offered studios expensive 3d prices argue quality films fault perceived decline 3d market studio appears strong format studios 3d generate additional films commercially successful releases involve conversion 2d disney king plans add titles modified 3d plans star wars films producer 3d films leading format market films digitally processed post production claims films led format worth price happened global box office films combined 2d 3d versions achieved 2011 2010 2009 film mark 3d emerging policy limit availability 2d versions 3d format likes release 2012 30 2d substantial 2d opportunity july 2017 imax announced focus movies 2d 3d version 3d movies north america citing north america 2d films 3d films techniques stereoscopic motion pictures produced variety methods popularity systems employed film theaters anaglyph prior era 3d 1950s polarization single feature film united short film century polarization 3d systems continued scene 1960s 1970s classic films converted anaglyph theaters equipped polarization 3d television mid 1980s films short segments anaglyph 3d technical details employed notable 3d film systems developed producing 3d films live action standard live action films 3d involves cameras mounted lenses average pair human eyes recording separate images left eye eye principle normal 2d cameras real option stereoscopic cameras simple 2d camera impossible 3d replaced expensive 2008 center earth live action feature film shot earliest fusion camera released digital 3d avatar 2009 shot 3d process based human eye image improvement existing 3d camera 3d camera simply pair cameras beam camera lenses built unit digital cinema cameras requirement 3d medium film options include imax 3d animation 1940s studio extensive stereoscopic 3d including mid 1950s major animation film studios operation creating traditional 3d animated short subjects disney studio produced traditional animation short stereoscopic 3d 1952 donald 1953 produced single 3d jack rabbit 1953 bugs famous studio produced 3d space 1953 friendly moon 1954 studio produced 1953 distributed universal late 1950s mid 2000s animation produced 3d display theaters films 3d exception animated films rendered stereoscopic 3d version virtual cameras motion animated 3d films cameras live action 3d films 2004 express stereoscopic 3d animated feature film 3d version solely release imax theaters november 2005 disney studio entertainment released digital 3d format disney animated film 3d film converted 2d 3d post production pictures fly moon 3d 2008 animated film created 3d released exclusively 3d digital theaters animation films released solely 3d 3d feature animation 2009 digital rendering process called developed intel create realistic animated 3d images exhibit 3d films theaters 3d imax 3d 2d 3d conversion 2d animated films generated 3d models return models generate 3d version 2d films techniques employed 3d release 1993 film disney pictures scanned original frame produce left eye eye versions films converted 2d 3d approaches 2d 3d conversion notably depth based methods conversion 3d 2d perspective view 3d engine convert 2d content 3d frame rate content slower processors normal frame rate processor fast lead visual effects 3d films anaglyph anaglyph images earliest method 3d commonly public 3d media books 3d television polarization practical popular ease production anaglyph film invented earliest presentations 3d films 1950s 1980s originally polarized anaglyph images additive light setting filters red light setting images printed complementary colors white paper glasses filters eye separate images filter color rendering complementary color black anaglyph images easier view parallel eye types offer accurate color rendering red component color technique commonly transparent filter patented glasses technique process typical anaglyph image parallax alternative usual red filter anaglyph patented anaglyph invented anaglyph image conjunction television standard red channel complementary colors yellow dark blue screen colors glasses lenses dark blue polarization 3d standard presentations 1952 imax presentations eclipse 1960s 1970s classic 3d films converted anaglyph special presentations polarization color anaglyph post era anaglyph polarization feature presentations film 3d 3d segment 3d segments anaglyph printed materials 3d television polarization practical 3d polarized displays manufacturers 2008 generate polarization receiving polarization systems stereoscopic motion picture images projected screen filters viewer cost glasses pair filters oriented circular polarization 90 degree angles 45 degrees linear polarization filter passes light polarized blocks light polarized eye image produce dimensional scene eyes head tracking involved entire audience view stereoscopic images time additionally lenses color people dominant eye eye 3d separation colors circular polarization advantage linear polarization viewer head aligned screen polarization properly linear polarization glasses filters alignment screen filters causing image eye frame easily circular polarization viewer head aligned screen left eye image intended vice versa crosstalk 3d cinema films viewed head head result incorrect parallax prevent fusion liquid crystal filter switch times projector lens projector left eye images displayed sony features called circular polarized images simultaneously single 4k projector resolution displays images resolution time special lens attachment projects images optical traditional projectors adapt film format pair images frame film images projected screen cost effective convert theater screen surface conversion digital projection produces adapter type screen systems reflection surfaces polarization light polarized stereoscopic pictures 1936 land applied motion pictures called movie 1952 1955 offered theaters linear projection glasses minute total 3d films period anaglyph color filter method linear polarization consumer level stereo projectors polarization 3d 1980s 2000s animation competition media digital projection sophisticated imax film projectors created opportunity wave polarized 3d films types polarization result displayed image contrast compared 3d images light random collection polarization filter passes fraction light result screen image increasing brightness projector light source initial polarization filter inserted image generation element light intensity image element normal filter image contrast transmitted screen active shutter technology mechanism block light eye eye image projected screen technology originated eclipse method projector left images glasses viewer synchronization images screen basis implementation eclipse method lcd shutter glasses glasses liquid crystal light synchronization images cinema television screen concept alternate frame method nvidia 3d earlier imax systems method person viewing expensive electronic glasses display wireless signal attached wire shutter glasses polarized glasses lighter models polarized glasses systems require silver screen projected images liquid crystal light light filters internal lcd shutter glasses display image lcd projector image source result images contrast normal 3d viewing usage types displays poor black levels lcd shutter glasses improve image quality interference filter technology 3d specific wavelengths red green blue eye wavelengths red green blue left eye glasses filter specific wavelengths 3d image technology expensive silver screens required polarized systems common 3d display theaters require expensive glasses polarized systems spectral filtering wavelength introduced 3d 3d technology wider spectrum eye spectral bands eye color process image required visible spectrum eyes viewer light energy color balance 50 50 white silver screens film digital projectors filters digital color processor claims glasses cheaper manufacture june 2012 3d 3d discontinued marketed citing global economic 3d market conditions business operations optical continues selling 3d systems markets optical 3d projection filters 3d glasses addition passive stereoscopic 3d optical produced enhanced anaglyph 3d glasses red anaglyph glasses complex metal film quality method glasses stereoscopic image lens parallax barrier technologies involve images sheet narrow screen blocks images parallax barriers equally narrow lenses image entire image produce stereoscopic person eye images images projected gain screen reflects light angles stereoscopic image viewer narrow angle screen limiting size audience presentation numerous shorts russia feature film presentations limited variety items 3d photography includes real 3d display released 2009 examples technology include lcd displays monitors notebooks mobile phones gaming devices health effects viewers 3d films motion addition health concerns easily 3d presentations published study watch 3d films 55 experience varying levels primary effects 3d film human vision crosstalk eyes caused image separation convergence caused difference object perceived position screen real origin light screen believed 12 people unable properly 3d images variety medical conditions experiment 30 people weak stereoscopic vision depth perception based stereo greatly decreases effects digital stereo discovered cones animal eyes measure distance object focus cone cone passive light detection ranging lens object pixel distance measured humans 3d separately eye brain ability addition stereoscopic cues stereoscopic true 3d picture brain french national agency sponsored understand effects 3d film viewing grammar acceptance criticism cues required provide humans relative depth traditional 2d films closer objects objects relative brain distance objects height human figure screen close depth cues 2d films stereopsis parallax focus 3d film addresses accurate presentation stereopsis providing complete 3d promising aimed 2010 stereoscopic displays applications conference san film mark argued 3d adds film avatar film 3d 3d film describing left lenses 3d glasses cut 3d stereoscopic vision technique improve huge brightness loss 3d film versions glasses marketed article virtual space – movies future real life 3d stereoscopic vision depends distance eyes inches depth perception head – arms tasks threading films real life close camera 3d film director notion traditional film depth perception 3d 2d dimensional 95 depth cues resolution color idea calling 2d movie 2d movie required digital video offer quality image 3d cameras equipped prime lenses late film repeatedly criticized 3d film argued expensive technology adds film experience films provide sufficient 3d opposed option opposed replacement traditional film preferred technologies improve image resolution frames brightness concerns 3d systems cut brightness picture considerably – light loss loss running projector power powerful 2d brightness cinema standard 14 48 square set standard official standard 3d brightness industry standard acceptable brightness range – 25 standard 2d brightness criticized huge brightness loss aware eye theaters proper brightness polarized filters september 2012 standards body issued recommended practice calling 3d projection brightness acceptable range theaters achieve light levels current technology prototype laser projection systems reached 3d cinema screen 2012 screen 3d laser projection post conversion major criticism films century filmed 3d converted criticized quality process include james film avatar created 3d ground portions film created 2d 3d michael quality 2d 3d time director involved contrast animated films original models rendered 3d easily depth approximated toy story  
253418	computer	dna computing branch computing dna molecular biology hardware traditional silicon based technologies development concerns theory experiments applications dna computing term term earlier technology integrated circuits history field initially developed university california 1994 demonstrated proof concept dna form computation solved path initial experiments advances turing machines proven initial approach hard realized suited type computation application approach 1997 scientist ray suggested evaluation boolean circuits implementation 2002 researchers institute science israel unveiled programmable molecular computing machine composed dna molecules silicon april 28 2004 institute announced journal nature constructed dna coupled input output module theoretically capable activity cell releasing anti cancer drug diagnosis january 2013 researchers store set audio file martin king speech dream dna digital data storage march 2013 researchers created biological transistor august 2016 researchers gene editing insert dna living idea complexity living based coding functioning key components dna dna suited medium data processing calculations dna fluid grams dna memory capacity theoretical maximum data transfer speed massive parallelism calculations 1000 reached powerful computers 99 current record slow processing speed dna response time measured minutes hours days potential multiple parallel computations time complex calculation simple achieved millions molecules interact simultaneously harder analyze answers dna digital examples prototypes 1994 prototype dna 100 tube filled 100 dna solution managed solve instance directed path experiment path implemented purpose dna fragments created representing city fragments capable fragments created dna fragments produced mixed tube fragments form representing travel chemical days dna fragments representing eliminated remains solution current technical limitations prevent evaluation experiment suitable application proof concept nasa game 2002 created dna play human player calculator consists squares game combinations dna composed dna chemical active molecules cut dna simulate logical functions dna specific types dna introduced logic function default considered played central square human player starts types dna remaining boxes played play box human player input dna dna box played dna dna divided human player achieve draw real neural network based computing developed dna based artificial neural network recognize 100 bit hand written digits achieve programming advance set weights represented varying weight molecules tube holds input dna capabilities dna computing form parallel computing takes advantage molecules dna specialized dna computers faster built mathematical computations demonstrated dna dna molecules utilized assignment colleagues built dna gps conduct experiment magnetic fields enhance charge transport dna protein sense magnetic fields implementation matrix multiplication algorithm dna scaling addition researchers created circuit unique dna calculate square root 15 coding referred coding chemical dna compute coding dna molecules represent variable dna computing provide capabilities theory study computationally models computation space required solution grows exponentially size von neumann machines grows exponentially size dna machines dna required practical methods multiple methods building computing device based dna advantages disadvantages build basic logic gates digital logic dna basis bases include exchange dna input matching build logic gates analogous digital logic silicon limited input gates current implementation evaluating statements series logic gate structure matching materials models based easy detect single limit measured device continuous product removed molecules commonly named 17 popular arbitrary location build machines demonstrated logic gates 17 demonstrated constructing logic gates limited metal function design called stem loop consisting single dna loop dynamic structure piece dna loop exploited create logic gates logic gates create computers play extent based dna computers form simple turing machine analogous hardware form software form dna colleagues demonstrated dna expanded automata cancer expression expression automata evaluated expression gene gene time positive diagnosis released single dna protein negative diagnosis decided release positive diagnosis drug limitation implementation separate automata required drug entire process evaluation drug release hour complete method requires transition molecules requirement limits application cells molecules exchange dna computers constructed concept exchange input dna dna segment creation modular logic components gates signal linked computers class dna computers require chemical capability dna algorithmic assembly dna nanotechnology applied field dna computing dna designed multiple sequences chosen array demonstrated assembly operation dna array implement cellular automaton generates called computation incorporated assembly dna arrays increasing scope simple periodic arrays alternative technologies partnership ibm established 2009 dna chips production manufacturing based integrated circuits chips compute square compiler written  
253838	computer	prodos operating systems apple series personal computers original prodos renamed prodos version official operating usable bit apple series computers distributed 1983 1993 prodos 16 gap solution 16 bit apple replaced os prodos marketed apple meaning professional disk operating popular operating apple series computers months release january 1983 background prodos released address earlier apple operating called simply dos age apple dos built support 25 floppy disks requires peripheral devices hard disk drives disk floppy disk drives including floppy drives prodos adds standard method accessing rom based drivers expansion cards disk devices maximum volume size 400 32 introduces support hierarchical feature organizing hard disk storage space supports ram disks machines memory prodos addresses handling hardware interrupts includes defined documented programming expansion interface apple dos prodos includes support real time clock support unused release apple apple series include board party prodos earlier apple dos versions operating apple iii released 1980 pre release documentation prodos including editions apple prodos documented error codes notably switched disks prodos generate disk format programming interface completely apple dos prodos read write dos disks conversion utility level track sector format dos disks disks level arrangement files completely reason machine language programs apple dos prodos basic programs require minor party program called dos master enables users multiple virtual dos larger prodos volume release prodos support integer basic original apple model effectively basic apple dos loads built support basic programming prodos job separate program called basic write basic programs basic continued built apple basic command interpreter enhancement basic programs access prodos control output dos basic requires memory dos prodos kernel language card ram usable ram basic programmers remains prodos dos prodos advantages users programmers time investment learning apple dos apple dos based software data formats reason prodos 15 characters compared apple dos 30 apple integrated software package released 1984 proved reason switch 1985 software products released operating apple continued boot dos apple boot dos hard disks users spent time prodos apple released 1983 apple memory built apple shipped dos prodos computers original prodos renamed prodos prodos 16 released support 16 bit apple prodos 16 replaced os requirements editions prodos require apple series licensed compatible prodos requires memory original prodos requires kernel programs including basic basic require prodos practical matter support machines removed version prodos version requires cpu prodos runs utility programs disk require systems cpu prodos versions prior version prodos released august 16 2016 requirement apple computers 64 ram basic requires rom prodos 16 requires apple apple release prodos version 01 check running official apple manufactured word apple rom firmware prodos load normal prodos boot screen measure apple apple versions prodos users apply byte patch successive version prodos users replacing physical rom chip copied version apple rom custom rom apple disk support prodos supports disk compatible floppy drives ram drive computers ram block devices controllers support pascal firmware protocol standardized method accepting block reads writes originally introduced ucsd category includes disk hard drives custom block device drivers os file prodos file earlier apple apple iii prodos file native apple prodos prodos 16 os classic mac os versions file translator handle file volume allocated byte blocks 25 floppy disks 256 byte sectors format required controller rom boot disk prodos simply pairs 256 byte sectors single block drives volume capacity 32 file 16 volume floppy disk hard drive partition volume base directory volumes volume result prodos searches drives named volume supported concept prefix directory current path easier file directory volume names 15 characters starting letter letters digits file entry 16 bit byte pointer block file block 16 bit block count 24 bit byte file size bit byte 16 bit type meaning depends creation modification data file stored volume sparse files supported files removing filled blocks volume header relevant volumes including root directory sequentially indexed block starting address previous block subsequent block root directory disks blocks allowing 51 entries volume header size manual intervention special tools block grow automatically normal files indexed single block files bytes block directory entry block file data files 256 blocks bytes 128 data single block directory entry list 256 data block addresses larger files master block list 256 block addresses apple introduced storage format introduced files typical program files directory entry block storage format files read written prodos volume remains compatible volume blocks central file allocation table prodos volume apple tools boot sector supports prodos depending block apple boot block block disk boot apple apple iii computers operating kernels directory apple boot sector file prodos apple iii boot sector file kernel party utilities provide boot block mark block user data prodos kernel support file systems conversion utility main disk transfer files individually prodos apple dos disks level disk format dos prodos data dos disks prodos step process dos disk utilizing dos utility  
253848	computer	apple dos family disk operating systems apple series microcomputers late 1978 1983 prodos 1983 apple dos major releases dos dos dos releases minor bug release apple dos minor release receive version apple dos version apple dos 1980 1983 releases prior release apple dos apple users rely audio data storage retrieval method slow version history apple introduced apple april 1977 disk drive disk operating dos apple founder steve designed disk controller late believed written dos founder steve jobs decided task company considered digital cp sought operating easier april 1978 apple signed 13 000 contract microsystems write dos deliver 35 days apple detailed specifications apple closely paul wrote operating cards minicomputer apple dos versions development called builds 28 apple dos renamed issue version publicly released bugs programmers apple published official documentation release apple dos publicly released june 1978 apple introduced disk based operating apple bug release addressing utility create apple dos master disks built command created disks machines memory created includes version dos memory configuration apple dos released 1979 reflect methods built successor apple apple firmware included auto start feature automatically disk controller powered rom apple dos released 1980 improves functions release allowing gains floppy disk storage disk controller enabled reading writing data density 13 sectors 16 sectors data stored disk track increasing capacity disk overhead dos dos disk leaving user programs data dos compatible read write dos disks address apple released utility called apple dos files programs version disks apple offered utility apple dos files version disks wrote utility commercial utilities files format eventually prodos release improves ability switch integer basic basic language card ram expansion firmware card technical details apple dos disks 13 sectors data track sector 35 disk access floppy disk user disk user total storage capacity store dos disk directory leaving user programs compared modern operating systems apple dos layer operating called stands read write track sector layer consists track sector reading writing disk api called file manager built implements functions close read write lock write protect write enable files file structural integrity function files function formats disk dos storing dos storing startup program called auto started disk file manager api main dos routines implemented machine basic interpreter disk commands storing loading running binary load save basic programs running based batch files consisting basic dos commands finally types files exist identified letters additional file types additional supported dos recognizes types direct manipulate types files type binary executable files programs support type data files software bit apple machine language programs concern code apple multiple programs time modern computers programs written expect code memory location time code complicated difficult implement bit cpu apple dos accommodate varying amounts memory installed apple dos loads memory basic programs graphics capabilities machines memory apple dos region space file software load memory memory comparison prodos loads language card ram requiring machine vector table region programs dos loaded memory dos basic functioning calling location traditional command return basic monitor boot process loading apple dos involves series programs loading process steps passing control program chain integer basic floating basic support original apple included rom basic interpreter originally apple basic integer basic variables language handle integer ranging 32 16 bit binary values floating supported commands resolution graphics months apple release apple develop capable basic interpreter basic capable handling floating real digits precision base 38 38 support resolution graphics capable basic integer basic programs causing users dos released basic standard rom apple apple designed support switching basic integer basic loaded ram language card apple typing basic user switch version decline apple dos 1980 apple dos entered apple products apple efforts apple iii operating apple iii abandoned company versions apple dos called dos bug support apple model released mid 1983 party apple dos read floppy disks running 25 inch disk drive access media hard disk drives virtual ram drives inch floppy disk drives structure apple dos disks sector map restricted single sector time drive major sections code main reason apple abandoned iteration dos 1983 apple dos replaced prodos prodos 16 sector level format dos disks introduces level format suitable devices suitable hard disks era inch apple computers dos prodos requiring language card memory expansion prodos models built language card hardware prodos straight prodos includes software files apple dos disks people improvements prodos memory continued apple dos 1983 apple convention storing os single floppy disk commercial software matter os user program called dos master enables users multiple virtual dos larger prodos volume floppy based dos programs hard disk shortly prodos apple permission parties dos granted company exclusive license dos commercial games apple dos custom disk routines protection purposes performance performance improvements versions dos read write track proper sector disk passes read write head decoding read sector encoding written sector dos wait entire revolution disk sector called understood performance bottleneck disk systems avoid sectors dos disk arranged prodos arranged sectors reading decoding sector sector passes sector sector waiting reading sector sectors pass sector reading sector 15 drive wait extra revolution sector track sector track track arranged relative time decode read sector head sector average track read disk dos file manager efficiency bytes read written file time disk buffer main memory requiring time dos constantly reading writing files programs format disks modified sector disks dos time sectors data programmers apple file manager routines avoid extra sectors file read write sectors main memory disk buffer sector transferred patch provide functionality published load command times typical functionality appeared commercial products dos dos hyper dos david dos additional features official apple dos release functionality employed apple successor operating prodos apple specific operating os eventually employ efficient read technique read sector happened passing read head file read release source code 2013 35 apple debuted original apple dos source code released history museum paul creator code  
254141	computer	compatible time sharing time sharing operating systems developed mit computation center demonstrated 1961 operated mit 1973 time mit influential project mac spread sites paper 1962 spring joint conference greatly influenced design time sharing systems experimental time sharing john 1954 summer session mit time sharing reading station user computers time ibm powerful implement mit computation center input intent programmer operator additional answers machine time sharing basis programs machine simultaneously june 1959 published paper time sharing fast computers processing conference paris programmer debugging program console connected program running time debugging programs time batch processing day changed code john wrote mit preliminary study committee committee established mit develop time sharing users time decided details implementing mit started development july 1961 time sharing commands operational computation center ibm november 1961 demonstrated mit called experimental time sharing 1962 published paper spring joint conference robert peter programmers implemented operating partly based fortran monitor ibm modified user consoles users tape units user file directory core program memory tape unit commands disk drives memory 27 36 bit users supervisor operating input consoles written supervisor interrupts return character received control supervisor running code tape decided console commands implemented time input edit load start initial version compatible time sharing demonstration time sharing claims special purpose systems papers published compatibility background jobs compute resources time sharing functions implementation kernel modified ibm mainframe 32 36 bit word banks core memory normal bank time sharing program user programs protected mode kernel supervisor functions core memory bank called software interrupts modern operating systems causing memory protection interrupts software interrupts processor allocation scheduling quantum time unit 200 controlled feedback queue special memory management hardware clock interrupt ability instructions programming languages compiler fortran code translated code written programming languages lisp version algol file user directory people file names extension file modes temporary permanent read class read class read class user change mode files files linked user directory directory peripherals input output hardware standard ibm peripherals included data channels connecting multics developed project mac started 1960s successor – inspired development unix 1969 technical terms systems influential mit time sharing produced people direction multics unix multics  
267753	computer	annual international robotics competition proposed founded 1996 pre university aim competition consists robotics offering publicly challenge advances technologies learn robots playing applied industry solve difficult real professor head school science engineering competition robot stages competition 2016 competition held germany 2017 held japan professor current president 2014 official goal project contest major competition domains team autonomous game starts input human editions formal international micro robot tournament held korea november 1996 american team newton labs competition cnn asia editions 12 december 18 december  
283853	computer	jersey institute technology njit public university newark jersey located 30 minutes rapid transit njit jersey science technology university operates enterprise development center largest tech oriented business country founded support local patents njit newark technical school students application oriented school grew classic engineering college – newark college engineering – addition school architecture 1973 university hosts school fall 2018 university 11 400 students 000 live campus njit engineering schools universities potential ranked college america business 2015 college country 2013 njit offers bachelor science arts 66 graduate phd programs honors college offers professional programs healthcare law collaboration nearby institutions including medical school hall law school njit offers cross registration university newark campus 2018 school faculty include turing award winner 2011 prize mathematical physics winner 2015 national hall national academy engineering national academy sciences national medal technology winner gold medal winner multiple ieee national academy njit njit association public land grant universities grant college association schools architecture participated scholars program 1999 19 teams division compete sun conference history founding jersey institute technology history century originally introduced march 24 input newark board trade jersey essentially contest determine technical school challenge straightforward stake 000 000 matched investment establish school newark board trade jointly newark city council launched campaign win school city private force resource support fund collaboration public private sectors produced success newark technical school ready students students attended classes building 21 west park street facility house student body meet growing school fund institution capital launched support construction dedicated building newark technical school school dynamic director dr charles street story building named hall honor institution laboratory building called hall campus newark college engineering dr led institution 1949 transforming newark technical school newark college engineering hall war newark hall purchased college decades left history institution 1955 75 class served forces hall built hall replaced current story structure level programs introduced 1966 building expansion completed jersey institute technology addition jersey school architecture 1973 institution evolved technological university broad range graduate degrees dedicated public service president william school communicate dynamic evolution institution winning coming 25 – jersey institute technology – increasing scope educational jersey university board approved transition september 1974 newark college engineering officially jersey institute technology january 1975 received personal president time newark college engineering njit engineering school history 2003 robert president named president 1978 retired 2011 january 2012 njit named president 2003 campus center hall centralized campus social events construction desk hall lab student organization offices continued 2004 2005 row automobile adjacent campus 2006 construction campus hall american campus communities location hall 2007 university centre 2005 hall center symbolic door university tower logo newark college engineering designed campaign current njit – jersey science technology university – edge knowledge launched unique position jersey science technology focused university school changed management school business school business school focuses utilizing technology serve business school benefits york city wall street minutes school strong academic collaboration nearby business school 2008 njit program heritage institute technology hit west india 20 hit students njit summer 2009 jersey school architecture college architecture design college jersey school architecture continues joined newly established school art design june 2010 njit officially completed purchase central school building njit completion purchase street street street converted subsequently central school building extensively updated campus master plan included hall create facilities 2016 18 include 000 multi purpose events center features arena accommodate 500 000 event participants 24 000 life sciences engineering center 000 spaces cars university awarded degrees 2017 including bachelor master 59 11 projected reach 12 200 criteria consists average score math fall 2018 math average score math honors college fall 2018 minimum score math accelerated program – combined jersey medical school – female student ratio student faculty ratio 20 schools school university organized 21 biological sciences history theater arts newark campus njit student population 15 international njit diverse national universities country multiple study options extensive service opportunities newark college engineering newark college engineering established largest professional engineering schools united offers 13 degree programs 16 master degree programs 500 100 graduate study 150 faculty includes engineers scholars recognized fields estimated professional engineers jersey 40 000 living college science arts college science arts formed 1982 originally college newark college engineering jersey school architecture 1986 changed college science arts result defined mission direction growing njit honors college evolved honors program founded 1985 college computing sciences developed science department college consists academic college architecture design college architecture design school architecture school art design college offers degrees architecture digital design industrial design design graduate degrees architecture infrastructure planning systems college njit designated library library materials offered form reference materials rare books visual materials architectural drawings maps digital databases materials library college offers pre college summer program school students college computing sciences science department college computing sciences largest njit student population largest science department universities york department offers range degree programs science phd addition emerging programs telecommunication bioinformatics computing business bioinformatics degree pre option martin school management som school management established 1988 association advance schools business 1997 offers programs marketing management systems international business technological corporate communications conjunction university degrees include bachelor science program master science management program 30 master business administration programs regular 48 time students time students accelerated 18 month executive program managers professionals honors college 1985 njit established honors program encourage challenge motivated students dr richard professor history associate dean college science arts director approach students balanced education special activities courses series program 28 honors students studies fall 1985 growing 1990 jobs prominent corporations chosen education entering graduate training schools medicine law dr director honors program 1991 direction assistance dr faculty honors president dr william national honors council faculty honors college president class 45 development njit college special helped create honors college 1995 allowed honors college students growing 1995 students honors created strong educational foundation dr vice president academic student services named dean honors college included stronger active honors student council additional staff support student opportunities activities including variety study activities publications time honors college major growth honors honors enhanced courses projects students programs including accelerated programs medicine physical law diversity offerings honors hall goal strategic plan september 2013 strategic plan created guidance dean emphasizes academic centered education professional development community technological strategic plan board 2001 plan 2008 plan goals plan emphasizes academic enhancements students individual education plans innovative honors courses dual increased student programs international study njit 2017 2018 focus include applied mathematics materials science biomedical engineering solar physics – center solar leader key agent regional economic development njit hosts enterprise development center campus business 90 start jersey innovation institute offers services business university performed nanotechnology solar physics science development smart technology university centers include national center transportation industrial productivity university hosts york robotics office university hosts center solar operates solar largest solar located california operates solar array california njit communications center center specialized communication systems electronic exchange electronic exchange electronic exchange developments virtual term coined dr learning platform unique evolved existing communications created completed mid university operates class class 1000 campus academic purposes including counter university maintains advanced 67 node supercomputer cluster mathematics department purposes njit including cross domain sharing data security privacy data mining malware detection security secure social networks secure cloud computing university designated national center academic defense education academic national security agency department security libraries supporting main library robert van library located central building facility study print online sources 1997 van workstations library architecture design located hall core collection includes print electronic books journals maps drawings models images materials samples 70 000 included njit resources university historical including items developed manufactured scientist inventor founding board university dr collection artifacts rare books van library scholars history science technology life living campus 80 njit students campus life campus community includes 200 students njit campus hall constructed 1978 constructed 1997 extended 1999 students house street fall 2013 honors college students greek provide space students street honors college living campus campus hall university center american campus communities completed 2007 located njit technologies center building students njit jersey medical school hall university students local institutions nearby including east orange food service food services campus services campus facilities include bell tech store store newly street building operates floor campus center offers variety personal includes 21 offers trucks campus variety style short walk campus njit 19 sports teams including level teams njit teams called school colors red white blue njit teams compete division level sun conference sun sun njit division independent – left conference west conference schools sun conference located teams sun compete association association team mid association 2016 women team independent independent team division competing conference 2019 20 season december 2014 njit team independent national sports reports ranked 17 michigan division sports njit level sports include notable founding njit issued degrees 000 njit distinguished sectors  
288500	computer	edition unix called version unix version v7 release unix operating v7 released 1979 bell laboratories release widespread distribution unix corporation 1980s v7 originally developed digital equipment corporation pdp 11 minicomputers ported platforms overview unix versions bell labs designated edition user manual released 1979 edition edition version licensed commercial users development unix continued edition incorporated development edition bell labs researchers developing plan v7 portable version unix era minicomputers architectural variations market 16 bit microprocessors ports completed release sun workstations based motorola v7 port version intel derived v7 systems produced running v7 vax port v7 called unix direct popular family unix systems university ported v6 32 ported v7 machine sold port edition commercial unix offering dec distributed pdp 11 version v7 called modified developed dec original unix engineering contained enhancements kernel pdp 11 computers including improved hardware error recovery additional device drivers evolved developed reception power simplicity time unix users v7 unix development true unix improvement preceding time release greatly extended feature set decrease performance compared v6 user community calls version 50 unix unix systems continued add released software 2002 caldera international released v7 bsd software license images v7 modern hosts pdp 11 x86 port developed paul allen maintains publicly accessible systems including pdp 11 70 running unix version request running version unix original equipment features version features introduced version portable compiler earlier pdp 11 specific compiler appeared unix version versions unix files feature inter process communication files process create special type file codice processes file channel denoted file descriptor communicate process created file files considered experimental enabled default kernel versions offered bsd unix facilities files  
291161	computer	communications acm journal association computing machinery acm established managing editor acm articles intended readers science systems focus practical implications advances technology management issues acm variety theoretical journals magazine boundary science magazine trade magazine scientific journal content subject peer review articles published published material published accessible relevant broad 1960 published algorithms expressed algol collection algorithms collected algorithms acm  
291807	computer	born 21 november french academic author field languages created programming language idea design contract education academic career received master degree engineering paris master degree stanford university phd technical career france faculty university california october 2001 2016 professor software engineering federal institute technology building trusted components software elements guaranteed level quality chair science department 2004 2006 13 taught introduction programming science students programming textbook touch class professor university advanced grant project activities include associate university chair university 1998 2003 professor university australia french academy technologies active object oriented design architectural reviews technology assessment object technology software topics conference speaker active issues education policy founding president informatics europe association european science languages ideal simple user friendly languages earliest vocal object oriented programming book object oriented software construction considered books written include language description language object success discussion object technology managers software discussion issues solutions introduction theory programming languages touch class numerous articles edited conference proceedings initial designer method language continued participate evolution design contract development method experiences object technology language abstract data types formal specification including notation background development influential development languages including java python awards 2005 senior award winner award prize named object technology awarded annually senior researchers technical contributions field object orientation received university russia 2004 university york 2015 2006 received software award acm impact software quality recognition design 2008 fellow acm 2009 award ieee society wikipedia 28 december 2005 user announced death german wikipedia reported days news article major news media germany story publish positive evaluation wikipedia potential affect picture wikipedia  
296950	computer	cross language retrieval retrieval dealing written language language user query term cross language retrieval frequent cross retrieval retrieval multilingual retrieval term multilingual retrieval refers technology retrieval multilingual collections technology moved handle material language cross language retrieval refers users language relevant documents systems translation techniques techniques classified categories based translation resources systems improved accurate multi cross retrieval systems effective systems access tasks media monitoring filtering routing sentiment analysis extraction require sophisticated models typically processing analysis items processing aware target languages deployed mechanisms variation human language pose coverage challenges retrieval systems texts collection treat topic terms expressions match expression user true true cross retrieval users target language extent benefits technology users poor target language specific technologies services include morphological analysis handle compound splitting handle compound terms translations mechanisms translate query language held 96 conference held 2000 cross language evaluation forum researchers annual retrieval conference systems methods retrieval conference served reference google search cross language search feature removed 2013  
299329	computer	grammar theory model symbol strings originated computational linguistics understand structure natural languages probabilistic context grammars applied probabilistic modeling rna structures 40 introduced computational linguistics extend context grammars hidden markov models extend regular grammars production assigned probability probability derivation parse product probabilities derivation probabilities viewed parameters model convenient learn parameters machine learning probabilistic grammar constrained context training dataset application diverse natural language processing study structure rna molecules design programming languages designing efficient factors scalability issues grammar ambiguity resolved grammar design accuracy grammar parsing algorithms time memory requirements definitions derivation process recursive generation strings grammar parsing finding valid derivation automaton parse tree alignment grammar sequence pcfg grammars automaton algorithm grammar left stack manner force approach efficient rna secondary structure prediction variants algorithm provide efficient alternatives grammar parsing automata pcfg stanford statistical trained formal definition probabilistic context grammar defined relation hidden markov models models extend context grammars hidden markov models extend regular grammars algorithm algorithm computes total probability consistent sequence based pcfg equivalent probability pcfg generating sequence intuitively measure consistent sequence grammar algorithm model estimate prior frequencies observed training sequences dynamic programming variants algorithm parse rna sequence pcfg model parse derivation sequence pcfg grammar construction context grammars represented set rules inspired attempts model natural languages rules absolute typical syntax representation form production rules consist terminal terminal symbols production rules pcfg left string terminal pcfg grammar grammar character terminals grammar grammar rules terminal symbol transformed string terminals terminals grammar read terminal generate derivation grammar result parsing applied word sequence interpretation sentences head seeks arms strategy dealing add rules rule takes rules difficult manage difficulty structures generated probabilistic grammars ranking frequency weights winner interpretation usage patterns altered probabilistic rules learned updating grammar assigning probability production rules pcfg probabilities distributions training set composition language modeled samples broad language probabilistic grammars probabilities estimated data typically hand grammars applicable rna structure prediction incorporate sequence structure relationship lack metrics sequence structural potential weighted context grammar weighted context grammar category context grammar production numeric weight weight specific parse tree product sum rule weights tree rule weight included rule tree special weights probabilities extended version algorithm weight derivation string tree weight product rule weights express set probability distributions applications rna structure prediction energy minimization pcfg provide predicting rna secondary structure comparable performance structure prediction minimum energy calculation pcfg model parameters derived frequencies features observed databases rna structures experimental energy minimization methods types structure modeled pcfg include range interactions structure nested structures modeled extend assigning probabilities production rule maximum probability parse tree grammar implies maximum probability structure preserve structures primary sequence rna structure prediction guided combining evolutionary sequence analysis knowledge structure based probabilities search structural pcfg rules pcfg probabilities building grammar model behavior base pairs single regions starts exploring features structural multiple sequence alignment grammar generates string fashion terminal derived string derived generating moving pcfg model structure prediction incorporating features rna expectation reflect assuming structure rna increase pcfg space memory complexity desirable pcfg based model simple string grammar generates assigned probability weight 11 pcfg model 12 sum probabilities grammar 13 scores explain likelihood secondary structure production rules loop lengths base pair stacking explore range generations including structures grammar accept structures based score implementations rna secondary structure implementations based pcfg approaches utilized implementation approaches exist secondary structure prediction rna sequences covariance models searching databases sequences rna annotation classification finding stable structural design pcfg design secondary structure prediction accuracy structure prediction probabilistic model based pcfg maintain simplicity prediction accuracy complex model performance single sequence scale grammar based model multiple parse trees grammar denotes grammar ambiguity base pair structures grammar optimal structure correspondence parse tree secondary structure types distinguished parse tree ambiguity structural ambiguity structural ambiguity affect approaches optimal structure selection basis lowest energy scores parse tree ambiguity concerns existence multiple parse trees sequence ambiguity base structures sequence generating parse trees finding optimal structural ambiguity multiple parse trees secondary structure algorithm decision finding optimal structure correspondence parse tree structure unique grammar ambiguity conditional algorithm building pcfg model probabilistic context grammar consists terminal variables feature modeled production rule assigned probability estimated training set rna structures production rules applied terminal left starting terminal 14 produces loops rest grammar parameter 15 decide loop start stem single region parameter 16 produces bases simple pcfg application predicting structures multi step process addition pcfg incorporated probabilistic models rna evolutionary history search sequences databases evolutionary history context inclusion prior distributions rna structures structural alignment production rules pcfg prediction accuracy summary steps utilizing algorithms algorithms dealing aspects pcfg based probabilistic models rna structure prediction exist instance algorithm algorithm algorithm recursive dynamic programming algorithm follow expectation maximization paradigms computes total probability consistent sequence based pcfg scores parse tree probabilities pcfg scores probability complete parse tree sequence note term algorithm describes variant algorithm optimal parse tree sequence pcfg actual algorithm probabilistic algorithm 20 probabilities 21 parse 22 23 algorithm 24 probabilities complete parse tree sequence root calculation 23 variables estimation probability parameters pcfg pcfg algorithm finding expected times derivation products divided probability sequence model 11 expected times production rule expectation maximization utilizes values algorithm 27 parse tree 28 yields 29 memory time complexity pcfg algorithms rna structure predictions 30 31 pcfg alter requirement database searches methods pcfg search covariance models special type applications database searches annotation rna classification build pcfg based rna represented secondary structure rna analysis package inference rna database families based structure sequence designed rna structure alignment terminals transition probabilities considered grammars model grammar includes types secondary structure probabilities terminals connected transitions ideally current node connect insert subsequent node connect insert base insert connect score model algorithms implementation log scores parse tree 38 calculated scores function sequence discriminative measure recover parse tree probability score 40 reached limiting maximum sequence aligned calculating log relative computation time step linear database size algorithm memory complexity 41 evolutionary guide structure prediction 99 algorithm basis approach predicting rna secondary structure approach requires evolutionary history derived alignment tree addition probabilities columns grammar probabilities observed training dataset estimate column probabilities bases structural alignment probabilities bases columns bases columns independent columns bases single base positions positions frequencies bases loops occurrence 42 occurrence 43 identical 44 calculate mutation rates bases sequences mutation rates estimated recover sequence identity threshold comparison sequences approach 85 identity threshold sequences single base positions differences columns sequence pairs position sequences bases count difference sequence bases mutation rate matrix mutation flow 16 16 rate distribution matrix generated pcfg predict prior probability distribution structure posterior probabilities estimated algorithm structure algorithm estimate alignment probabilities calculating column prior probabilities alignment probability estimated secondary structures column secondary structure 48 sequence 49 respect alignment tree model prior distribution pcfg 50 tree calculated model maximum likelihood estimation note treated unknown bases summation dynamic programming assign production probabilities rule grammar structure grammar assigned production probabilities structures training dataset prior probabilities weight predictions accuracy times rule depends observations training dataset grammar feature probabilities written grammar rule total 100 instance predict structure likelihood prior alignment frequencies data structure predicted grammar computed maximizing 58 algorithm structure predicted correct predictions reported structure improvements 99 algorithm pcfg based approaches desired scalable speed accuracy minimal addresses limitations 99 algorithm respect scalability speed accuracy protein sequence analysis proved powerful tools predicting rna secondary structure usage field protein sequence analysis limited size alphabet variety interactions grammar inference consequence applications formal language theory protein analysis restricted production grammars power model simple functional patterns based local interactions protein structures commonly display dependencies including nested relationships capabilities development dependencies providing ability model wider range protein patterns main obstacles protein grammar size alphabet encode 20 proposed address chemical properties reduce combinations symbols production rules levels quantitative property 20 types medium van volume based scheme produced generate contact feature grammars analysis rules parse trees provide meaningful  
300462	computer	alan april – february 1990 american scientist professor university carnegie mellon university yale university pioneering programming languages turing award born family pennsylvania school 1939 received bachelor degree carnegie institute technology renamed carnegie mellon university war served mathematics earned master degree 1949 mathematics massachusetts institute technology mit titled integral equations solution iteration 1952 participated project joined faculty university 1956 moved carnegie institute technology chair mathematics head science department 1962 elected president association computing machinery awarded turing award 1966 influence advanced programming techniques compiler construction reference team developed programming language algol 1971 moved yale university chair science hold chair 1977 elected national academy engineering 1982 wrote article programming association computing machinery acm journal describing sentence learned programming career remained yale death 1990 publications publications selection  
301999	computer	natural language generation nlg natural language processing task generating natural language machine representation knowledge base logical form term language production formal representations interpreted models representations nlg translator converts data natural language representation methods produce final language compiler inherent natural languages nlg existed time commercial nlg technology nlg viewed natural language understanding natural language understanding input sentence produce machine representation language nlg decisions concept simple systems generate form letters typically involve grammar rules generate letter consumer stating credit card limit reached simple systems template word document mail merge complex nlg systems dynamically create natural language processing explicit models language grammars domain statistical models derived human written texts simple essentially template takes input predicted levels generates short textual summary levels output historical data july 2005 software levels increased levels values country levels values contrast actual written human data counts expected remain level level south east medium levels count comparing choices nlg systems stages process generate simple keeping list copied linked simple domains machines generators business letters sophisticated nlg include stages planning merging enable generation natural typical stages natural language generation proposed content instance explicitly south east document structuring levels levels aggregation merging sentences improve instance merging sentences single sentence lexical choice concepts medium describing level referring expression generation creating referring expressions identify objects regions refer region task includes decisions types creating actual rules morphology alternative approach nlg machine learning build separate stages build nlg training machine learning algorithm lstm data set input data human written output texts approach successful image automatically generating textual image applications popular media paid attention nlg systems generate computational commercial perspective successful nlg data systems generate textual databases data sets perform data analysis generation textual effective graphs decision support generated texts superior reader perspective human written texts commercial data systems produced weather weather data earliest environment canada generate weather french english 1990s success commercial applications include office enhanced considerable commercial nlg financial business data nlg standard feature 90 modern analytics platforms nlg commercially automated generating product descriptions sites medical records describing graphs data sets blind people interactive nlg framework stands meant users manipulate continuously rendered view nlg output underlying formal language document nlg input editing formal language learning content generation systems assist human writing process efficient effective content generation tool based mining search engines apis built tool cut writing scenario writer forms content search relevance essential filter search based matching parse tree query parse trees candidate answers alternative approach level structure human automatically build template topic automatically written wikipedia article companies started 2009 build systems transform data nlg techniques include nlg automated science visual nlg evaluation scientific fields nlg researchers systems modules algorithms called evaluation basic techniques evaluating nlg systems ultimate goal nlg systems people techniques task based time consuming expensive difficult carry require subjects expertise nlp task based exception norm researchers human ratings metrics predict task based conducted context generation challenges shared task events initial human ratings metrics regard human ratings predict task effectiveness degree exceptions ratings produced metrics predict task effectiveness preliminary human ratings popular evaluation technique nlg contrast machine translation metrics  
302444	computer	japanese corporation involved aerospace transportation manufacturing automobiles company aerospace division serves defense japanese government manufacturing martin license division global development manufacturing partner companies history heavy industries aircraft company leading supplier japanese government war war broken government separated operation heavy industries incorporated july 15 1953 japanese companies tokyo joined form japan largest manufacturers transportation equipment late 1980s company major supplier military aerospace equipment japan 80 sales automobiles sales 1989 fell 15 1990 company loss 500 industrial bank japan main bank company motor owned company step president motor charge 1991 started contract manufacturing europe company brand cars aerospace division japanese defense force eclipse business 2003 company logo division worldwide corporate symbol october 2005 toyota purchased shares motors owned 20 1999 remaining 11 stake market stated 27 shares acquired start unknown party october 2005 suggested bank involved purchase toyota announced contract march 13 2006 manufacturing facility usa plans 000 workers set assembly quarter 2007 june 2014 company entered contract major japanese companies build aircraft 2016 heavy industries announced change corporation change effective april 2017 divisions main divisions  
302812	computer	color vision ability machine distinguish objects based wavelengths frequencies light reflect transmit colors measured person perception colors process brain stimuli produced incoming light types cone cells eye people illuminated object light source wavelength detection newton discovered white light split component passed white light passing characteristic short wavelengths frequency red orange yellow green blue sufficient differences wavelength difference perceived difference wavelength varies blue green yellow wavelengths red shorter blue wavelengths human eye distinguish pure spectral colors mixed white light light levels vision light detected cells retina sensitive wavelengths play role colour vision light vision light detected cone cells responsible colour vision cones sensitive range wavelengths sensitive wavelengths regions vision play cones provide signals cells shift colour perception light rise differences perception white formed entire spectrum visible light wavelengths animals types colour humans white light perceived combining wavelengths red green blue pair complementary blue yellow color perception perception color specialized cells spectral cone cells humans types cones sensitive color vision individual cone composed linked 11 rarely 11 cones labeled wavelengths spectral short medium cone types types correspond colors perception color achieved complex process starts differential output cells retina visual cortex associative brain cones referred simply red peak sensitivity yellow region spectrum cones correspond blue green rgb color model convenient representing color based types cones human eye peak response human cone cells varies individuals called normal color vision human species variation adaptive theories complementary theories color vision theory opponent process theory theory theory proposed century thomas von mentioned retina types cones sensitive blue green red proposed opponent process theory visual color red green blue yellow black white theories accepted valid describing stages visual adjacent diagram scales exclusive boundaries exist negative positive single eye yellow green cone cells human eye range wavelengths light types varying degrees green light cones equally cones red light hand cones cones cones blue green light cones cones cones bit peak cells blue light cones red green light cones brain combines type rise wavelengths light cones encoded encoding leads common forms color gene codes cones highly study 85 variants sample percentage women extra type color gene expressed cone cell types occur women degree color vision variations codes expressed cones rare observed variants spectral sensitivity color human brain color processing level visual retina initial color opponent mechanisms theory opponent process theory correct level opponent processes level cells theory opponent mechanisms refer color visual activity types opposed cells cone activity corresponds loosely runs axis blue green cells input cones input cones correspond runs color axis yellow green visual brain cells optic optic optic meet temporal visual field brain optic visual referred optic enter nucleus nucleus divided types consisting cells consisting cells cells receive balanced input cones retina cells receive cells visual continues primary visual cortex located brain distinct band referred cortex visual regions referred cortex stage color processing complicated simple color break cells respond spectrum color tuning depending adaptation visual cell respond wavelength light light wavelengths color tuning cells stable population neurons responsible color vision specialized color cells receptive fields compute local cone double opponent cells initially retina existence suggested david subsequently proven david double opponent cells regions called cells compare relative amounts scene adjacent scene local color contrast red green modeling studies double opponent cells ideal candidates neural machinery color explained land theory color cells visual cells color tuned separating concerned visual motion resolution form neurons cells extended includes posterior temporal cortex posterior temporal cortex posterior initially suggested exclusively dedicated color incorrect presence orientation cells led view involved processing color form color color processing extended occurs sized color modules called brain color processed terms range color space studies neurons extended provide input temporal cortex integrate color shape form difficult define criteria claim stream distinguished stream analyze motion features color perception visible spectrum electromagnetic radiation portions broader spectrum sense color property electromagnetic radiation feature visual perception arbitrary mapping wavelengths light visual spectrum human experiences color people assumed mapping john recognized alternatives spectrum experiment spectrum experience green light experience red green light examples color experience input light sounds shapes possibility clean color experience properties color phenomenon people colors easily distinguish close green people created color scheme spectrum dark light blue green colors adaptation specific life perception color depends heavily context perceived object white blue light reflect blue light eye brain lighting based color shift surrounding objects interpret white conditions phenomenon color animal species species light frequencies human visible spectrum detect light helps plant species depend success colors patterns humans birds sex dependent visible range animals range red light wavelengths visible spectrum orange wavelengths start birds red wavelengths light spectrum humans incorrect popular belief common animal infrared light color vision infrared basis variation cone types species color vision limited type red green color types cones humans extended range colors comparison species distinguish colors humans species birds fish cone types superior color vision humans closely humans types color cone cells color vision humans including color vision active day color vision rare color vision color vision red sensitive color view color vision expect reflect specific visual types main types spectral types vision complex color vision animal kingdom 12 spectral types multiple units animals fish birds complex color vision systems humans subtle colors exhibit serve direct signals fish birds signal vision achieved cone types depending species single cone main types cone oil segment oil cones shift narrow spectral sensitivity cell suggested cone types occasionally colors humans addition capability color light evolution segments color vision lost species gene animals effective color perception systems distinguish blue green distinguish evidence ability distinguish wavelength colors limited adaptation leads identification newly leaves color vision differs including vision humans color sensitivity level species 60 cone visual sensitivity differences single species gene yellow green sensitive protein ability red green sex fat color vision adapted light vision single cone type evolution color perception mechanisms highly dependent evolutionary factors prominent recognition food sources color perception essential finding proper leaves types recognized color hand developed color vision light cones function properly evidence light plays color perception branches animal kingdom optical spectrum common electronic transitions matter environment evolution color vision occurred modern humans switched activity consuming leaves plants color vision animals animals distinguish colors spectrum spectrum falls human visible range surgery patients birds fish animals patterns human eye vision adaptation birds birds spot distance navigate avoid flying speeds birds utilize broad spectrum vision recognize birds selection mathematics color perception physical color combination pure spectral colors visible range principle distinct spectral colors set physical colors infinite dimensional vector space space space color technically space physical colors considered mathematical cone vertices spectral colors white black cone color vertex vertex depending brightness element color function range visible interval real max real assigning wavelength max intensity perceived color modeled types cones perceived color dimensional euclidean space space wavelength types cone cells extent represented functions response cone cells finally beam light composed wavelengths determine extent physical color color cone cell calculate integral respect interval max physical color element color perceived color single association easily linear easily elements physical space color result single perceived color perceived color unique physical color human color perception determined specific unique linear mapping infinite dimensional space color dimensional euclidean space technically image mathematical cone vertices spectral colors linear mapping mathematical cone moving vertex cone represents maintaining increasing intensity cross cone yields 2d space 3d cone projection cross convex sets mixture spectral colors color practice difficult measure individual cone responses physical color stimuli approach specific benchmark lights typically human space scientists allowed human subjects match physical color create specific combinations lights match physical colors spectral linear combination spectral colors matched linear combination matches note practice intensity physical color combination matched linear combination remaining lights individuals color identical combinations subset space model human color space formed note color intensity negative mathematical cone rays origin space passing convex set cone property moving origin corresponds increasing intensity lights cross cone shape definition space distinct colors cross constant color space diagram implies spectral color boundary diagram distinct physical perceived color combination spectral colors specific version produce exact color boundary colors pure spectral colors perceived response light purely wavelength boundary colors generated specific ratio pure pure red visible spectral colors diagram shaped edge spectral colors spectral remaining straight edge red adaptation color science adaptation estimation representation object light source recorded common application adaptation transform cat recording neutral object neutral color balance keeping colors realistic adaptation transforms converting images white adobe cat color vision adaptation refers color ability visual preserve appearance object wide range light sources  
308428	computer	history yamaha corporation established manufacturer yamaha incorporated october 12 company origins musical instrument manufacturer reflected tuning war company president remains company war time production machinery company expertise technologies manufacture motorcycles red built production 1954 named founder single cylinder stroke street german british firm copied post war era manufactured 1955 success founding yamaha motor splitting motorcycle division company 1954 yamaha music school founded yamaha grown largest manufacturer musical instruments including instruments leading manufacturer semiconductors audio visual products appliances industrial robots 1988 yamaha shipped yamaha purchased sequential circuits 1988 bought majority stake 51 1987 bought 1993 late 1990s yamaha released series portable battery operated keyboards range keyboards yamaha 14 15 keyboards yamaha notable short short phrases sound effects distortion sounds volume levels battery power 2002 yamaha closed product business started 1959 games gold products acquired german audio software manufacturers january 2005 systems july 2007 yamaha bought family yamaha music yamaha import musical instrument professional audio equipment sales arm company renamed yamaha music 2007 sales manufacturing arm december 20 2007 yamaha agreement bank purchase shares intended 2008 yamaha continue manufacturing facilities acquisition announced los angeles january 28 2008 february 2008 gmbh operates subsidiary yamaha yamaha corporation music teaching 1950s yamaha electronics proven successful popular products yamaha awarded keyboard product 2007 music sound magazine yamaha electronics include consumer offered output features expensive keyboards companies yamaha include yamaha music foundation yamaha music foundation organization established 1966 authority japanese education purpose music education music continued program music classes begun yamaha corporation 1954 products yamaha expanded diverse businesses product venture major category listed yamaha announced synthesizer time german fair march 2003 yamaha involved sale production applications sold internet continued series released standard editions september 2010 series series designed quality product professional series designed set standard sex set voice designed complete song approach software handled database samples improved performance engine yamaha announced version software iphone ipad 2010 digital content japan version software released voice released version software factory locations japan company maintains musical instrument manufacture engine vehicle manufacture motorcycles products located  
309954	computer	network desktop device oracle corporation 1996 2000 devices designed manufactured alliance included sun microsystems ibm devices designed minimum specifications based network reference profile brand employed marketing term design enterprise consumers brand intended range desktop computers design inexpensive components software cheaper easier manage standard fat client desktops standard desktop components increasing availability popularity software options desktops nodes clients hybrid clients network brand achieved popularity oracle eventually term network desktop client history failure impact scale predicted caused factors prices pcs fell 1000 competition hard software idea simply time launch 1996 typical internet connection 28 simply delivery executable content wide considered mainstream 1998 prior internet service providers mainstream press usa knowledge internet limited held device obvious terminals intended replace proprietary infrastructure 1990s era network minimal unix serve terminal hardware terminals considerably cheaper purpose built terminal hardware standards reference profile initial network computing standard network reference profile required appliances supported java key standards standards intel cpus software intel developed competing standard called alternatives motorola network systems national semiconductor workstation stated ship june 1996 implementations network network oracle initial reference implementation development british company computers adapted create local partner companies technology design edge contract macintosh 1997 apple announced mac attempt develop network platform 1997 steve jobs discontinued macintosh clone efforts effectively key components mac technology original generation design trademark licensed consumer equipment internet service infrastructure market months split entities internet service consumer hardware started develop generation product started developing email set box 1998 project completed sun microsystems sun microsystems developed based based sparc hardware initially sun range unix workstations ibm network station ibm launched network station september 1996 reference design network station based lan 400 ibm pc server network station supported local execution basic applications browser console addition capability implemented locally remotely applications machine practice lack real applications meant hardware terminal ibm network station originally based powerpc architecture final models intel pentium processors contemporary idea existing contemporary times cloud computing google chrome os wired magazine claims failure network eventually led development cloud computing contribution transition attributed sun microsystems network eventually ceo google google cloud technology notably google  
312810	computer	mathematical morphology theory technique analysis processing structures based set theory lattice theory topology random functions commonly applied digital images employed graphs surface spatial structures continuous space concepts size shape connectivity distance introduced continuous discrete spaces foundation morphological image processing consists set operators transform images basic morphological operators erosion dilation closing originally developed binary images extended grayscale functions images subsequent generalization complete accepted theoretical foundation history 1960s schemes nonlinear processing images discussed communities originally popular earth environmental sciences mathematical morphology based dilation data consisting structuring element dual operation erosion mathematical morphology developed 1964 collaborative paris france supervised phd thesis devoted characteristics cross sections practical approach theoretical integral geometry topology 1968 centre founded paris france led rest 1960s 1970s essentially binary images treated sets generated binary operators techniques hit transform dilation erosion closing ultimate erosion conditional random approach developed based image models period developed mid 1970s mid 1980s generalized grayscale functions images main concepts dilation erosion functions generalization operators morphological gradients transform main segmentation approach 1980s 1990s gained wider recognition centers countries method started applied imaging applications 1986 generalized time theoretical framework based complete generalization brought flexibility theory enabling application larger structures including color images video graphs time formulated theory morphological filtering based lattice framework 1990s 2000s theoretical including concepts connections 1993 international mathematical morphology organized france 1994 usa 1996 amsterdam netherlands 1998 usa 2000 australia 2002 paris france 2005 brazil 2007 netherlands 2009 italy 2011 2013 2015 france 2017 binary morphology binary morphology image viewed subset euclidean space integer grid dimension structuring element basic idea binary morphology image simple pre defined shape drawing shape misses shapes image simple called structuring element binary image subset space grid examples structuring elements denoted basic operators basic operations shift invariant translation invariant operators addition euclidean space integer grid binary image erosion erosion binary image structuring element defined translation vector structuring element center disk square center located origin erosion understood reached center moves erosion square centered origin disc radius centered origin square centered origin erosion expression application assume received dark written pen erosion process lines detect letter dilation dilation structuring element defined dilation 11 center origin dilation understood covered center moves dilation square disk radius square 14 corners centered origin radius corners dilation 12 denotes symmetric 13 application dilation dual operation erosion figures drawn imagine written pen erosion dilation image 15 translations structuring element image square disc radius structuring element square corners corner radius application assume written note paper writing growing essentially sharp edges start closing closing dilation erosion structure closing 17 denotes relative 18 closing translations symmetric structuring element image properties basic operators properties basic binary morphological operators dilation erosion closing grayscale morphology grayscale morphology images functions mapping euclidean space grid 32 33 set 34 element larger real 35 element real grayscale structuring elements functions format called structuring functions image structuring function grayscale dilation denotes erosion denotes binary morphology closing structuring functions common flat structuring elements morphological applications flat structuring functions functions 41 dilation erosion greatly simplified bounded discrete grid bounded operators replaced maximum minimum dilation erosion statistics filters dilation maximum moving window symmetric structuring function support erosion minimum moving window flat structuring element morphological operators depend relative pixel values numerical values suited processing binary images grayscale images light transfer function operators tools combining operators algorithms image processing tasks feature detection image segmentation image image filtering classification continuous morphology mathematical morphology complete complete partially sets subset element element denoted universe dilation erosion 44 complete lattice 45 46 universe element 47 48 collection elements dilation operator 49 element erosion operator 52 universe form connections dilation 55 erosion 56 58 erosion dilation connection operators satisfy connection 55 dilation 56 erosion pairs connection called erosion erosion dilation vice versa closing morphological morphological closing defined morphological closing algebraic simply algebraic closing simply closing algebraic operators increasing anti extensive algebraic operators increasing extensive binary morphology lattice morphology power set euclidean space grid set subsets 66 set inclusion set set union grayscale morphology set functions mapping 32 66 46 45 functions 72 75  
313741	computer	3d projection method mapping dimensional dimensional plane current methods graphical data based pixel dimensional media type projection widespread graphics engineering graphical projection protocol technical drawing image dimensional object projected surface aid numerical calculation overview projection achieved projectors projected image vision desired finished picture protocol produce picture surface drawing paper protocols provide uniform imaging procedure people trained technical graphics mechanical drawing aided design graphical projection categories protocol parallel projection parallel projection lines object projection plane parallel lines parallel dimensional space remain parallel dimensional projected image parallel projection corresponds perspective projection infinite distance camera lens images drawn parallel projection rely technique measure axes theorem image rays image plane special result orthographic rays image plane confused projection english literature refers specific class orthographic projection orthographic projection derived principles geometry dimensional representation dimensional object parallel projection lines projection parallel reality projection plane projection type choice drawings projection projections pictures called primary views object produced projection plane parallel coordinate axes object views relative schemes angle angle projection views projected form box object drawn views drawing 3d object views view view view terms plan projection orthographic projection category orthographic projection projections image object viewed direction directions axes space picture instrument drawings approximate graphical perspective projections distortion approximation projections distortion instrument drawings economy effort projection categories projection projection projection depending exact angle view orthogonal typical characteristic orthographic axis space displayed vertical projections views opposed primary views projections projection protocols projection direction viewing axes space equally common angle distortion caused uniform lengths axes share common scale enables measurements read drawing projection protocols projection direction viewing axes space equally scale angles presentation determined angle viewing scale direction vertical determined separately common drawings projection protocols projection direction viewing axes space scale axes angles determined separately angle viewing drawings common projection projections parallel projection rays viewing plane orthographic projection projection plane angle degrees orthographic projection parallel lines space parallel projected image simplicity projection exclusively purposes formal drawings drawing displayed angles axes factors scale arbitrary distortion created plane object parallel plane projection creating true shape size image chosen plane special types projections projection projection perspective view object represented coordinates drawing represented coordinates flat drawing axes figure axes drawn scale projections projection axis drawn arbitrary angle axis 30 axis scaled cabinet projection term cabinet projection cabinet perspective industry perspective projected object parallel viewing plane axis projected angle typically   projection axis cabinet projection lines cut military projection variant projection called military projection horizontal sections drawn floor plans drawn angle military projection rotation plane vertical translation limitations parallel projection objects drawn parallel projection larger extend closer viewer architectural drawings measurements image result perceived distortion perspective projection eyes photography easily result situations depth difficult drawing blue units red difference apparent covers picture boxes serve height visual ambiguity exploited art impossible object drawings 1961 strictly parallel projection channel water travel path fall returns source water appears law energy extreme film forced perspective connectivity orthographic projection human eye scene objects distance objects close orthographic projection creation scale drawings construction engineering orthographic projections set transforms profile precise measurements dimensional object common names orthographic projections include plane cross eye normal viewing plane camera direction parallel primary axes axis mathematical transformation project 3d 2d orthographic projection parallel axis positive represents direction profile view equations vector arbitrary scale factor arbitrary offset optional properly matrix multiplication equations projected images represent dimensional nature object projected represent object recorded perceived viewer parallel lengths projected image scale virtual viewer result lengths perspective projection weak perspective projection weak perspective projection principles orthographic projection requires scaling factor closer objects projection vice versa hybrid orthographic perspective projection perspective projection individual replaced average constant depth simply orthographic projection scaling weak perspective model perspective projection simpler model pure orthographic perspective reasonable approximation depth object compared distance camera field view conditions assumed 3d object distance camera errors projection compared perspective model 13 perspective projection perspective projection linear projection dimensional objects projected picture plane objects objects lines parallel nature meet infinity projected image perspective projection converge single called vanishing photographic lenses human eye perspective projection realistic perspective projection perspective depending orientation projection plane axes object graphical projection methods rely lines straight lines determine determine straight orthogonal projection eye picture plane called principal vanishing scheme left italian term coined relevant principal vanishing vanishing horizontal lines picture plane vanishing horizontal lines picture plane vertical vertical lines drawn vertically finite vanishing picture plane graphical methods easily scenes lines eye picture plane circle radius distance eye plane circle construction vanishing lines circle consists distance drawing serve base objects scene perspective geometric solid choosing principal vanishing determines vanishing left drawing equally view lines drawn orthogonal projection vertex picture plane ground lines distance principal projection map natural measured ground projected meet vertical map orthographic projection perspective accurate measurements perspective projection objects provide additional perspective projection requires involved definition compared orthographic projections conceptual aid understanding mechanics projection imagine 2d projection object viewed camera camera position orientation field view control behavior projection transformation variables defined transformation 20 21 3d vector 22 projected 2d vector 23 compute 18 define vector 25 position respect coordinate defined camera origin 26 respect initial coordinate achieved 27 28 applying rotation 29 result transformation called expressed rotation terms axes calculations assume axes left axes representation corresponds angles properly angles convention interpreted axes axes scene reading left axes axes camera reading left note camera 31 matrices drop reduces simply shift matrices replace θ θ transformed projected 2d plane projection plane literature matrix form coordinates conjunction argument leads division coordinate distance viewer display surface 37 field view 38 viewed angle note assumes map corners viewing surface equations 40 display size 41 recording surface size ccd film 42 distance recording surface camera center 43 distance 3d projected subsequent scaling operations map 2d plane display media diagram determine screen coordinate corresponds 44 coordinates camera 3d screen coordinate diagram equation  
313845	computer	formal concept analysis concept hierarchy formal collection objects properties concept hierarchy represents objects sharing set properties concept hierarchy represents subset objects properties concepts term introduced 1980 builds mathematical theory sets developed formal concept analysis practical application fields including data mining mining machine learning knowledge management semantic software development biology overview history original motivation formal concept analysis search real meaning mathematical theory possibility nature data tables transformed algebraic structures called complete utilized data visualization interpretation data table represents heterogeneous relation objects attributes pairs form object attribute considered basic data type referred formal context theory formal concept defined pair set objects called extent set attributes intent formal concept analysis semantic extension formal concepts formal context explained hierarchy called formally context concept lattice concept lattice diagram helpful understanding data visualization mathematical theory formal concept analysis helpful lattice pieces loss embedding structure easier interpret theory form 1980s led peter basic mathematical definitions introduced lattice theory previous approaches idea french field mathematical theory foundations refer charles port royal logic motivation background article lattice theory 1982 formal concept analysis mathematical discipline starts current lattice theory pure mathematics production theoretical achieved connections neighboring domains theory aim von 1972 sciences view teaching sciences specialized knowledge origins formal concept analysis aims control starting lattice theory development formal logic century model concept reduced extent philosophy concepts abstract intent formal concept analysis oriented categories extension linguistics classical conceptual logic formal concept analysis aims clarity concepts charles properties objects late philosophy assumed logical thinking aims reality concept mathematics abstraction logic patterns support rational communication background defines data semantic field study kinds bodies water attributes purpose simplified data table represents formal context diagram concept lattice formal definitions follow   diagram consists circles connecting segments labels circles represent formal concepts lines read hierarchy object attribute label diagram objects attributes concept circles attribute reached object path object attribute diagram object attributes constant attributes temporary running natural characteristics temporary natural original formal context reconstructed diagram formal concepts extent concept consists objects path leads circle representing concept intent consists attributes path concept circle diagram diagram concept left label intent natural extent formal contexts concepts formal context set objects set attributes binary relation called objects attributes subsets objects subsets attributes defines derivation operators applying derivation operator closure operators         extent closure         intent closure derivation operators define connection sets objects attributes french concept lattice called lattice derivation operators definition formal concept pair formal concept context         intuitively formal concept precisely computing purposes formal context naturally represented matrix rows correspond objects columns correspond attributes entry object attribute matrix representation formal concept corresponds elements equal formal context boolean object attribute concept defined reason values true false representing formal contexts symbol express concept lattice formal context concepts context partially inclusion dual inclusion concepts defined concepts precisely set formal concepts common meet extent consists objects common set set formal concepts common intent attributes objects set concepts meet operations satisfy defining lattice complete lattice conversely complete lattice concept lattice formal context attribute values real data form object attribute table attributes values formal concept analysis handles data transforming basic type valued formal context method called conceptual scaling attribute attribute extent extent assumed attributes concept pairs attributes naturally occur contexts derived conceptual scaling formal concepts concept implications sets attributes object attribute attribute formal context subsets set attributes valid finite formal context set valid implications basis set implications valid implications derived natural inference rules attribute exploration knowledge acquisition method based implications relations formal concept analysis mathematical foundations field basic relations simple easy compute defined incident object attribute pairs relations recorded table representing formal context lattice properties read relations including structural determining relations lattice algorithms tools simple fast algorithms generating formal concepts constructing concept survey book pseudo code formal concepts exponential size formal context complexity algorithms respect output size concept elements handled software applications main purpose tools varies formal context creation formal concept mining generating concepts lattice formal context implications association rules tools academic source applications techniques formal context naturally interpreted graph formal concepts correspond graph mathematical algorithmic formal concept analysis theory notion dimension graph translates dimension formal context dimension concept lattice applications boolean matrix clustering object attribute numerical data table goal objects values attributes gene expression data objects share common behavior subset biological situations attributes produce local patterns biological processes overlap gene involved processes applies recommender systems local patterns users share subset items binary object attribute data table pair consisting inclusion set objects inclusion set attributes objects attributes vice versa formal concepts considered objects attributes vice versa definitions coming practice definitions formal concept values numerical object attribute data table defined pair consisting inclusion set objects inclusion set attributes values objects pair represented inclusion numerical table rows columns values correspond context dimension scale represents numerical attribute values binary attributes generalized dimensional dimensional clusters values dimensional data represented dimensional concepts reduction standard definitions algorithms concept analysis computing clusters knowledge spaces theory knowledge spaces assumed knowledge space family knowledge union closed knowledge form closure represented formal context hands experience formal concept analysis formal concept analysis method data analysis 1980s gained experience 200 projects 2005 including fields medicine cell biology software engineering library sciences office administration law linguistics science examples formal concept analysis foundations applications conference papers regular conferences international conference formal concept analysis concept applications international conference conceptual structures  
315021	computer	simultaneous multithreading smt technique improving efficiency superscalar cpus hardware multithreading smt multiple independent threads execution utilize resources modern processor architectures details multithreading multiple threads executed simultaneously cpu core multiple tasks tables task segments protection rings running core completely separated multithreading concept multitasking implemented thread level execution modern superscalar processors simultaneous multithreading smt main implementations multithreading form temporal multithreading super threading temporal multithreading thread instructions execute pipeline stage time simultaneous multithreading instructions thread executed pipeline stage time basic processor architecture main ability fetch instructions multiple threads cycle larger register file hold data multiple threads concurrent threads decided chip designers concurrent threads cpu core common processors support concurrent threads core efficiency technique increases conflict shared resources measuring effectiveness difficult measured energy efficiency smt parallel native managed historical intel smt hyper threading implementations implementations smt extremely energy efficient atom processors modern systems smt effectively additional dynamic power performance gains minimal power consumption considerable researchers extra threads shared resource cache improve performance single thread claim smt increase efficiency smt provide redundant computation level error detection recovery current smt memory latency increasing efficiency increasing throughput computations hardware processor design increase chip parallelism resource requirements superscalar technique exploit instruction level parallelism ilp multithreading approach exploiting thread level parallelism superscalar executing multiple instructions time thread level parallelism executes instructions multiple threads processor chip time support thread chip key factor distinguish instructions processor issue cycle threads instructions sun microsystems november 14 2005 release processor combined fine multithreading technique simultaneous multithreading core issue instruction time historical implementations multithreading cpus 1950s simultaneous multithreading ibm 1968 360 project major commercial microprocessor developed smt alpha microprocessor developed dec dean university california san university washington microprocessor released alpha microprocessors discontinued shortly hp acquired acquired dec dean develop hyper threading hyper threading technology versions intel microprocessors modern commercial implementations intel pentium modern desktop processor implement simultaneous multithreading starting model released 2002 introduced processors intel calls functionality hyper threading basic thread smt engine intel claims 30 speed improvement compared identical smt performance improvement application dependent running programs require attention processor programs hyper threading valuable execution resources increasing resources bandwidth caches tlbs buffer entries processor resources programs adds varying execution time core gained queue reduces execution time completely overcome performance hit technologies mips architecture designs include smt mips mips virtual processing elements lighter weight hardware based startup mips vendor provide processor soc based cores runs threads threads fine mode thread executed cycle threads assigned technologies mips cpus smt threads core ibm blue gene smt ibm announced 2004 dual core dual chip module quad core core multi chip module core including thread smt engine ibm implementation sophisticated previous assign priority threads fine grained smt engine dynamically execute smt processor increase performance ibm implementation hardware multithreading 2010 ibm released systems based processor cores simultaneous intelligent threads switches threading mode thread threads threads depending process threads scheduled time core minimum response time maximum throughput ibm intelligent simultaneous threads core ibm threads core smt people reported sun microsystems 14 november 2005 release processor codenamed originally announced 2005 delays 2009 implementations sparc focused exploiting smt techniques smt sun refers combined approaches concept throughput computing cores core pipeline fine grained multithreading smt instructions multiple threads share issue window cycle processor policy issue instructions active thread cycle processor sun microsystems processor complex cores pipeline oracle corporation sparc fine grained threads core sparc sparc sparc fine grained threads core executed simultaneously fujitsu coarse grained vertical multithreading sparc smt intel coarse grained multithreading smt dual domain multithreading intel smt time multithreading hardware based threads disabled regular intel atom released 2008 intel product feature smt marketed hyper threading supporting instruction speculative execution register renaming intel hyper threading microarchitecture absence core microarchitecture amd microarchitecture shared l2 cache integer cores module single partial smt implementation amd microarchitecture smt architecture virtual software layer translation layer dispatch single thread instructions global splits instructions virtual hardware separate virtual cores virtual cores send resources physical cores multiple virtual cores push buffer single physical core split partial instructions data multiple execution ports time virtual core track position relative output form multithreading increase single performance allowing single thread resources cpu allocation resources dynamic single cycle latency level cycles depending change allocation depending individual application virtual cores competing resources algorithms determine resources allocated disadvantages depending design architecture processor simultaneous multithreading decrease performance shared resources performance critics argue considerable software developers simultaneous multithreading bad application situations insert extra logic decreases performance current operating systems lack convenient api calls purpose processes priority resources security concern simultaneous multithreading implementations intel based processors application key application running processor monitoring cache sophisticated machine learning implementation explained black 2018  
318413	computer	national institute science automation french national institution focusing science applied mathematics created 1967 paris plan historical premises shape central command military forces 1979 2011 public scientific technical double french national education advanced instruction economy industry status centers paris academic teams centers december 2007 centers formed single center called october 2010 university paris university started center innovation initiative software employs people researchers 1000 students 500 theoretical applied science process produced programs  
318439	computer	mining referred data mining roughly equivalent analytics process quality quality typically derived patterns trends statistical pattern learning mining involves process structuring input parsing addition derived linguistic features removal subsequent database patterns structured data finally evaluation interpretation output quality mining refers combination relevance typical mining tasks include clustering concept entity extraction production sentiment analysis document entity relation modeling learning relations named entities analysis involves retrieval lexical analysis study word frequency distributions pattern recognition tagging annotation extraction data mining techniques including link association analysis visualization predictive analytics goal essentially data analysis application natural language processing nlp methods typical application scan set documents written natural language model document set predictive classification purposes database search extracted analytics term analytics describes set linguistic statistical machine learning techniques model structure content textual sources business intelligence data analysis investigation term roughly mining modified 2000 description mining 2004 analytics term frequently business settings mining earliest application 1980s notably life sciences government intelligence term analytics describes application analytics respond business independently conjunction query analysis numerical data 80 percent business relevant unstructured form techniques processes discover knowledge – business rules relationships – locked textual form automated processing analysis processes larger analytics include applications mining technology applied wide variety government business mining records management searching documents relevant daily activities legal professionals mining discovery military mining national security intelligence purposes scientific researchers incorporate mining approaches efforts organize sets data addressing unstructured data determine ideas sentiment analysis social media support scientific discovery fields life sciences bioinformatics business applications support competitive intelligence automated numerous activities security applications mining software packages marketed security applications monitoring analysis online sources internet news national security purposes involved study encryption biomedical applications range mining applications biomedical literature including computational approaches assist studies protein protein interactions protein disease addition patient textual datasets clinical field datasets population studies event reports mining facilitate clinical studies precision medicine mining algorithms facilitate indexing specific clinical events patient textual datasets effects electronic health records event reports reports specific diagnostic tests online mining application biomedical literature publicly accessible search engine combines biomedical mining network visualization knowledge based search engine biomedical texts mining techniques enable extract unknown knowledge unstructured documents clinical applications mining methods software developed major including ibm mining analysis processes search indexing improve public sector effort creating software tracking monitoring activities online media applications mining media companies company provide readers search experiences increases revenue additionally editors share associate package news properties increasing opportunities content business marketing applications mining starting marketing customer relationship management van 2008 apply improve predictive analytics models customer customer sentiment analysis sentiment analysis involve analysis movie reviews review movie analysis labeled data set labeling resources concepts detect computing based approaches computing multiple corpora students children stories news stories scientific literature mining academic applications issue mining hold databases indexing retrieval true scientific disciplines highly specific contained written nature proposal mining interface national institutes health common journal publishing document type definition provide semantic cues machines answer specific queries contained removing barriers public access academic institutions involved mining initiative methods scientific literature mining computational methods developed assist retrieval scientific literature published approaches include methods searching determining technical reports digital computational automatic analysis vast textual corpora created possibility scholars documents multiple languages limited manual intervention key enabling technologies parsing machine translation topic machine learning automatic parsing textual corpora enabled extraction networks vast scale textual data network data networks thousands nodes analyzed tools network theory identify key key communities parties properties structural stability network nodes approach introduced quantitative analysis subject object identified pairs linked action pairs formed object content analysis traditional social sciences media studies time automation content analysis allowed data revolution field studies social media content include millions news items bias content similarity reader preferences analyzed based mining methods millions documents analysis bias topic bias demonstrated topics levels possibility detect patterns vast population analyzing content demonstrated software mining programs commercial source companies sources list mining software intellectual property law situation europe lack european copyright database law mining copyright mining permission copyright owner 2014 review government copyright law mining limitation exception country japan introduced mining specific exception 2009 copyright exception content mining commercial purposes copyright law terms conditions european commission discussion data mining 2013 title licenses europe focus solution legal issue licenses limitations exceptions copyright law led universities researchers libraries civil society access leave 2013 situation united contrast europe flexible nature copyright law fair mining america fair countries israel taiwan south korea viewed legal mining meaning original viewed fair google book judge google project copyright books project data mining implications websites based searches documents specific user defined phrases semantic mining content based meaning context specific word additionally mining software build specific people events datasets based data extracted news reports built facilitate social networks analysis counter intelligence mining software capacity intelligence limited scope analysis mining email spam filters determining characteristics messages material mining plays role determining financial market sentiment future increasing paid multilingual data mining ability gain languages cluster items linguistic sources meaning popular analytics tools includes challenge exploiting proportion enterprise unstructured form recognized decades recognized earliest definition business intelligence october ibm journal article business intelligence describes utilize data processing machines auto auto encoding documents creating action organization incoming internally generated documents automatically characterized word pattern automatically action management systems developed starting 1960s emerged software category field practice emphasis numerical data stored databases unstructured documents hard process analytics current form late 1990s algorithm development application paper data mining decade computational linguistics community viewed collections resource produce analysis algorithms paper attempted emphasis online collections discover trends progress artificial intelligent analysis mixture computationally driven user guided analysis door 1999 statement describes analytics technology practice decade  
319504	computer	speculative execution optimization technique performs task prevent delay objective provide extra resources approach employed variety including branch prediction pipelined processors prediction exploiting locality memory files control database systems overview modern pipelined microprocessors speculative execution reduce cost conditional branch instructions schemes predict execution path program based history branch improve performance utilization resources instructions scheduled time determined instructions executed branch variants speculative computation earlier concept execution execution form speculative execution conditional branch executed true resources execution oracle execution theory provide performance perfect branch prediction limited resources execution employed carefully resources grows exponentially level branch executed predictive execution predictive execution form speculative execution outcome predicted execution predicted path actual result prediction true predicted execution allowed execution executed common forms include branch predictors memory dependence prediction generalized form referred prediction execution execution involve speculative execution implementations programming language current topic designed idea speculative execution 2003 phd thesis support speculative execution mechanism bad choice called execution complicated  
327567	computer	real time executive real time operating developed marketed company graphics suitable traditional board based embedded systems soc architectures nucleus rtos history operating product ready company founded james ready 1980 ready systems firm merged 1993 public 1994 firm acquired graphics 1995 product 1980s chief vxworks wind river systems product vxworks mid 1980s compiler assembly language tools vxworks wind river created offering real time kernel companies developing software arm mips powerpc risc microprocessors implementations runs space runs wide operating ported amd core motorola proprietary operating runs company devices motorola motorola runs hardware platforms including motorola featuring processor motorola upcoming devices screen resolution phones featuring processor motorola phones processor motorola v6  
331512	computer	theory computation mealy machine finite machine output values determined current current inputs contrast moore machine output values determined solely current mealy machine deterministic finite input transition history mealy machine named george mealy concept 1955 paper method sequential formal definition mealy machine consisting transition output functions single function diagram diagram mealy machine output transition edge contrast diagram moore machine output input output alphabet associate mealy automata directed graph graph vertices letters nodes degree successor automata letter automata output reads letter graph union cycles automaton examples simple simple mealy machine input output transition edge labeled input red output blue machine starts output exclusive input values machine implements edge detector time input complex complex mealy machines multiple inputs multiple outputs applications mealy machines provide mathematical model machines input output alphabet alphabet mealy machine designed string letters sequence inputs process string sequence outputs mealy model diagram complex provide feasible designing complex machines moore mealy machines dfas output clock modern cpus computers cell phones digital basic electronic devices machines finite machine control simple software systems represented regular expressions modeled finite machines simple systems machines basic electronics finding finite machines design simple manner concurrent systems exchange messages instance traffic light consists multiple traffic lights concurrently examples applications  
331680	computer	edge detection includes variety mathematical methods aim identifying digital image image brightness formally image brightness typically organized set segments termed edges finding dimensional signals step detection finding signal time change detection edge detection fundamental tool image processing machine vision vision feature detection feature extraction purpose detecting sharp image brightness capture events properties assumptions image model image brightness correspond ideal result applying edge detector image lead set connected curves boundaries objects boundaries surface curves correspond surface orientation applying edge detection algorithm image reduce data processed filter regarded relevant structural properties image edge detection step successful subsequent task contents original image simplified ideal edges real life images complexity edges extracted trivial images meaning edge curves connected missing edge segments false edges phenomena image – subsequent task image data edge detection fundamental steps image processing image analysis image pattern recognition vision techniques edge properties edges extracted dimensional image dimensional scene classified dependent independent independent edge typically reflects inherent properties dimensional objects surface surface shape dependent edge change typically reflects geometry scene objects typical edge instance block red color block yellow contrast extracted detector pixels color background edge simple edge model literature considered detection ideal step edges edges natural images ideal step edges effects researchers gaussian step edge error function simplest extension ideal step edge model modeling effects edge blur practical applications dimensional image edge modeled left edge intensity edge scale parameter called blur scale edge ideally scale parameter adjusted based quality image avoid true edges image trivial task illustrate edge detection trivial task detecting edges dimensional signal intuitively edge pixels intensity difference pixels intensity differences adjacent neighboring pixels easy edge region argue edges specific threshold intensity change pixels edge pixels simple reasons edge detection trivial objects scene simple illumination conditions controlled edges extracted image approaches methods edge detection categories search based based search based methods detect edges computing measure edge strength derivative expression gradient magnitude searching local directional gradient magnitude computed estimate local orientation edge gradient direction based methods search derivative expression computed image edges linear differential expression pre processing step edge detection smoothing stage typically gaussian smoothing applied noise reduction edge detection methods published types smoothing filters applied measures edge strength computed edge detection methods rely computation image gradients types filters computing gradient estimates directions survey edge detection methods 1998 articles edge detection mathematics science engineering john considered mathematical optimal smoothing filter criteria detection localization minimizing multiple responses single edge optimal filter assumptions sum exponential terms filter approximated derivatives introduced notion maximum filters edge defined gradient magnitude assumes local maximum gradient direction derivative gradient direction proposed decades modern geometric meaning operator links edge detector observation days vision edge detector including variations art edge detector edge perform require computation times parameters detector derived mathematical criteria edge detector starting discrete leading set recursive filters image smoothing exponential filters gaussian filters differential edge detector method differential computed scale space representation leading advantages terms theoretical analysis pixel implementation aspect log filter choice extract boundaries natural scenes methods gradient operators applied estimate image gradients input image version simplest approach central differences application filter image data earlier operator based filters estimates image derivatives gradient magnitude computed gradient orientation estimated difference operators image gradient proposed operator cross operator operator extend filters dimension avoid issue recognizing edge image cost operation loss terms resolution examples extended thresholding linking computed measure edge strength typically gradient magnitude stage apply threshold decide edges image threshold edges detected result increasingly noise detecting edges features image conversely threshold subtle edges result edges edge applied gradient magnitude image edges type edge post processing edges detected maximum edge curves definition edge pixels linked edge edge linking edge tracking procedure discrete grid maximum stage implemented gradient direction derivatives gradient direction 45 degrees finally comparing values gradient magnitude estimated gradient direction commonly approach handle thresholding thresholding method multiple edges upper threshold start edge start trace path edge image pixel pixel edge threshold edge falls threshold approach assumption edges continuous curves follow edge meaning noisy pixel image marked edge choosing thresholding parameters suitable thresholding values vary image edge edge technique remove edges image technique employed image filtered noise gaussian filter edge operator applied detect edges edges threshold applied carefully pixel edge elements advantages popular algorithms passes direction chosen level accuracy desired approaches edge detection operators based derivatives intensity essentially rate change intensity gradient ideal continuous detection derivative local gradient operator based detection operator applied gaussian image operator return false edges local gradient magnitude operator poor localization edges operator historical differential edge detection approach automatically edges pixel accuracy differential approach detecting directional derivative gradient direction differential geometric requirement maximum proposed introduce image local coordinate 12 13 direction parallel gradient direction assuming image pre gaussian smoothing scale space representation 14 scale 15 computed require gradient magnitude scale space representation equal directional derivative 13 direction 17 directional derivative 13 direction equal directional derivative 13 direction 17 negative written explicit expression terms local partial derivatives 23 edge definition expressed curves differential satisfy sign condition differential partial derivatives computed scale space representation 27 smoothing original image gaussian kernel edges automatically continuous curves pixel accuracy thresholding applied differential edge segments practice derivative computed central differences derivatives computed scale space representation 27 filter derivatives sign condition analogous fashion phase based development edge detection techniques takes frequency domain approach finding edge locations phase phase methods attempt locations image frequency domain phase locations correspond location perceived edge edge represented change intensity spatial domain key benefit technique bands avoids false typically edges edge derivative level profile physics inspired phase transform physics inspired computational approach signal image processing utilities feature detection classification spin time fourier transform transforms image propagation medium engineered 3d property operation relies profile understood terms modes performs functionality phase contrast microscopy digital images applicable digital images temporal time series data increase precision edge detection techniques proposed including curve fitting moment based partial methods methods characteristics curve fitting methods computationally simple easily noise moment based methods integral based approach reduce noise require computations methods horizontal gradients vertical gradients build curve peak curve pixel edge partial methods based hypothesis pixel depends edge pixel producing accurate individual estimation edge pixel variants moment based technique accurate isolated edges  
332378	computer	led president yamaha motor production product 1955 motorcycle 3rd mount race class company products includes motorcycles personal water utility motors wheel road vehicles engines multi purpose engines electrical generators water automobile engines surface intelligent machinery industrial unmanned electrical power units company involved import sales types products development businesses management facilities services motorcycle sales largest motor yamaha leader water vehicle sales history 1955 motorcycle division yamaha founded 1955 headed yamaha initial product cycle single cylinder motorcycle german rt competitive success racing winning class japan road race success racing set yamaha competition motorcycle racing key company history strong honda japanese manufacturers yamaha competing 1956 entered grand 1957 stroke improved frame 1957 stroke cylinder motorcycle larger powerful motor performance version stroke double frame offered speed transmission japanese motorcycle period yamaha offer engine success growth 1960s 1963 yamaha stroke engine racing paid international competition class success sales yamaha set international subsidiaries period thailand 1964 netherlands 1968 1965 release stroke company featured separate oil supply oil gasoline prior traditionally pre mix oil gasoline gas stroke engines 1967 larger model range stroke 1968 yamaha launched stroke motorcycle yamaha stroke larger powerful machine performance popular british era gold star yamaha continued stroke stroke time japanese manufacturers increasingly moving cylinder stroke machines trend led honda 1969 stroke cylinder cycle stroke era 1970s 1976 yamaha answer japanese brands multi cylinder stroke cylinder machine final drive introduced honda yamaha cylinder model 1978 drive oriented produced string racing 1970s dedicated road road racing yamaha technology introduced single rear 1973 appeared production 1974 yamaha 250 model continued production updates 2015 yamaha continuous model yamaha continued racing 1960s 1970s increasing success formats decade 1970s winning paris 1979 1980s innovation 1980 combination consumer environmental regulation increasingly popular production stroke series including water cooled stroke 1977 kawasaki considerable success 1970s stroke production road 1980 yamaha trend continued sell street 1980s performance oriented water cooled cylinder machines designed achieve performance advantage weight 250 1980 series largest model popular hot 1980s continued sold countries 1990s 1980s motorcycle industry gradually building basic models designed offering specialized machines designed excel included racing performance street racing road yamaha universal japanese motorcycle start decade larger set offerings defined markets decade 1981 featured air cooled stroke engine japanese style motorcycles 1980s yamaha offered variety engine configurations competition featured liquid cooled stroke motor configuration frame popular practical performance model street introduced 1985 innovative stroke cylinder model motorcycle feature cylinder head yamaha featured cylinder block 45 degrees box steel frame production continued 1991 1990s performance spin brand 1998 yamaha marketed cylinder road called model introduced style design motor compact unit allowed motor frame designed improve handling short wheel based frame 1995 yamaha announced creation star motorcycles brand series motorcycles american market markets star motorcycles sold yamaha brand attempt create brand identity closely aligned market segment largest usa 2000s expansion 2007 yamaha established operations yamaha motorcycles corporate yamaha motor 20 worldwide subsidiaries operating india india yamaha motor private limited owned subsidiary yamaha motor company headquartered india yamaha motor company japan initial india 1985 joint venture august 2001 100 subsidiary yamaha motor japan 2008 entered agreement joint india produces range motorcycles domestic consumption including yamaha plants manufacture india plants yamaha handles production motorcycles domestic markets plants started 1965 plants 1984 2014 manufactured yamaha india yamaha ray upgrade yamaha ray alpha motorcycle racing motorcycle racing yamaha including preceding stroke class addition yamaha recorded head list 40 yamaha include bruce read current consists time champion yamaha championship row 2008 2009 james yamaha build production 1975 250 400 1976 water cooled production 1977 1981 yamaha competition stroke 1998 usa national championship factory 1962 yamaha production road racing grand motorcycles licensed road purchase 1970 factory teams dominated championship winning title yamaha yamaha professional racing cross country racing yamaha success cross country winning straight titles 2000 yamaha major titles 2000 yamaha success brown race brown season 3rd title 2007 titles yamaha 2006 2008 yamaha produced engines 1989 1997 initially team 1991 1992 jordan 1993 1996 1997 race drivers including hill mark acceptable engines regarded powerful divisions yamaha motors highly company produces products industries consumer market segments automobile engines yamaha built engines manufacturers vehicles development production toyota 1967 cylinder head toyota engine developed yamaha built toyota plant engines 1984 yamaha motor corporation signed contract ford motor company develop produce supply compact v6 engines application ford 1993 1995 engine produced versions yamaha jointly designed engine ford ford yamaha developed branded cylinder engines ford cars sports car ford 2005 2010 yamaha produced engines models adapted configuration s60 british version performance oriented cylinder toyota lexus engines designed built yamaha examples engine lexus lexus engine toyota engine toyota toyota engine lexus yamaha engines manufacturers toyota yamaha toyota engines 2007 yamaha manufacturer stroke united – model remained stroke markets yamaha introduced 2003 release cylinder model performance oriented stroke market modern stroke produced honor cat special released 2000 designed meet national park requirement yamaha received criticism weight disadvantage compared fuel economy range yamaha stroke technology introduce engine equipped venture models provide models marketed engine specific output stroke production hp yamaha forced yamaha key player stroke wars series opponent claim equipped efficient yamaha claims reliable yamaha multi absence cross 2006 2007 introduction factory race team headed cat yamaha brand win stroke professional race 2006 championship current 2019 partnership cat owned yamaha motor company cylinder hp cylinder hp engines collaborative chassis sold brand similarities respective manufacturers models differences cat series equivalent cat series equivalent models equipped yamaha body panels color set models layout chassis package remain yamaha cat partnership established 2014 model introduction 2014 cat series 2017 cat yamaha introduced powerful engine release series spring spring season season spring season spring spring season season 200 japan built models vector models removed production support sale hold units previous models industry support sell previous model remained  
339992	computer	theory formal languages theorem sufficient condition language regular theorem named john proved university statement theorem language pair strings define distinguishing extension string strings define relation strings rule distinguishing extension easy equivalence relation strings set strings equivalence classes theorem regular finite equivalence classes deterministic finite automaton dfa recognizing equal equivalence classes implies unique minimal dfa minimum proof regular language definition dfa recognizes partition set finite strings subsets subset set strings input automaton strings belong subset choice string automaton reaches input reaches input accept inputs string distinguishing extension subset equivalence class combining equivalence classes sets relation equivalence classes equivalence classes finite direction suppose equivalence classes design deterministic finite automaton equivalence class start automaton corresponds equivalence class string transition function input symbol takes automaton equivalence class string chosen string equivalence class definition relation implies transition function defined matter string chosen transition function result automaton accepting equivalence class string definition relation implies strings equivalence class belong string distinguishing string pairs strings class existence finite automaton recognizing implies relation finite equivalence classes equal automaton existence finite equivalence classes implies existence automaton theorem language regular equivalence classes finite analysis string distinguishing extensions additional equivalence classes language consisting binary representations divided regular string 00 11 01 distinguishing extensions classes divided step distinguishing extension minimal automaton accepting language equivalence classes theorem language defines infinite set equivalence classes regular frequently prove language regular generalization theorem generalized trees tree automaton  
346382	computer	image analysis extraction meaningful images digital images digital image processing techniques image analysis tasks simple reading bar coded tags sophisticated identifying person computers analysis amounts data tasks require complex computation extraction quantitative hand human visual cortex image analysis level applications including medicine security remote sensing human analysts replaced computers reason image analysis tools edge neural networks inspired human visual perception models digital digital image analysis image analysis electrical device automatically studies image note device electrical circuit digital camera mobile phone involves fields machine vision medical imaging heavy pattern recognition digital geometry signal processing field science developed 1950s academic institutions mit lab originally branch artificial intelligence robotics quantitative dimensional 2d dimensional 3d digital images 2d images analyzed vision 3d images medical imaging field established pioneering contributions jack king sun techniques techniques automatically images technique range tasks methods image analysis generic wide ranges tasks compared abilities human image capabilities examples image analysis techniques fields include applications applications digital image analysis continuously science industry including object based object based image analysis employs main processes segmentation classification traditional image segmentation pixel basis pixels objects objects shapes scale objects statistics classify objects statistics include geometry context texture image objects defines statistics classification process generate land cover technique implemented software applied earth images object based image analysis defined discipline science devoted remote sensing meaningful image objects characteristics spatial spectral temporal scale international conference held 2006 object based image analysis applied fields cell biology medicine instance detect cellular shapes process cell land cover mapping land cover land change detection remote sensing data change natural resources target  
347832	computer	generation systems future initiative japan international trade industry begun 1982 create parallel computing processing result massive government industry project japan 1980s aimed create supercomputer performance provide platform future developments artificial intelligence russian project named generation report paper focused project concurrent logic programming software foundation project captured driving huge project japan effort leader industry institute generation technology launched plan development systems applicable knowledge processing systems generation computers built concepts logic programming japan knowledge project original international community term generation intended existing machines history computing hardware computers vacuum called generation transistors integrated circuits microprocessors fourth previous generations focused increasing logic elements single cpu generation believed time massive cpus performance project create period considered investment generation project outcome divided failure time history late 1960s 1970s talk generations hardware generations zeroth generation based metal ibm mechanical mark post generation computers based scale integrated circuits parallel set generations software multiple generations 1990s japan computing arena building computers british leads international trade industry decided attempt break follow leader pattern mid 1970s started scale future computing japan processing development center future directions 1979 offered contract carry depth studies industry period term generation started prior 1970s guidance improved steel industry creation oil automotive industry consumer electronics memory decided future technology japanese language written spoken form major obstacles computers held conference invited people primary fields investigation initial project project supercomputer performance parallel computing processing aim build parallel computers artificial intelligence applications concurrent logic programming project vast contributed greatly development concurrent logic programming field target defined project develop knowledge processing systems roughly meaning applied artificial intelligence chosen tool implement goal logic programming logic programming approach characterized van – – technically equations typically universal restricted form called statement proved computation statement proof values variables values output computation logic programming unified gradients science software engineering databases architecture artificial intelligence logic programming missing link knowledge engineering parallel architectures 1982 invented concurrent concurrent programming language integrated logic programming concurrent programming concurrent logic programming language designed concurrent programming parallel execution process oriented language synchronization command basic control mechanisms language report marked technical report concurrent interpreter written concurrent inspired change direction focusing parallel implementation focus concurrent logic programming software foundation project inspired concurrent logic programming language basis programming language finally designed implemented project core programming language project parallel processing running massive databases opposed traditional logic programming language define access data building prototype machine performance logical inference time typical workstation machines capable proposed build machine period initial building final complete prototype 1982 government decided project established institute generation technology joint investment japanese companies implementation belief parallel computing future performance gains generation project generated deal field japanese consumer electronics field 1970s automotive 1980s japanese 1980s parallel projects set strategic computing initiative technology corporation europe european strategic program technology european centre collaboration france germany running parallel inference machines eventually produced project produced applications systems parallel database management legal reasoning automated theorem applications bioinformatics failure project meet commercial success reasons lisp machine companies thinking machines highly parallel architecture eventually speed specialized hardware sun workstations intel x86 machines project produce generation promising japanese researchers project stopped funding scale projects developed project generation project 1990s primary choice concurrent logic programming bridge parallel architecture logic knowledge representation solving language applications happened languages developed limitations choice feature concurrent constraint logic programming logical semantics languages existing cpu performance obvious barriers experts perceived 1980s parallel computing dropped time situations workstations increasing capacity designed built project units commercially project wrong technology curve mainstream computers internet enabled locally stored databases distributed simple projects real data mining project logic programming choice period project spent 400 1992 exchange rates goals workstations market purpose systems job parallel lisp machine market rule based systems purpose computers expensive lisp machines time possibility project failure approaches generation project logic programming distributed massive knowledge bases interpreted current technologies language employs layers logic based knowledge representation systems appears technologies approaches investigated generation initiative century parallel computing including multi core architectures parallel processing clock speeds cpus range cpu power dissipation ability industry produce faster single cpu systems linked moore law periodic doubling transistor counts ordinary consumer machines game consoles parallel processors intel core amd cell microprocessor graphics card companies nvidia amd introducing parallel systems developments generation project summary strong generation project time claims failure  
348692	computer	eigenfaces set eigenvectors vision human recognition approach eigenfaces recognition developed 1987 classification eigenvectors derived covariance matrix probability distribution dimensional vector space images eigenfaces form basis set images construct covariance matrix produces dimension reduction allowing set basis images represent original training images classification achieved comparing represented basis set history approach search dimensional representation images 1987 principal component analysis collection images form set basis features basis images linearly combined reconstruct images original training set training set consists images principal component analysis form basis set images reconstruction error reduced increasing chosen generate eigenfaces training set images image features eigenfaces 23 51 1991 expanded method recognition addition designing automated recognition eigenfaces calculating eigenvectors covariance matrix computers time perform decomposition images images dimensional space conventional principal component analysis data sets paper demonstrated extract eigenvectors based matrices sized images pixels established method expanded include methods improve accuracy multiple approaches build sets eigenfaces subjects features eyes generation set eigenfaces generated performing mathematical process called principal component analysis pca set images human eigenfaces considered set standardized derived statistical analysis pictures human considered combination standard composed average 55 eigenfaces combined achieve fair approximation person recorded digital list values database space person eigenfaces created light dark arranged specific pattern pattern features evaluated pattern evaluate style facial evaluate size eigenfaces patterns simple identify image technique creating eigenfaces recognition recognition technique handwriting recognition reading voice recognition sign language hand gestures interpretation medical imaging analysis term practical implementation create set eigenfaces eigenfaces represent existing project image eigenfaces record differs represent images training set vary image direction image subset eigenvectors minimize loss keeping eigenfaces largest instance 100 100 image 000 eigenvectors practical applications typically identified projection 100 150 eigenfaces 000 eigenvectors discarded matlab code calculating eigenfaces extended yale database computational storage bottleneck images sampled factor 16 note covariance matrix generates eigenfaces fraction represent majority represent 95 total variation images 43 eigenfaces calculate result implement code computing eigenvectors performing pca covariance matrix images computationally images pixels image 000 dimensional space covariance matrix matrix elements rank covariance matrix limited training examples training examples eigenvectors training examples dimensionality images principal components computed easily matrix training examples column image covariance matrix computed decomposition matrix decomposition pre equation ui training set 300 images pixels matrix matrix 000 covariance matrix vectors required applied extra step connection svd denote data matrix column image vector singular decomposition svd decomposition  
352818	computer	architecture delay slot instruction slot executed effects preceding instruction common form single arbitrary instruction located branch instruction risc dsp architecture instruction execute preceding branch design instructions execute incorrect typical automatically instructions default assembly developers compilers branch delay slots branch instruction involved location delay slot instruction pipeline called branch delay slot branch delay slots dsp architectures risc architectures mips risc sparc risc architectures single branch delay slot powerpc arm alpha risc dsp architectures single branch delay slot include dsp dsp mips double branch delay slot processor execute pair instructions branch instruction branch takes delayed branches assembly language dsp registers register instruction executes goal pipelined architecture complete instruction clock cycle maintain rate pipeline instructions times branch delay slot pipelined architectures branch hazard branch resolved instruction pipeline simple design insert stalls pipeline branch instruction branch target address computed loaded program counter cycle inserted considered branch delay slot sophisticated design execute program instructions dependent result branch instruction optimization performed software compile time moving instructions branch delay slots memory instruction stream hardware supports special handling managing instructions debugging branch delay slot ideal branch delay slots pipeline implementation pipeline stages presence register forwarding stage pipeline branch conditions computed branch target buffer factors software compatibility requirements architecture change delay slots generation requires hardware implementations extra hardware ensure architectural behavior relevant load delay slot load delay slot instruction executes load register memory wait result load load delay slots uncommon load delays highly modern hardware load ram cache resource load delays risc processor designs mips isa implemented microprocessors mips assembly code load delay slot branch delay slot  
353020	computer	theory computation moore machine finite machine output values determined current contrast mealy machine output values determined current values inputs moore machine named moore concept 1956 paper experiments sequential machines definition moore machine defined consisting moore machine regarded restricted type finite visual representation table transition table table relation input diagram diagram moore machine moore diagram diagram output moore machine output producer relationship mealy machines moore mealy machines types finite machines equally type parse regular language difference moore machines mealy machines output transition determined combination current current input input opposed current input represented diagram moore machine 13 equivalent mealy machine transitions output function 14 takes input pair 15 yields 16 17 13 output function mealy machine converted equivalent moore machine converted equivalent moore machine outputs shifted time labels transition labels form input output pairs transition 19 20 21 input causing transition 19 labels edge 23 output input label 20 source transition input output fixed input received depends solely original definition moore common label 21 output transition 19 examples types inputs outputs simple simple moore machines input output digital electronic systems designed sequential systems sequential systems restricted form moore machine global clock signal typically current stored global clock signal connected clock input sequential systems solve typical electronic moore machine includes logic chain decode current outputs current chain output updated design techniques ensure occur outputs period chain systems designed transition time outputs stay stay power connected motors stay moore machine sequential network input output output remains occurred inputs moore machine description initial final table complex complex moore machines multiple inputs multiple outputs experiments moore paper experiments sequential machines 27 automata machines defined 29 30 input symbols 31 output symbols proved structure experiments machines moore machines paper task stated improvement moore theorem formulated arbitrary 27 machine exists experiment 37 determines experiment 1957 proved completely solved moore improvement experiment theorem theorem 27 machine exists experiment 41 determine experiment theorem exists 27 machine shortest experiments machine experiment equal 41 basis student fourth automata theory distinguished reference competition student faculty mechanics mathematics university paper journal 17 december published june 1960 day 2011 result experiments exact nonlinear result automata theory computational complexity theory  
354374	computer	parallel translation translations parallel alignment identification sentences parallel classical library library examples dual language series texts reference original languages translation translations ease comparison study greek versions famous collections parallel texts called parallel corpora corpus parallel corpora sentence level linguistic translation sentences split merged inserted translator alignment trivial task types parallel corpora main corpora types distinguished noisy parallel corpus bilingual sentences aligned poor quality translations contents bilingual translations specific document comparable corpus built sentence aligned bilingual documents documents topic aligned comparable corpus includes heterogeneous parallel bilingual documents topic aligned parallel corpora corpora translations document languages aligned sentence level noise corpora corpora training sets machine translation algorithms extracted bodies sources databases news articles written languages describing events extracted fragments noisy extra elements inserted corpus extraction techniques bilingual elements represented corpora elements represented corpus extract parallel fragments bilingual elements comparable corpora knowledge translation purposes quality parallel data difficult languages field translation studies merged document composed source target language versions generated piece software called alignment tool tool automatically original translated versions tool matches texts sentence sentence collection called database bilingual corpus search tool translation memories concept similarities translation memory difference translation memory translation memory database segments matched sentences stored original context original sentence lost original sentence implementations translation memory translation memory exchange standard xml format translation memories assisted translation cat programs original sentences designed human translator machine alignment errors minor translation memory fail original 1988 article harris represents hold source target texts progress hypothesis  
360030	computer	question answering science discipline fields retrieval natural language processing nlp concerned building systems automatically answer questions humans natural language overview implementation program construct answers structured database knowledge knowledge base commonly systems answers unstructured collection natural language documents examples natural language document collections systems include attempts deal wide range question types including list definition constrained cross questions history systems lunar questions league period lunar questions analysis returned moon systems effective chosen domains lunar demonstrated lunar science convention 1971 answer 90 questions domain people restricted domain systems developed common feature systems core database knowledge hand written experts chosen domain language abilities lunar techniques programs highly successful question answering program developed late simulated operation robot toy blocks offered possibility robot questions strength choice specific domain simple rules physics easy encode program 1970s knowledge bases developed targeted domains knowledge systems developed interface expert systems produced valid responses questions knowledge expert systems closely modern systems internal architecture expert systems rely heavily expert constructed organized knowledge bases modern systems rely statistical processing unstructured natural language corpus 1970s 1980s development comprehensive theories computational linguistics led development projects question answering unix developed robert berkeley late 1980s questions unix operating comprehensive hand knowledge base domain aimed answer accommodate types users project understanding operated domain german city systems developed projects stage simple helped development theories computational linguistics reasoning specialized natural language systems developed health life scientists wolfram alpha online computational knowledge engine answers queries computing answer data architecture 2001 systems typically included question classifier module determines type question type answer question answering architecture proposed domain represented agent answer questions account specific knowledge controls cooperation question answering relevant answer question answering methods dependent search corpus documents answer sense larger collection sizes performance question domain orthogonal collection notion data redundancy massive collections contexts documents leading benefits question answering systems rely heavily automated reasoning question answering systems designed logic programming language artificial intelligence domain question answering retrieval domain question answering aims answer response user question returned answer form short texts list relevant documents combination techniques computational linguistics retrieval knowledge representation finding answers takes natural language question input set national day china sentence transformed query logical form input form natural language question user friendly harder implement question types identify correct answer assigning question type question task entire answer extraction process relies finding correct question type correct answer type extraction step identifying input question type question type answers type person location word answer type speech tagging syntactic parsing techniques determine answer type subject chinese national day answer type answer types represent type situations question considered meaning question lexical dictionary understanding context question type identified retrieval set documents correct key correct entities relations mentioned documents questions named entity relevant person location names retrieved documents relevant selected ranking vector space model strategy candidate answers check answer correct type determined question type analysis stage inference technique candidate answers score candidates question close candidate closer answer translated compact meaningful representation parsing previous expected output answer issues 2002 researchers report funding support document current question answering field time progress systems extended additional domains knowledge systems developed automatically answer temporal questions questions definition terminology questions multilingual questions questions content audio images video current topics include ibm question answering watson jeopardy jennings margin facebook source license domain question answering wikipedia knowledge source  
364093	computer	robot wars robot combat competition broadcast british television 1998 2004 2016 2018 series robot combat involves teams professional operating constructed remote controlled robots avoiding arena hazards powerful house robots bound weight limits earlier series included courses competing robots extreme series broadcast bbc 20 february 1998 23 february 2001 bbc choice october 2001 february 2003 repeated bbc channel november 2003 28 march 2004 2016 broadcast bbc 24 july 2016 january 2018 broadcast main series single competition extreme series events special series master charles series hosted series extreme hosted spin series robot wars revealed 1998 1999 fourth series extreme hosted julia series series hosted additional series filmed specific sectors global market including series robot wars extreme american competitors network hosted grant serving dutch robot wars distribution netherlands single series germany fourth series robot wars robot wars grand 2002 hosted commercially successful popular selling toy ranges 2002 included mini arena radio controlled versions house robots 2003 formed robot association event carry participating competitions 2013 robots purchased rights robot wars brand robot wars operated robotic combat robot wars live 2017 renamed extreme robots peak audience viewers late 1990s format worldwide success 45 countries including australia canada china india germany italy march 2003 dropped bbc series announced 22 channel broadcast march 2004 channel series ratings july 2016 returned bbc arena house robots episode received topic viewers episode series slot weeks earlier series march 2018 history robot wars events robot wars designer division 1992 initial idea robot combat attempting create radio controlled vacuum 1994 created robot wars held competition center san francisco month prior event formed partnership york based record company communications profile records additional funding 1995 1997 robot wars events america 1995 profile records production company produce robot wars event acquired worldwide television rights profile 1995 head tape san francisco event original television series producers steve created television format based robot wars concept produced live event bbc television centre london hired build combat robots named mouse eventually series robot wars american robots machine master original american competition controller bbc michael attended event filmed commission series 1998 subsequent controller bbc mark thompson producers technical supervisor senior technical rules charge technical team robots stage helped repair robots initially technical team served panel 2002 2003 person panel consisted head judge series 1998 martin smith profile sought input relationship profile records legal surrounding ownership robot wars concept legal proceedings surrounding february 2002 series initial series robot wars broadcast weeks february march 1998 hit viewers 18 bbc produced total 26 countries series produced national network network version series produced european countries series producers produced executive produced steve initial series film studios london stage fit conventional studios moved aircraft newton viewing figures dropped 2000s reaching series final broadcast bbc channel november 2003 slot launched viewers ratings fell 800 000 moving robot wars edited hour version series 2004 13 january 2016 bbc confirmed series series hosted episode broadcast 24 july slot robots original series returned including original house robots upgraded faster 2016 series filmed park episode received viewers topic 20 000 series special 16 jordan radio robots designed major original series referred series completely starting 2017 bbc referring series series series original rules robot match format format changed times rules remained series competitions format extreme series robot wars extreme focus single championship series robot wars hosted keeping established frequently competitors robots robot called looked left robot wars series replaced charles charles playing character science fiction red charles close episode robot wars charles robot wars production 2004 comparison charles background science fiction host science technology role robot wars speak robots series julia role series extreme unable participate returned series series extreme moved channel series return unknown reasons entire manner phrases stand phrases announced director series entire duration 2016 announced hosts series series house robots series house robots obstacles competing robots challenges house robots attack robots corner corners arena competing robot house robots success robots highly successful house robots subject weight limit rules robots notable fourth wars competitive robot signals competitors arena deploy series versions metal constructed considerably improved house robots weight visually differences metal head eyes mounted replaced scales eyes red head wheel metal replacing actual shape head house robots return series house robots returned series arena hazards numerous arena original robot wars bbc international versions robot wars extreme united arena series arena audience raised arena increasing robots notably demonstrated disc series arena hazards producers arena box series protect audience production team 2004 robot wars arena purchased television production firm company called robot based organization set robot wars continue robot combat arena valued originally 000 sold 2005 owners newton air base arena suit filed newton robot newton matter robot 2016 arena constructed series arena square steel floor harder robots arena hazards robot wars arena hazards introduced hazards proved series hazards proved success floor drop zone hazards arena changed series included house robots exception chrome stopped production introduced wars production series happen late 2018 disc attack remote controlled versions remote control rear toy robot remote control robots mentioned kit house robot competitors disc attack kit released series die robots range included series house robots robots iii disc attack interactive arena additional media videos released included war series championship released exclusively video time ultimate collection featuring exclusive access teams disc footage lines ultimate collection released exclusive footage house robots operators ultimate collection ultimate collection war released dvd footage content remained releases series released dvd ray 29 august 2016 series robot wars released media released digitally series released 11 december 2017 disc dvd box set video games game based released game color 2000 2001 windows game advance titles sold 250 000 copies fourth final game released game advance windows xbox 2002 called huge array produced success items included glasses mobile phone covers produced single 51 december 2000 called robot wars android love custom game officially licensed robot wars started october 2013 video game base engine featured robots series robots competing live events included original robot wars arena live released public september 2015 updated version included robots released february 2016 update released january 2017 adding robots update august 2017 robot wars arena current series arena robots beta robots released expansion windows announced extreme series extreme bbc choice notes references  
371215	computer	fish based multilingual translation application 2012 replaced translator queries fish translation services translator sell translation application online language translator service translated 36 pairs 13 languages including english simplified chinese traditional chinese dutch french german greek italian japanese korean russian spanish internet service derived fish fictional species book radio series guide galaxy translate languages fictional refers account confusion languages city history december 1997 digital equipment corporation dec launched translation service developed team researchers dec february 2003 bought services july 2003 address fish remained 2008 address changed 30 2012 address changed time translator replaced fish fish confused fish corporation founded operated created 1995 june 2013 translator refers main  
376707	computer	programming language software environment statistical computing graphics supported foundation statistical computing language data developing statistical software data analysis data mining studies literature databases substantial increases popularity measure popularity programming languages gnu package source code software environment written fortran freely gnu public license pre compiled binary versions operating systems command interface graphical user interfaces integrated development environment history implementation programming language combined lexical semantics inspired scheme created john 1976 bell labs differences code written runs created robert university developed development core team named partly names authors partly play project conceived 1992 initial version released 1995 stable beta version 2000 statistical features libraries implement wide variety statistical graphical techniques including linear nonlinear modelling classical statistical tests time series analysis classification clustering easily functions extensions community active contributions terms packages standard functions written easy users follow algorithmic choices computationally intensive tasks fortran code linked called time advanced users write java python code manipulate objects highly user submitted packages specific functions specific study heritage stronger object oriented programming facilities statistical computing languages lexical rules strength static graphics produce publication quality graphs including mathematical symbols dynamic interactive graphics additional packages documentation format supply comprehensive documentation online formats hard programming features interpreted language users typically access command interpreter user types codice command enter calculation interpreted sum single element vectors single element vector prefix codice list elements starts element vector feature output multiple lines languages matlab supports matrix arithmetic data structures include vectors matrices arrays data frames tables database lists arrays stored column major object includes objects regression models time series spatial coordinates scalar data type data structure scalar represented vector features scheme expressions represent data code functions class data objects programming multiple dispatch variables dynamically supports programming functions functions object oriented programming generic functions generic function acts depending classes arguments passed generic function function method specific class object generic codice function print class object simple codice syntax requiring environment statistical computation software development operate matrix calculation – performance comparable gnu octave matlab packages capabilities extended user created packages statistical techniques graphical devices import capabilities tools packages developed java fortran researchers create data code report files systematic sharing public core set packages included installation 15 000 additional packages comprehensive network task views subject list lists wide range tasks fields performance computing machine learning medical imaging social sciences spatial statistics applied packages identified suitable data clinical package resources include community packages central platform collaborative development packages software projects hosts beta packages development versions packages project packages analysis data object oriented data handling analysis tools started provide tools analysis data generation throughput methods list releases maintained news files listed major releases interfaces commonly graphical integrated development environment development interface tools visual studio interfaces approach include gui common editors varying levels support include eclipse statistics visual studio code functionality accessible scripting languages python julia interfaces level programming languages java implementations main implementation written fortran implementations aimed improving speed increasing closely implementation quick improved memory management support automatic multithreading java implementations java virtual machine implementations attempt improve performance multiple processor cores form evaluation alternative implementations experimental users compared main implementation maintained development core team built runtime engine called compatible distribution modifications multi computations communities active local communities worldwide users network share ideas learn regular user focused diversity user conferences official annual users called user event user 2004 2004 2005 user conference held annually locations europe north america subsequent conferences included future conferences planned journal journal access journal project statistical computing features short medium articles development including packages programming news foundation news comparison sas spss comparable popular commercial statistical packages sas spss users charge software license january 2009 york times article growth reasons popularity data scientists commercial statistical packages sas june 2017 data scientist robert published depth comparison software packages popularity data science software commercial support source project supported community developing companies provide commercial support extensions customers examples companies 2007 richard martin steve founded revolution analytics provide commercial support revolution distribution includes components developed company major additional components include productivity environment ide data analysis services framework ability reading writing data sas file format revolution analytics offer distribution designed established criteria enables clients sector installation revolution 2015 corporation completed acquisition revolution analytics integrated programming language server 2016 server 2017 power database cortana intelligence server visual studio 2017 october 2011 oracle announced data apache oracle linux database hardware oracle enterprise components oracle advanced analytics option oracle data mining ibm offers support execution programming model parallel database analytics major commercial software systems supporting connections integration include mathematica matlab power spss platform sas software offers runtime version offers validation package compliant drug agencies agencies statistical software software vendor sponsor examples basic syntax examples illustrate basic syntax language command interface preferred assignment operator characters codice codice structure function ease creating functions objects function body remain local function data type returned user created function set short code calculating set 20 iterations equation complex  
376795	computer	flex fast lexical generator source software alternative lex program generates lexical scanners frequently lex implementation berkeley generator bsd derived operating systems codice codice posix gnu version bsd ports linux distributions flex gnu project released gnu public license history flex written 1987 translating generator led lexical flex scanner programming language recognized codice codice codice codice codice codice codice codice codice 11 codice 12 codice 13 codice 14 codice 15 codice 16 codice 17 codice 18 codice 19 codice 20 codice 21 codice 22 codice 23 codice 24 codice 25 codice 26 codice 27 codice 28 codice 29 codice 30 codice 31 programs perform character parsing deterministic finite automaton dfa dfa theoretical machine accepting regular languages machines subset collection turing machines dfas equivalent read moving turing machines syntax based regular expressions finite automaton issues time complexity flex lexical time complexity input performs constant operations input symbol constant gcc generates 12 instructions dfa match loop note constant independent token regular expression size dfa scanner potential match extremely flex generate scanner linear performance feature optional programmer explicitly told flex matched input dfa accept feature enabled default performance implications flex manual default scanner generated flex programs generated scanner threads overcome issue options flex achieve detailed description options flex manual usage unix environments generated scanner references header file unix specific avoid generating code includes option issue unix library function generated code option interactive forces flex generate code flex languages flex generate code scanner code generated flex languages language tool flex flex lexical scanner included flex package generated code depend runtime external library memory user supplied alternative input depends embedded situations traditional operating runtime facilities flex generated scanner includes header file codice 32 defines interfaces generated classes  
378193	computer	coprocessor processor functions primary processor cpu operations performed coprocessor floating arithmetic graphics signal processing string processing cryptography peripheral devices processor intensive tasks main processor coprocessors accelerate performance coprocessors computers customized customers extra performance pay functionality coprocessors vary degree autonomy rely direct control coprocessor instructions embedded cpu instruction stream independent processors capable optimized purpose code limited instruction set focused specific tasks common driven host processor building command list engine contained unusual dsp simd vector unit capable modes operation history mainframe processor time input output tasks separate systems called channel mainframe require processing set parameters input output operation signal channel processor carry operation simple processors handle time consuming processing performance improved coprocessors floating arithmetic appeared desktop computers 1970s common 1980s 1990s bit 16 bit processors software carry floating arithmetic operations coprocessor supported floating calculations carried times faster math coprocessors popular users aided design cad software scientific engineering calculations floating units amd intel treated peripheral devices intel motorola national closely integrated cpu form coprocessor video display coprocessor atari bit family texas instruments 99 computers called video display controllers commodore custom included unit copper manipulation memory microprocessors developed cost integrating floating arithmetic functions processor processor speeds closely integrated coprocessor difficult implement separately packaged mathematics coprocessors uncommon desktop computers demand dedicated graphics coprocessor grown increasing demand realistic 3d graphics games intel original ibm pc included socket intel floating coprocessor fpu popular option people pc cad mathematics intensive calculations architecture coprocessor speeds floating arithmetic users pc word processing saved cost coprocessor accelerated performance manipulation operations tightly integrated responded floating machine code operation codes inserted instruction stream processor interpret instructions requiring separate versions programs fpu fpu systems time detect fpu select mathematical library functions coprocessor central processor input output coprocessor programming technique input output operations transfer data memory peripheral device reducing load cpu ibm ibm pc design intel stopped development type coprocessor intel microprocessor optional math coprocessor perform floating operations hardware intel processor included floating hardware chip intel released cost reduced processor floating hardware sold coprocessor essentially disabled main processor installed complete set connections intel processors integrated floating hardware main processor chip advances integration eliminated cost advantage selling floating processor optional element difficult adapt circuit board techniques processor speed meet time delay power consumption radio frequency interference standards required range clock speeds chip floating processors referred coprocessors operate parallel main cpu era 16 bit desktop computers common source floating coprocessors coprocessors instruction set intel coprocessors socket supported processors provide mathematics functions functions intel family required specific software libraries support functions motorola motorola 68000 family coprocessors floating speed acceleration intel processors computers 68000 family equipped hardware floating processor emulate floating instructions software slower allowed binary version program distributed memory management coprocessor designed processor modern coprocessors dedicated graphics processing units gpus form graphics cards models sound cards fitted dedicated processors providing digital real time dsp effects 1990 1994 ultrasound sound typical examples sound sound examples 2006 announced add card computers called designed perform complex physics computations cpu gpu perform time consuming calculations designed video games mathematical theoretically developed 2008 nvidia purchased company card functionality software allowing gpus render cores graphics processing nvidia engine software 2006 systems unveiled add card special linux kernel running calling chip network processing unit media oriented add card coprocessor based cell microarchitecture vector coprocessors 2008 released aim support purpose cpus amd nvidia gpus single common language compute kernels 2010s mobile computation devices implemented sensor hub coprocessor examples coprocessors handling sensor integration mobile devices include apple motion coprocessors qualcomm sensor core qualcomm holographic processing unit 2012 intel announced intel coprocessor companies developing coprocessors aimed artificial neural networks vision cognitive tasks vision processing units zeroth 2018 chips smartphones apple android phone vendors trends time cpus grow functionality popular coprocessors considered integral processors main pipeline simd units multimedia acceleration role dsp cards gpus integrated cpu specialized units remain popular desktop machines additional power continued evolution independently main processor product lines  
382535	computer	abelson born april 26 1947 professor electrical engineering science mit fellow ieee founding director creative software foundation directed implementation logo apple language personal computers 1981 published selling book logo 1982 abelson developed mit science subject structure interpretation programs subject organized notion language formal medium ideas methodology perform operations abelson mit project mathematics computation mit project abelson mit faculty abelson led internal investigation school choices role concluded mit wrong recommended mit changing internal policies education abelson holds degree princeton university phd degree mathematics mit mathematician science education abelson computation conceptual framework teaching directed implementation logo apple language personal computers 1981 published selling book logo 1982 book geometry written 1981 computational approach geometry cited step change entire teaching learning process march 2015 abelson 1969 implementation graphics sold algorithm algorithms abelson developed mit science subject structure interpretation programs subject organized notion language formal medium ideas methodology perform operations textbook availability personal computers scheme lisp teaching worldwide impact university science education visiting faculty google app inventor android team educational program easy people programming background write mobile phone applications explore change nature computing author book app inventor david published media 2011 computational tools abelson mit project mathematics computation project mit science artificial intelligence laboratory joint project lab components goal project create computational tools scientists engineers powerful numerical computers exploring complex physical systems requires substantial human effort human simulations interpret numerical students abelson combining techniques numerical computation symbolic algebra heuristic programming develop programs perform massive numerical computations interpret computations terms programs form basis intelligent scientific instruments monitor physical systems based level descriptions lead generation computational tools autonomously explore complex physical systems play future practice science engineering time programs incorporate computational scientific knowledge form foundations science engineering software movement abelson software movement including serving board software foundation abelson involved publishing andrew huang xbox script mit campus wide music distribution mit project abelson mit faculty investigation january 2013 access mit 35 articles mit access campus network response mit professor abelson lead internal investigation school choices role report delivered july 26 2013 concluded mit wrong recommended mit changing internal policies abelson founding director creative public knowledge director center technology external links entry initially based abelson permission  
383162	computer	extraction task automatically structured unstructured semi structured machine readable documents activity concerns processing human language texts natural language processing nlp activities multimedia document processing automatic annotation content extraction images audio video difficulty current approaches focus restricted domains extraction reports corporate denoted formal relation online news sentence broad goal computation unstructured data specific goal logical reasoning draw based logical content input data structured data defined data chosen target domain interpreted respect category context extraction deals automatic methods management transmission storage display discipline retrieval developed automatic methods typically statistical indexing document collections documents complementary approach natural language processing nlp solved modelling human language processing considerable success account magnitude task terms difficulty emphasis deals tasks nlp terms input assumes existence set documents document template describes entities events manner documents details articles american article based acts define task template set frame hold contained single document template slots event happened required attack article data slots template history extraction dates late 1970s days nlp commercial mid 1980s built aim providing real time financial news financial 1987 series message understanding conferences competition based conference focused domains considerable support defense advanced projects agency darpa tasks performed government analysts scanning links growing unstructured form lee inventor wide refers existing internet documents content data consists unstructured documents semantic knowledge contained documents accessible machine processing transformation form xml tags intelligent agent monitoring news data feed requires transform unstructured data typical application scan set documents written natural language database extracted tasks applying extraction linked create structured view goal create easily machine readable process sentences typical tasks include note list exact meaning activities commonly accepted approaches combine multiple tasks achieve wider goal machine learning statistical analysis natural language processing documents increasingly topic extracted multimedia documents expressed level structure naturally leads fusion extracted multiple kinds documents sources wide applications focus conferences developing systems people data online systems perform online meet requirements cost flexibility development easy adaptation domains systems fail meet criteria linguistic analysis performed unstructured exploit xml tags layout formats online texts result intensive approaches developed sets highly accurate rules extract content manually developing proved time consuming task requiring level expertise machine learning techniques supervised unsupervised rules automatically typically handle highly structured collections product telephone fail type structured common effort adaptive extraction development systems handle types structured common fail including mixed types systems exploit shallow natural language knowledge applied structured texts development visual extraction relies rendering browser creating rules based regions rendered helps entities complex exhibit visual pattern lack pattern source code approaches standard approaches accepted numerous approaches exist including hybrid approaches combine standard approaches listed  
387199	computer	source intelligence osint data collected publicly sources intelligence context intelligence community term refers publicly sources opposed sources source software public intelligence osint hundreds advent communications rapid transfer deal predictive intelligence public sources principles source intelligence osint collection analysis public sources osint national security law business intelligence functions analysts sensitive intelligence answering classified proprietary intelligence requirements previous intelligence disciplines osint sources divided categories flow osint distinguished applies process intelligence create tailored knowledge specific decision specific individual definition osint defined director national intelligence department defense produced publicly collected exploited manner audience purpose addressing specific intelligence requirement scientist source acquisition involves written transmitted material addition documents videos internet human source forced control facility operated foreign government researcher mark defines osint derived collection types media government reports documents scientific reports commercial vendors internet main source require type collection techniques meet copyright commercial requirements vendors applicable history osint united origins creation foreign broadcast monitoring service agency responsible monitoring foreign reflected application correlation price paris bridges brown commission stated 1996 access sources priority funding attention july 2004 september 11 attacks 11 commission recommended creation source intelligence agency march 2005 intelligence commission recommended creation source november 2005 director national intelligence announced creation source center center established internet databases press radio television video data photos commercial addition train analysts center absorbed existing foreign broadcast service originally established head named director center events 11 intelligence merged elements office director national intelligence creating source enterprise private sector invested tools aid osint collection analysis central intelligence agency supported venture capital firm assisted companies develop monitoring predictive analysis tools december 2005 director national intelligence assistant director national intelligence source serve intelligence community senior intelligence source provide strategy guidance national source enterprise established national source enterprise intelligence community 2008 returned private sector dan os senior policy main practical osint volume deal data distributed increases rate difficult evaluate sources intelligence analysis protection questions recognized media executed osint private individuals data foreign military intelligence agency considered countries country tool times osint valuable processing processes technical intelligence disciplines additionally osint valuable variety variety sources commission intelligence capabilities united mass report submitted march 2005 osint included source intelligence process reasons stated report process osint highly diverse form intelligence collection analysis agency units department defense department osint internet form vpn identity evaluating sources osint collection analysis process osint intelligence evaluation determine true process false process affect predicting future finally analysts evaluated intelligence incorporated finished classified proprietary intelligence product collection osint collection intelligence disciplines raw analyzed major difficulty targets osint chief difficulty identifying relevant reliable sources vast publicly challenge access local knowledge human experts create tailored knowledge fly osint community disciplines united government source activities government frequently source activities media monitoring media analysis internet public source library federal division deal tailored source service basis executive branch intelligence intelligence community source activities national source enterprise intelligence community director national intelligence assistant director national intelligence source os source center national source committee prior national source enterprise foreign broadcast service established government primary source unit translating foreign absorbed defense department joint publications service function foreign printed materials including technical journals forces defense intelligence dr stephen encouraged defense science board reports strategic communication transition created defense source program current defense intelligence assigned executive agency program defense intelligence agency military offices osint activities include security department security active source intelligence unit house security committee intelligence sharing risk assessment security charles allen february 14 2007 established domestic source enterprise support department osint local partners law law osint community applies source intelligence osint prediction investigation including additionally fusion centers increasingly utilizing osint support intelligence generation examples successful law osint include osint royal canadian mounted osint osint units time individual york department osint unit los angeles department emergency operations joint regional intelligence center business business osint commercial intelligence intelligence business intelligence chief practice private intelligence agencies businesses private analyze relevant business purposes include media deep commercial content private specialized business field business united relies osint commercial industry industry court business intelligence sector osint agencies employ private recovery agency locate client failed court subsequently issued osint method discovery locate initial osint leads discover alternate hypothesis analyze match relevant data prediction location data access facebook entries messages methods fail step seek specialized intelligence services reference osint aid subjects interview create profile osint data interview data include variety patterns list daily personal activities vehicles director intelligence agency 2016 osint data base filtered analyzed applied source intelligence analysis software categories tools intended osint analysis category source tools query multiple search engines simultaneously search engines provide separately category includes social media search engines search engines domains people category designed data analytics platforms automatically combine osint local internal data visual analysis search hidden connections records  
390468	computer	buffer rob algorithm instruction execution instructions stages instructions issue execute write result algorithm additional stage stage instructions stored register memory write result stage buffer contents buffer executing instructions depending additional fields entry buffer additional benefits buffer include precise exceptions easy control target address branch jump rob storing instructions original fetched rob accessed reservation station algorithm additional parameter instruction rob jump prediction correct exception instruction stream rob instructions reservation stations  
390562	computer	algorithm architecture hardware algorithm dynamic scheduling instructions execution enables efficient multiple execution units developed robert ibm 1967 implemented ibm 360 model floating unit major innovations algorithm include register renaming hardware reservation stations execution units common data bus computed values broadcast reservation stations developments improved parallel execution instructions earlier algorithms robert received award 1997 algorithm implementation concepts concepts implementation algorithm common data bus common data bus connects reservation stations functional units effects instruction instructions issued sequentially effects sequence instructions exceptions raised instructions occur processor executed sequentially register renaming algorithm register renaming correctly perform execution purpose reservation station registers hold real real destination register issue stage initially tag reservation station produce real unit result replaced real functional unit single reservation station reservation stations hold execute single instruction including operation operands functional unit processing source operands instruction real exceptions speaking exceptions status exception processor special exception called exception exceptions occur implementations processor changed program risc pipeline exceptions programs experience precise exceptions specific instruction exception determined execute exception experience exceptions execute determine specific instruction exception instruction stages listed stages instruction passes time issued time execution complete stage issue issue stage instructions issued execution operands reservation stations ready registers renamed step war hazards stage execute execute stage instruction operations carried instructions delayed step operands raw hazards program maintained effective address calculation prevent hazards memory stage write result write result stage alu operations written registers store operations written memory algorithm improvements concepts reservation stations register renaming common data bus algorithm design performance computers reservation stations responsibility waiting operands presence data dependencies varying storage access time circuit speeds functional units improvement floating delays memory accesses algorithm tolerant cache misses additionally programmers implementing optimized code result common data bus reservation station preserve dependencies tracking operands instructions reservation stations register renaming hardware algorithm minimizes read write raw write write write read war architecture hazards improves performance reducing time required stalls equally improvement algorithm design limited specific pipeline structure improvement algorithm multiple issue processors additionally algorithm easily extended enable branch applications legacy algorithm ibm unused implementation 360 model architecture vast increase usage 1990s reasons modern processors implement dynamic scheduling schemes derivative original algorithm including popular intel x86 64 chips  
390569	computer	domain central processing unit cpu design hazards instruction pipeline cpu instruction execute clock cycle lead incorrect computation common types hazards data hazards structural hazards control hazards branching hazards methods deal hazards including pipeline stalls pipeline operand forwarding execution method algorithm background instructions pipelined processor performed stages time instructions processed stages pipeline fetch execute instruction pipeline instructions executed hazard occurs simultaneous instructions conflict types data hazards data hazards occur instructions exhibit data dependence modify data stages pipeline potential data hazards result race conditions termed race hazards situations data hazard occur instructions occurring program read write raw read write raw data hazard refers situation instruction refers result calculated retrieved occur instruction executed prior instruction prior instruction processed partly pipeline instruction calculating saved register compute result register pipeline operands fetched operation saved data dependency occurs data dependency occurs instruction dependent completion instruction write read war write read war data hazard represents concurrent execution situation chance concurrent execution result register stored chance fetch operands write write write write data hazard occur concurrent execution environment write delayed executing structural hazards structural hazard occurs processor hardware instructions time single memory unit accessed fetch stage instruction retrieved memory memory stage data written read memory resolved separating component orthogonal units separate caches pipeline detected hazard control unit control hazards branch hazards branching hazards termed control hazards occur branches instruction pipeline processor outcome branch insert instruction pipeline fetch stage hazards generic pipeline pipeline termed pipeline break pipeline method data structural branch hazards instructions fetched control logic determines hazard occur true control logic operations pipeline instruction hazard executes prior sufficient time prevent hazard stages pipeline processor instructions hazards forms introduce delay processor execution pipeline occurs branch instruction memory location prior stages pipeline prior stages allowing pipeline continue instruction branch data hazards main solutions algorithms resolve data hazards execution algorithm task removing data dependencies compiler instructions dependent instructions ensure correct operation instructions examples write register add register store result register execution register write register pipeline starts executing performs addition event adds register register 13 error occurs reads register stored result write operation register reading contents register register forwarding helps correct errors depending output subsequent instructions stored register forwarding applied wait store output register output output subsequent instruction correct register store pipelined forwarding enabled instruction decode execution stage pipeline inputs read register register register stage instruction execute memory access control logic determine input control hazards branch hazards avoid control hazards event branch pipeline bubble incorrect instructions entered pipeline care prevent loaded instructions processor energy processing discovered loaded incorrectly techniques memory latency factor designers delay reduce performance types memory accessing time memory choosing suitable type memory designers improve performance pipelined data path  
405562	computer	ray theory universal inductive inference theory prediction based logical observations predicting symbol based series symbols assumption theory environment unknown probability distribution mathematical principle multiple prediction completely bayesian framework universal prior calculated universal probability distribution hypothesis probability bayes rule predicting sequence origin theory based foundations founded ray 1960 mathematically combination principle multiple theories previous observations calculate probability observation weight shorter theories universal artificial intelligence builds calculate expected action mathematical proof based mathematical properties probability distribution set properties relevant infinite set programs set sum probabilities programs equal definition probability probabilities roughly decrease infinite set programs strictly precise probability programs programs probability fundamental theory concepts algorithmic probability complexity universal prior probability prefix sequence sum probabilities programs universal compute starting unknown probability distribution sampled universal prior bayes theorem predict unseen optimal fashion modern applications artificial intelligence inductive inference derived algorithms approximate modern computing power closer predictions predictions inductive inference mathematical limit inductive inference direction inductive inference based mark gold model learning limit 1967 developed models learning scenario class functions recursive functional input form outputs hypothesis respect agreed acceptable functions indexed function required consistent values learns function generates function learns learns basic classes functions class functions models considered learning classes sets positive data topic studied gold pioneering paper 1967 reaching extension approach developed theory generalized kinds super recursive algorithms turing machines mathematically based direction inductive inference theory automata computation context process inductive inference performed abstract automaton called inductive turing machine 2005 inductive turing machines represent step development science providing models contemporary computers networks 2001 class super recursive algorithms satisfy conditions definition algorithm inductive turing machines type effective method list defined instructions task initial defined series successive eventually difference inductive turing machine turing machine produce result turing machine inductive turing machine stopping stephen kleene called procedures stopping calculation procedure algorithm kleene 1952 kleene algorithm eventually exhibit object kleene 1952 condition inductive turing machines finite steps inductive turing machines step result simple inductive turing machines equivalent models computation advanced inductive turing machines powerful proved 2005 limiting partial recursive functions error turing machines simple inductive turing machines equivalent models computation simple inductive turing machines turing machines direct computing automata physical machines contrast error limiting recursive functions limiting partial recursive functions syntactic systems symbols formal rules manipulation simple inductive turing machines turing machines limiting partial recursive functions error turing machines partial recursive functions note simple inductive turing machines structure functioning semantics output mode turing machines types inductive turing machines essentially advanced structure structured memory powerful instructions utilization inference learning achieving efficiency reflects learning people 2004 researchers computations inductive turing machines stopping computations infinite time computations computations inductive turing machines conventional turing machines computations result stopping computations inductive turing machines rules inductive turing machines determine computation stopping stopping result inductive turing machine produces output time time output changing considered result computation descriptions rule papers incorrect instance 2006 128 rule result stopping correct output produced subsequent output simply correct result contrast widespread inductive turing machines finite steps finite time contrast infinite infinite time computations main conventional turing machines simple inductive turing machines distinction simple inductive turing machines conventional turing machines distinction conventional turing machine coming final result simple inductive turing machine reaching result conventional turing machine people result contrast users decide computed result continue computations desktop applications word processors time waiting event loops directed users evolutionary inductive turing machines evolutionary approach inductive inference accomplished class automata called evolutionary inductive turing machines 2009 2012 evolutionary inductive turing machine infinite sequence inductive turing machines generations coded alphabet machines goal build inference condition automaton called component level automaton represents level evolutionary algorithm input generations population applying variation operators selection operator generation input processed automaton generates produces generation transfer output automaton   automaton receives generation input applies variation operator selection operator producing generation   sending   continue evolution  
406624	computer	time series series data indexed listed time commonly time series sequence successive equally time sequence discrete time data examples time series counts daily closing industrial average time series frequently time series statistics signal processing pattern recognition mathematical weather prediction control engineering communications engineering domain applied science engineering involves temporal measurements time series analysis methods analyzing time series data extract meaningful statistics characteristics data time series model predict future values based observed values regression analysis employed theories current values independent time series affect current time series type analysis time series called time series analysis focuses comparing values single time series multiple dependent time series time time series analysis analysis single time series time series data natural temporal time series analysis distinct cross studies natural observations people reference respective education levels individuals data entered time series analysis distinct spatial data analysis observations typically locations house prices location characteristics stochastic model time series reflect observations close time closely observations addition time series models natural time values period expressed values future values time time series analysis applied real valued continuous data discrete numeric data discrete symbolic data sequences characters letters english language methods analysis methods time series analysis divided classes frequency domain methods time domain methods include spectral analysis wavelet analysis include auto correlation cross correlation analysis time domain correlation analysis filter manner scaled correlation operate frequency domain additionally time series analysis techniques divided parametric parametric methods parametric approaches assume underlying stationary stochastic process structure parameters moving average model approaches task estimate parameters model describes stochastic process contrast parametric approaches explicitly estimate covariance spectrum process assuming process structure methods time series analysis divided linear linear panel data time series type panel data panel data class data set time series data set dimensional panel cross dataset data set exhibit characteristics panel data time series data data record unique records answer time data field time series data set candidate determining unique record requires time data field additional identifier time student stock symbol country code panel data candidate time identifier data set cross data set candidate analysis types motivation data analysis time series purposes motivation context statistics quantitative primary goal time series analysis context signal processing control engineering communication engineering signal detection estimation context data mining pattern recognition machine learning time series analysis clustering classification query content anomaly detection analysis regular time series manually united program standardized rate 100 000 percent change rate calculated decreasing percent change rate 1975 1990s vertical axes comparison time series graphic techniques include curve fitting curve fitting process constructing curve mathematical function fit series data subject constraints curve fitting involve interpolation exact fit data required smoothing smooth function constructed data topic regression analysis focuses questions statistical inference uncertainty curve fit data observed random errors fitted curves aid data visualization values function data relationships variables refers fitted curve range observed data subject degree uncertainty reflect method construct curve reflects observed data construction economic time series involves estimation components dates interpolation values earlier dates interpolation estimation unknown historical data drawing missing reading lines interpolation data surrounding missing data trend term cycles series relevant dates alternatively polynomial interpolation interpolation polynomial functions fit time fit closely interpolation approximation complicated function simple function called regression main difference regression interpolation polynomial regression single polynomial models entire data set interpolation yield continuous function composed model data set process original observation range variable basis relationship variable interpolation produces estimates observations subject uncertainty risk producing function approximation function approximation select function defined class closely matches target function task specific distinguish major classes function approximation target functions approximation theory branch numerical analysis functions special functions approximated specific class functions rational functions desirable properties inexpensive computation integral limit values target function unknown explicit set time series form depending structure domain techniques applicable operation real techniques interpolation regression analysis curve fitting range target set finite set dealing classification online time series approximation data pass construct approximate representation support variety time series queries worst error extent regression classification fitness approximation received unified treatment statistical learning theory viewed supervised learning prediction statistics prediction statistical inference approach inference predictive inference prediction approaches statistical inference description statistics knowledge sample population population prediction time transferred time specific time process classification assigning time series pattern specific category identify word based series hand movements sign language signal estimation approach based analysis filtering signals frequency domain fourier transform spectral density estimation development accelerated war mathematician electrical engineers filtering signals noise predicting signal values time filter estimation theory digital signal splitting time series sequence segments time series represented sequence individual segments characteristic properties audio signal conference pieces times person speaking time series segmentation goal identify segment boundary time series properties segment approach change detection modeling time series sophisticated markov jump linear models models time series data forms represent stochastic processes modeling variations level process broad classes practical models integrated models moving average models classes depend linearly previous data combinations ideas produce moving average integrated moving average models integrated moving average model extensions classes deal vector valued data time series models preceding extended including initial vector vector additional set extensions models observed time series driven time series observed series distinction series deterministic control models extended final linear dependence level series previous data partly possibility producing chaotic time series empirical advantage predictions derived linear models linear models nonlinear models references nonlinear time series analysis types linear time series models models represent variance time models represent conditional collection wide variety representation predicted values observed series contrast representations locally varying driven separate time varying process stochastic model model wavelet transform based methods locally stationary wavelet neural networks gained favor referred techniques time series attempting illustrate time dependence multiple scales markov switching techniques modeling evolution hidden markov model hmm statistical markov model modeled assumed markov process hidden hmm considered simplest dynamic bayesian network hmm models speech recognition translating time series spoken notation time series analysis common notation time series indexed natural common notation set conditions sets conditions theory built ideas expanded ideas strict models applications developed conditions models considered partly addition time series analysis applied series stationary stationary situations frequency components change time time frequency analysis representation time series signal tools tools time series data include measures time series metrics features time series classification regression analysis visualization time series categories overlapping separated overlapping display time series layout separated aligned comparison purpose software time series data common statistical analysis software result offerings commercial source examples include  
413102	computer	folding distributed computing project disease protein folding computational drug design types molecular dynamics project idle processing resources thousands personal computers owned installed software systems main purpose determine mechanisms protein folding process reach final dimensional structure protein academic major implications medical disease disease forms cancer lesser extent folding predict protein final structure determine molecules interact applications drug design folding developed operated laboratory stanford university direction shared scientific institutions laboratories project graphics processing units gpus message passing interface computing multi core processors sony smartphones distributed computing scientific project statistical simulation methodology paradigm shift traditional computing methods performance scale computing network allowed researchers computationally costly atomic level simulations protein folding thousands times achieved launch 2000 lab produced scientific papers direct result folding project simulations experiments distributed computing projects folding user computing contributions project credit units protein project uniform base credit determined units project official reference machine project released user receives base unit receive rapidly units computationally scientific priority users receive credit clients multiple machines attempts awarded credit scientific users register contributions team combine user start team existing team team community driven sources internet forum friendly competition individuals teams compute project benefit folding community accelerate scientific party modified binary modification binary transport signed person digital modifications folding input data output result processed client software digitally signed integrity independently integrity client software folding software libraries networking v7 v7 client generation folding client software prior clients windows macos linux operating systems released 2012 v7 folding background priority allowing applications cpu resources designed installation start operation user friendly offer scientific flexibility researchers prior clients v7 managing bug users development process provide feedback v7 consists integrated elements user typically v7 source gui named advanced expert user interface modes ability monitor control remote folding clients application slot slot acts replacement distinct folding v6 smp gpu clients download process units independently function modeled viewer displays real time rendering protein processed google chrome 2014 client google chrome browsers released allowing users folding browser client google native client feature based browsers folding code native speed user machine android july 2015 client android mobile phones released google play devices running android comparison molecular distributed computing project aimed protein structure prediction accurate structure predictors software markov model starting folding simulations conversely structure prediction algorithms improved models sampling aspects protein folding simulations journal predict final folding folding complementary address molecular questions special purpose supercomputer built molecular dynamics simulations october 2011 folding powerful molecular dynamics systems unique ability produce single ultra computationally costly molecular 2010 reached range science helpful types markov models analysis 2011 lab constructed 100 simulations alternative folding visible traditional analysis concluded difference constructed limited assembled shorter june 2011 folding sampling simulation effort determine methods compare forum beta folding shorter distributed computing methods require adaptive sampling sample protein phase space combination folding simulation methods provide sampling space  
413119	computer	originally named sony dream robot humanoid entertainment robot developed marketed sold sony follow success aibo entertainment robot feet 16 life january 26 2006 day announced aibo products sony announced development reported numerous development testing scalability phases intent commercially development prototypes developed manufactured sony intelligence dynamics laboratory prototypes existence unknown performing confirmed sony museum science boston january 22 2006 numerous videos fourth generation prototype robots featured music video recording artist prototypes camera center improved hands prototypes programmers weeks program capable voice recognition people likes video speaking children records 2005 edition robot capable running defines moving legs ground time generation internal battery hour fiction 2005 robots appeared music video robots music 2009 series television series virtual virtual set modern day earth cycle humanity interaction technology final scene real life robots starting sony  
416129	computer	architecture branch predictor digital circuit guess branch structure purpose branch predictor improve flow instruction pipeline branch predictors play critical role achieving effective performance modern pipelined microprocessor architectures x86 branching implemented conditional jump instruction conditional jump continue execution branch code conditional jump jump program memory branch code stored conditional jump condition calculated conditional jump passed execution stage instruction pipeline branch prediction processor wait conditional jump instruction passed execute stage instruction enter fetch stage pipeline branch predictor attempts avoid time guess conditional jump branch fetched executed detected guess wrong executed partially executed instructions discarded pipeline starts correct branch delay time branch equal stages pipeline fetch stage execute stage modern microprocessors tend pipelines delay 20 clock cycles result pipeline increases advanced branch predictor time conditional jump instruction base prediction branch predictor records branches conditional jump times base prediction history branch predictor recognize conditional jump time branch prediction branch target prediction branch prediction attempts guess conditional jump branch target prediction attempts guess target conditional jump computed decoding executing instruction branch prediction branch target prediction combined circuitry implementation static branch prediction static prediction simplest branch prediction technique rely dynamic history code executing outcome branch based solely branch instruction implementations sparc mips commercial risc architectures single direction static branch prediction predict conditional jump fetch sequential instruction branch jump evaluated instruction pointer set sequential address cpus evaluate branches decode stage single cycle instruction fetch result branch target cycles machine instruction branch architectures define branch delay slots utilize fetched instructions advanced form static prediction branches branches branch target address address technique prediction accuracy loops branches processors branch prediction inserted code static prediction intel pentium accepts branch prediction feature abandoned intel processors static prediction fall technique processors dynamic branch prediction dynamic predictors sufficient motorola intel pentium technique fall static prediction decisions compile time execution program dynamic branch prediction dynamic branch prediction branches time predict outcome branch random branch prediction random bit pure guess guarantee branch 50 correct prediction rate improved instructions simplest static prediction assume compilers instructions 50 correct prediction timing prediction superscalar processors mips alpha alpha fetch instructions pointer predictor handles branch target prediction branch direction prediction predictor aligned instructions branch target instruction fetched initial instructions fetched assuming simplicity uniform distribution branch targets instructions fetched discarded branch instruction aligned instructions branch delay slot discarded assuming uniform distribution branch instruction instructions fetched discarded discarded instructions branch destination lines add complete fetch cycle single cycle predictor level branch prediction counter bit counter essentially records outcome branch simple version dynamic branch predictor accurate bit counter machine branch evaluated machine updated branches evaluated change branches evaluated change advantage bit counter scheme bit scheme conditional jump prediction loop closing conditional jump original intel pentium processor counter implementation predictors correct branch maps unique counter predictor table indexed instruction address bits processor fetch prediction instruction instruction decoded level predictor level branch predictor referred correlation based branch predictor dimensional table called pattern history table table entries bit level adaptive predictor codice statement executed times decision execution depend previous level adaptive predictor efficiently counter conditional time pattern predicted counter level adaptive predictor history occurrences branch counter history patterns method figure occurrences branch stored bit shift register branch history register binary values 00 01 11 pattern history table entries branch branch entry table bit counter type figure branch branch history register choosing history 00 counter history 11 assume conditional jump time branch sequence entry 00 pattern history table entry 01 01 entry entry 11 consecutive rule level adaptive predictor bit history predict sequence period bit sequences advantage level adaptive predictor learn predict arbitrary pattern method invented yale university michigan initial publication 1991 method popular variants prediction method modern microprocessors local branch prediction local branch predictor separate history buffer conditional jump instruction level adaptive predictor history buffer separate conditional jump instruction pattern history table separate shared conditional intel pentium pentium pentium iii local branch predictors local bit history local pattern history table 16 entries conditional jump local predictors correct global branch prediction global branch predictor separate history record conditional jump shared history conditional advantage shared history correlation conditional predictions disadvantage history conditional history buffer include bits branch branches level adaptive predictor scheme counter scheme table sizes rarely local prediction history buffer prediction size pattern history table grows exponentially size history buffer pattern history table shared conditional level adaptive predictor globally shared history buffer pattern history table called predictor global history branch pc global branch prediction amd processors intel pentium core core based atom processors branch prediction branch predictor combines local global prediction principles local global branch bits program counter tests processor technique predictor predictor level adaptive predictor globally shared history buffer pattern history table additional local counter outputs local global predictors final prediction purpose reduce pattern history table branches prediction happen share entry pattern history table predictor version intel abandoned hybrid predictor hybrid predictor called combined predictor implements prediction mechanism final prediction based predictor predictors predictions majority function based predictors proposed combined branch prediction 1993 paper predictor predictor predictors multiple table entries track behavior branch multiplication entries branches map table entry situation called aliasing prediction accuracy suffer branches multiple predictors predictor aliasing patterns predictor aliasing combined predictors indexing functions predictors called predictors analogous associative caches data instruction caching loop predictor conditional jump controls loop predicted special loop predictor conditional jump loop times times conditional jump loop times conditional jump times detected loop behavior conditional jump predicted easily simple counter loop predictor hybrid predictor predictor conditional jump loop behavior microprocessors loop predictors indirect branch predictor indirect jump instruction choose branches processors specialized indirect branch predictors processors intel amd predict indirect branches level adaptive predictor instruction bit history buffer architecture processors ibm support instruction branch predictor entry instruction branch target address constructed adding contents purpose register processors mechanism simply predict indirect jump target time prediction function returns function return called return instruction indirect jump reads target address stack microprocessors separate prediction mechanism return instructions mechanism based called return stack buffer local stack size return stack buffer typically 16 entries branch prediction trade fast branch prediction branch prediction branch predictors branch predictor fast simple branch predictor slower complicated tables wrong prediction predictor alpha alpha microprocessors fast single cycle predictor handle branch target provide simple fast branch prediction predictor branch resolution takes cores cycle secondary branch predictors prediction predictor cost single lost fetch cycle intel core branch target branch predictors neural branch prediction machine learning branch prediction multi layer perceptrons called neural branch prediction proposed university developed perceptron branch predictor neural branch predictor developed 2001 perceptron predictor feasible implement hardware commercial implementation perceptron branch predictor amd microarchitecture main advantage neural predictor ability exploit requiring linear resource growth classical predictors require exponential resource growth reports global improvement style hybrid predictor perceptron hybrid predictors main disadvantage perceptron predictor latency advantage speed arithmetic computation latency compared clock period modern reduce prediction latency proposed 2003 fast path neural predictor perceptron predictor weights current branch path branch pc researchers developed concept michael black art branch predictors perceptron predictor intel championship branch prediction competition intel implements idea ia 64 2003 amd processor includes neural branch predictor history ibm designed late 1950s pre executes branches conditional branches registers conditional branches production models implemented predict subsequent models changed implement predictions based current values indicator bits condition codes designers considered static bits branch instructions project decided recovery unit performance time required recovery subsequent ibm designs branch prediction speculative execution ibm 1985 bit predictors introduced 1977 national lab supercomputer independently smith 1979 processors popular 1960s 1980s multiple cycles instruction require branch prediction addition ibm examples designs incorporated branch prediction burroughs machine released 1982 pipelined branch prediction branch prediction history stored memory instructions program execution implements branch prediction equivalent branch represent branch operator type opcode history branch instruction hardware determines branch prediction branch updated opcode equivalent opcode proper history scheme hit rate granted scheme vax announced 1989 pipelined performs branch prediction commercial risc processors mips earlier sparc processors trivial branch prediction branch delay slots fetched instruction cycle execute performance loss trivial branch prediction cycles branch branch resolution cycles branch prediction introduction pipelined superscalar processors intel pentium dec alpha mips ibm power series processors rely bit simple predictors dec alpha predictor combined local predictor global predictor combining choice predictor amd combined global predictor combining choice predictor processor caches base choice predictor bits l2 cache result effectively base choice predictor tables instructions l2 cache design sufficient instruction error memory alpha late design minimum branch penalty 14 cycles complex fast predictor combined majority predictor majority predictors 2018 security called public google project researchers virtually modern cpus involves private data data caches branch  
416612	computer	cross validation called rotation estimation sample testing model validation techniques statistical analysis independent data set settings goal prediction estimate accurately predictive model perform practice prediction model dataset data training training dataset dataset unknown data data model tested called validation dataset testing set goal cross validation ability predict data flag overfitting selection bias model independent dataset unknown dataset instance real cross validation involves sample data complementary subsets performing analysis subset called training set analysis subset called validation set testing set reduce methods multiple cross validation performed validation combined estimate predictive performance summary cross validation combines measures fitness prediction accurate estimate model prediction performance purpose cross validation suppose model unknown parameters data set model fit training data set fitting process model parameters model fit training data independent sample validation data population training data model fit validation data training data size difference size training data set parameters model cross validation estimate size linear regression real response values dimensional vector components vector denoted ip squares fit function form data fit squared error estimated parameter values training set model correctly assumptions expected training set         times expected validation set expected distribution training sets fit model compute training set assessment model fit independent data set estimate called sample estimate fit cross validation estimate sample estimate linear regression compute factor       training validation assumption model specification valid cross validation checking model validation set cross validation context linear regression select cost function regression procedures logistic regression simple compute expected sample fit cross validation applicable predict performance model data numerical computation theoretical analysis common types cross validation types cross validation distinguished cross validation cross validation cross validation methods cross validation methods learn divide original sample training validation set leave cross validation leave cross validation involves observations validation set remaining observations training set repeated cut original sample validation set observations training set cross validation requires training model times observations original sample coefficient computationally 100 30 30 percent 100 suggested cross validation leave cross validation leave cross validation   process cross validation computes left sample computes samples cross validation requires computation time cross validation passes passes require computation time approaches cross validation pseudo code algorithm input output steps define cross validation cross validation cross validation methods compute splitting original sample methods leave cross validation cross validation cross validation original sample randomly equal sized single validation data testing model remaining training data cross validation process repeated times validation data produce single estimation advantage method repeated random sampling observations training validation observation validation cross validation commonly remains parameter setting     cross validation cross validation randomly dataset sets sets equal size implemented data array splitting train training     observations cross validation leave cross validation cross validation selected response equal binary classification roughly types class labels method method randomly assign data sets called training set set size sets arbitrary typically set training set train build model evaluate performance typical cross validation multiple runs model testing contrast method isolation involves single multiple runs achieve highly indicator predictive accuracy tend multiple iterations specific role played predictor variables values regression coefficients tend method simplest cross validation sources classify type simple validation simple form cross validation repeated random sampling validation method monte carlo cross validation randomly splits dataset training validation data split model fit training data predictive accuracy validation data splits advantage method cross validation proportion training validation split dependent iterations disadvantage method observations selected validation selected validation subsets overlap method monte carlo variation meaning vary analysis repeated random splits random splits approaches infinity result repeated random sampling validation leave cross validation variant approach random samples generated response dependent variable regression equal training testing sets responses representation response values data measures fit goal cross validation estimate expected level fit model data set independent data train model estimate quantitative measure fit data model binary classification validation set predicted correctly incorrectly situation error rate fit measures positive predictive predicted continuously distributed squared error root squared error absolute deviation errors statistical properties suppose choose measure fit cross validation produce estimate expected fit model independent data set drawn population training data imagine sampling multiple independent training sets distribution values vary statistical properties result variation cross validation reason training set cross validation actual data set training set size observed situations bias estimated fit direction fit practice bias rarely concern variance reason statistical procedures compared based cross validation note procedure estimated performance procedures progress constructing confidence cross validation estimates considered difficult computational issues forms cross validation straightforward implement implementation prediction method studied prediction method black box – access implementation prediction method expensive train cross validation slow training carried repeatedly squares kernel regression cross validation pre computing values repeatedly training fast updating rules preserve total validation set training procedure bias result extreme cross validation occurs linear regression cross validation closed form expression prediction error sum squares press limitations cross validation yields meaningful validation set training set drawn population human controlled applications predictive modeling structure studied time stationary introduce systematic differences training validation sets model predicting stock values trained data period treat subsequent period draw population suppose model developed predict individual risk disease model trained data study involving specific population people applied population cross validation training set greatly actual predictive performance applications models incorrectly vary function arbitrary choices occurs external samples reason model critical predictor included predictor evidence cross validation predictive external form experimental validation sampling control human bias predictive external defined study 30 000 models sampling incorporates cross validation sense predictions tested independent training validation samples models developed independent samples models developed training validation samples frequently predictive poor external predictive traditional cross validation reason success sampling built control human model building addition predictions vary lead poor external effects cross validation cross validation time series models data cross validation time series models approach performance single summary approach bootstrap accept interval time series return summary stationary bootstrap interval applications cross validation compare predictive modeling procedures suppose optical character recognition support vector machines nearest neighbors predict true character image handwritten character cross validation compare methods terms respective characters simply compared methods based sample error rates method perform flexible overfitting compared method cross validation variable selection suppose expression levels 20 predict cancer patient respond drug practical goal determine subset 20 features produce predictive model modeling procedures compare feature subsets sample error rates performance occur 20 features cross validation model fit include subset features development medical statistics analysis forms basis validation statistical analysis summary estimates conventional sense analysis estimate prediction error analysis  
417031	computer	david marr 19 january – 17 november 1980 british marr integrated artificial intelligence models visual processing influential computational neuroscience led discipline born school college cambridge october 1963 awarded awarded 1966 mathematics phd 1972 brain theory visual processing submitted 1969 model function based data book subsequently massachusetts institute technology faculty department 1977 subsequently professor 1980 marr proposed understanding brain requires understanding solutions avoid theoretical focus understanding specific marr cambridge massachusetts age 35 collected book vision computational investigation human representation processing visual finished 1979 summer published 1982 death issued 2010 mit press book key role rapid growth computational neuroscience field boston university department biomedical engineering academic awards prizes named marr prize awards vision david marr medal awarded applied vision association cognitive science society awards marr prize student paper annual conference theories marr vision topic published papers computational theories 1969 1970 1971 papers ideas continue influence modern theoretical thinking theory motivated unique features vast cells receiving inputs cells cortex receive tens thousands inputs parallel input single fiber extremely strong marr proposed cells encode combinations inputs carry teaching signal cell targets modify strength connections parallel ideas accepted form essential elements modern theories theory motivated david types feature primary visual cortex marr proposed observation cells flexible learn statistical structure input patterns sensitive combinations frequently repeated theory marr called motivated discovery william produced memories events left memories events occurred earlier marr called theory simple memory basic idea rapidly form memory simple type connections neurons marr paper paper report term type marr marr paper preliminary report discovery details marr theory errors understanding basic concept temporary memory remains modern theories paper marr follow paper relations paper appeared levels analysis marr treated vision processing idea understand processing systems distinct complementary levels analysis idea cognitive science marr level hypothesis vision 1982 company adds level computational level learning stages vision marr vision dimensional visual array retina dimensional description output stages vision include stereopsis optic flow motion parallax represents reality construct viewer centered dimensional view environment called drawing technique data visualization referred generic term drawing modern designers  
421044	computer	ipx spx stands packet exchange packet exchange ipx spx networking protocols networks novell netware operating systems protocol layers ipx spx derived xerox network systems protocols ipx network layer protocol layer osi model spx transport layer protocol layer osi model spx layer ipx layer connection oriented services nodes network spx applications ipx spx provide connection services tcp ip ipx protocol similarities ip spx similarities tcp ipx spx designed local networks efficient protocol purpose typically spx performance tcp lan windows spx simple tcp ip standard protocol superior performance wide networks internet tcp ip exclusively tcp ip protocol designed purpose mind protocols association netware required netware communication netware exclusively netware networks netware communication requires implementation ipx spx tcp ip transport implementations novell responsible ipx popular networking protocol network operating software market novell netware late 1980s mid 1990s dos novell original netware client written dos initial versions required hard linked protocol stack separate executable created network network card configuration network executable loaded boot time remain memory implementations allowed network stack loaded dynamically pre existing modules greatly simplified maintenance client workstations network ipx spx standard dos era multi user network games games extended tunneling programs allowed played internet lan ipx windows ipx spx 1990s support protocols windows networking stack starting windows windows nt named implementation inclusion layer netware connectivity reality protocols supported native transport windows netware connectivity required additional installation client basic netware client windows 95 automatically installed initially supported netware mode windows including windows server 2003 included supported windows vista windows networking transport novell 32 bit windows client software alternative developed novell versions permit ipx spx implementation potential novell supplied native netware client os structure client dos novell published ipx client classic mac os called mac netware client games iii play implementations written unix linux novell vendors novell supported ipx spx client netware servers applications support ipx spx transport provide ability share files printers netware network additional software package enterprise server linux support ipx spx linux kernel source freebsd operating includes ipx spx stack support netware file client netware server providing functionality dropped support version compile ipx legacy ipx usage rise internet tcp ip novell initial attempt support tcp ip client protocol called netware ip simply ipx ip packets allowing netware clients servers communicate pure tcp ip networks complex implementation loss performance overhead netware ip mechanism route ipx tcp ip routers wan links netware introduced native support tcp ip preferred configuration successor netware enterprise server netware legacy support ipx spx linux supports tcp ip novell support server isa server ipx spx protocol communicate machine client software access internet tcp ip installed locally client software native tcp ip stack support local applications browsers ipx spx addition legacy ipx measure security ipx protocol internal network natural barrier ipx remains vpn connections security policies communication lan devices printers network attached storage tcp ip  
432225	computer	embedded operating source real time operating intended embedded systems applications process multiple threads designed precise application requirements time performance hardware implemented compatibility layers application programming interfaces posix design designed devices memory sizes range tens applications real time requirements runs wide variety hardware platforms including arm hitachi ia 32 motorola 68000 mips powerpc sparc distribution includes source application hardware abstraction layer provide bootstrap firmware embedded systems history initially developed 1997 solutions bought red 2002 red development staff project staff continued formed companies providing services software january 2004 request developers red agreed transfer software foundation october 2005 process finally completed 2008 versions real time operating commercial fork created incorporates proprietary software components claimed stable tested supported version additional features released software pi day 2017 announced ported raspberry pi models embedded trade fair germany releases commercial follow freebsd tcp ip network stack included 2001 systems numerous security stability freebsd release freebsd origin official monitor freebsd security stability updates rely minimal bug reports users package age  
434274	computer	mit science artificial intelligence laboratory institute massachusetts institute technology formed 2003 merger laboratory science artificial intelligence laboratory center largest campus laboratory measured scope membership activities activities organized semi autonomous headed scientists divided addition hosts wide consortium history computing mit differential electronic boolean algebra radiation laboratory post war project laboratory electronics laboratory 1950s mit field artificial intelligence late 1950s project mac july 1963 project mac project mathematics computation multiple access machine aided launched grant defense advanced projects agency darpa project mac original director robert mit laboratory electronics decided mac project laboratory reasons internal mit – mac called laboratory difficult mit staff program manager responsible darpa grant mit director project mac project mac famous operating systems artificial intelligence theory computation included project berkeley stanford artificial intelligence laboratory university california sciences institute including minsky director john inventor lisp community programmers incorporated newly formed project mac vision mechanical motion manipulation language view intelligent machines 1960s 1970s shared initially pdp pdp built time sharing operating called project mac community included minsky community programmers john creation utility computational power reliable electric utility brought time sharing compatible time sharing mit computation center darpa funding purchase ibm focuses project mac development successor multics availability developed industry consortium including electric bell laboratories 1966 scientific american featured project mac september issue devoted science published book form time 100 terminals campus private 30 users time project students classes terminals simultaneously solving simulations multi terminal communications tests multi access computing software developed lab late 1960s minsky artificial intelligence space unable project director university space allocation minsky project mac single entity additional space split form laboratory entitled office space result mit lab formed 1970 minsky colleagues left project mac laboratory remaining form laboratory science programmers richard write lab time researchers lab formed laboratory science continued operating systems programming languages distributed systems theory computation abelson remain neutral – referred project mac 30 lab led lisp machines attempted companies 1980s lisp machines divided lab programmers incident inspired richard gnu project lab   basis software movement – experience life mit lab – human knowledge human knowledge project mac july 2003 merged lab form mit science artificial intelligence laboratory merger created largest laboratory mit campus regarded elements project mac activities word power variety programs bridge global digital divide aim implement term solutions increase availability educational technology resources domestic international communities projects mit training install boston massachusetts native american american middle east project served communities technology education mit factory providing computers served families families accessing technology classes trains families technology notable researchers notable project mac industry  
435356	computer	corpus linguistics collocation sequence terms occur expected chance collocation type collocation michael expression strong meaning roughly equivalent powerful expression considered english speakers conversely expression technology powerful preferred strong confused meaning derived convention stand collocation popular composition ability english effectively involves feature language collocation collocation behaviour language speech writing main types phrase collocation extraction computational technique document corpus computational linguistics elements data mining expanded definition partly fixed expressions established repeated context dependent terms crystal middle management nuclear family surgery examples pairs syntactic relation lexical relation defined relation knowledge language correct sentence stand preferences collocation language teaching mobile version collocation dictionary published google play corpus key word context identify surrounding idea processing involves parameters measure association occurrence purely chance random nature language association scores simply rank commonly measures association include mutual scores log likelihood select single definition collocation involves occurrence statistical view collocation recurrent appearance node construction collocation correlation lexical pattern relation base partners iii expression view collocation conventional unit expression form contrast usual collocation studies traditionally speaking collocation explained terms dictionaries report english collocation key producing natural language learning foreign language 1940s recurrent word combinations standard feature dictionaries dictionaries word phrase attention paid collocation trend supported century availability corpora intelligent corpus software provide systematic account collocation dictionaries tools dictionaries english dictionary dictionary contemporary english included boxes panels lists frequent specialized dictionaries devoted describing frequent language include spanish 2004 french robert 2007 english dictionary selected 1997 dictionary 2010 collocation student determine occurrence collocation corpus probability occurrence corpus size probability occurrence corpus score calculated sample occurrence 11 occurrences 13 probability hypothesis independently 17 sample variance equivalent  
435852	computer	architecture register renaming technique logical registers physical registers logical register set physical registers programmer assembly language refers instance logical register syntaxhighlight syntaxhighlight processor specific physical register fly physical registers names technique eliminate false data dependencies registers successive instructions real data dependencies false data dependencies instruction level parallelism instruction stream exploited complementary techniques superscalar execution performance approach register machine programs composed instructions operate values instructions values distinguish typical instruction result instruction names storage locations compact instruction encoding processor instruction sets set special locations referred special names registers x86 instruction set architecture registers x86 64 16 32 ia 64 128 processors names locations correspond elements register file instructions amounts time processor execute hundreds instructions single load main memory progress shorter instructions executed load outstanding instructions original program execution performance cpus achieve speed gains piece code running cpu syntaxhighlight lang syntaxhighlight instructions final lines independent instructions processor syntaxhighlight preceding syntaxhighlight syntaxhighlight write wrong eliminated changing names registers syntaxhighlight lang syntaxhighlight instruction executed parallel program faster false data dependency performance cpus implement renaming hardware achieve additional parallelism targets data flow detection compilers detect independent instruction sequences choose registers code generation data hazards instruction references location operand reading input writing output executing instructions original program lead kinds data hazards write reads completed copies location maintained reads program write reads follow write false dependency broken additional opportunities execution created reads discarded essential concept register renaming read written renamed purpose floating registers discussed flag status registers individual status bits commonly renamed memory locations renamed commonly extent register renaming processor store buffer form memory renaming programs registers register renaming instruction sets ia 64 registers reason limitations approach code size increases program code larger instruction cache misses processor stalls waiting instructions architectural physical registers machine language programs reads writes limited set registers instruction set architecture isa instance alpha isa specifies 32 integer registers 64 bits wide 32 floating registers 64 bits wide architectural registers programs written processors running alpha instruction set operations reading writing 64 registers programmer program contents 64 registers status registers determine progress machine processor implements isa alpha 80 integer 72 floating physical registers alpha chip 80 physically separate locations store integer operations 72 locations store floating describes register renaming distinguished circuit holds data ready execution unit renaming schemes machine converts architectural registers instruction stream tags architectural registers bits tags bit file read port input instruction renamed cycle write port output instruction renamed cycle size register file grows square ports file physically power tag indexed register file style register file data values register tag machine 80 physical registers bit tags 48 tag values unused style instruction issued execution unit tags source registers physical register file values tags read execution unit reservation station style associative register files inputs execution unit operand instruction issue queue register files style instruction issued execution unit register file entries issue queue entry read execution unit data data rob rob entries registers physical register file book keeping design rob rob entries data separate data values rob copied rob temporal locality rob entries instructions close von neumann instruction sequence write close time perform write combining rob entries ports separate rob difference associative logic designed complex associative logic rob proposal tag indexed register file renaming style mips alpha amd renaming stage architectural register read write looked indexed file file returns tag ready bit tag ready instruction write executed read operands tag takes architectural register instruction register write tag tag mapping written file future instructions reading architectural register refer tag tag marked instruction executed previous physical register allocated architectural register saved instruction buffer holds instructions program decode stages instructions issue instructions executed tags broadcast issue match tags tags ready source operands match operand ready file matches tags mark physical registers ready operands instruction issue queue ready instruction ready issue issue pick ready instructions send functional units cycle ready instructions stay issue removal instructions issue power consuming issued instructions read tag indexed physical register file broadcast operands execute execution written tag indexed physical register file broadcast network preceding functional unit previous tag written architectural register queue newly decoded instruction exception branch file valid instruction combination previous tags pre queue mechanism required recover instruction branch handled branch reaches branch latency reservation stations style integer amd designs renaming stage architectural register reads looked indexed future file file future file read register outstanding instruction write ready instruction issue queue values read future file written entries reservation stations register writes instruction ready tag written file tag allocated instruction tag tag indexed scheme issue wait ready operands matching tag tag indexed scheme matching tags broadcast written issue queue entry reservation station issued instructions read arguments reservation station broadcast operands execute mentioned earlier reservation station register files entries execution written buffer reservation stations issue queue entry matching tag future file instruction target architectural register register marked ready copies buffer architectural register file architectural register file recover exceptions branch exceptions branch recognized architectural file copied future file registers marked ready file reconstruct future file instruction intermediate decode recovery branch comparison schemes schemes instructions inserted issue removed slots unused entries require sort variable priority encoding multiple instructions simultaneously ready holes simpler priority encoding require simple circuitry advance instructions queue reservation stations latency execute stage register values finding physical register latency component branch latency reservation stations latency instruction issue execution local register file central file tag indexed scheme tag generation exception processing simpler reservation station scheme discussed physical register files reservation stations unused entries parallel issue queue serve register files larger power complicated simpler register files tag indexed scheme entry reservation station written result bus reservation station machine issue queue entries functional unit typically times networks equivalent tag indexed machine result forwarding power tag indexed design reservation station scheme future file reservation station buffer architectural file result stored tag indexed scheme physical register file functional units broadcast storage locations reach larger locations machine tag indexed scheme function power time machines equipped accurate branch prediction schemes execute major concern reservation stations history ibm 360 model machine supported execution instructions algorithm register renaming microprocessor register renaming execution 1990 original design issue variable priority encoding instruction queue issued instruction decode stopped completely lack registers instruction issued design starting partially variable priority encoder machines separate renaming rob storage functions matter earliest combined scheduling renaming storage structure modern machines renaming ram indexing map table logical register future files data storage structure earlier machines content addressable memory register table essentially logical register combination versions register story microarchitecture eliminated microarchitecture microarchitecture intel implement execution register renaming microarchitecture pentium pro pentium pentium iii pentium core core microprocessors released october 1995 x86 processor register renaming execution x86 processors amd released 1996 featured register renaming execution risc operations native x86 instructions  
439697	computer	optical mark recognition called optical mark reading omr process capturing human marked data document forms tests read multiple choice paper form lines omr background traditional omr devices dedicated scanner device beam light form paper positions detect marked reflect light paper omr devices forms paper measure light passes paper mark paper reduce light passing paper contrast dedicated omr device desktop omr software user create forms word processor print laser printer omr software common desktop image scanner document process forms filled omr distinguished optical character recognition ocr complicated pattern recognition engine required marks constructed chance reading marks correctly require image contrast easily shape field omr ocr recognition bar code product applications optical mark recognition europe bubble optical answer multiple choice question students mark answers personal circles marked pre printed sheet sheet automatically scanning machine united european countries horizontal vertical commonly type omr form application united kingdom national form marks technology advantage easier mark easier bubble marks legacy technology omr machines mark required reliability countries special optical answer sheet students mark answers circles marked pre printed sheet sheet automatically scanning machine omr applications involve people specialized forms forms optimized scanning registration printing design ambiguity reduced minimum extremely error rate cost ease omr popular method omr marks items physical mail equipment marks mail document consist sequence black equipment scans determine mail inserted omr software omr software software application omr desktop image scanner process tests paper forms printed laser printer omr software capture data omr data capturing scanning devices focus factors paper dimensions omr sheet designing pattern commercial omr omr software packages images common image scanners office omr originally named products office omr released 1991 omr software originated optical mark recognition systems dedicated scanners special pre printed forms drop colors registration marks forms typically cost 19 contrast omr software users design mark sense forms word processor built form editor print locally printer save thousands forms identifying optical marks form processing forms offered forms processing batch transaction capture companies late 1980s based image pixel count minimum maximum pixel counts eliminate marks dirty converted black white image mark method user mind products started grayscale identify intent scanners grayscale omr software adding omr marks mail documents scanned equipment omr software mail developer limited software user select omr sequence apply omr marks mail documents prior printing commercial omr software products source omr software omr software products developed distributed source licenses history optical mark recognition omr scanning paper detect presence absence mark position optical mark recognition evolved technologies century 20th century patents machines aid blind omr input device data entry forms omr paper tape cards actual holes medium filled circles medium paper tape input device cards created input devices computers cards greatly 1970s introduction personal computers modern omr presence filled bubble recognized recognition optical scanner mark sense scanner ibm machine read marks sensing electrical lead pairs wire scanned richard ibm optical mark sense systems documented patents 150 256 filed granted 1939 filed granted successful optical mark sense scanner developed documented patent filed 1955 granted 1962 developed numerous standardized educational tests machine standard ibm rights patents held measurement center 1968 university sold operation westinghouse corporation period ibm developed successful optical mark sense machine documented patent filed 1957 granted 1960 ibm ibm optical mark reader 1962 variety machines allowed ibm wide variety applications developed mark sense machines optical technology applications included variety management forms dimensions standard card players educational testing arena focused selling scanning services corporation founded 1972 model inexpensive scanners schools selling forms result people mark sense forms forms operates subsidiary worldwide testing assessment systems services data collection analysis services educational institutions businesses government 1983 westinghouse learning corporation acquired national systems 2000 acquired education omr technology formed core data management february 2008 worldwide purchased data management brand omr situations mentioned omr systems transition cards bar codes purpose omr extensively testing usage omr limited schools data collection agencies businesses health care agencies omr data input processes reduce input error omr ocr technologies provide data collection paper forms omr omr discrete read head scanner imaging scanner applications applications omr examples field types omr fields provide format fields include capabilities requirements omr systems require special paper special ink special input reader 1998 types questions form input progress omr users create print forms scanner document read user questions format easily input data omr systems approach percent accuracy average recognize marks users squares circles mark zone software set recognize filled check marks omr personal printers market print photos user size paper selection sheet printed sheet filled individual sheet scanner scanned printer print photos marks disadvantages disadvantages limitations omr user amounts omr data collection possibility missing data scanning process incorrectly lead scanned wrong providing data data result widespread adoption ease omr standardized consist multiple choice questions changing nature tested  
452582	computer	arimaa player strategy board game designed standard chess set difficult computers easy learn play humans 2004 arimaa community held annual championship humans championship computers arimaa challenge human 2015 challenge sharp david players computers game humans prize awarded published paper describing algorithm journal issue 38 dedicated topic algorithm combined traditional changing heuristic functions manually written human expert games arimaa invented 2003 american engineer trained artificial intelligence inspired hands chess deep blue design game played standard chess set difficult computers play rules simple understand arimaa initial arimaa awards including games magazine 2011 abstract strategy game creative child magazine 2010 strategy game 2010 parents choice approved award subject papers rules arimaa played board squares kinds pieces ranging rabbit stronger pieces push pieces stronger pieces pieces pieces captured square adjacent pieces players gold silver control pieces represented king plays chess set objective main object game rabbit color rank opponent goal gold moving gold rabbit rank silver moving silver rabbit rank difficult rabbit goal board pieces intermediate objective capture pieces squares game capturing opponent opponent legal moves compared goal uncommon setup game board gold gold pieces configuration silver silver pieces configuration diagram initial movement pieces board players alternate starting gold consists steps step piece square space left step steps single piece distributed pieces change position step step piece effectively passing create position player created rule super rule game loops contrast chess loops considered passing arimaa game diagram game initial position helps illustrate remaining rules movement player consecutive steps piece stronger friendly piece adjacent directions player dog rabbit cat dog stronger piece push adjacent piece stronger piece steps square square piece silver step gold piece moved adjacent square square stronger piece gold push silver rabbit note rabbit squares friendly pieces piece push simultaneously gold simultaneously push silver rabbit silver rabbit stronger piece adjacent direction stronger piece adjacent friendly piece pieces moved owner opponent piece piece silver rabbit adjacent silver piece gold rabbit gold cat equal strength stronger capturing piece square captured removed game friendly piece adjacent silver capture gold piece square captured adjacent friendly pieces silver rabbit silver silver rabbit captured note piece step square captured step completed piece captured step silver step silver rabbit support pieces step silver gold rabbit strategy play arimaa champion written book titled arimaa introduction arimaa strategies time arimaa champion wrote arimaa strategies started playing arimaa improve game annual championship 2004 arimaa community held championship tournament tournament played internet current champion united america champion title championship 2004 2015 arimaa community held championship tournament tournament played internet current champion bot sharp developed david usa champion title arimaa challenge arimaa challenge prize 000 annually program win human arimaa challenge conditions prize program standard hardware arimaa challenge held times starting 2004 match changed format require software win games players reduce pressure individual called arimaa challenge build prize fund challenge cycles david programmer arimaa championship play prize money program 2009 program programs humanity margin computers appeared 2004 2008 human players improved 2009 arimaa challenge competitive bot win games challenge match 2010 bot championship challenge match bot win games single human bot win games 2011 games received material 2012 program player games ranked human 2013 humans including win 31 winning games 2014 win games matches 2015 sharp substantial playing strength games previous sharp 2015 including 13 sharp dominated pre challenge human winning 27 29 games challenge sharp mini matches winning games winning arimaa challenge patent trademark stated released license called arimaa public license declared intent arimaa public domain game commercial usage items covered license patent trademark  
454305	computer	mhi products include aerospace components air aircraft automotive components trucks equipment machine tools power generation equipment printing machines space launch vehicles defense activities largest defense measured 2011 defense revenues largest based japan november 28 2018 company south korea court pay forced labor company japanese korea history request dutch engineers modern western style dutch renamed construction completed control government japan completed founder mitsubishi japanese government renamed machinery entered business scale purchased mitsubishi heavy industries machinery started company main business ship ship renamed mitsubishi mitsubishi additional completed mitsubishi heavy industries machinery established produced industrial machinery company renamed mitsubishi engineering company renamed mitsubishi heavy industries largest private firm japan active manufacture heavy machinery cars mitsubishi heavy industries merged company mitsubishi heavily involved contracts japanese navy largest completed mitsubishi established merged mitsubishi heavy industries constructed aircraft carrier 19 25 japan war mitsubishi divided companies mitsubishi west japan heavy industries renamed mitsubishi engineering 1952 mitsubishi central japan heavy industries 1964 independent companies break merged company mitsubishi heavy industries renamed engine renamed mitsubishi heavy industries machinery 1970 mhi automobile department independent company mitsubishi motors 1974 tokyo headquarters targeted people mhi participated emergency mitsubishi motors january 2005 partnership mitsubishi corporation mitsubishi tokyo financial mhi acquired mitsubishi motors stock increasing ownership stake 15 percent october 2009 mhi announced 100 regional united based mhi entered hitachi august 2011 potential merger companies largest merger japanese companies history subsequently november 2012 mitsubishi heavy industries hitachi agreed merge thermal power generation businesses joint venture owned 65 mitsubishi heavy industries 35 hitachi joint venture operations february 2014 june 2014 mitsubishi heavy industries announced joint energy transportation businesses aircraft engines electric criticized french government sources operations national moment french level stands operations aerospace mhi aerospace facilities ontario canada 1950s company enter aerospace industry major japanese companies involved design production 11 japanese enter production war 1956 started design mitsubishi company aircraft design defense sector mhi produced jet japan air defense force anti japan defense force engines produced north american 86 manufactured mitsubishi aircraft 1981 produced 200 70 family mitsubishi 60 1989 license production company plays role japanese defense program space systems sector mhi producer launch vehicles japan main launch services launch vehicles company involved international space station program april 2008 mhi established mitsubishi aircraft corporation subsidiary develop produce mitsubishi regional jet 70 90 passenger regional mhi majority company toyota motor corporation december 12 2012 mitsubishi heavy industries bought business owned united technologies civil aircraft sector mhi manufactures major components including panels material boxes june 2014 company joined major japanese companies agreement build aircraft defense 2010 mhi production type advanced main cost 11 unit replace type 90 energy nuclear business mhi operates facilities cities operates nuclear fuel manufacturing plant processes metric mhi developed mitsubishi design mhi signed understanding joint venture design mhi selected core company develop generation fast japanese government announcement mhi established company mitsubishi systems development technology starting corporate venture generation technology mhi developing 15 nuclear power plant partnership nuclear project mhi attempted acquire energy business 2014 develop service network asia mhi remains oil gas sectors 2015 financial difficulties mhi announced 2015 proposal ownership stake core historical founding activity mitsubishi heavy industries formally started mitsubishi acquired machinery company founded subsequently mitsubishi major japanese companies building commercial military including class japanese navy war mhi facilities japan primary division mhi produces specialized commercial including carriers passenger december 2017 mitsubishi heavy industries mhi announced launch owned companies january 2018 conjunction business subsidiary mitsubishi created construction require intensive advanced technologies based separately mitsubishi heavy industries structure manufacture structures wind power mhi installed worldwide december 2009 company developing wind power tests planned 2013 europe september 27 2013 mhi wind systems announced joint venture develop wind energy based products mhi products include korean november 28 2018 mitsubishi heavy industries south korea court pay 000 000 forced labor company japanese korea family forced mitsubishi heavy industries 2008 awarded filed japan court japan 2008  
470752	computer	statistics em algorithm iterative method maximum likelihood maximum map estimates parameters statistical models model depends latent variables em iteration performing expectation step creates function expectation log likelihood evaluated current estimate parameters maximization step computes parameters maximizing expected log likelihood step parameter estimates determine distribution latent variables step history em algorithm explained classic 1977 paper donald method proposed times special earlier authors earliest gene method frequencies smith detailed treatment em method exponential families published thesis papers collaboration martin martin paper 1977 generalized method convergence analysis wider class earlier innovative paper journal royal statistical society received discussion royal statistical society meeting calling paper paper established em method tool statistical analysis convergence analysis algorithm correct convergence analysis published 1983 proof established em method convergence exponential family claimed introduction em algorithm local maximum likelihood parameters statistical model equations solved typically models involve latent variables addition unknown parameters data observations missing values exist data model formulated simply assuming existence data mixture model simply assuming observed data data latent variable mixture component data finding maximum likelihood solution typically requires derivatives likelihood function respect unknown values parameters latent variables simultaneously solving equations statistical models latent variables impossible result typically set equations solution parameters requires values latent variables vice versa set equations produces equation em algorithm observation solve sets equations simply pick arbitrary values sets estimate set values estimate set values converge fixed obvious proven context derivative likelihood close maximum multiple occur guarantee global maximum solutions em mixture model involves setting components variance parameter component equal data description statistical model generates set observed data set latent data missing values vector unknown parameters likelihood function maximum likelihood estimate unknown parameters determined maximizing likelihood observed sequence events values grows exponentially sequence exact calculation sum extremely difficult em algorithm seeks likelihood applying steps typical models em applied latent variable membership set apply em models parameters latent variables maximizing log likelihood values simply algorithm algorithm hidden markov models conversely latent variables estimate parameters easily typically simply observed data latent variable values function values suggests iterative algorithm unknown algorithm approaches local minimum cost function properties speaking expectation step bit calculated step fixed data dependent parameters function parameters determined step em algorithm em iteration increase observed data likelihood function guarantee exists sequence maximum likelihood distributions em algorithm converge local maximum observed data likelihood function depending starting values variety heuristic approaches exist local maximum random hill starting random initial estimates θ applying simulated methods em likelihood exponential family step sum sufficient statistics step involves maximizing linear function closed form expression updates step published martin martin em method modified compute maximum map estimates bayesian inference original paper methods exist maximum likelihood estimates gradient descent gradient variants algorithm em methods typically require evaluation derivatives likelihood function proof expectation maximization improve improving 31 improvements improvements probability 33 expectation values unknown data current parameter estimate 36 37 integrating left hand expectation constant 40 defined sum replacing equation holds including 42 equation previous equation 45 choosing improve 49 31 decrease 51 likelihood data decreasing maximization maximization procedure em algorithm viewed maximization steps coordinate function arbitrary probability distribution data entropy distribution function written 54 conditional distribution data observed data 55 56 steps em algorithm viewed applications em frequently data clustering machine learning vision natural language processing prominent instances algorithm algorithm hidden markov models algorithm unsupervised probabilistic context grammars em frequently parameter estimation mixed models notably quantitative em item parameters latent abilities item response theory models ability deal missing data variables em tool price manage risk em algorithm faster variant subset expectation maximization medical image reconstruction tomography single computed tomography faster variants em structural engineering structural identification expectation maximization algorithm output method identifying natural properties structural sensor data operational analysis filtering smoothing em algorithms filter typically estimation minimum variance employed batch estimation minimum variance solutions require estimates space model parameters em algorithms solving joint parameter estimation filtering smoothing em algorithms step procedure suppose filter minimum variance operates measurements single input single output additive white noise updated measurement noise variance estimate maximum likelihood 64 scalar output estimates calculated filter scalar measurements 65 update applied updating measurement noise intensity auto process updated process noise variance estimate calculated 64 68 scalar estimates calculated filter updated model coefficient estimate convergence parameter estimates studied variants methods proposed accelerate slow convergence em algorithm gradient modified newton methods em constrained estimation methods parameter expanded expectation maximization em algorithm speed covariance adjustment correct analysis step extra captured complete data expectation conditional maximization replaces step sequence conditional maximization steps parameter θ individually parameters remaining fixed extended expectation conditional maximization algorithm idea extended generalized expectation maximization algorithm sought increase objective function step step maximization maximization procedure developed distributed environment promising em algorithm minimize maximize depending context algorithm machinery developed em algorithm function em algorithm based log likelihood regarded log em algorithm log likelihood generalized log likelihood ratio log likelihood ratio observed data expressed function log likelihood ratio function generalized step maximization generalized step pair called em log em algorithm em algorithm exact generalization log em algorithm computation gradient matrix em faster convergence log em algorithm choosing em algorithm leads faster version hidden markov model estimation algorithm hmm relation bayes methods em partially bayesian maximum likelihood method final result probability distribution latent variables bayesian style estimate θ maximum likelihood estimate posterior mode bayesian version probability distribution θ latent variables bayesian approach inference simply treat θ latent variable paradigm distinction steps approximation bayes solving latent variable including θ optimize time steps iteration latent variables graphical models easy variable depends markov local message passing efficient inference geometric interpretation geometry step step interpreted projections dual connections called connection connection understood terms examples gaussian mixture 70 sample independent observations mixture normal distributions dimension 72 latent variables determine component observation aim estimate unknown parameters representing data likelihood function complete data likelihood function indicator function probability density function normal indicator equal indicator equal sum reduces term step current estimate parameters θ conditional distribution determined bayes theorem proportional height normal density weighted called membership probabilities considered output step function step corresponds setting function expectation sum respect probability density function training set step step 90 computed equation step conditional expectation calculated step separate linear terms independently step θ θ form determining maximizing values θ straightforward independently separate linear terms constraint form distribution estimates form weighted normal distribution iterative process 98 99 threshold generalization algorithm generalized normal distributions regression em algorithm implemented underlying linear regression model exists variation values observed versions represented model special model include observations normal distribution alternatives em typically local global bound convergence rate poor dimensions exponential local exists alternative methods guaranteed learning dimensional setting alternatives em exist guarantees consistency termed moment based approaches called spectral techniques moment based approaches learning parameters probabilistic model increasing guarantees global convergence conditions em issue local algorithms guarantees learning derived models mixture models spectral methods local occur true parameters consistently estimated conditions  
478091	computer	von neumann von neumann model princeton architecture based description mathematician john von neumann draft report document describes design architecture electronic digital components word evolved stored program instruction fetch data operation occur time share common bus referred von neumann bottleneck limits performance design von neumann architecture machine simpler harvard architecture stored program dedicated set address data buses reading writing memory set address data buses fetch instructions stored program digital program instructions data read write random access memory ram stored program computers advancement program controlled computers 1940s programmed setting switches patch cables route data control signals functional units vast majority modern computers memory data program instructions von neumann harvard distinction applies cache architecture main memory split cache architecture history earliest computing machines fixed programs simple computers design simplicity training purposes desk calculator principle fixed program basic mathematics word processor games changing program fixed program machine requires machine earliest computers programmed designed task process started paper notes detailed engineering designs process physically machine weeks set program proposal stored program changed stored program includes design instruction set store memory set instructions program details computation stored program design modifying code motivation facility program modify address portion instructions operators manually designs registers indirect addressing usual features machine architecture frequently data instruction stream addressing modifying code favor hard understand modern processor pipelining caching schemes capabilities scale ability treat instructions data compilers automated programming tools programs write programs sophisticated computing von neumann architecture machines level languages lisp von neumann architecture providing abstract machine independent manipulate executable code runtime runtime time compilation languages hosted java virtual machine languages embedded browsers scale operations pixel vertex accelerated purpose processors time compilation techniques modifying code remained popular development stored program concept mathematician alan turing mathematical logic max university cambridge wrote paper 1936 entitled application published proceedings london mathematical society machine called universal computing machine universal turing machine machine infinite store memory terminology contained instructions data john von neumann turing visiting professor cambridge turing phd institute advanced study princeton jersey 1936 – turing paper 1936 time 1936 patent applications machine instructions stored storage data independently john developing moore school electrical engineering university pennsylvania wrote stored program concept december von neumann involved project los national laboratory required huge amounts calculation project summer joined ongoing design stored program wrote description titled draft report based von neumann paper read von neumann colleagues america europe influenced designs jack considers historically refer electronic stored program digital computers von neumann machines los von neumann regard turing ideas time draft report turing producing report entitled proposed electronic calculator engineering programming idea machine called automatic computing engine executive committee british national physical laboratory february 19 turing experience park proposed feasible surrounding subsequently maintained decades successful implementations design produced von neumann turing papers stored program computers von neumann earlier paper achieved architecture von neumann architecture 1953 publication faster digital computing machines edited computers america reads machine institute advanced studies professor von neumann moore school engineering built issued workers report logical design digital computers report contained detailed proposal design machine electronic discrete variable automatic machine completed america von neumann report inspired construction electronic delay storage automatic calculator cambridge 1947 von neumann published report design type machine parallel machine time fast capable 20 000 operations outstanding constructing machine development suitable memory accessible contents suggested special vacuum princeton laboratories invented expensive difficult von neumann subsequently decided build machine based memory june 1952 design machine inspired machines built america book read automatic computation national physical modern digital computers developments improvements technique automatic electronic computing demonstrated national physical laboratory designed built team electronics engineers staff laboratory assisted production engineers english electric company limited equipment laboratory pilot model larger installation automatic computing engine 800 extremely rapid calculating machine basic concepts abstract principles computation machine formulated dr turing read london mathematical society 1936 machines delayed war national physical laboratory mathematics division laboratory joined dr turing staff 1947 preliminary planning advanced special mentioned april electronics laboratory charge von neumann architecture computers draft design universities corporations construct computers computers compatible instruction sets stored program computers difficult proper dates running program dates time demonstrated completed dates delivery installation evolution decades 1960s 1970s computers faster led architecture memory mapped input output devices treated memory single bus provide modular cost called architecture subsequent decades simple microcontrollers features model cost size larger computers features performance design limitations von neumann bottleneck shared bus program memory data memory leads von neumann bottleneck limited throughput data transfer rate central processing unit cpu memory compared memory single bus access classes memory time throughput rate cpu limits effective processing speed cpu required perform minimal processing amounts data cpu forced wait data memory cpu speed memory size increased faster throughput bottleneck increases generation cpu von neumann bottleneck john 1977 acm turing award lecture store vast von neumann bottleneck tube bottleneck data traffic intellectual bottleneck tied word time thinking terms larger conceptual units task hand programming basically planning traffic von neumann bottleneck traffic concerns data methods von neumann performance bottleneck improve performance parallel computing uniform memory access approach commonly employed supercomputers intellectual bottleneck criticized changed 1977 proposed solution major influence modern functional programming object oriented programming vast earlier languages fortran internally computers time highly parallel supercomputers 1996 database benchmark study cpu cycles spent waiting memory researchers expect increasing simultaneous instruction streams multithreading single chip multiprocessing bottleneck context multi core processors additional overhead required maintain cache processors threads modifying code von neumann bottleneck program modifications accident design simple stored program designs program damage programs operating leading crash memory protection forms access control protect program modification  
486432	computer	architecture processor register accessible location central processing unit cpu registers consist fast storage registers specific hardware functions read write registers typically addressed mechanisms main memory assigned memory address dec pdp computers load store architecture load data larger memory registers arithmetic operations tested machine instructions data stored main memory instruction subsequent modern processors static dynamic ram main memory accessed cache levels processor registers memory hierarchy provide fastest access data term refers registers encoded instruction defined instruction set modern performance cpus architectural registers improve performance register renaming allowing parallel speculative execution modern x86 design acquired techniques 1995 releases pentium pro amd common property programs locality reference refers accessing values repeatedly holding frequently values registers improve performance fast registers caches meaningful frequently variables registers critical program performance register allocation performed compiler code generation phase manually assembly language programmer register size registers measured bits hold bit register 32 bit register 64 bit register instruction sets registers operate modes breaking storage memory 32 bit bit instance multiple data vector dimensional array data loaded operated time typically implemented adding extra registers map memory processors ability execute single instruction multiple data called vector processors types registers processor kinds registers classified content instructions operate hardware registers occur cpus architectures sparc mips register integer register file pseudo register return read simplify indexing modes alpha floating register file result register files commonly register usable 32 registers 31 fit definition register examples table registers mainstream cpu architectures note x86 compatible processors stack pointer integer register limited instructions operate contents apply architectures listed architectures basic arrangement von neumann architecture proposed american mathematician john von neumann registers gpus cpus register usage registers processor operations performed registers impact efficiency code generated compilers expression tree minimum registers required evaluate expression tree  
486489	computer	die english systems interfaces electronics motor vehicles standards body produced specifications embedded operating communications stack network management protocol automotive embedded systems produced specifications designed provide standard software architecture electronic control units car founded 1993 german automotive company consortium robert gmbh university 1994 french cars manufacturers project called vehicle distributed executive joined consortium official standard standard published consortium founded automobile industry standardized iso documents current standard specifies interfaces multitasking peripheral remains architecture dependent systems expected chips memory protection features implementation configured compile time application tasks configured create time recognizes types tasks threads levels basic tasks enhanced tasks basic tasks block completion enhanced tasks block event objects events tasks basic enhanced interrupt routines static allowed tasks scheduling tasks equal priority priority priority priority specification iso syntax implementation language services application binary interface claims static allowed tasks priority protocol tasks situations requires supports dynamic priority scheduling german version entry os scheduling configured scheduling task priority task scheduling task compile time scheduling mixed mode consortium specifications operating compatible os covers functionality communication module derived specifies standard optional time real time operating systems priority tasks  
500894	computer	asimo advanced step innovative mobility humanoid robot created honda 2000 displayed museum tokyo development honda developing humanoid robots 1980s including prototypes asimo company goal create walking robot model produced honda series experimental humanoid walking robot wireless movements created 1986 1993 honda series robots produced 1993 1997 series led creation asimo development honda fundamental technical center japan 1999 asimo unveiled october 2000 form asimo stands conducted honda ideal height mobility assistant robot height average operating door light switches asimo powered 51 battery operating time hour switching metal 2004 increased time asimo operate asimo dimensional processor created honda consists die processor signal memory controls asimo movement robot controlled pc wireless controller voice commands abilities asimo ability recognize moving objects gestures surrounding environment sounds enables interact humans robot detect movements multiple objects visual captured camera eyes head determine distance direction feature asimo follow person approached robot voice commands human gestures enabling recognize offered person waves respond asimo ability distinguish voices sounds identify asimo respond recognizes sounds object collision robot person spoken sound asimo questions providing answer languages recognize address sensors assist autonomous navigation cameras head visual sensor detect obstacles portion ground sensor laser sensor infrared sensor laser sensor detect ground surface infrared sensor automatic shutter adjustment based brightness detect pairs floor paths planned map pre loaded map detection floor robot precisely identify location continuously adjust position rear sensors sense obstacles sensor located portion ground sensor rear sensor located impact technologies honda asimo led walking assist devices innovations management assist support assist honor asimo november 2010 honda developed application iphone android smartphones called asimo users learn development asimo virtually walking robot steps race sharing times facebook public asimo introduced 2000 robot performed international asimo public appearance 2002 bell trade sessions york stock exchange january 2003 march 2005 robot canada abilities 000 people 2003 2004 asimo north american educational science technology academic institutions north america goal encourage students study science live asimo abilities additionally robot engineering science universities usa asimo technology circuit effort encourage students scientific 2004 asimo carnegie mellon robot hall march 2005 robot red animated film robots june 2005 asimo feature called honda asimo park permanent installation asimo north america closed april 2015 robot united kingdom january 2004 public science museum london asimo continued countries united russia south australia october 2008 asimo charles museum tokyo performed minute step demonstration honda tokyo headquarters 2007 company demonstrated intelligence technologies enabled multiple asimo robots demonstration robot ability identify avoid people asimo recognize battery perform tasks carrying 2008 asimo conducted performance impossible dream bring attention partnership support performing arts 49 asimo natural materials led honda operation usa robot appearance italy science january 2010 honda debuted living robots documentary film park city film focuses experience human interaction robots asimo asimo attended september 2010 allowed honda study human robot interaction guide development future versions robot april 2011 asimo demonstrated championship encourage students studies math science engineering asimo ontario science center toronto 2011 demonstrated abilities canadian students robot exhibit canadian museum 19 22 2011 asimo appeared british december 2011 serving water host stephen brand asimo 32 asimo 2012 film robot robot job cat robot film appearance asimo robot march 24 2017 honda revealed asimo  
503726	computer	digital image numeric representation binary dimensional image depending image resolution fixed vector raster type term digital image refers raster images images opposed vector images raster raster images finite set digital values called picture elements pixels digital image fixed rows columns pixels pixels individual element image holding values represent brightness color specific typically pixels stored memory raster image raster map dimensional array integers values transmitted stored compressed form raster images created variety input devices techniques digital cameras scanners coordinate measuring machines radar synthesized arbitrary image data mathematical functions dimensional geometric models major graphics field digital image processing study algorithms transformation raster file formats users contact raster images digital cameras image file formats digital cameras access data captured camera raw image format universal photographic imaging guidelines suggests formats raw files produce quality images file formats processing agent level control accuracy output proprietary trade camera makers influence manufacturers release records publicly alternative digital negative proprietary adobe product public format digital camera raw data format accepted support product growing increasingly professional organizations purposes vector vector images mathematical geometry vector mathematical terms vector consists direction raster vector elements combined image vector photographs raster image viewing image viewer software displays images browsers display standard internet image formats including format standard format internet slow common provide image load replaced main image preliminary internet fast image scientific images instance 46 size image size images difficult download online complex interfaces viewers offer utility display sequence images history digital machines cable picture transmission digital cameras computers decades picture scanned stored digital pixels displayed standards automatic advancement digital continued 1960s development space program medical projects jet laboratory mit bell labs university digital images advance satellite standards conversion medical imaging technology character recognition photo enhancement rapid advances digital imaging introduction microprocessors 1970s progress storage display technologies tomography cat scanning rays produce digital image slice dimensional object medical digital images analog images allowed enhancement artifacts fields diverse nuclear medicine law industry advances microprocessor technology development marketing charge coupled devices ccds wide range image capture devices gradually analog film tape photography 20th century computing power process digital image capture allowed generated digital images achieve level close  
503883	computer	digital color image digital image includes color pixel visually acceptable sufficient provide samples color channels pixel interpreted coordinates color space rgb color space commonly displays spaces contexts color image values channels pixel measure intensity light actual stored digital image data brightness spectral band color image representation color image stored memory raster map dimensional array integer rarely separate raster maps channel bits sample 24 bits pixel artifacts visible varying images subject processing applications bits sample hand image file formats graphics cards bits pixel 256 colors bits channel converting continuous images photographs formats requires yields graphics cards support 16 bits pixel provide distinct colors bits channel resolution professional  
505717	computer	vision image segmentation process digital image multiple segments sets pixels super pixels goal segmentation simplify change representation image meaningful easier analyze image segmentation typically locate objects boundaries lines curves images precisely image segmentation process assigning label pixel image pixels label share characteristics result image segmentation set segments cover entire image set contours extracted image edge detection pixels region respect characteristic computed property color intensity texture adjacent regions respect characteristic applied stack images typical medical imaging contours image segmentation create 3d interpolation algorithms applications practical applications image segmentation purpose algorithms techniques developed image segmentation techniques typically combined domain specific knowledge effectively solve domain segmentation thresholding simplest method image segmentation called thresholding method method based level threshold gray scale image binary image balanced histogram thresholding key method select threshold values multiple levels selected popular methods industry including maximum entropy method otsu method maximum variance clustering methods developed thresholding computed tomography ct images key idea otsu method derived reconstructed image methods suggested usage multi dimensional rule based linear decision pixel membership segment based multi dimensional rules derived logic evolutionary algorithms based image lighting environment application clustering methods algorithm iterative technique partition image clusters basic algorithm distance squared absolute difference pixel cluster center difference typically based pixel color intensity texture location weighted combination factors selected manually randomly heuristic algorithm guaranteed converge return optimal solution quality solution depends initial set clusters motion interactive segmentation motion based segmentation technique relies motion image perform segmentation idea simple differences pair images assuming object moving difference object improving idea proposed interactive segmentation robotics 2009 robot objects generate motion signal motion based segmentation interactive segmentation interactive perception framework proposed robotics team compression based methods compression based methods optimal segmentation minimizes coding data connection concepts segmentation patterns image image method describes segment texture boundary shape components modeled probability distribution function coding computed segmentation image scheme yields bits required encode image based segmentation image goal segmentation produces shortest coding achieved simple clustering method distortion compression determines segmentation optimal image parameter estimated contrast textures image textures image images stronger sensitivity required histogram based methods histogram based methods efficient compared image segmentation methods typically require pass pixels technique histogram computed pixels image histogram locate clusters image color intensity measure technique apply histogram method clusters image divide clusters operation repeated clusters clusters formed disadvantage histogram method difficult identify image histogram based approaches adapted apply multiple frames maintaining single pass efficiency histogram multiple multiple frames considered approach frame applied multiple merged difficult identify histogram applied pixel basis determine frequent color pixel location approach segments based active objects static environment type segmentation video tracking edge detection edge detection developed field image processing region boundaries edges closely sharp adjustment intensity region boundaries edge detection techniques base segmentation technique edges identified edge detection segment object image closed region boundaries desired edges boundaries objects spatial spatial consisting pixel region abstraction levels hierarchical nested scene architecture figure ground extended include object objects object edge detection methods applied spatial region manner applied method edge methods applied edges edge developed integrated method segments edges straight edge segments based object recognition based minimum description criterion optimized split merge method candidate complementary cues segments dual clustering method method combination characteristics image partition image based histogram analysis clusters objects gradients purpose spaces introduced space dimensional histogram brightness dual dimensional space original image space measure compact distributed brightness image calculating minimal clustering threshold brightness defines binary black white object dual space measure defined compact distributed black white pixels goal objects measure calculated difference brightness object background gradient maximum defines segmentation region growing methods region growing methods rely assumption neighboring pixels region values common procedure compare pixel neighbors similarity criterion pixel set belong cluster neighbors selection similarity criterion influenced noise instances method statistical region merging starts building graph pixels edges weighted absolute intensity difference initially pixel forms single pixel region edges priority queue decide merge current regions edge pixels statistical region growing method region growing method method takes set input image mark objects regions grown comparison neighboring pixels regions difference pixel intensity region measure similarity pixel difference measured assigned respective region process continues pixels assigned region region growing requires additional input segmentation dependent choice noise image region growing method region growing method modified algorithm require explicit starts single region pixel chosen influence final segmentation iteration considers neighboring pixels region growing differs region growing minimum threshold respective region pixel considered current regions region created pixel variant technique proposed 1985 based pixel region intensity candidate pixel compute pixel region pixel form region special region growing method called connected segmentation based pixel neighborhood linking paths degree connectivity calculated based path formed pixels pixels called connected path linking pixels path equivalence relation split merge segmentation based partition image called segmentation method starts root tree represents image uniform split child squares splitting process contrast child squares merged connected components merging process node tree node process continues splits special data structure involved implementation algorithm method time complexity reach 13 optimal algorithm method partial differential equation based methods partial differential equation based method solving equation numerical scheme segment image curve propagation popular technique category numerous applications object extraction object tracking stereo reconstruction central idea initial curve lowest potential cost function definition reflects task addressed inverse minimization cost functional trivial constraints solution expressed constraints curve parametric methods techniques based contour sampling strategy element image internal terms techniques fast efficient original purely parametric formulation 1987 snakes criticized limitations choice sampling strategy internal geometric properties curve topology curve splitting merging addressing dimensions efficient developed address limitations maintaining efficiency energy minimization conducted gradient descent derivatives computed finite differences level set methods level set method initially proposed track moving interfaces 1979 1981 1988 spread imaging domains late 1990s efficiently address curve surface propagation implicit manner central idea represent contour signed function corresponds actual contour motion equation contour easily flow implicit surface applied level reflect propagation contour level set method numerous advantages implicit parameter direct estimate geometric properties structure change topology define optimization framework proposed 1996 convenient framework addressing numerous applications vision medical image analysis level set data structures led efficient implementations method fast methods fast method image segmentation model improved positive negative speed propagation speed approach called generalized fast method methods goal methods optimal respect specific energy functional consist data fitting term terms classical image 14 constant image optimal squared l2 distance image total jump set jump set 16 defines segmentation relative weight tuned parameter 19 binary variant model range 20 restricted values called model generalization functional sum total segmentation curve 22 approximation 20 distance original image 14 weight penalty adjusted 25 model constant 26 optimization hard minimizing strategies practice classical algorithms approximation graph methods graph methods effective tools image segmentation model impact pixel cluster pixels pixel assumption images methods image modeled weighted graph pixel pixels nodes edge weights define similarity neighborhood pixels graph image criterion designed model clusters partition nodes pixels output algorithms considered object segment image popular algorithms category normalized random minimum cut minimum spanning tree based segmentation segmentation based object markov random fields application markov random fields images suggested 1984 strong mathematical foundation ability provide global defined local features proved foundation domain image analysis segmentation completely characterized prior probability distributions probability distributions smoothing constraint criterion updating values criterion image segmentation finding scheme maximum probability set features broad categories image segmentation supervised unsupervised segmentation supervised image segmentation map terms image segmentation function seek maximize probability identifying scheme set features detected image maximum estimation method generic algorithm image segmentation map optimization algorithms optimization algorithm adaptation models variety fields set unique cost functions common cost functions change pixel difference pixel label compared labels neighboring pixels conditional modes gradient descent algorithm reconstruct ideal labeling scheme changing values pixel iteration evaluating energy labeling scheme cost function penalty change pixel label penalty difference label pixels chosen pixel 28 neighborhood pixel function major issue gradient descent rest local globally optimal labeling scheme simulated derived change pixel label iterations estimates difference energy newly formed graph initial data newly formed graph terms energy cost algorithm newly formed graph simulated requires input temperature speed convergence energy threshold minimization occur alternative algorithms range methods exist solving simple include maximization posterior multi scale map estimation multiple resolution segmentation likelihood estimates graph cut maximum flow highly constrained graph based methods exist solving unsupervised image segmentation expectation maximization subset unsupervised machine learning algorithm utilized estimate posterior probabilities distributions labeling training data estimate segmentation model formed approach represent features image step algorithm mentioned random estimate model parameters supervised learning utilized step estimate class statistics based random segmentation model defined compute conditional probability label feature set calculated bayes theorem 33 set labels step established relevance feature set labeling scheme compute estimate label algorithm actual total labels unknown training data set hidden estimate labels user utilized computations 35 set features transformation transformation considers gradient magnitude image surface pixels gradient magnitude correspond lines represent region boundaries water pixel common common local intensity minimum pixels common minimum form represents segment model based segmentation central assumption model based approaches shape seek probabilistic model shape variation image constraints model prior task involve registration training examples common pose probabilistic representation variation registered samples iii statistical inference model image methods literature model based segmentation include active shape models active appearance models multi scale segmentation image computed multiple scales scale space coarse fine scales scale space segmentation segmentation criteria complex account global local criteria common requirement region connected sense dimensional hierarchical signal segmentation scale space included notion dimensional signal regions scale parameter controlling scale segmentation key observation derivatives derivative slope multi scale versions signal form tree defines hierarchical relations segments scales slope coarse scales features fine scales slope maximum slope minimum larger scale segments separated merge segment defining hierarchy segments image segmentation numerous reached applied interactive manual intervention application medical imaging automatically overview main ideas current approaches based structure specific dimensional signals transfer dimensional images idea inspired authors coarse fine schemes image segmentation proposed study iso intensity contours scales approach investigated intensity image features scales implies hard trace coarse scale image features scales iso intensity studied linking local scales proposed image representation called scale space explicit relations structures scales explicit image features stable ranges scale including locally scales proposed detect edges coarse scales scale space trace scales manual choice coarse detection scale fine localization scale studied complementary multiple scales developed tool interactive image segmentation based multi scale multi scale application gradient map investigated carried clinical proposed defining probabilistic relations image structures scales stable image structures scales workers automated automatic brain segmentation algorithm based closely ideas multi scale extensively tested brain databases ideas multi scale image segmentation linking image structures scales associate structures detected scale space minimum noise threshold object tree multiple scales corresponds feature original signal extracted features accurately reconstructed iterative gradient matrix method semi automatic segmentation segmentation user region mouse algorithms applied path edge image techniques intelligent segmentation alternative semi automatic segmentation algorithms return spatial object object object selected user designated prior probabilities segmentation segmentation methods based color pixels image humans knowledge image segmentation implementing knowledge cost considerable computation time require huge domain knowledge database addition traditional segmentation methods segmentation methods model knowledge neural network segmentation relies processing image artificial neural network set neural networks processing decision mechanism marks image category recognized neural network type network designed map pulse coupled neural networks neural models proposed modeling visual cortex developed performance image processing 1989 introduced neural model emulate mechanism visual cortex model simple effective tool visual cortex recognized application potential image processing 1994 model adapted image processing algorithm termed algorithm pulse coupled neural network decade utilized variety image processing applications including image segmentation feature generation extraction motion detection region growing noise reduction dimensional neural network neuron network corresponds pixel input image receiving color intensity external neuron connects neighboring neurons receiving local stimuli external local stimuli combined internal activation stimuli dynamic threshold pulse output iterative computation neurons produce temporal series pulse outputs temporal series pulse outputs input images utilized image processing applications image segmentation feature generation compared conventional image processing including noise independence geometric variations input patterns capability bridging minor intensity variations input patterns source implementations segmentation segmentation images videos images photo album sequence video frames objects scenes exploit task simultaneously scenes images video frames termed segmentation typically human action localization conventional box based object detection human action localization methods provide grained typically image segmentation human object action category segment tube techniques dynamic markov networks cnn lstm employed exploit inter frame methods methods segmentation segmentation connectivity based segmentation based images segmentation segmentation comparing performance segmentation methods art segmentation methods standardized sets  
507144	computer	computing address space defines range discrete addresses correspond network host peripheral device disk sector memory cell logical physical entity software programs save stored data unit data address individually located program unable manipulate data address spaces depend underlying address structure limited architecture address spaces created combining identified address address space person physical address address space combination locations neighborhood city country elements address space element address addresses space reference entities multiple address 32 main street arranged street address spaces address space regions mathematical structure total memory addresses simply nested domain directed tree domain directory structure hierarchical design addresses internet internet assigned authority ranges ip addresses enable manage global internet address space examples addresses include limited address mapping translation common feature address spaces translations numerous layers level address translated level file logical disk operates linear sector translated absolute sector addresses simple addition partition sector address disk drive connected parallel converted logical cylinder head sector address interface historical converted disk controller finally physical cylinder head sector domain maps names network specific addresses ip addresses mapped link layer network addresses address resolution protocol network address translation occur edge ip spaces local network internet virtual physical address translation virtual memory virtual address space map file main memory physical address space virtual addresses refer physical address physical byte ram single virtual address maps physical address references  
507174	computer	hinton born december 1947 english canadian cognitive scientist artificial neural networks 2013 time google google brain university toronto david hinton author highly cited paper applied backpropagation algorithm developed 1970 multi layer neural networks inventor method viewed leading figure deep learning community referred deep learning image recognition milestone designed student challenge 2012 helped field vision education hinton king college cambridge 1970 bachelor arts experimental continued study university awarded phd artificial intelligence 1978 supervised career phd university difficulty finding funding university california san carnegie mellon university founding director foundation computational neuroscience unit university college london professor science department university toronto holds canada chair machine learning learning machines program canadian institute advanced hinton taught online neural networks education platform 2012 hinton joined google march 2013 company acquired planning divide time university google hinton neural networks machine learning memory perception symbol processing 200 peer reviewed publications hinton professor carnegie mellon university david hinton applied propagation algorithm reverse mode automatic published 1970 multi layer neural networks experiments networks learn internal representations data paper inventor method period hinton invented boltzmann machines david contributions neural network include distributed representations time delay neural network experts machines product experts 2007 hinton unsupervised learning paper titled unsupervised learning image transformations accessible introduction hinton articles scientific american september 1992 october 1993 october november 2017 hinton published access papers theme neural networks hinton finally notable phd students researchers include richard awards hinton elected fellow royal society 1998 winner prize 2001 royal society reads 2001 hinton awarded university 2005 award achievement award awarded 2011 canada gold medal science engineering 2013 hinton awarded 2016 elected foreign national academy engineering contributions theory practice artificial neural networks application speech recognition vision received 2016 ieee james award foundation knowledge award 2016 communication technologies category pioneering highly influential machines ability learn personal life hinton george eventually foundations modern science author james hinton father hinton middle relative george lost cancer 1994 views hinton moved canada era military funding artificial intelligence believes systems people hinton autonomous risk artificial intelligence hinton stated 50 track record intelligent controlling intelligence 2015 continues concerns hinton stated usual arguments discovery hinton stated hard predict advances bring  
507928	computer	inferno distributed operating started bell labs developed maintained software inferno based experience gained plan bell labs bell labs operating systems languages fly compilers graphics security networking portability operating programs current company inspired inferno programs portable broad mix hardware networks environments defines virtual machine implemented real machine type safe language compiled portable byte code includes virtual operating interfaces hardware runs user program operating communications protocol called applied uniformly access local remote resources programs calling standard file operations read write close fourth edition inferno identical plan version protocol design principles inferno created 1995 bell labs science division bring ideas plan bell labs wider range devices networks inferno distributed operating based basic principles drawn plan handle diversity network environments intended designers decided virtual machine component project java independently virtual machine register machine intended closely match architecture runs opposed stack machine java virtual machine advantage approach relative simplicity creating time compiler architectures virtual machine memory management designed efficient devices memory memory mapping hardware hybrid reference real time data inferno kernel virtual machine fly compiler devices protocol space process file space root file hierarchy kernel includes built modules provide interfaces virtual operating calls graphics security math modules bell labs technical journal paper introducing inferno listed dimensions portability os design choices directed provide standard interfaces content service providers concern details diverse hardware software networks content delivered history inferno plan shares design concepts source code kernel devices protocol inferno shares plan unix heritage bell labs unix philosophy command tools inferno plan tools translated mid 1990s plan development set favor inferno existence 1996 development publicly java time bell labs company licensed java technology sun microsystems 1997 ieee internet computing included inferno networking software claimed devices communicate network including internet telecommunications stated video games talk computers phones access email voice mail lucent inferno internal products lucent vpn lucent phone switch initially sell source code licenses inferno lucent marketing internet inferno relation time sun microsystems heavily marketing java programming language market analogous technology browsers filled demand object oriented languages popular time lucent licensed java sun inferno devices java java byte code byte code translator written facilitate inferno customers inferno business unit closed sold continued development offered commercial licenses complete licenses compatible kernel ported software hardware focused distributed applications eventually released source license inferno operating source software project ports inferno runs native hardware application providing virtual operating runs platforms programs developed inferno platforms modification native ports include architectures x86 mips arm powerpc sparc hosted virtual os ports include windows linux freebsd plan mac os solaris irix inferno hosted internet browsers development released inferno ported android license inferno edition released 2005 software dual licensed licenses users set software licenses proprietary license software license scheme covered licenses including gnu public license gnu lesser public license lucent public license mit license subsequently acquire entire fonts licensed license options external links historical  
514556	computer	variation linux kernel maintained fork targets microcontrollers memory management unit mmu integrated main development 46 project continues develop tools microcontrollers lists linux kernel releases letters microcontroller linux letter greek history originally created 1998 initially targeted motorola family embedded 68k processors series motorola 33 linux kernel releasing initial developer community kernels microprocessor architectures 1999 support motorola family embedded microprocessors arm processor support originally series linux kernels ports based linux linux linux ports ported 36 linux kernel michael rt control extensions applied series kernels version 46 linux kernel major integrated main kernel processor architectures originally ported motorola family processors continues maintain push core support series linux kernels regard essentially separate fork linux project continues develop supporting tools linux microcontrollers support architectures forms basis products network routers security cameras dvd players voip phone scanners card readers supported architectures current list includes  
528352	computer	translation buffer tlb memory cache reduce time access user memory location memory management unit mmu tlb stores translations virtual memory physical memory called address translation cache tlb cpu cpu cache cpu cache main memory levels multi level cache majority desktop laptop server processors include tlbs memory management hardware processor utilizes virtual memory tlb implemented content addressable memory search key virtual address search result physical address requested address tlb search yields match retrieved physical address access memory called tlb hit requested address tlb translation table process called walk walk time consuming compared processor speed involves reading contents multiple memory locations compute physical address physical address determined walk virtual address physical address mapping entered tlb powerpc set associative tlb data loads stores processors instruction data address tlbs overview tlb fixed slots table entries segment table entries table entries map virtual addresses physical addresses intermediate table addresses segment table entries map virtual addresses segment addresses intermediate table addresses table addresses virtual memory memory space process space split fixed size memory commonly segments variable sizes memory table stored main memory track virtual stored physical memory method memory accesses table entry byte access byte table looked frame frame offset actual address straightforward virtual memory scheme doubling memory access time tlb reduce time access memory locations table method tlb cache table representing subset table contents physical memory addresses tlb cpu cpu cache cpu cache primary storage memory levels multi level cache determines cache physical virtual addressing cache virtually addressed requests cpu cache tlb accessed cache cache physically addressed cpu tlb lookup memory operation physical address cache harvard architecture modified harvard architecture separate virtual address space memory access hardware exist instructions data lead distinct tlbs access type instruction translation buffer data translation buffer benefits demonstrated separate data instruction tlbs tlb fast lookup hardware cache figure tlb entry tlb consists tag tag incoming virtual address matches tag tlb returned tlb lookup instruction pipeline searches fast essentially performance penalty search instruction pipeline tlb common optimization physically addressed caches perform tlb lookup parallel cache access virtual memory reference hardware checks tlb held tlb hit translation frame returned access memory tlb table depending cpu automatically hardware interrupt operating frame access memory addition add frame tlb reference tlb suitable block selected replacement replacement methods address translation cache article details virtual addressing caches tlbs performance implications cpu access main memory instruction cache data cache tlb simplest desired cache virtual physical translation tlb slow access slower level memory hierarchy functioning tlb tlb expensive instruction data cache load main memory walk requiring memory accesses tlb tlb cpu checks table table entry bit set main memory processor frame table entry form physical address processor updates tlb include table entry finally bit set desired main memory fault issued fault interrupt called executes fault handling set fit tlb tlb occurs frequent tlb misses occur newly cached performance instruction data cache tlb occur instruction cache data cache occurring cached size units instructions data cached blocks cache lines entire address lookup level code data sets fit cache sets virtual address set fit tlb causing tlb tlb requires size instruction data caches multiple multiple tlbs caches tlbs multiple levels cpus built multiple tlbs l1 tlb associative extremely fast larger l2 tlb slower instruction tlb data tlb cpu tlbs instance intel microarchitecture set associative l1 64 entries 32 entries l1 128 entries 14 associative entries divided threads unified entry l2 tlb associative tlbs separate sections huge tlb handling schemes handling tlb misses commonly modern architectures architecture option software hardware managed tlbs alpha architecture tlb managed operating processor processor specific operating specific versions implement table formats operating systems requiring tlb format instructions control tlb architecture typical tlb typical performance levels tlb tlb hit takes clock cycle takes 30 clock cycles rate effective memory cycle rate average 30 clock cycles memory access address space switch address space switch occurs process switch thread switch tlb entries virtual physical mapping simplest strategy deal completely tlb switch tlb memory reference time running speed cpus effective strategies process entry process runs short time process valid entries saving time alpha tlb entry tagged address space tlb entries matching current task considered valid intel pentium pro global enable flag register global flag directory table entry prevent frequently automatically tlbs task switch load register 2010 microarchitecture intel 64 processors support 12 bit process context tlb entries multiple linear address spaces match current address translation tlb option software managed tlbs option hardware tlbs tlb intel complete tlb address space switch hardware tlbs tlb intel x86 processors tlb arm processors individual entries tlb indexed virtual address tlb security mechanism memory isolation processes ensure process access data stored memory process memory isolation critical switches privileged operating kernel process user processes security strategies kernel table isolation rely heavily performance tlb benefit greatly hardware enabled tlb entry management virtualization x86 tlb advent virtualization server lot effort x86 architecture easier ensure performance virtual machines x86 hardware entries x86 tlbs address space refer current address space time change address space context switch entire tlb maintaining tag tlb entry address space software comparing tag tlb lookup tlb expensive x86 tlb designed operate latency completely hardware 2008 intel amd introduced tags tlb entry dedicated hardware checks tag lookup exploited future tags identify address space tlb entry context switch result tlb – changing tag current address space tag address space task  
534794	computer	association advancement artificial intelligence aaai international scientific society devoted promote responsible artificial intelligence aaai aims increase public understanding artificial intelligence improve teaching training provide guidance potential current developments future directions history organization founded 1979 american association artificial intelligence changed 2007 association advancement artificial intelligence 000 worldwide history organization notable figures science allen minsky john current president president conferences publications aaai services artificial intelligence community aaai conferences providing support 14 journals field artificial intelligence aaai produces publication magazine seeks publish literature entire field artificial intelligence magazine published continuously 1980 aaai aaai conference artificial intelligence considered conferences field artificial intelligence awards addition aaai aaai awards acm aaai allen award acm aaai allen award individual selected career contributions science bridge science disciplines award prize 000 supported association advancement artificial intelligence aaai association computing machinery acm individual contributions aaai outstanding award annual aaai outstanding award created 2016 honor person people major contributions education provide benefits community  
551666	computer	ibm ibm development division largest industrial organization labs ibm employees nobel prizes turing awards 20 national hall 19 national technology national science prizes 2018 company generated patents business 25 consecutive record history ibm watson scientific computing laboratory columbia university ibm laboratory devoted pure science expanded additional ibm locations york starting 1950s including thomas watson center 1961 advances notable company include floppy disk hard disk drive magnetic card database universal product code financial fortran programming language reservation dram copper wiring semiconductors smartphone portable automated machine silicon semiconductor manufacturing process watson artificial intelligence quantum experience advances nanotechnology include ibm atoms scanning tunneling 35 individual atoms crystal spell letter company time atoms precisely flat surface applications major ibm included innovative materials structures performance microprocessors computers methods tools algorithms software architectures methods managing searching meaning data ibm advanced services ibm numerous contributions physical sciences include scanning tunneling temperature awarded nobel prize ibm travel reservation technology laser eye surgery magnetic storage database watson question answering computing match human jeopardy television watson technology project healthcare company notable ibm scientists scientists ibm famous include allen john charles scientist  
551732	computer	firmware replacement lego programmable variants software support original robotics includes java virtual machine lego robots programmed java programming language includes communicate bluetooth original firmware teaching java science students based robot international space station december 2001 pronunciation official conceived based java operating operating spanish word history originally conceived developed late 1999 started source project joined project enhancements paul project essentially retired august 20 2006 original discontinued release library control bluetooth enabled released library standard lego firmware library january 2007 port lego released firmware replacement faster version memory menu bluetooth support library access features 2008 versions released addition numerous improvements core classes eclipse released version 2009 major releases 85 2011 released speaking releases improvements navigation algorithms support numerous 3rd party sensors eclipse plug 2013 development port lego 2014 alpha versions released 2015 beta versions released november 2014 adapted version source project architecture support access robot ports access standard sensors motors distance sensor touch sensor sound sensor light sensor companies extended basic set providing advanced sensors actuators includes java apis products advantage object oriented structure java developers implementation details sensors actuators multiple interfaces robotics developer level details addresses hardware components project includes implementations commonly feedback controller controller filter noise reduction algorithm libraries support abstract functions navigation mapping behavior based robotics simple program community alpha release 2007 project consistently active core development team contributions accepted community interfaces party sensors actuators contributed core team platform university robotics courses projects platform robotics java platform java project builds functionality inherent java platform leading java eclipse robotics developers advantage standard functionality ide code completion testing frameworks implementation functions linking java source projects apache math robotics developer  
552656	computer	british society bcs professional body learned society represents technology united kingdom founded 1956 bcs played role professionals engineers professional status creating global community active field practice computing overview worldwide membership 000 100 countries bcs registered incorporated royal 1984 promote study application communications technology computing technology advance knowledge education benefit professional public bcs institution engineering council licensed award incorporated engineer engineer responsible regulation science fields bcs council european professional informatics international degree recognition bcs science council licensed award scientist bcs offices street south central london main offices west london offices sri professional magazine bcs organization enterprise architecture professional organizations worldwide association professional organizations provide forum advance discipline enterprise architecture history bcs london founded 1956 bcs formed merger association scientists october 1957 bcs incorporated articles association british society president bcs 1966 bcs granted status 1970 bcs including major ethical bcs integrity society bcs december 1976 involved bcs activities president silver 2007 bcs launched job aimed professionals 2008 bcs training company connection claims professionals bcs scheme 21 september 2009 british society transformation branded bcs institute 2010 meeting called direction bcs covered computing press bcs board president president president vice including vice president professional elected advisory council professor science cambridge university served president president serves term list british society bcs bcs advisory council president president vice president council lists board advisory council maintained online advisory council board direction operation bcs strategic plans annual budget council body membership elected professional membership branches fellow bcs title individuals recognize achievement contributions technology expected society conferences panels society supported existing criteria fellow include current distinguished individuals industries universities prominent include professional bcs professional body united kingdom ability grant status professionals royal granted council ability grant professional status professional professional entitled suffix bcs register current professional membership bodies apply bcs enables award institution engineering technology membership body licensed award membership bcs membership encouraged display letters entitled post letters complex interpretation accepted authority subject correct form degrees letters holding display letters institution registered holding status display membership letters awarded displayed separately institution examples bcs post bcs range users computers professionals bcs user bcs offers cover including understanding presentation software animation video editing social networking safety current user bcs education bcs bcs education countries bcs professional consisted passing professional project equivalent british degree programs history success participants coming including asia private computing schools hosted students bcs level current type individuals improve typing skills average user save 21 days improving typing speed type support materials based allowing user skills simple online digital creator set digital media skills creative projects designed types schools key stage key stage learning bcs range user combination units framework framework consists wide range units covering aspects user application including word processing internet multimedia software design software bcs offers professional professional board systems board professional wide range professionals covering major including management development service delivery quality retired online start internet designed provide basic understanding internet start reading email online foundation suitable organization individual guidance controlled approach identification assessment control risk strategic project operational structure common professional institutions bcs regional branches 45 regional branches 16 international sections 50 september 2010 bcs sponsored digital film professionals skills october 2010 conjunction sponsored digital film competition bcs include journals published oxford university press include electronic computing series conference proceedings published bcs  
559815	computer	standard image field image processing 1973 picture swedish model shot november 1972 issue magazine original article history magazine image illustrate image processing algorithms 1961 bit grayscale scanned images july 1960 issue featuring smith born mit master thesis image intended resolution color image processing study picture history 2001 ieee professional communication society article scan images history 1999 issue ieee transactions image processing separate articles picture continued scientific journals century accepted image processing community annual conference society imaging science technology 1997 photo electronic imaging events history 2015 honor ieee 2015 speech paper award explain popularity david editor chief ieee transactions image processing image flat regions texture popularity image dominated field material initially send publications journals image time decided wide media decided exploit phenomenon criticism image produced women photo sciences 1999 reasons science applied mathematician wrote 2012 paper compressed sensing photo model image draw attention issue image school thomas school science technology senior washington post 2015 impact female students science society imaging science technology image original  
568646	computer	simplified sic introduced software introduction systems programming modern microprocessors include subtle complex functions purposes efficiency difficult learn systems programming real simplified complex behaviors favor architecture accessible learn systems programming sic architecture sic machine basic addressing storing memory addresses integer format modern computing systems sic architecture stores data binary represent negative values machine level memory storage sic consists bit bytes memory addresses sic byte addresses consecutive bytes form 24 bit word addressed location lowest numbered byte word numeric values stored word values character values bit sic machine support floating hardware 32 bytes memory complicated machine built sic called simplified instruction extra equipment sic expansion sic adds 48 bit floating data type additional memory addressing mode extra memory 32 bytes original machine sic assembly code compatible sic sic machines registers 24 bits numeric character representation addition standard sic registers additional purpose registers specific sic machine registers sic sic machine perform simple tasks customized assembly language software book theoretical series operation codes aid understanding required execution assembly language code addressing modes sic sic simplified instruction instruction formats extra equipment add includes fourth instruction formats provide model memory data management format representation memory format format bit flag values consisting flag bits sic assembly syntax sic special assembly language operation codes hold values execute programs sample program idea sic program code columns column represents symbol store location memory column denotes sic instruction opcode constant byte word column takes symbol column operation column process creates object code object codes object file sic machine codice program object code consists record type values memory locations record digits relative starting location digits represent program size lines record consisting digits starting location digits size bytes object codes created assembly process codice program program data movement sic codice sic sic sic machines real machines task constructing sic emulator systems programming class purpose sic level systems programmers students write code level languages sources sic programs  
574759	computer	feed written feedforward term describing element control passes controlling signal source external environment load external environment command signal external operator control feed behavior control signal pre defined load contrast feedback output account load load vary load considered belong external environment feed control variable adjustment error based based knowledge process form mathematical model process knowledge measurements process control scheme reliable pure feed feedback external command controlling signal output load load time pure feed control feedback called control signal adjusted adjustment control signal contrast control output response load feedback mechanism systems control theory computing overview feed feedforward control measured time affect house feed measure door automatically house difficulty feed control effects accurately predicted instance window measured feed controlled house term specific meaning field cpu based automatic control discipline modern cpu based automatic controls discussed difficulty developing providing mathematical model required facilitate type control loop control feedback control based control algorithms types control systems loop feed feedback pure loop control manual power assisted steering motor car steering access power source respond varying direction wheels driver response steering comparison power steering access controlled power source depends engine speed steering wheel fluid pressure driving wheels sensor monitors pressure correct pressure reach wheel mechanism feed control output change direction travel vehicle plays model predictive control include driver provide feedback path direction travel errors steering wheel feedback block labeled figure feed systems types nested regarded black box feedforward control loop control systems feedforward control requires mathematical model plant process machine controlled plant relationship inputs feedback receive loop control systems require mathematical model physical plant controlled control based operator input integral processing interpretation mathematical model considered feedforward control history historically term 1956 field biological control theory feedforward systems discipline controls term writing theories human animal discipline developed graduate students tech mit stanford carnegie mellon feedforward typically publications mit book tech development concepts feedforward control mid 1970s discipline feedforward controls defined papers articles books late 1980s benefits benefits feedforward control extra cost time effort required implement technology control accuracy improved magnitude mathematical model sufficient quality implementation feedforward control law energy consumption feedforward control driver typically controls stability enhanced controlled device built cost lighter weight materials highly accurate operate speeds benefits feedforward control include reduced equipment maintenance costs reliability substantial reduction feedforward control combined feedback control optimize performance model mathematical model plant machine process feedforward control created input control engineer learned control control systems capable learning mathematical model practical microprocessor speeds increased discipline modern feedforward control microprocessors feedforward control requires integration mathematical model control algorithm determine control actions based controlled control flexible robotic arm simple robot arm carrying payload target joint angles adjusted payload desired position based arm mathematical interpretation caused payload systems plan actions pass plan execution satisfy definition feedforward control includes detect receive input process input mathematical model determine required modification control action true feedforward control output contrast closed feedback loop control operation output fed input control operation applications feed feed control normal regulation advance actual physical feed control learned responses cues feedback regulation running physical feedforward systems biological control human animal biological feedforward systems human brain knowledge model plant body considered mathematical model characterized limits mechanics patterns pure feed control function keeping body internal environment control relies feedback negative addition feedforward elements gene regulation feed cross regulation represented graph nodes node linked factor appears networks feed detecting temporary change environment feed control theme commonly observed cell development feed systems computing computing feed refers perceptron network outputs neurons preceding layers feedback loops connections set training phase feedback distance telephony 1970s transmission systems including carrier feed linear distortion complex method allowed wider bandwidth earlier feedback systems optical fiber systems built automation machine control feedforward control discipline field automatic controls automation  
574775	computer	computing abstraction layer abstraction level details allowing separation concerns facilitate platform independence examples software models layers abstraction include osi model network protocols graphics libraries science abstraction layer generalization conceptual model algorithm specific implementation broad similarities models express similarities specific implementations abstraction layer easy concept design pattern situations accurately applied recognized layer considered depends layer exist layers requires layers function frequently abstraction layers composed hierarchy abstraction levels osi model abstraction layers layer model addresses digital communications reducing complexity engineering solutions famous david science solved level abstraction layers architecture architecture represented consisting abstraction levels programmable logic considered hardware logical definitions device software firmware firmware include level software include software including operating applications software layers divided hardware abstraction layers physical logical device drivers operating kernels applications distinction level programming languages machine language assembly language compiled language interpreter script language input output unix operating types input output operations considered streams bytes read device written device stream bytes model file socket terminal provide device independence read write device application level program calls function device real device terminal virtual device network port file file device physical characteristics operating abstract interface programmer read write bytes device operating performs actual transformation read write stream bytes device graphics graphics libraries provide abstract graphical device model interface library responsible translating commands programmer specific device commands draw graphical elements objects specific device commands device commands crt monitor graphics library implementation device dependent details providing abstract interface set primitives drawing graphical objects  
575535	computer	instruction cycle cycle fetch execute cycle basic operational process process program instruction memory determines actions instruction describes actions cycle repeated continuously central processing unit cpu boot simpler cpus instruction cycle executed sequentially instruction processed started modern cpus instruction cycles executed concurrently parallel instruction pipeline instruction starts processed previous instruction finished cycle broken separate steps steps cpu cycles based instruction sets cycle cycle repeated cycle cycle power applied initial pc architecture instance intel ia 32 cpus pc codice typically address set instructions read memory rom process loading operating fetch step fetch step instruction control unit instruction address memory unit decode step decoding process cpu determine instruction performed cpu operands fetch perform instruction opcode fetched memory decoded steps moved registers decoding cpu control unit reading effective address step type operation performed memory operation checks direct indirect memory operation register instruction checks type executes instruction execute step function instruction performed instruction involves arithmetic logic alu utilized stage instruction cycle perspective user overhead required execute step happen  
598445	computer	unix commercial versions unix operating originally developed released 1983 major versions released numbered release svr4 commercially successful version result effort marketed unix collaboration major unix vendors source common commercial unix features unix market divided variants ibm hewlett packard hp ux oracle solaris distributions source opensolaris overview introduction successor 1982 unix iii sold hardware customers version based reference implementation standards document called interface definition default features behavior implementations support phases software unix support unix development laboratory systems finally unix laboratories bsd 1980s 1990s considered major versions unix berkeley software distribution bsd historically bsd commonly called bsd unix berkeley unix raymond relationship bsd period hp ibm basis unix offerings vendors sun microsystems dec extended bsd development features bsd bsd variants dec received features sun microsystems merge bsd based sunos produce solaris primary 1990s standardization efforts posix commercial success linux division bsd releases bell labs unix previous commercial unix called iii january 1983 external release unix release called release developed unix support based bell labs internal unix included features editor bsd developed university california berkeley improved performance adding buffer caches support inter process communication messages shared memory developed earlier bell internal unix dec pdp 11 vax minicomputers unix support transformed unix development laboratory released release 1984 functions demand write shared memory record file concept base dec vax 11 chosen release base called original version release efforts machines educational source licenses offered 800 cpu 400 additional cpu commercial source license offered 43 000 months support 16 000 price additional cpu apple ux operating initially based release basis release hp ux derivative book design unix operating description kernel unix development laboratory systems distributed unix release 1987 included streams remote file file switch virtual file mechanism restricted form shared libraries transport layer interface network api final version release 1988 binary compatibility intel platforms intel binary compatibility standard user interface improvements included layers graphics terminal libraries offered color pairs time features forms panels official base unix based distributions release sold intel shipped ibm operating derivative svr4 release announced october 18 1988 incorporated variety commercial unix products 1989 joint project unix laboratories sun microsystems combined technology features included companies licensed svr4 bundled systems workstations network servers svr4 systems vendors included atari atari commodore unix data ux fujitsu hitachi ux hewlett packard hp ux unix ux ux ux super ux technology irix sony news os electric industries sun microsystems solaris 2010s source platform software sold enhanced supported intel x86 versions svr4 software vendors included unix micro station technology svr4 svr4 svr4 primary platforms svr4 intel x86 sparc sparc version called solaris internally sunos developed sun relationship sun release svr4 meaning versions solaris features svr4 releases sun 2005 release source code solaris sunos source opensolaris project creating source heavily modified implementation oracle sun solaris proprietary release project developed source consortium intel based including corporation developed svr4 multiprocessing capability allowing calls processed processor interrupt master processor release enhanced security security features required orange book access control lists support dynamic loading kernel modules svr4 1992 joint venture novell called release featuring file vendors included release completed late 1993 support multiprocessing released 1995 raymond svr4 versions include 1994 guide attributes change policy unix laboratories operation owners eventually acquired trademark distribution rights release novell vendors sun ibm hp continued extend release novell transferred ownership unix trademark operating single unix specification effectively successor interface definition granted unix rights apple macos bsd derivative operating systems derived bsd release developed 1997 operation merger derivative focus scale servers released successor based major developer release announced released 2004 supposed support 64 bit systems industry single unix specification version unix position availability 1990s x86 platforms 1980s 1990s variety svr4 versions unix commercially x86 pc platform market commercial unix pcs linux bsd late 1994 raymond discontinued pc clone unix software guide stating reason linux svr4 market 1998 stated linux track eventually x86 unix market predicted biggest future article 2001 characterized outlook market linux solaris predicted continue share market project project started 1998 combine major features existing commercial unix platforms joint project ibm intel systems target platform meant intel ia 64 architecture processors project 2001 progress unix market 2001 major unix variants unix irix decline major unix versions market ibm hewlett packard hp ux sun solaris 2006 declared analysts linux replace proprietary unix 2006 article written mark hall linux cited major factor driving unix linux article trends performance computing applications evidence shift unix linux november 2015 survey 500 supercomputers unix running ibm linux 98 survey november 2017 reports 100 linux derivatives continued deployed proprietary server platforms principal variants remain commercial ibm solaris oracle hp ux hp study 2012 worldwide unix market divided ibm 56 oracle 19 hp 18 commercial unix vendor market industry analysts proprietary unix entered period slow permanent decline opensolaris distributions opensolaris derivatives svr4 source software core software continues developed distributions compatibility communication mechanisms unix operating systems derived linux unix bsd derivative freebsd posix 2008 specifies replacement interfaces freebsd maintains binary compatibility layer format freebsd execute compiled derivatives unix interactive unix modern linux bsd platforms file format compiled  
605869	computer	software spell spell check software feature checks features software word processor email client electronic dictionary search engine design basic spell processes morphological forms word depending benefit english benefits highly synthetic languages german components program user interface users modify program operation alternative type spell solely statistical grams recognize errors correctly approach requires lot effort sufficient statistical key advantages include runtime storage ability correct errors included dictionary spell checkers fixed list flexible approach paper based correction methods entries clustering algorithms spell checking combined history 1961 headed technology include spell accessed list 000 acceptable graduate student time created true program written applications program english spell dec pdp stanford university artificial intelligence laboratory february 1971 wrote spell assembly language faster action searching word list correct single letter adjacent letter user spell publicly accessible stanford artificial intelligence laboratory programs spread personal computers spell algorithms data structures inspired unix program spell checkers mainframe computers late 1970s university developed spell check ibm corporation spell checkers personal computers appeared 1980 commodore systems released late 1980 time print january 1981 invented vax machines digital equipment 1981 developers random house oem packages user products rapidly software market pc apple macintosh vax unix pcs spell checkers standalone programs mode word processing packages pcs sufficient memory market standalone packages short mid 1980s developers popular word processing packages incorporated spell checkers packages licensed companies expanded support english european eventually languages required increasing morphology routines software regard heavily languages size word processing market country investment implementing spell companies software national markets global marketing strategy firefox browser spell check support user written content editing writing sites social networking websites browsers google chrome email client messaging client offer spell checking support gnu engine mac os spell check wide service virtually bundled party applications spell checkers separate support medical dictionaries prevent medical errors functionality spell checkers offered incorrectly helpful helpful logical errors challenge developers difficulty offering requires reducing form applying pattern matching algorithms logical spell checking dictionaries concerned correct marked incorrect practice optimal size english appears 90 000 entries incorrectly determine basis corpus linguistics word frequently reference typically people write errors people dos spell checkers mode word processing packages document user scanned batch processing offered packages oracle short allowed user view document processed correct wrong memory processing power spell checking performed background interactive sector software produced program released 1987 word word 95 spell checkers increasingly sophisticated capable recognizing simple errors rarely errors errors flag foreign spell checkers considered type foreign language writing aid native language rely detect correct target language spell checking english languages english unusual formal writing single typical dictionary exception modified languages combinations german compound frequently coined existing separate word requiring word splitting algorithms unique challenges english language spell checkers context sensitive spell checkers successful algorithm andrew dan based correction algorithm published 1999 recognize 96 context sensitive errors addition ordinary word errors context sensitive spell appears office 2007 google wave software context spell tuned people criticism critics technology computers attempted link spell checkers trend writing reading speaking claim computers people written simple pass spell claim society writing learning languages accessible ordinary people claim skills lost automated spell checkers replaced skills faster efficient skills technology skills lost people written language frequently authors completely spell checkers spell originally composed dr 1991 assisted mark original incorrectly spell checkers valid people simple incorrectly result spell checkers names critics technological progress article based reports skills performance spell theory suggested skills recognize false incorrect skills lost performance advantage multiple categories errors performing spell checkers evidence loss  
607674	computer	science symbolic execution symbolic evaluation analyzing program determine inputs program execute interpreter program assuming symbolic values inputs actual inputs normal execution program abstract interpretation expressions terms symbols expressions variables program constraints terms symbols conditional branch field symbolic simulation applies concept hardware symbolic computation applies concept analysis mathematical expressions program reads fails input normal execution concrete execution program read concrete input assign execution multiplication conditional branch evaluate false print symbolic execution program reads symbolic program multiplication assign reaching statement evaluate 12 program symbolic execution branches paths path assigned program branch instruction path constraint path constraint 12 branch 12 branch paths executed independently paths result executing fail simply symbolic execution computes concrete solving path constraints path concrete values concrete developers bugs constraint determine reach fail statement equal limitations path executing feasible program paths scale programs feasible paths program grows exponentially increase program size infinite programs loop iterations solutions path path finding increase code coverage reduce execution time independent paths merging paths program dependent efficiency symbolic execution reason program path path advantage reasoning program input input testing paradigms dynamic program analysis inputs path program testing inputs separately environment interactions programs interact environment performing calls receiving signals consistency execution reaches components control symbolic execution tool kernel libraries syntaxhighlight lang main syntaxhighlight program file based condition writes data file reads written data theory symbolic execution fork paths path file statement 11 return data consistent condition practice file operations implemented calls kernel control symbolic execution tool main approaches address challenge executing calls environment advantage approach simple implement disadvantage effects calls managed symbolic execution engine instruction 11 return data depending sequential modeling environment engine instruments calls model effects effects storage advantage correct executing programs interact environment disadvantage implement maintain complex models calls tools approach implementing models file operations entire symbolic execution tools based virtual machines solve environment entire independent executed separately approach writing maintaining complex models virtually program binary executed memory usage history concept symbolic execution introduced descriptions select technical papers published symbolic execution  
625728	computer	operating java virtual machine fundamental component originally developed sun microsystems windows mac os unix unix systems written programming language written java considered legacy history originally announced 1996 sun subsidiary compact os designed computers 1998 sun ibm accelerate development ibm focus network clients replace traditional green screen unix terminals implement single application clients independently supports protected device drivers window api execute java time java soft granted licenses 25 manufacturers including oracle xerox toshiba nokia ibm sun announced cooperation business march 1998 1999 sun ibm announced project 2003 sun materials referred legacy technology java leaving choice specific os java environment design based hardware architecture native microkernel java virtual machine runs microkernel platforms kernel runs include device drivers written java executed virtual machine graphics implementing api written java applications designed embedded systems applications devices set boxes networking infrastructure operating  
643342	computer	prize annual prize outstanding papers theoretical science jointly european association theoretical science association computing machinery special algorithms computational theory acm award named honor connection theoretical science question 1956 letter john von neumann complete solved linear time prize awarded 1993 prize awarded acm theory computing main north american conferences theoretical science international automata languages programming main european conferences field prize paper published journal 14 prize includes reward winner prize selected committee president chair committee serve terms committee  
645315	computer	bus network network topology nodes connected common linear link called bus function host bus network called station workstation bus network station receive network traffic traffic generated station equal transmission priority bus network forms single network segment collision domain nodes transmit bus simultaneously media access control technology carrier sense multiple access bus master link segment bus network transmission signal caused lack  
653404	computer	theory computation branch theoretical science deterministic finite automaton dfa deterministic finite dfa deterministic finite machine deterministic finite automaton finite machine accepts strings symbols produces unique computation automaton input string deterministic refers computation search simplest models capture finite machines researchers introduce concept finite automata figure deterministic finite automaton diagram automaton denoted circles automaton takes finite sequence 1s input transition leading reading symbol dfa transition automaton current input symbol dfa start denoted coming computations set accept denoted double circle define computation successful dfa defined abstract mathematical concept implemented hardware software solving specific dfa model software online user input email addresses valid dfas recognize set regular languages lexical analysis pattern matching dfas built finite automata nfas powerset construction method formal definition deterministic finite automaton consisting string alphabet automaton accepts string 11 sequence 12 exists conditions condition machine starts start 18 condition character string 11 machine transition transition function 20 condition machine accepts 11 input 11 machine accepting automaton string set strings accepts language recognized language denoted 25 deterministic finite automaton accept starting transition comprehensive introduction formal definition automata theory complete definition deterministic finite automata complete define transition input symbol common definition authors term deterministic finite automaton notion automaton defines transition input symbol transition function allowed partial transition defined automaton dfa binary alphabet requires input 27 33 represents input 34 input change automaton input input contained input 33 accepting input string accepted language recognized regular language regular expression codice codice kleene star codice denotes consecutive closure properties dfas recognize languages applying operation dfa languages dfas closed operation dfas closed operations operation optimal construction respect determined complexity dfas equivalent finite automata nfa proved closure properties nfa transition monoid dfa sequence formulation transition function construct function input symbol 38 construct transition function defining 40 41 called perspective 42 acts yield result function composition repeatedly applied functions 42 44 pair letters 45 define function 46 47 denotes function composition process continued recursive definition 48 54 defined 55 dfa sequence 54 repeated function composition forms monoid transition functions monoid transition monoid transformation construction 54 reconstruct 20 descriptions equivalent local automata local automaton dfa edges label lead single vertex local automata accept class local languages membership word language determined window word graph alphabet directed graph vertex set subsets vertices start language accepted graph set directed paths start vertex vertex graph acts automaton class languages accepted graphs class local languages random start accept dfa 59 alphabet size 60 59 vertices vertices 60 labeled 60 65 fixed integer probability largest connected component 60 chosen uniformly random linear size reached vertices proven 60 allowed increase 59 increases phase transition strong connectivity model connectivity random dfa maximum vertices vertex close vertices largest probability true largest minimum degree directed version core advantages disadvantages dfas practical models computation trivial linear time constant space online algorithm simulate dfa stream input efficient algorithms dfa recognizing dfas reduced form minimal dfas efficient algorithms determine dfas equivalent computing power finite automata nfas dfa nfa nfa dfa nfa powerset construction build dfa recognizes language nfa dfa exponentially larger nfa nfas computationally equivalent dfas mentioned solved efficiently nfas nfas complete nfas shortest word exponential size dfa universal final hold nfas inclusion minimization complete require nfa exponential size hand finite automata strictly limited power languages recognize simple languages including requires constant space solve recognized dfa classic simply language dfa recognize language language consists properly word intuitively dfa recognize language dfas capable dfa automaton represent meaning simpler language consisting strings form finite arbitrary equal  
653406	computer	automata theory finite machine called deterministic finite automaton dfa finite automaton nfa finite machine restrictions dfa nfa term nfa sense referring nfa dfa article subset construction algorithm nfa translated equivalent dfa dfa recognizing formal language dfas nfas recognize regular languages nfas introduced 1959 michael equivalence dfas nfas implementation regular expressions thompson construction algorithm regular expression nfa efficiently perform pattern matching strings nfas generalized multiple finite automaton ε moves finite automata automata automata probabilistic automata dfas special finite automata finite automata introduction nfa dfa string input symbols input symbol transitions input symbols dfa deterministic input symbol formal definition element power set set considered notion accepting input dfa input symbol nfa accepts set transitions accepting matter transitions applied accepting formal definition nfa represented formally consisting denotes power set 11 word alphabet automaton 13 accepts word 14 sequence 15 exists conditions condition machine starts start 21 condition character string 14 machine transition transition function condition machine accepts 14 input 14 machine accepting 14 accepted 13 required sequence accepting sufficient impossible 21 14 automaton string set strings 13 accepts language recognized 13 language denoted 33 define 33 terms 35 41 note single initial nfas defined set initial easy construction translates nfa multiple initial nfa single initial convenient notation introduction formal definition automata theory 13 nfa binary alphabet determines input formal notation 43 transition function defined transition table note 45 13 language 13 regular language regular expression codice sequences input word word accepted 13 sequence definition matter sequences fail contrast word 13 reach accepting 50 reading final symbol ε transition equivalence dfa deterministic finite automaton dfa special nfa alphabet transition function formal language recognized dfa recognized nfa conversely nfa dfa recognizes formal language dfa constructed powerset construction result nfas additional flexibility unable recognize languages recognized dfa practice converting easier construct nfas efficiently executable dfas nfa dfa construction nfas nfa ε moves finite automaton ε moves nfa ε generalization nfa automaton replaces transition function string ε input transitions consuming input symbol called ε transitions labeled greek letter ε ε transitions provide convenient modeling systems current precisely modeling current processing input string add ε transition automaton simultaneously formal definition nfa ε represented formally consisting denotes power set ε denotes string ε closure set 60 denote set 50 ε transitions transition function 64 sequence 65 ε closure 50 ε closure defined set ε closure set nfa defined set ε transitions formally accepting 11 word alphabet automaton 13 accepts word 14 sequence 15 exists conditions condition machine starts start 21 ε transitions condition reading 86 machine takes transition takes ε transitions condition machine accepts 14 input 14 machine accepting automaton string set strings 13 accepts language recognized 13 language denoted 33 13 nfa ε binary alphabet determines input 1s note occurrences occurrences formal notation 99 transition relation defined transition table 13 viewed union dfas language 13 regular language regular expression 01 01 define 13 ε moves 13 defined ε moves equivalence nfa nfa ε equivalent nfa note nfa special nfa ε remains nfa ε exists equivalent nfa nfa ε nfa equivalent 60 nfa ε equivalent nfa nfa equivalent dfa nfa ε equivalent dfa closure properties nfas closed binary nfas recognize applying operation nfa languages nfas closed operations nfas equivalent finite automaton ε moves nfa ε proved closure properties nfa ε closure properties nfas recognize regular languages nfas constructed regular expression thompson construction algorithm properties machine starts initial reads string symbols alphabet automaton transition function determine current symbol read string nfa depends current input event arbitrary subsequent input events subsequent events occur determine machine automaton finished reading accepting nfa accept string string set strings accepted nfa language nfa accepts language regular language nfa deterministic finite automaton dfa accepts language convert existing nfa dfa purpose implementing simpler machine performed powerset construction lead exponential rise formal proof powerset construction powerset construction article implementation implement nfa application nfa nfas dfas equivalent language recognized nfa recognized dfa vice versa equivalence constructing nfa recognize language easier constructing dfa language nfas reduce complexity mathematical required establish properties theory computation easier prove closure properties regular languages nfas dfas  
655694	computer	bit execute technology cpus memory storage processor instructions code storage data feature harvard architecture processors bit increasingly conventional von neumann architecture processors security reasons operating support bit mark memory executable processor execute code memory technique executable space protection prevent types software computers code program data storage running code class attacks buffer attack intel markets feature bit execute advanced micro devices amd marketing term enhanced protection arm architecture refers feature introduced execute term bit technologies processors architecture support x86 x86 processors included capability implemented segment level operating systems x86 processors implement flat memory model capability executable flag table entry descriptor processors capability operating systems flat memory model amd execute bit table entry architecture providing mechanism control execution segment intel implemented feature ia 64 2001 bring popular x86 processor families pentium x86 architecture implemented amd bit processors 64 amd decision include functionality instruction set intel implemented bit feature x86 processors pentium processors based iterations core bit refers bit bit 64 bit entry table bit set code executed set code executed assumed data mode 64 bit mode legacy physical address extension table formats x86 original 32 bit table format table entries format lack bit enable execution arm table entry format introduced includes execute bit 64 block 32 descriptor block stage translations execute bits privileged modes block stage translations single execute bit bits feature 32 short descriptor translation table level execute bits privileged mode level single execute bit alpha fourth edition alpha architecture manual dec hp alpha fault execute bit table entries unix alpha linux sparc sparc reference mmu sun sparc version permission values read read write read execute read write execute table entries sparc processors sparc reference mmu sparc version mmu provide required provide combination read write execute translation table entry translation storage buffer oracle sparc architecture 2011 draft separate executable writable bits powerpc power isa table entries ibm powerpc tables execute bit table entries tree tables power isa separate permission bits read write execute access risc translation buffer tlb entries table entries risc risc support read read write read execute read write execute tlb entries support read read write read execute read write execute architecture edition architecture principles operation architecture processors support instruction execution protection facility adds bit table entries controls instructions region segment executed  
669369	computer	embedded component based operating platform power wireless devices wireless sensor networks computing personal networks building automation smart written programming language set tasks processes collaboration university california berkeley intel technology released source software bsd license grown international consortium alliance space implemented implementation applications written programming language language optimized memory limits sensor networks tools form java script libraries tools compiler written programs built software components hardware components connected interfaces interfaces components common packet communication routing sensing storage stack input output operations enable native compiler optimize boundaries features link called events enables maintain stack forces programmers write complex logic stitching event support larger computations tasks procedure interrupt component post task os schedule tasks simple model typically sufficient applications difficulty cpu heavy applications led developing thread library os named code linked program code compiled binary custom gnu utilities complete development platform history project berkeley darpa program grown involve thousands academic commercial developers users worldwide list reverse integrated development environments 2010 integrated development environments plug eclipse  
685151	computer	explicitly parallel instruction computing term coined 1997 alliance computing paradigm researchers 1980s paradigm called independence architectures basis intel hp development intel architecture hp term architecture microprocessors execute software instructions parallel compiler complex die circuitry control parallel instruction execution intended simple performance scaling clock frequencies vliw 1989 researchers hp recognized reduced instruction set risc architectures reaching limit instruction cycle investigation architecture named basis vliw multiple operations encoded instruction processed multiple execution units goal complexity instruction scheduling cpu hardware software compiler instruction scheduling trace feedback complex scheduling circuitry cpu space power functions including additional execution resources equally goal exploit instruction level parallelism ilp compiler exploit additional opportunities parallel execution vliw original forms short mainstream architecture evolved vliw architecture concepts superscalar architecture moving vliw architectures add features architecture includes bag architectural concepts increase ilp architecture register files tool software pipelining avoids manually registers development architectures tied development architecture  
689427	computer	latent semantic analysis technique natural language processing semantics analyzing relationships set documents terms producing set concepts documents terms assumes close meaning occur pieces hypothesis matrix word counts rows represent unique columns represent constructed piece mathematical technique called singular decomposition svd reduce rows similarity structure columns compared angle vectors dot product vectors formed rows values close represent values close represent retrieval technique latent semantic structure patented 1988 patent george richard thomas context application retrieval called latent semantic indexing lsi overview occurrence matrix term document matrix describes occurrences terms documents sparse matrix rows correspond terms columns correspond documents typical weighting elements matrix term document frequency weight element matrix proportional times terms document rare terms reflect relative matrix common standard semantic models explicitly expressed matrix mathematical properties matrices rank construction occurrence matrix rank approximation term document matrix reasons consequence rank dimensions combined depend term identifying rank expected merge dimensions terms meanings components direction components share meaning conversely components directions tend simply worst components directions intended sense derivation matrix element describes occurrence term document frequency row matrix vector term relation document column matrix vector document relation term dot product term vectors correlation terms set documents matrix product dot products element 11 equal element 12 dot product 14 matrix 15 dot products document vectors correlation terms 16 theory linear algebra exists decomposition 18 19 orthogonal matrices 20 matrix called singular decomposition svd matrix products term document 23 24 18 eigenvectors 19 eigenvectors 15 products entries 23 equally entries 30 decomposition values 32 called singular values 33 34 left singular vectors 18 36 37 row row vector called 38 40 41 column 42 eigenvectors depend eigenvectors select 43 largest singular values singular vectors 18 19 rank 43 approximation error norm approximation minimal error treat term document vectors semantic space row term vector 48 43 entries mapping dimensional space dimensions dimensions concepts dimensional approximation dimensional space document vector 50 approximation dimensional space write approximation translate query dimensional space transformation documents note inverse matrix matrix query vector translation 64 compare document vectors dimensional space pseudo term vectors applications dimensional space typically fundamental natural language processing commercial applications assist performing prior art searches patents applications human memory latent semantic analysis study human memory recall memory search positive correlation semantic similarity measured probability recall tasks study lists random common situations inter response time referred semantic participants studied items items desired item studied list prior list called compete items current list recall model termed word association spaces memory studies association data series experiments includes measures word 72 000 distinct word pairs implementation svd typically computed matrix methods methods computed greatly reduced resources neural network approach require rank matrix held memory fast incremental memory matrix svd algorithm developed matlab python implementations fast algorithms 2005 stochastic approximation brand algorithm 2003 exact solution progress reduce computational complexity svd instance parallel algorithm perform parallel decomposition speed svd computation cost providing comparable prediction quality limitations include alternative methods semantic semantic documents mapped memory addresses neural network documents located nearby addresses deep neural network essentially builds graphical model word count vectors set documents documents query document simply accessing addresses bits address query document efficiency hash coding approximate matching faster locality sensitive fastest current method latent semantic indexing latent semantic indexing lsi indexing retrieval method mathematical technique called singular decomposition svd identify patterns relationships terms concepts contained unstructured collection lsi based principle contexts tend meanings key feature lsi ability extract conceptual content body terms occur contexts lsi application correspondence analysis statistical technique developed paul 1970s table built word counts documents called indexing ability terms collection applied late 1980s method called latent semantic analysis underlying latent semantic structure usage body extract meaning response user queries commonly referred concept searches queries concept searches set documents lsi return meaning search criteria share specific word search criteria benefits lsi lsi constraints boolean queries multiple meanings vocabulary authors documents users retrieval systems result boolean queries return relevant lsi perform automated document experiments demonstrated lsi humans process document assignment documents categories based similarity conceptual content categories lsi documents establish conceptual basis category processing concepts contained documents compared concepts contained items category categories assigned documents based similarities concepts concepts contained documents dynamic clustering based conceptual content documents accomplished lsi clustering documents based conceptual similarity documents establish conceptual basis cluster dealing unknown collection unstructured strictly mathematical approach lsi inherently independent language enables lsi semantic content written language requiring structures dictionaries lsi perform cross linguistic concept searching based queries language english returned composed language multiple languages lsi restricted process arbitrary character strings object expressed represented lsi vector space tests lsi effectively classify based conceptual modeling biological contained titles lsi automatically changing terminology tolerant noise errors characters applications derived optical character recognition ocr speech conversion lsi deals effectively sparse data sentence form lsi effective lists form notes email based content collection multiple terms lsi identify patterns relationships terms concepts contained lsi proven solution conceptual matching technique capture key relationship including goal oriented mathematics lsi lsi common linear algebra techniques learn conceptual collection process involves constructing weighted term document matrix performing singular decomposition matrix matrix identify concepts contained term document matrix lsi constructing term document matrix 68 identify occurrences unique terms collection 70 documents term document matrix term represented row document represented column matrix cell initially representing times term appears document 72 matrix sparse term document matrix constructed local global weighting functions applied condition data weighting functions transform cell 68 product local term weight 75 describes relative frequency term document global weight describes relative frequency term entire collection documents common local weighting functions defined table common global weighting functions defined table empirical studies lsi report log entropy weighting functions practice data sets entry 68 computed rank reduced singular decomposition rank reduced singular decomposition performed matrix determine patterns relationships terms concepts contained svd forms foundation lsi computes term document vector spaces single term frequency matrix 68 term concept vector matrix singular values matrix concept document vector matrix satisfy relations supplied weighted matrix term frequencies collection unique terms documents computed matrix term vectors rank measure unique dimensions computed matrix decreasing singular values computed matrix document vectors svd reduce rank keeping largest entries singular matrix typically 100 300 dimensions effectively reduces term document vector matrix sizes svd operation reduction semantic reducing noise artifacts original space reduced set matrices denoted modified efficient lsi algorithms compute singular values term document vectors opposed computing svd note rank reduction essentially principal component analysis pca matrix pca pca matrix lsi vector spaces computed matrices define term document vector spaces computed singular values conceptual derived document collection similarity terms documents spaces factor close spaces typically computed function angle vectors steps locate vectors representing queries documents document space existing lsi simple transformation equation equivalent equation vector query document created computing column column column computed originally derived global term weights applying local weighting function terms query document computing vectors adding documents terms svd phase original terms impact global weights learned derived original collection computed vectors relevant similarity document vectors process document vector spaces lsi documents manner called folding folding process account semantic content adding substantial documents provide queries terms concepts represented lsi terms concepts set documents included lsi term document matrix svd incremental update method additional lsi ability semantic basis essential modern retrieval systems result lsi expanded earlier challenges scalability performance overcome lsi variety retrieval processing applications primary application concept searching automated document lsi lsi increasingly electronic document discovery ability cluster search collections unstructured conceptual basis essential concept based searching lsi applied process leading providers 2003 challenges lsi challenges lsi focused scalability performance lsi requires computational performance memory comparison retrieval techniques implementation modern speed processors availability inexpensive memory overcome real applications involving 30 documents processed matrix svd computations common lsi applications scalable documents online training implementation lsi contained source software package challenge lsi difficulty determining optimal dimensions performing svd rule dimensions broader concepts contained collection dimensions enable specific relevant concepts actual dimensions limited documents collection demonstrated 300 dimensions provide sized document collections hundreds thousands documents 400 dimensions larger document collections millions documents studies 50 1000 dimensions suitable depending size nature document collection checking variance data computing svd determine optimal dimensions variance contained data viewed singular values plot lsi select dimensionality curve cut dimensions argue variance variance data proper dimensionality percent mentioned variance data select optimal dimensionality svd external links implementations cross domain applications retrieval natural language processing nlp cognitive science computational linguistics implemented support kinds applications  
692634	computer	komatsu japanese corporation manufactures construction mining military equipment industrial equipment press machines generators headquarters tokyo japan corporation named city komatsu company founded worldwide komatsu consists komatsu companies subsidiaries 38 companies method komatsu largest manufacturer construction equipment mining equipment japan china komatsu larger share manufacturing operations japan asia europe japanese tree named komatsu city history komatsu started mining industry subsidiary industrial tools company komatsu eventually sell public 13 komatsu komatsu produced prototype komatsu produced japanese military war president komatsu military equipment 1949 production engine growth company aided strong demand japan post war reconstruction 1950s august corporate headquarters moved tokyo 1957 company advanced models komatsu engines 1964 president komatsu products image japanese products july 1967 entered market largest market company translating english game board game opponent capture expansion major focus 1970s komatsu america corporation established february 1970 united january 1971 komatsu singapore established singapore september 1974 founding komatsu joint venture truck mexico april 1975 founding komatsu brazil company produced komatsu komatsu production construction equipment komatsu australia australia established 1979 1980s komatsu international united joint venture produce compact called 1982 komatsu indonesia founded production 1983 indonesia divisions united established manufacturing 1985 komatsu america manufacturing komatsu america industries komatsu industries europe gmbh set 1986 germany komatsu industries established komatsu mining equipment 1988 50 50 ownership september 1988 august 1994 komatsu bought share komatsu mining products komatsu mining systems 1997 prevent brand confusion corporate product komatsu dates 1957 westinghouse introduced range rear trucks westinghouse equipment simply equipment 1967 industry term eventually applied type rear truck detailed history development australia 1989 komatsu bought share 2002 komatsu gmbh 100 subsidiary global company 1990s komatsu joint venture europe komatsu designed truck built license european market 2008 korea italy invested 1991 komatsu increased company renamed 1985 komatsu industries renamed 2000 komatsu utility europe komatsu assumed 100 ownership komatsu range mining machines basically 200 built brands model 1993 joint formed komatsu engine corporation manufacture engines japan komatsu engine corporation manufacture komatsu engines united joint venture set 1997 manufacture industrial engines japan additional expansion asia accomplished 1990s komatsu vietnam vietnam 1995 komatsu construction machinery renamed komatsu construction machinery corporation november 2000 china 1995 komatsu construction machinery 1995 komatsu thailand komatsu shanghai 1996 shanghai china industrial power alliance japan joint venture 1998 komatsu limited india 1998 shares sold 2013 komatsu international brazil 1998 2000s komatsu germany sales manufacturing trucks 2001 komatsu established brand generation construction equipment worldwide distribution 2002 komatsu italy established 2004 komatsu forest established purchase forest manufacturer forest machinery 2004 founded komatsu machine china renamed komatsu utility machine 2007 manufacture mini equipment founding komatsu power generation systems shanghai manufacture power generators komatsu manufacturing china founded 2004 china produce komatsu moved russia 2008 komatsu manufacturing founded production 2010  
705833	computer	japanese manufacturer motion controllers motor drives switches industrial robots robots heavy industrial robots welding assembly cutting material handling automation company founded head office located applied trademark term 1969 approved 1972 head office designed american raymond 1954 company listed tokyo stock exchange stock subsidiaries business 29 countries production bases 12 countries including japan subsidiaries 24 companies  
727420	computer	digital electronics computing hardware registers circuits typically composed characteristics memory distinguishing characteristic special hardware functions ordinary memory depending view hardware registers memory additional hardware functions memory circuits hardware registers store data hardware registers interface software peripherals software writes send device reads device hardware devices include registers visible software internal depending complexity modern hardware devices registers standard integrated circuits typically document registers electronic component functionality typical hardware registers include reading hardware register peripheral units hardware cpu involves accessing memory mapped address port mapped address load store instruction issued processor hardware registers addressed bits word read written register commercial design tools simplify memory mapped register specification code generation hardware firmware hardware testing documentation registers read write read write write registers suitable registers action written store data read set peripheral register option designs gates logic circuit signal routing register data atari games console chip write registers debugging difficult lead read modify write read write registers preferred pcs write registers difficult advanced configuration power interface determine device entering mode mode register hardware registers central processing unit cpu called processor registers registers interface normal hardware registers storing data action time written rare read registers measured bits hold bit register 32 bit register designers implement registers wide variety including addition programmer visible registers read written software chips internal registers machines pipelining registered memory standards ip xml define standard xml formats memory mapped registers  
728216	computer	memory barrier memory instruction type barrier instruction central processing unit cpu compiler constraint memory operations issued barrier instruction typically operations issued prior barrier guaranteed performed operations issued barrier memory barriers modern cpus employ performance result execution memory operations loads stores single thread execution behaviour concurrent programs device drivers carefully controlled exact nature constraint hardware dependent defined architecture memory model architectures provide multiple barriers constraints memory barriers typically implementing level machine code operates memory shared multiple devices code includes synchronization primitives lock data structures multiprocessor systems device drivers communicate hardware program runs single cpu machine hardware performs ensure program executes memory operations performed programmer program memory barriers memory shared multiple devices cpus multiprocessor memory mapped peripherals access affect program behavior cpu memory cpu sequence differs program processor program execution affect program behavior initially memory locations codice codice hold codice program running processor loops codice codice program running processor stores codice codice stores codice codice pseudo code program fragments steps program correspond individual processor instructions processor processor expect print statement print 42 processor store operations executed codice updated codice print statement loop processor load operations executed codice read codice print statement print programs situations acceptable memory barrier inserted processor assignment codice ensure codice visible processors prior change codice inserted processor access codice ensure codice read prior change codice driver performs sequence processor store operations executed hardware module data ready memory trivial actual practice double programming memory programs synchronization primitives level programming environment java framework application programming interface api posix threads windows api synchronization primitives access resources parallel threads execution primitives implemented memory barriers required provide expected memory semantics environments explicit memory barriers api programming environment principle level memory model defines memory semantics programmers memory barriers level environments understand memory semantics extent understanding easy achieve memory semantics consistently documented programming language semantics defined level abstraction machine language programming environment memory model defined level abstraction hardware memory model understand distinction simple mapping level hardware memory barrier semantics level memory semantics programming environment result platform implementation posix threads employ stronger barriers required specification programs advantage memory implemented portable execution compiler memory barrier instructions address effects hardware level compilers instructions program optimization process effects parallel program behavior separate measures compiler data shared multiple threads execution note measures data protected synchronization primitives discussed prior volatile intended programs access memory mapped memory mapped requires reads writes source code happen exact reads writes compiler break communication program device accessed memory mapped compiler reads writes volatile memory locations read writes relative actions volatile location variable volatile guarantee memory barrier cache consistency volatile sufficient variable inter thread communication systems processors standards prior 11 address multiple threads multiple processors volatile depends compiler hardware volatile guarantees volatile reads volatile writes happen exact source code compiler generate code cpu execution volatile read write regard volatile reads writes limiting inter thread flag compiler specific compilers gcc operations assembly code volatile memory tags volatile memory examples compiler memory barrier guaranteed volatile reads writes processors cores caching cache protocol memory meaning volatile variables inter thread  
743971	computer	content based image retrieval cbir query image content content based visual retrieval application vision techniques image retrieval searching digital images databases survey scientific overview cbir field content based image retrieval opposed traditional concept based approaches concept based image indexing content based search contents image tags descriptions image term content context refer colors shapes textures derived image cbir desirable searches rely purely dependent annotation quality humans manually images entering database time consuming capture desired image evaluation effectiveness image search defined regard cbir systems challenges defining success limit scope queries set criteria set reliable content history term content based image retrieval originated 1992 experiments automatic retrieval images database based colors shapes term process desired images collection basis image features techniques tools algorithms fields statistics pattern recognition signal processing vision query image content earliest commercial cbir developed ibm called query image content network graph based approaches simple alternative existing methods storing multiple images single entity term binary object ability search content description ibm technical progress cbir grown limitations inherent based systems range efficient image retrieval textual images easily existing technology requires humans manually image database databases images generated automatically surveillance cameras images descriptions systems based images semantic classes cat animal avoid require effort user images classified animal standards developed images scaling issues initial cbir systems developed search databases based image color texture shape properties systems developed user friendly interfaces apparent efforts cbir field started include human centered design meet user performing search typically inclusion query methods semantics queries involve user feedback systems include machine learning systems understand user levels techniques cbir systems developed images basis pixel content remains query techniques implementations cbir types user queries query query query technique involves providing cbir image base search underlying search algorithms vary depending application result images share common elements options providing images include query technique difficulties images semantic retrieval semantic retrieval starts user request pictures type task difficult computers perform camera pose cbir systems level features texture color shape features combination interfaces easier input criteria databases trained match features shape matching image retrieval requires human feedback identify level concepts relevance feedback human interaction combining cbir search techniques wide range potential users intent difficult task aspect cbir successful relies ability understand user intent cbir systems relevance feedback user search images relevant relevant neutral search query search examples type interface developed iterative machine learning machine learning application iterative techniques common cbir query methods query methods include images customized hierarchical categories image region entire image multiple images visual direct specification image features queries combining touch voice content comparison image distance measures common method comparing images content based image retrieval typically image image database image distance measure image distance measure similarity images dimensions color texture shape distance exact match query respect dimensions considered intuitively degrees similarities images search based distance image measures image distance similarity models developed color computing distance measures based color similarity achieved computing color histogram image proportion pixels image holding specific values images based colors techniques completed regard image size orientation attempted segment color proportion region spatial relationship color regions texture texture measures visual patterns images spatially defined textures represented sets depending textures detected image sets define texture image texture located texture difficult concept represent identification specific textures image achieved modeling texture dimensional gray level variation relative brightness pairs pixels computed degree contrast estimated identifying patterns pixel variation classes textures rough methods textures include shape shape refer shape image shape region sought shapes determined applying segmentation edge detection image methods shape filters identify shapes image shape invariant translation rotation scale shape include image retrieval evaluation measures image retrieval defined terms precision recall methods considered image retrieval cbir simultaneously techniques image retrieved cbir techniques simultaneously integrating pixel cluster indexing histogram discrete wavelet transform methods applications potential cbir include commercial systems developed include experimental systems include  
763951	computer	robotic mapping navigation simultaneous localization mapping slam computational constructing updating map unknown environment simultaneously keeping track agent location initially appears algorithms solving time environments popular approximate solution methods include particle filter extended filter slam algorithms tailored resources aimed operational published approaches employed driving cars unmanned vehicles autonomous vehicles domestic robots human body definition series sensor observations discrete time steps slam compute estimate agent location map environment probabilistic objective compute applying bayes rule framework sequentially updating location map transition function map updated sequentially inference solutions variables local solution updates form em algorithm algorithms statistical techniques approximate equations include filters particle filters monte carlo methods provide estimation posterior probability function pose robot parameters map set membership techniques based interval constraint propagation provide set pose robot set approximation map bundle adjustment maximum estimation map popular technique slam image data jointly estimates positions increasing map slam systems google replacing previous augmented reality project tango map compute explanation robot map sensor data estimate entire posterior probability slam algorithms remain active driven requirements assumptions types maps sensors models detailed slam systems viewed combinations choices aspects mapping maps method environment representation capture connectivity topology environment creating accurate map slam approaches global consistency metric slam algorithms contrast grid maps arrays typically square cells represent cells typically cells assumed independent simplify computation assumption set map cells consistent observation location modern driving cars simplify mapping extensive highly detailed map data collected advance include map level locations individual white segments road location tagged visual data google maps essentially systems simplify slam simpler task allowing moving objects cars people updated map runtime sensing slam types sensors limits sensor types major driver algorithms statistical independence requirement metric bias noise measures types sensors rise slam algorithms assumptions sensors extreme laser scans visual features provide details rendering slam inference shapes easily aligned step image registration extreme sensors extremely sparse close agent require strong prior models purely slam practical slam tasks fall visual sensor models divide based raw data approaches objects location estimated access radio raw data approaches assumption identified model 12 function location optical sensors dimensional single beam 2d laser 3d definition 3d flash 2d 3d sensors 2d cameras 2005 visual slam visual camera sensors increasing cameras mobile devices visual sensors extraction forms slam include slam sensing local touch radar slam slam sensing nearby access approaches apply optical wireless ranging multi multi conjunction slam wireless measures slam human mounted measurement unit main sensor relies avoid automatically build floor plans applications slam removed precision differential gps sensors slam perspective viewed location sensors sharp completely inference gps sensors performance times military conflict robotics applications modeling term represents model include action commands robot model robot included improve estimates sensing conditions inherent noise dynamic model contributions sensors partial error models finally sharp virtual map location robot cloud probability mapping final model map abstract term model 2d robots mixture rotation commands implemented additional motor noise distribution formed independent noise linear directions gaussian approximated gaussian alternative approach term read data robot wheels data treated sensors multiple objects data association computational complexity resolved identification multiple advance feature based slam literature involved probabilistic foundation simultaneous mapping slam terms multi object bayesian filtering random finite sets provide superior performance leading feature based slam algorithms measurement false rates detection rates data association popular techniques handling multiple objects include joint probabilistic data association filter probability hypothesis density filter phd moving objects static environments vehicles continue challenges slam model moving objects agent loop closure loop closure recognizing location updating model algorithm errors assign location typical loop closure methods apply algorithm compute type sensor measure similarity set location match detected storing comparing bag vectors features location exploration active slam studies combined slam build map efficiently active exploration sparse sensing slam active slam performed entropy map actions multi agent slam multiple robots explore biological neuroscience appears involved slam computations rise cells formed basis inspired slam systems complexity researchers experts artificial intelligence solve slam practical settings required deal computational power sense process data map 2008 review topic fundamental challenges robotics current approaches perform consistent maps increase computational cost scenario larger complete 3d slam solutions highly computationally intensive complex real time particle filters mapping strategies hierarchical combination metric representations implementations slam algorithms implemented source robot operating ros libraries cloud library 3d maps visual features opencv history slam smith representation estimation spatial uncertainty 1986 pioneering field conducted 1990s solutions slam exist infinite data limit finding search algorithms computationally approximate solution driving cars led thrun darpa grand challenge darpa challenge 2000s included slam systems bringing slam worldwide attention mass market slam implementations consumer robot vacuum driving cars google received licenses drive public roads  
787776	computer	dimensionality refers phenomena analyzing organizing data dimensional spaces hundreds thousands dimensions occur dimensional settings dimensional physical space experience expression coined richard dynamic optimization phenomena occur domains numerical analysis sampling machine learning data mining databases common theme dimensionality increases volume space increases fast data sparse sparsity method requires statistical sound reliable result data support result grows exponentially dimensionality organizing searching data relies detecting objects form properties dimensional data objects sparse common data organization strategies efficient domains variable discrete values range values divided finite variables huge combinations values considered simplest binary variables combinations exponential dimensionality additional dimension effort combinations sampling exponential increase volume adding extra dimensions mathematical space 100 sample sample unit interval dimensional 01 distance equivalent sampling dimensional unit lattice 01 adjacent require sample distance dimensional appears factor larger dimensional unit interval sampling distance 01 dimensional appears larger unit interval combination distance function explained optimization solving dynamic optimization numerical objective function computed combination values dimension variable machine learning machine learning involve learning nature finite data samples dimensional feature space feature range values typically training data required ensure samples combination values typical rule thumb training examples dimension representation fixed training samples predictive power classifier increases dimensions features increased decreases phenomenon phenomena distance functions measure euclidean distance defined coordinates difference distances pairs samples illustrate dimensional euclidean space compare proportion radius dimension edges volume function volume dimension space increases volume relative comparing dimension infinity distance center corners 13 increases bound fixed sense dimensional space centre dimensional unit consist corners middle helps understand squared distribution central squared distribution random interval distribution squared random law distribution narrow band times standard deviation squared original derivation squared distribution volume surface radius development phenomenon fixed distribution product distribution fixed minimum maximum distance random reference list random data compared minimum distance cited distance functions losing nearest neighbor criterion feature comparison algorithms dimensions hold artificial scenario dimensional distributions independent distributed attributes data easier provide distance contrast signal noise ratio play role feature selection nearest neighbor search nearest neighbor search dimensional space candidates difference coordinate bound distance based dimensions observed dimensions result difficulties relevant additional dimensions increase contrast addition ranking remains close neighbors noise dimensions reduce contrast manner time series analysis data inherently dimensional distance functions signal noise ratio nearest neighbor classification dimensionality distance functions concerns nearest neighbor nn graphs constructed data set distance function dimension increases distribution nn peak data nn lists data average phenomenon considerable impact techniques classification including nn classifier semi supervised learning clustering retrieval anomaly detection survey identified searching dimensional data analyzed specialized methods remain questions  
794679	computer	science suffix tree called tree earlier form position tree compressed trie positions values suffix trees fast implementations string operations construction tree string takes time space linear constructed operations performed instance allowed matches regular expression pattern suffix trees provide linear time solutions common cost storing string suffix tree typically requires space storing string history concept introduced donald knuth subsequently characterized algorithm 1973 construction greatly simplified online construction suffix trees algorithm running time matched fastest algorithms algorithms linear time constant size alphabet worst running time strings drawn alphabet integers polynomial range algorithm basis algorithms constructing suffix trees suffix arrays external memory compressed definition suffix tree string defined tree tree exist strings terminal symbol string denoted codice ensures suffix prefix nodes internal root nodes branching nodes       nodes total leaves internal root nodes root suffix links key feature linear time construction algorithms algorithms based algorithm suffix links complete suffix tree internal root nodes suffix link internal node path root node string 11 12 single character 13 string suffix link internal node representing 13 suffix link node codice node codice figure suffix links algorithms running tree generalized suffix tree generalized suffix tree suffix tree set single word represents set word symbol word functionality suffix tree string built 17 time letters alphabet integers polynomial range true constant sized larger running time dominated sorting letters bring range size 18 takes time costs assumption alphabet constant assume suffix tree built string suffix tree built set strings 22 total 23 suffix tree constant time lowest common retrieval nodes 17 time applications suffix trees solve string occur editing search computational biology application primary applications include suffix trees bioinformatics applications searching patterns dna protein sequences viewed strings characters ability search efficiently considered strength suffix trees data compression repeated data sorting stage transform variants compression schemes suffix trees suffix tree suffix tree clustering data clustering algorithm search engines implementation node edge represented 58 space entire tree represented 17 space total strings edges tree 75 edge stored position total space usage 17 worst space usage suffix tree word nodes choice suffix tree implementation child relationships nodes common linked lists called lists node pointer child node child list implementations efficient running time properties hash maps arrays array doubling balanced search trees size alphabet costs cost costs perfect edge node suffix tree expensive consuming 20 times memory size source implementations suffix array reduces requirement factor array including values built 32 bit address space bit characters factor depends properties reach usage byte wide characters symbol unix systems 32 bit systems researchers continued indexing structures parallel construction parallel algorithms speed suffix tree construction proposed practical parallel algorithm suffix tree construction 18 sequential time 80 developed algorithm parallel scalability shared memory machines human minutes 40 core machine external construction linear memory usage suffix tree actual size sequence collection construction require external memory approaches theoretical constructing suffix trees algorithm theoretically optimal complexity equal sorting algorithm implementation hand practical based suffix scale hours art methods scale entire human – – disk based suffix tree size tens methods handle efficiently collections sequences performs handle collections sequences hours methods efficiently build suffix trees fit main memory input method scales fit main memory era parallel suffix tree construction method faster era entire human 19 minutes core desktop ram simple linux cluster 16 nodes ram node era entire human minutes  
797527	computer	filtering generalized technique signal image processing involving nonlinear mapping domain linear filter techniques applied mapping original domain concept developed 1960s thomas alan mit independently study time series image enhancement filter image enhancement simultaneously brightness image increases contrast filtering remove noise illumination separable approximate locations frequency domain located illumination combine components additive image intensity components image separated linearly frequency domain illumination variations noise reduced filtering log domain illumination image frequency components increased frequency components frequency components assumed represent scene light reflected object scene frequency components assumed represent illumination scene pass filtering frequencies frequencies log intensity domain operation filtering improving appearance grayscale image simultaneous intensity range compression illumination contrast enhancement reflection image illumination transform equation frequency domain apply pass filter difficult calculation applying fourier transformation equation product equation log solving applying fourier applying pass filter image illumination image frequency components increased frequency components decrease pass filtered image frequency frequency domain spatial domain inverse fourier transform exponential function eliminate log enhanced figures applying filter pass filter pass filter figures produced matlab figures filtering uniform illumination image image original image hand apply pass filter filtered image edges images result pass filter original image audio speech analysis filtering log spectral domain separate filter effects effects computation sound representation enhancements log spectral domain improve sound surface signals filtering stochastic trains signal power spectrum signal motor unit action shape amplitude maintained estimate parameters time domain model neural decoding individual neurons networks encode subject numerous studies central rate frequency encoding relative timing time encoding time encoding consists random inter isi stochastic train output neuron filtering isi variations power spectrum train output neuron activity isi variations caused input signal unknown frequency amplitude sufficient absence noise frequency signal filtering based procedures references nonlinear filtering signals proceedings ieee volume 56 august 1968  
798370	computer	cooling required remove heat produced components components operating temperature limits components temporary permanent failure include integrated circuits central processing units cpus graphics cards hard disk drives components designed generate heat computers operating systems designed reduce power consumption workload heat produced removed attention cooling cooled reduces temperature rise produced heat attention patterns prevent development fans fans reduce temperature hot air cooling techniques liquid cooling modern day processors designed cut reduce voltage clock speed internal temperature processor limit cooling designed reduce temperature hot air single component spot cooling components commonly individually cooled include cpu graphics processing unit gpu generators heat integrated circuits cpu gpu main generators heat modern computers heat generation reduced efficient design selection operating parameters voltage frequency ultimately acceptable performance achieved managing heat generation operation temperature components rise heat transferred equal heat produced component thermal reached reliable operation temperature maximum unique component semiconductors temperature component temperature critical cooling changed damage temperatures reduce life permanent damage components heat output components cooling capacity manufacturers additional ensure temperatures remain safe limits thermal sensors integrated cpu motherboard gpu temperatures detected prevent permanent damage completely guarantee term safe operation component reaches temperatures fall safe dynamic frequency scaling technology reduces operating frequency voltage integrated circuit essential features chip reduce heat output cost reduced performance desktop notebook computers controlled bios level commonly manage temperatures smartphones tablets components tightly active cooling additional heat transferred hand user mainframes supercomputers electronic computers larger complex cooling active components critical factor reliable operation vacuum tube computers rely natural forced air cooling solid devices operating temperatures starting 1965 ibm manufacturers mainframe computers sponsored intensive physics cooling integrated circuits air liquid cooling systems investigated methods natural forced direct air direct liquid forced films flow liquid jet mathematical analysis predict temperature components cooling geometry ibm developed generations thermal module water cooled plate direct thermal contact integrated circuit packages package gas chips heat pins design remove 27 chip 2000 module maintaining chip package temperatures systems family 1980 1984 models 1990 ibm processor allowed single printed circuit board maintaining chip temperature thermal modules water cooling mainframe systems manufactured companies including mitsubishi fujitsu cray supercomputer designed 1976 cooling machine height comparable average power consumption western medium sized car integrated circuits machine fastest time coupled logic speed power consumption compared devices heat removal critical embedded vertical cooling sections machine printed circuit modules machine copper core cooling bar designed maintain integrated circuits final heat water cooled heat cooling arranged base 20 percent machine weight operation cray modules cray effectively cooling machine metal technique mechanical switched liquid cooling method involved chassis cray liquid called implies liquid operation electronic components components operating temperature heat machine water heat performance modern systems greatly improved computations carried power consumption integrated circuits 1980s 1990s supercomputer projects blue gene rely air cooling reduces cost complexity size systems compared liquid cooling air cooling fans fans natural remove heat fans fitted attached cpus gpus hard drives cards expansion slot common fan sizes include 40 60 80 200 250 fans performance personal computers performance fans chassis fans published specifications air flow maximum differential pressure air flow air fan pressure maximum differential pressure pressure fan generate completely series measurements flow pressure graph fan model unique curve curves adjacent parallel series installation fans installed parallel series combination parallel installation fans mounted series installation fan fan fan fan simplify discussion assumed fans model parallel fans provide double air flow additional driving pressure series installation hand double static pressure increase air flow rate adjacent single fan fans parallel maximum pressure water flow rate note air flow square root pressure doubling pressure increase flow 41 square root times assumed pressure factor double flow rate determine flow rate chassis chassis curve measured arbitrary pressure chassis measuring flow chassis requires sophisticated equipment chassis curve represented solid red black lines adjacent curve determined actual flow chassis generated fan configuration chassis curve fan curve slope chassis curve square root function doubling flow rate required times differential pressure adding fan improvement flow configurations plot fan series provide performance parallel installation temperature flow rate equation required chassis simple rule thumb cooling flow requirements effects heat loss chassis flow specific heat density level typical chassis 500 load maximum internal temperature environment difference actual flow chassis air fan dual cooling jet patented air device initial device consists connected current passed component expand contract 150 times edges hot air air device require motor energy typical fans jet air cooling fan size consuming electricity cost passive cooling passive heat sink cooling involves block metal cooling thermal commonly personal cpu holds heat sink chip thermal thermal pad spread block increase surface heat metal air heat component integrated circuit cpu fan cooled heat originally norm desktop computers heat feature copper base copper dust metal heat sink gradually reduces efficiency gas dust material passive heat commonly cpus hot power computers heat sink attached integrated heat essentially flat plate attached cpu layered heat locally heat sink meant heat remove addition cpu passive cooling involves fan noise forces air techniques liquid cooling growing trend increasing heat density gpu entire select components liquid rarely cooling personal computers liquid method cooling power distribution components popular data centers personal computers cooled manner require fans cooled exclusively passive heat exchange hardware heat core correctly electrical normal operation liquid electrical shorts components damage reasons preferred liquid conduct electricity wide variety exist purpose including synthetic single phase engineered phase purpose including motor cooling personal computers cooling based materials common materials computers thermal critical review material compatibility prior oil negative effects based wire thermal transfer heat heat processors graphic cards reported impact cooling components removed operated air phase pose liquid require heat reduction powerful computers features required powerful computers features motherboard cpu typically heat capable pentium motherboard cpu typically computers powered direct current external power supply generate heat replacement ray tube crt displays efficient screen liquid crystal display lcd century reduces power consumption heat component fitted thermal contact passive device thermal capacity surface relative volume metal thermal copper incorporate increase surface heat component transferred larger temperature component component heat carried fan forced fan cooling processors graphics cards amounts electrical energy typical heat generating component manufactured flat surface block metal flat surface construction attached fan component air flat smooth surfaces layer thermal thermal pad thermal component heat removed heat sink extent radiation heat sink thermal contact metal inexpensive fan cooled heat standard desktop computers heat copper base copper thermal characteristics copper heat sink effective unit size relevant regard power consumption components performance computers passive heat commonly cpus power computers power processors equipment operation critical fan noise heat sink integrated heat flat metal plate size cpu package cpu assembly heat locally layer thermal compound surface primary purpose heat heat sink improve efficiency brands upcoming dram memory modules fitted edge module technique video cards passive gpu dust build produced fans air hot component reducing cooling effectiveness removing dust effectiveness cooling 15 efficient ideal cycle compared achieved conventional compression cycle systems reverse systems compression expansion efficiency cooling environments solid nature moving maintenance compact size orientation pure efficiency modern units composed hundreds substantial heat transfer combination commonly active heat power produce temperatures impossible passive cooled liquid cooling heat module typically electric power heat liquid cooling liquid cooling highly effective method removing heat common heat transfer fluid desktop pcs water advantages water cooling air cooling include water specific heat capacity thermal principle typical active liquid cooling computers identical automobile internal engine water water mounted cpu additional components gpu heat typically cooled additionally fan fan cooled elements commonly hardware cooled conduct heat hot element connected active liquid cooling systems passive liquid cooling systems systems fan water theoretically increasing reliability active systems systems efficient heat time transfer heat cooled air liquid cooling suitable performance applications compared air cooling liquid cooling influenced temperature liquid cooling noise level active cooling noisy disadvantages liquid cooling include complexity potential water water damage electronic components contact repair complex reliable notably major field liquid cooled personal computers versions apple power mac ultimately cpu specific water cooling kits easy install air limited cpus liquid cooling gpu cards originally limited mainframe computers liquid cooling practice form manufactured kits form assembled individually increase popularity liquid cooling pre assembled performance desktop computers closed loop systems incorporating pre filled fan simplify installation maintenance water cooling cost cooling effectiveness relative larger complex liquid cooling typically combined air cooling liquid cooling components cpus gpus simpler cheaper air cooling components ibm hot water cooling achieve energy efficiency water heat 2011 effectiveness water cooling series water cooling solutions solutions result simpler install unit units reviewed review sites heat pipe heat pipe tube heat transfer liquid liquid heat pipe tube latent heat liquid returns hot tube action cycle heat effective thermal solid materials computers heat sink cpu attached larger heat sink heat attachment creating heat pipe heat cpu cooled conventional method method expensive space form factor pcs laptops fan noise audio production efficiency method cooling desktop cpus gpus heat addition active fan based cooling remain safe operating temperatures air movement cooling cooling technology development micro technologies employs device called wind fluid basic operating principle wind electrical caused surrounding air developed manner electric field created cpu energy potential molecules air create cpu accelerate neutral air molecules transferred gas neutral air molecules movement gas advantages based lack moving reliability issues operating noise level energy consumption soft cooling soft cooling practice utilizing software advantage cpu power saving technologies minimize energy instructions cpu cpu total speeds cpu improve user experience increase raw processing power prevent cooling term suggests form cooling reducing heat creation practice running cpu component device specifications component power produces heat ability varies manufacturer product production runs product components processors strictly tolerance ensures processor chance performing correctly optimal conditions quality motherboard power supply limit processor function correctly typically lead permanent hardware damage systems cooling reduction heat production allowing noisy fans battery charge life chip integrated conventional cooling techniques cooling component chip package technique exhibit thermal reducing effectiveness heat efficiently removed cooling local hot chip package locations power dissipation typical cpu occur future systems expected form local cooling essential developing power density chips led investigation integrating cooling elements chip techniques micro channel heat jet cooling micro channel heat channels silicon chip cpu channels designed surface heat heat dissipation reported technique heat dissipation increased phase flow cooling applied requires pressure channels heat electronic cooling local chip cooling technique jet cooling technique form jet jet directed surface cpu chip effectively remove heat heat dissipation reported operated pressure comparison micro channel method heat transfer increased phase flow cooling integrating return flow channels hybrid micro channel heat jet cooling phase change cooling phase change cooling extremely effective processor compression phase change unit pc tube leading processor unit type air gas mixture cpu discussed hot pressure heat dissipation device hot gas liquid typically liquid fed expansion device drop pressure fluid reach pressure desired temperature expansion device simple tube thermal expansion liquid changing phase heat processor extra energy environment accommodate change latent heat produce temperatures reaching liquid flow cooling cpu pressure gas cycle processor cooled temperatures ranging depending load processor gas mixture type issues cost weight size maintenance cost electricity noise specialized tower concerned proper surfaces water sensitive electronics cooling developed loop adds degree flexibility design engineer heat effectively heat source temperature tuned pressure pressure fluid temperatures fans effective dissipation heat temperature environment systems generation fluid cooling paradigm times efficient single phase water heat transport medium failure electric type cooling extreme components units expensive compared average desktop generate noise essentially choice air cooling main allowing flexibility noise reduction based chosen liquid liquid water valuable extreme short sessions typical installation liquid cooling copper pipe mounted processor graphics card heavily liquid pipe temperatures devices ranging cut heat attached custom copper hold prevent temperature personal computers method cooling contexts runs record setting attempts cpu short period time temperature caused internal temperature liquid air liquid materials liquid cooling processor continuous usage permanent damage handled harm user liquid liquid liquid cooling liquid temperatures ranging measured liquid expensive difficult store liquid extremely temperatures integrated circuits functioning silicon based semiconductors optimization cooling improved techniques involve additional effort techniques cpu gpu frequencies manufacturer increases heat generation installation performance stock cooling considered simply efficient expensive fan heat sink combinations cooling liquid cooling heat pipe phase change cooling positive impact reducing temperatures called thermal interface material intel flat surfaces contact optimal cooling perfect absence air mass produced equipment thermal compound air metal improve thermal contact cooling air compound sufficient temperature reduction superior main minimal thermal compound required surfaces thermal compound typically 400 metal air compound ranges articles 200 air heat fitted manufacturers effective properly applied thermal compound simpler apply fixed users thermal contact replaced layer compound techniques discussed thermal compound universal amounts heat heat sink mass produced cpu heat bases flat smooth surfaces contact air reduce heat easily thermal compound surfaces flat achieved process reduce cpu temperature typically cables pcs flat cables connect storage drives ide flat cables greatly causing replace cables wires tightly reduce surface theoretically parallel cable serve reduce crosstalk signal carrying signals nearby empirical evidence cables reducing performance cable short crosstalk cable protected considerable frequent occurrence network cables cables cable tied chassis cables increase computers serial cable cooling medium air effective cooling cooling air temperature improved guidelines fans improve internally pc internal temperature relation conditions larger fans improves efficiency heat noise generated fans operation agreement effectiveness fan configurations systematic testing pc fan fan rear suitable configuration amd cooling guidelines notes cooling fan essential extreme situations testing fans hot air introducing air fans panels normal air flow varies configuration types desktops desktop computers typically fans cooling desktop power built fan power draw air operating temperatures decrease energy efficiency reliability ability provide supply power internal components reason modern exceptions ultra budget feature power supply mount dedicated air filter location allowing draw air manufacturers bringing air air rear fans fitted force air effectively removed pressure referred positive called negative worth positive internal pressure dust air equipped dust filters negative internal pressure suffer rate dust filtered negative pressure draw dust air flow typical desktop strong passive cpu desktop heat active including multiple attached fans servers server cooling fans located middle hard drives passive cpu heat rear larger fans active heat power rear fans mounted data centers typically horizontally mounted servers air drawn rear data centers typically computers power devices risk equipment extensive systems prevent raised floor floor cooled air power systems space chassis oriented vertically horizontally facilitate air hot components rise creating natural air flow boards stack cooling manufacturers advantage laptops laptops difficult mechanical design power dissipation cooling challenge constraints specific laptops include device light form factor built standard keyboard layout users close noise minimum temperature cooling forced air cooling heat metal chassis passive heat sink common solutions reduce heat include power consumption arm intel atom processors mobile devices mobile devices discrete cooling systems mobile cpu gpu chips designed maximum power efficiency constraints device battery performance devices include heat heat external phone tablet  
800222	computer	school informatics academic unit university responsible teaching informatics created 1998 department artificial intelligence centre cognitive science department science artificial intelligence applications institute human communication centre school informatics component disciplines nature school artificial intelligence computational linguistics systems biology mathematical logic theoretical science informatics school ranked 2014 successor ranking school informatics ranked university 2014 school informatics awarded 2001 science department country achieve 2008 school quality profile 35 50 15 100 staff outputs evaluated 35 leading 50 figures interpreted school volume tied cambridge 45 45 percentage rated informatics science school considered leading institutes artificial intelligence natural language processing machine translation theoretical science school institutes december 2002 including 80 south bridge school library space university tower replacement june 2008 school sites george square campus tower hill king james building building june july 2008 school moved informatics forum building interaction designed hall 500 researchers including staff graduate students construction october 2005 forum completion july 2008 finally brought school researchers august 2018 school gained space form bayes centre purpose built data science artificial intelligence hub shared multiple data science informatics university graduate institute phd output mathematics university  
816239	computer	david andrew born november 16 1947 american pioneer academic held position professor science university california berkeley 1976 announced 2016 serving distinguished engineer google vice chair board risc foundation professor science berkeley pioneering contributions risc processor design coined term risc leading berkeley risc project 2018 99 chips risc architecture leading storage books architecture john science education 2017 turing award developing risc background native park david attended receiving 1969 1970 david martin 1976 concept reduced instruction set computing coined term risc led berkeley risc project 1980 carlo technique register windows introduced redundant arrays independent disks collaboration positions chair science division berkeley computing association served technology advisory committee president elected president association computing machinery acm awards recognized 35 awards teaching service including fellow association computing machinery acm institute electrical electronics engineers ieee national academy engineering national academy sciences silicon engineering hall 2005 shared japan communication award 2006 elected american academy arts sciences national academy sciences received distinguished service award computing association computing fault tolerance 2016 richard achievement award scientific civic science 2013 set american record california weight class age press combined february 12 2015 ieee installed berkeley contribution risc hall berkeley reads march 21 2018 awarded 2017 acm turing award john developing risc award attributed pioneering systematic quantitative approach design evaluation architectures impact microprocessor industry 2003 2012 annual waves event day 2006 2007 2008 2009 2010 2011 2012 notable students notable candidates including selected books books including john architecture architecture quantitative approach organization design risc edition hardware software interface graduate courses 1990 book andrew architecture risc risc reader architecture atlas edition  
849181	computer	cpu cache hardware cache central processing unit cpu reduce average cost time energy access data main memory cache faster memory closer processor core stores copies data frequently main memory locations cpus independent caches including instruction data caches data cache organized hierarchy cache levels l1 l2 modern fast cpus specialized exceptions multiple levels cpu caches cpus cache level cache level caches split data instructions current cpus caches split l1 cache l2 caches larger processors caches l2 cache split acts common repository split l1 cache core multi core processor dedicated l2 cache shared cores cache level caches shared cores split cache uncommon dynamic random access memory dram static random access memory sram separate die chip historically l1 chips allowed integration cache levels exception level extra level cache optimized types caches exist cache size caches mentioned translation buffer tlb memory management unit mmu cpus caches sized 16 larger l1 sizes ibm l1 instruction cache overview read write location main memory processor checks data location cache processor read write cache main memory slower modern desktop server cpus independent caches instruction cache speed executable instruction fetch data cache speed data fetch store translation buffer tlb speed virtual physical address translation executable instructions data single tlb access instructions data separate instruction tlb data tlb data cache organized hierarchy cache levels l1 l2 multi level caches tlb cache memory management unit mmu cpu caches cache entries data transferred memory cache blocks fixed size called cache lines cache blocks cache copied memory cache cache entry created cache entry include copied data requested memory location called tag processor read write location main memory checks entry cache cache checks contents requested memory location cache lines address processor memory location cache cache hit occurred processor memory location cache cache occurred cache hit processor reads writes data cache cache cache entry copies data main memory request contents cache policies replacement policies entry cache cache existing entries heuristic choose entry called replacement policy fundamental replacement policy predict existing cache entry future predicting future difficult perfect method choose variety replacement policies popular replacement policy replaces accessed entry memory ranges improve performance avoiding caching memory regions rarely accessed avoids overhead loading cache cache entries disabled locked depending context write policies data written cache written main memory timing write write policy write cache write cache write main memory alternatively write cache writes main memory cache locations written dirty data locations written main memory data cache reason read write cache require memory accesses service write dirty location main memory read location memory write main memory location mapped write cache dirty location cache space memory location intermediate policies cache write writes held store data queue multiple stores processed reduce bus improve bus utilization cached data main memory changed entities peripherals direct memory access core multi core processor cache alternatively cpu multiprocessor updates data cache copies data caches cpus communication protocols cache managers data consistent cache protocols cache performance cache performance measurement times speed gap memory performance processor performance increasing exponentially cache introduced reduce speed gap cache bridge gap speed processor memory performance systems cache hit rate cache rate play role determining performance improve cache performance reducing rate steps steps decreasing access time cache performance cpu stalls time fetch cache memory read latency cache cpu waiting cache cpu reaches called cpus faster compared main memory stalls cache misses potential computation modern cpus execute hundreds instructions time fetch single cache main memory techniques employed cpu time including execution cpu pentium pro intel designs attempts execute independent instructions instruction waiting cache data technology processors simultaneous multithreading smt intel threading alternate thread cpu core thread required cpu resources cache entry structure cache row entries structure data block cache actual data fetched main memory tag address actual data fetched main memory flag bits discussed size cache main memory data hold size calculated bytes stored data block times blocks stored cache tag flag error correction code bits included size affect physical cache effective memory address cache memory block split tag block offset describes cache set data bits cache sets block offset specifies desired data stored data block cache row typically effective address bytes block offset bits bytes data block tag bits address rows current set set retrieved set requested address cache hit occurs tag bits authors refer block offset simply offset original pentium processor set associative l1 data cache size 64 byte cache blocks cache blocks sets equal cache blocks divided leads sets cpu address 32 bits wide implies bits tag field original processor set associative l2 integrated cache size 128 byte cache blocks implies bits tag field flag bits instruction cache requires flag bit cache row entry valid bit valid bit cache block loaded valid data power hardware sets valid bits caches systems set valid bit times multi master bus hardware cache processor address broadcast processor data blocks local cache marked data cache typically requires flag bits cache valid bit dirty bit dirty bit set cache changed read main memory dirty meaning processor written data main memory replacement policy cache entry main memory replacement policy choose entry cache hold cache called associative extreme entry main memory cache cache direct mapped caches implement entry main memory cache set associative level data cache amd set associative location main memory cached locations level data cache choosing involves trade replacement policy mapped memory location check location cache cache entries checking takes power chip time hand caches suffer misses conflict misses cpu time reading slow main memory doubling direct mapped hit rate doubling cache size increasing improve hit rate reasons virtual aliasing cpus dynamically reduce caches power acts power saving measure simple complex direct mapped cache cache organization location main memory entry cache direct mapped cache called set associative cache replacement policy choice cache entry contents locations map entry simpler direct mapped cache larger associative comparable performance block cache block memory blocks cache mapping equation set associative cache location main memory cached locations cache logical question simplest commonly scheme hand diagram bits memory location cache memory entries benefit scheme tags stored cache include main memory address cache memory cache tags bits require transistors space processor circuit board microprocessor chip read compared faster simple bit stored pair speculative execution advantages direct mapped cache simple fast address computed cache location memory cache entry read processor continue data checking tag matches requested address idea processor cached data tag match applied associative caches subset tag called pick cache entries mapping requested address entry selected parallel checking tag technique context address translation explained associative cache schemes suggested cache direct formed hash function hash function property addresses conflict direct mapping tend conflict mapped hash function program suffer conflict misses access pattern extra latency computing hash function additionally time load difficult determine existing data tracking caches set basis associative caches major advantages conventional set associative pseudo associative cache true set associative cache tests simultaneously content addressable memory pseudo associative cache tests time hash cache column associative cache examples pseudo associative cache common finding hit tested pseudo associative cache fast direct mapped cache conflict rate direct mapped cache closer rate associative cache cache cache failed attempt read write piece data cache main memory access latency kinds cache misses instruction read data read data write cache read misses instruction cache largest delay processor thread execution wait instruction fetched main memory cache read misses data cache delay instructions dependent cache read issued continue execution data returned main memory dependent instructions execution cache write misses data cache shortest delay write limitations execution subsequent instructions processor continue queue detailed introduction types misses address translation purpose cpus implement form virtual memory program running machine simplified address space code data program programs common virtual address space program executes calculating comparing reading writing addresses virtual address space addresses physical address space programs simpler easier write virtual memory requires processor translate virtual addresses generated program physical addresses main memory portion processor translation memory management unit mmu fast path mmu perform translations stored translation buffer tlb cache operating table segment table purposes discussion features address translation virtual memory systems slow required access table held main memory programmed access main memory caches effectively cut speed memory access hardware cache data instruction cache tlb caches divided types based tag correspond physical virtual addresses speed load latency cpu performance modern level caches virtually indexed mmu tlb lookup parallel data cache ram virtual indexing choice cache levels cost dealing virtual grows cache size result level larger caches physically indexed caches historically virtual physical addresses cache tags virtual tagging uncommon tlb lookup cache ram lookup physical address time tag compare virtual tagging caches tend physically tagged latency caches virtually tagged purpose cpus virtual tagging cache relies virtual indexing tagging virtual address mapped physical addresses solved physical address tagging storing address space identifier cache approach cache lines storing data physical address writing locations update location cache leaving data issue solved overlapping memory address spaces cache mapping virtual tags advantage virtual tags associative caches tag match virtual physical translation physical address action hardware converting physical addresses cache storing physical tags virtual tags comparison physically tagged cache virtual tags simpler virtual physical mapping tlb cache entries virtual addresses alternatively cache entries allowed mapped tlb entries access rights changed table operating ensure virtual simultaneously cache operating guarantee risc processors sparc approach hardware cost detecting virtual software complexity performance penalty perfect distinguish functions tags associative cache determine entry set select determine cache hit function correct function guess wrong answer occasionally processors caches virtual physical tags virtual tags selection physical tags determining hit cache latency advantage virtually tagged cache simple software interface physically tagged cache cost tags processing alternate cache indexed virtual matches extra latency keeping virtual cache entry virtual tags subset hash virtual tag selecting cache data physical tag virtually tagged cache virtual match physical tag cache entry matching cache accesses cache address match virtual bits virtual tags distinguishing virtually cache conflict misses virtually tagged cache ultimate reduction virtual cores processors virtual effectively bits cache set associative effectively hardware maintains simple virtual address cache content addressable memory select fetched physically indexed caches secondary caches operating application controls cache differences allocation program lead differences cache collision patterns lead differences program performance differences difficult consistent timing benchmark understand cpu physically indexed direct mapped level cache virtual memory sequential physical map sequential locations cache 256 pattern label physical color denote cache locations physical colors conflict cache programmers attempting maximum cache programs access patterns data cached time avoiding capacity misses ensure access patterns conflict misses divide virtual program assign virtual colors physical colors assigned physical programmers access patterns code virtual color time wide literature loop optimization coming performance computing community moment virtual colors physical colors operating physical virtual randomly uniformly extremely physical color locations cache solution operating attempt assign physical color virtual colors technique called actual mapping virtual physical color performance difficult track benefit approaches simply physical virtual colors operating guarantee physical maps virtual color virtual processor virtually indexed caches extra virtual handling alternatively os cache virtual color mentioned approach sparc designs cache hierarchy modern processor modern processors multiple chip caches operation cache completely cache size cache block size blocks set cache set replacement policy cache write policy write write cache blocks cache size typically level caches called level cache blocks block size blocks set short access times level caches level larger blocks larger block size blocks set access times faster main memory cache entry replacement policy determined cache algorithm selected implemented processor designers multiple algorithms kinds loads specialized caches pipelined cpus access memory multiple pipeline instruction fetch virtual physical address translation data fetch classic risc pipeline natural design physical caches physical resource scheduled service pipeline pipeline naturally separate caches instruction tlb data specialized role cache cache cache hold blocks cpu cache replacement cache main cache path holds blocks data main cache cache associative intended reduce conflict misses commonly programs require associative mapping accesses fraction memory accesses program require cache property providing accesses introduced dec 1990 intel variant processors equipped intel pro embedded graphics introduced package level cache serves cache processors level cache processors level cache cache trace cache extreme examples cache trace cache execution trace cache intel microprocessors trace cache mechanism increasing instruction fetch bandwidth decreasing power consumption storing instructions fetched decoded trace cache stores instructions decoded retired instructions trace caches representing individual basic blocks dynamic instruction trace cache stores micro operations decoding x86 instructions providing functionality micro operation cache time instruction decoded micro write cache write cache special cache l2 cache amd microarchitecture stores caches module task reducing writes l2 cache micro operation cache micro operation cache cache cache specialized cache stores micro operations decoded instructions received instruction instruction cache instruction decoded cache decoded form cached instruction decoded cached describing cache alternative intel processor family 2001 paper micro operation cache power aware variable instruction isa intel included caches bridge processors successive bridge amd implemented cache microarchitecture complete pre decoded instructions repeatedly decode variable complex instructions simpler fixed micro operations process predicting fetched instructions cache effectively fetch decode hardware decreasing power consumption improving supply decoded micro operations cache increases performance consistently decoded micro operations cpu fetch decode logic cache similarities trace cache cache simpler providing power efficiency suited implementations battery powered devices main disadvantage trace cache leading power hardware complexity required heuristic caching dynamically created instruction branch target cache branch target cache branch target instruction cache arm microprocessors specialized cache holds instructions destination branch powered processors normal instruction cache memory capable instructions fast satisfy cpu applies consecutive instructions sequence takes cycles latency instruction fetch address causing cycles pipeline bubble control transfer branch target cache instructions cycles avoiding delay branches speed operation cache traditional time instruction cache multi level caches issue fundamental cache latency hit rate larger caches hit rates latency address computers multiple levels cache fast caches larger slower caches multi level caches operate checking fastest level l1 cache processor speed cache misses fastest cache level l2 accessing external memory latency difference main memory fastest cache larger processors begun utilize levels chip cache price sensitive designs entire cache hierarchy chip 2010s performance designs returned chip caches implemented mounted multi chip module fourth cache level benefits caches depend application access patterns examples products incorporating caches include finally memory hierarchy cpu register file considered fastest cache special characteristic scheduled compiler registers hold values retrieved main memory loop optimization register renaming compiler register dynamically hardware runtime register bank allowing cpu break false data dependencies pipeline hazards register files hierarchy cray 1976 address scalar data registers usable set 64 address 64 scalar data registers access faster main memory registers cray data cache cray instruction cache multi core chips chip multiple cores question caches shared local core implementing shared cache introduces wiring complexity cache chip core greatly reduces space include larger cache typically sharing l1 cache increase latency core considerably slower single core chip level cache called accessing memory global cache desirable reasons allowing single core cache reducing data redundancy processes threads share cached data reducing complexity utilized cache protocols core chip levels include l1 cache core intermediate l2 cache pair cores cache shared cores shared level cache called accessing memory referred level cache additional techniques increasing level parallelism shared multiple cores including multiple pieces addressing ranges memory addresses accessed independently separate unified separate cache structure instructions data cached separately meaning cache cache instructions data benefits demonstrated separate data instruction translation unified structure constraint cache lines cache instructions data exclusive multi level caches introduce design decisions instance processors data l1 cache l2 cache caches called strictly processors amd exclusive caches data guaranteed l1 l2 caches processors intel pentium iii require data l1 cache l2 cache accepted intermediate policy common names exclusive partially advantage exclusive caches store data advantage larger exclusive l1 cache comparable l2 cache l2 cache times larger l1 cache l1 misses l2 access cache l2 l1 exchange bit l2 l1 cache advantage strictly caches external devices processors multiprocessor remove cache processor processor check l2 cache cache inclusion l1 cache correlation l1 l2 caches l2 cache l1 caches effective l1 caches restricted disadvantage cache l2 cache lines l1 maintain bit result l1 rate advantage caches larger cache larger cache lines reduces size secondary cache tags exclusive caches require caches size cache lines cache lines l1 l2 hit secondary cache magnitude larger primary cache data magnitude larger cache tags tag saved comparable incremental store l1 cache data l2 illustrate multi level caching cache hierarchy core amd 64 cpu specialized caches instruction cache instruction tlb data tlb data cache caches specialized multiple level caches level instruction data tlbs store mapping instruction data caches tlbs unified l2 cache cache exclusive l1 instruction data caches byte l1 instruction cache l1 data cache l2 cache data cache operating responsible keeping tlbs portions tables memory updated caches stored caches diagram usual class cpu prediction tables predict branches tables predict targets branches instructions level instruction cache unified secondary cache store prediction instructions secondary cache lines secondary cache protected data alpha particle depending lines data instruction primary caches code takes bits code lines instruction cache bits bits cache branch prediction instructions result branch predictor larger effective history table accuracy processors kinds predictors store load predictor dec alpha specialized predictors future processors predictors caches store costly compute terminology predictors caches hit branch predictor predictors cache hierarchy instruction data caches hardware store instruction closely store instruction change instruction processors alpha mips family software instruction cache stores guaranteed instruction stream program calls operating facility ensure tag ram engineering tag ram memory locations stored cpu cache simple direct mapped design fast sram associative caches employ content addressable memory implementation cache reads common cpu operation takes single cycle program execution time sensitive latency level data cache hit deal design effort power silicon caches fast simplest cache virtually indexed direct mapped cache virtual address calculated relevant portion address extracted sram returns loaded data data byte aligned byte operation tag checking loop tags read pipeline load instruction retired tag loaded data read virtual address cache hit cache updated requested cache pipeline associative cache complicated form tag read determine entry cache select set associative level cache reads tags data parallel data matching tag level caches save power reading tags data element read data sram adjacent diagram intended manner fields address address bit 31 bit diagram indexing multiplexing set associative virtually indexed virtually tagged cache lines 32 bit read 32 bit virtual address cache lines 64 lines cache read time tag sram 32 rows pair 21 bit tags function virtual address bits 31 tag data simplest bits cache read path reads access data sram rows bytes wide modern cache set associative virtually indexed virtually physically tagged lines 32 bit read 36 bit physical addresses read path cache path tags read matched subset virtual address pipeline virtual address translated physical address tlb physical tag read cache read finally physical address compared physical tag determine hit occurred sparc designs improved speed l1 caches gate delays virtual address sram sum addressed decoder history history cache technology closely tied virtual memory cost semi memories mainframe computers 1960s complex hierarchy physical memory mapped flat virtual memory space programs memory technologies semi magnetic core disc virtual memory programs flat caching fetch data instructions fastest memory processor access extensive studies optimize cache sizes optimal values depend greatly programming language algol fortran largest cache sizes days technology memory access slower register access 1980s performance gap processor memory growing microprocessors advanced faster memory terms operating frequency memory performance bottleneck technically main memory fast cpu path speed memory introduce speed cache memory performance gap magnitude reduced combined performance tlb implementations documented tlb ibm 360 67 associative memory tlb data cache documented data cache ibm 360 model 85 68k microprocessors released 1982 loop mode considered special instruction cache loops consist instructions released 1984 replaced typical instruction cache 256 bytes 68k series processor feature true chip cache memory released 1987 basically core additional 256 byte data cache process mode caches released 1990 split instruction data caches released 1994 data cache associative instruction cache associative 96 byte instruction buffer 256 entry branch cache 64 entry address translation cache mmu buffer associative x86 microprocessors x86 microprocessors reached clock rates amounts fast cache memory featured systems improve performance dram main memory latency cycles cache constructed expensive faster sram memory cells time caches external processor typically located motherboard form devices enable cache optional extra upgrade feature versions intel processor support 16 external cache processor cache integrated cpu die cache termed level l1 cache slower motherboard level l2 cache motherboard caches larger common size popularity motherboard cache continued pentium era introduction growing bus clock rates cpu clock rates caused motherboard cache faster main memory development cache implementation x86 microprocessors pentium pro brought secondary cache package microprocessor frequency microprocessor motherboard caches popularity amd amd iii processors socket intel motherboard caches iii included die l2 cache advantage board cache level cache named board cache produced motherboard cache x86 systems level caches introduction multiple processor cores cache cpu die common total cache sizes increasingly larger processor generations 2011 uncommon level cache sizes tens intel introduced level package cache microarchitecture cpus equipped variant intel integrated pro graphics effectively feature embedded dram package cache shared dynamically die gpu cpu serves cache cpu cache current cache designs focused direct cost cache ram average execution speed cache designs energy efficiency fault tolerance goals researchers explored emerging memory technologies embedded dram volatile ram designing caches tools explore cache cycle time energy tools include source cache simulator source instruction set simulator modeling 2d 3d sram ram caches tool multi ported cache multi ported cache cache serve request time accessing traditional cache single memory address multi ported cache request addresses time ports connected processor cache benefit pipelined processor access memory phases pipeline benefit concept super scalar processors cache levels  
849224	computer	library collection unix software tools creating finite machines weighted finite completely library designed speech processing applications speech recognition speech synthesis commercial binary commercial licenses labs library consists sets component  
849237	computer	contiki operating memory constrained systems focus power wireless internet devices contiki include systems street lighting sound monitoring smart cities radiation monitoring source software released bsd license contiki created 2002 developed worldwide team developers texas instruments cisco university oxford university swedish institute science contiki gained popularity built tcp ip stack scheduling event driven kernel feature iot contiki famous contiki multitasking built internet protocol suite tcp ip stack random access memory ram 30 read memory rom including graphical user interface 30 ram hardware contiki designed types hardware devices constrained memory power processing power communication bandwidth typical contiki memory power budget processing speed measured communication bandwidth hundreds systems include types embedded systems bit computers networking contiki network mechanisms tcp ip stack networking stack networking stack set custom networking protocols designed power wireless networks stack contributed cisco released stack receive ready certification stack routing protocol power networks routing protocol power networks header compression adaptation layer ieee 802 15 links alternative network stack overhead stack set communication primitives power wireless systems default primitives single hop unicast single hop broadcast multi hop unicast network address data collection primitives combined form complex protocols mechanisms power operation contiki systems power constrained battery operated wireless sensors provide operation replace batteries contiki set mechanisms reduce power consumption systems runs default mechanism power operation radio called nodes running power mode receive radio messages simulation contiki includes network simulator called networks contiki nodes nodes belong classes nodes entire hardware node nodes contiki code node compiled executed simulation host java nodes behavior node java class simulation mix nodes classes nodes include contiki nodes simulated network contiki platforms microcontrollers programming model efficiently memory systems contiki programming model based memory efficient programming abstraction shares features multithreading event driven programming memory overhead kernel process response internal external event examples internal events messages processes examples external events sensors incoming packets radio neighbor scheduled contiki process explicitly yield control kernel regular contiki processes special construct block waiting events control kernel event features contiki supports process optional multithreading inter process communication message passing events optional graphical user interface gui direct graphic support locally connected terminals virtual display virtual network computing installation contiki includes features contiki supported popular libraries includes port 15 release ports contiki operating ported systems  
864595	computer	draft report commonly draft document written john von neumann distributed june 30 security classified project published description logical design stored program concept von neumann architecture history von neumann wrote report hand train los mexico handwritten notes report report june 30 24 copies draft distributed closely connected project days earlier june 25 report caused cambridge university cited report content decision travel united moore school summer von neumann describes detailed design speed automatic digital computing major central arithmetic central control memory input output slow external memory cards tape magnetic wire steel tape perform addition multiplication division square root mathematical operations functions table interpolation notes multiplication division tables tables interpolation requires multiplication precision represented binary notation estimates 27 binary digits term bit coined sufficient accuracy 30 bit sign bit bit distinguish 32 bit word calls minor cycle arithmetic multiplication division binary sign bit treated computation scaled circuit design vacuum ability operate von neumann suggests keeping simple avoiding attempt improving performance overlapping operations arithmetic operations performed binary time estimates addition binary digits 30 bit multiplication faster computing device time von neumann design built elements based biological neuron model digital devices constructed vacuum modern terms simplest element input gate input input elements inputs threshold produce output positive input signals threshold elements inputs constructed simplest version suggests built vacuum tube circuits complex function blocks built elements elements build circuits addition multiplication division square root memory blocks control circuits boolean logic terminology circuits master clock derived vacuum tube crystal controlled logic include symbol denote unit time delay time delays design electric pulse moves 300 clock speeds cycles 100 wire issue error detection correction mentioned memory design key design concept named von neumann architecture uniform memory data instructions device requires considerable memory appeared memory perform functions nature considerably purpose treat entire memory functions received numerical material stored 14 von neumann estimates memory required based classes mathematical including ordinary partial differential equations sorting probability experiments partial differential equations dimensions time require memory dimensions time technology memory largest minor cycles 32 bits design goal minor cycles estimates minor cycles storing program kinds fast memory delay tube minor cycle addressed unit word addressing 12 instructions executed sequentially special instruction switch memory jump instruction binary digits delay memory pass fed accessing data delay time penalty waiting desired data analyzing timing issues organizing delay memory 256 delay storing bits 32 minor cycles called major cycle memory access bits minor cycle bits total 13 address bits memory recognizes scan tube store bit precision scanning memory short time instructions 14 von neumann format calls code types include basic arithmetic operations moving minor cycles word load store modern terms based sign previous operation input output memory location jump determines bits types suggests word operand leaving bits format addressable memory future purposes possibility storing minor cycle discussed approach table discussion input output instructions included draft treatment preliminary report publication legal sense source design team reasons publication public patented design team stored program concept evolved university pennsylvania moore school electrical engineering von neumann activity represented draft translation discussed concepts language formal logic von neumann failure von neumann list authors draft led credit attributed von neumann law  
867980	computer	rtos unix real time operating software technologies operating features posix linux compatibility real time embedded systems applications aerospace military industrial process control telecommunications compatible military grade security protocol popular library history versions written 1986 texas targeted custom built motorola based platform atari cross development integrated solutions unix machine 1988 1989 ported intel architecture 1989 compatibility compatibility operating systems including linux memory management unit support included kernel 1989 reliability protected memory performance advantages virtual addresses powerpc architecture supported february 2015 announced planned support arm cortex family components designed absolute hard real time performance respond period time response times presence heavy kernel unique threading model interrupt routines extremely short fast holds patent technology maintain hard real time performance granted november 21 1995 operating architecture multiple priority light weight kernel task based interrupt handling 2003 introduced specialized version called applications require certification industry standards os devoted discussion  
903339	computer	nucleus rtos real time operating rtos offered embedded software division graphics business supporting 32 64 bit embedded platforms nucleus rtos designed real time embedded systems medical industrial consumer aerospace iot applications nucleus rtos released 1993 version nucleus rtos includes features power management process model 64 bit support safety certification support heterogeneous nucleus process model adds space domain task module isolation memory management unit mmu memory protection unit based cortex cores supported platforms nucleus rtos supports list embedded processors including leading cortex devices releases include support devices complete list supported devices official includes 32 bit devices multi core devices history nucleus released 1993 accelerated technology nucleus nucleus commonly embedded market success embedded industry support networking graphics file systems accelerated adoption graphics acquired accelerated technology march 2002 generation nucleus rtos nucleus released 2003 improving portability nucleus rtos architectures tool sets components flash file usb replaced legacy edge development tools included compiler tools simulator graphics introduced 3rd generation nucleus rtos 2010 nucleus targeted devices limited memory resources nucleus rtos designed scale memory code data nucleus introduced support symmetric multiprocessing smp asymmetric multiprocessing unsupervised supervised embedded nucleus addition features version nucleus moved business model single unified package acquired dec 2010 replace edge development tools compilation tool chain trace analysis tools compiler tool chain based gnu tool chain ide based eclipse supports arm mips architectures built os nucleus rtos embedded linux nucleus introduced unified build configuration kernel configured single file builds single library linux ui based configuration tool integrated user components kernel build time nucleus configuration user integrate tool architecture support build properties major components nucleus rtos components include connectivity nucleus supports ability connect devices interfaces including file windows unix operating systems nucleus require file function complex applications requiring local storage nucleus supports wide variety file systems including fat safe fault tolerant multiple media support nucleus support file systems storage media virtual file application programming interface api access supported file systems storage devices functions calls underlying storage format networking nucleus networking stack dual stack supports 60 networking protocols nucleus networking stack supports posix easy socket based application interface list supported protocols nucleus supports wide variety encryption options secure communications protect data rest transit nucleus package fraction size designs requiring encryption limited memory capacity security protocols protect data transit include encryption includes 256 public key algorithms include support includes radius 802 wireless modules chip makers supported ui graphics nucleus supports leading 3rd party ui libraries nucleus supports qt ui framework optimized code size integrated debugging supported include embedded studio iot releases nucleus include support https nucleus announced support cloud computing framework industrial nucleus integrated 3rd party industrial industry industrial stack support includes host client ethernet ip multi core nucleus supports asymmetric multiprocessing mode symmetric multiprocessing smp mode leading 32 64 bit heterogeneous nucleus capable running embedded operating mode nucleus rtos instances nucleus linux metal applications distributed processors mode processor running independently separate soc embedded framework communication operating systems cores processor life cycle management smp operation nucleus rtos manage multiple cores simultaneously nucleus operations cores multi core device subset cores purpose nucleus offers time api support bound computation domain control tasks interrupt core assignment product packages nucleus rtos packaged safety certification nucleus levels safety iso devices nucleus products  
920668	computer	image processing stands quality stands pixel art scaling algorithms developed filters factor factors filter nearest neighbor scaling algorithm color pixels source pixel compared color source pixel shapes detected checking pixels color threshold total combinations neighbors expand single pixel block pixels arrangement neighbors looked table interpolation patterns interpolation data lookup tables constrained requirement segments generating lookup tables slow major source complexity algorithm render stage simple fast designed capable performed real time description original author description implementation original library original project external links step analysis source pixel calculate color difference central pixel nearest neighbors difference compared threshold pixels categories close neighbors 256 combinations step filtering lookup table 256 entries entry combination close neighbors entry describes mix colors source pixels pixels filtered image implementation color space calculate color differences tolerance brightness component color components color space conversion easy implement format source image 16 bit pixel simple lookup table calculate color differences compare threshold fast instructions creating lookup table difficult combination vector representation determined idea edges image edge direction close correct vector representation resolution anti aliasing result stored lookup table filter designed photographs images sharp edges graphics designed fast process images real time  
927585	computer	short class computers emerged mid 1980s characterized combination vector processing scale multiprocessing scientific computing vector processors popular cost systems level corporate level created opportunity vendors enter market generalization price targets computers larger supercomputers notable technical economic attributes diverse prior mainframes minicomputers hardware diverse software advances expensive mini price machines market targeted cost effective manufactured notable manufacture usa ibm traditional mainframe makers usa japanese supercomputer vendors russia attempts manufacture minicomputers appearance scientific workstations merger companies based microprocessors performance floating units 1990s mips ibm demand class industry magazine coined term short meant instruction set compatible cray  
957085	computer	goldberg virtualization requirements set conditions sufficient architecture support virtualization efficiently introduced robert goldberg 1974 article formal requirements generation architectures requirements derived assumptions represent convenient determining architecture supports efficient virtualization provide guidelines design architectures definition virtual machines capable set hardware resources including processor processors memory storage resources peripheral devices virtual machine monitor called piece software abstraction virtual machine properties analyzing environment created terminology goldberg properties terminology reference book smith 2005 typically assumed satisfy equivalence resource control properties additionally meeting performance property called efficient goldberg characteristics instruction set architecture isa physical machine properties analysis characteristics model generation architectures ibm 360 dec pdp extended modern machines model includes processor operates user mode access linear uniformly addressable memory assumed subset instruction set mode memory addressed relative register interrupts virtualization virtualization sufficient conditions virtualization goldberg introduce classification instructions isa main result goldberg analysis expressed theorem conventional generation effective constructed set sensitive instructions subset set privileged instructions intuitively theorem build sufficient instructions affect correct functioning sensitive instructions pass control guarantees resource control property privileged instructions executed efficiently holding equivalence property theorem simple technique implementing called emulate virtualization called classic virtualization sensitive instructions emulate sufficient conditions recursive virtualization conditions built goldberg sufficient conditions theorem conventional generation architectures hardware assisted x86 meet conditions classic architectures x86 meaning cpu mmu level techniques binary translation replaces sensitive instructions generate called critical instructions additional processing efficient theory hardware performance cost tuned caching binary translation achieve comparable performance x86 binary translation relative generation x86 hardware assist sensitive instructions effectively theorem conditions theorem hybrid constructed generation machine set user sensitive instructions subset set privileged instructions handling critical instructions conditions isa virtualization expressed theorem efficiency property goldberg sense built virtualization architectures requires correct handling critical instructions sensitive instructions approach techniques commonly dynamic critical instructions discovered time replaced mechanisms caching emulation code hardware proposed process efficient approach requires operating systems modified ported running virtual environment instruction sets common architectures relevant architectures virtualization requirements pdp pdp architecture instructions sensitive alter query processor mode privileged instructions save condition codes user iot bits 370 sensitive instructions 370 privileged virtualization requirements motorola motorola single sensitive instruction instruction sensitive access entire status register includes condition codes user supervisor bit interrupt level trace control family starting instruction privileged instruction access condition code register ia 32 x86 ia 32 instruction set pentium processor 18 sensitive instructions introduction amd intel instruction sets 2005 x86 processors meet goldberg virtualization requirements ia 64 effort support virtualization ia 64 architecture 2000 article sparc mode architecture architecture 2005 defines platform super set platform compliant sparc level specification powerpc sensitive instructions powerpc instruction set privileged performance practice efficiency requirement goldberg definition concerns execution privileged instructions execute class hardware emulation software architecture goldberg requirements performance virtual machine actual hardware experiments performed 370 formal requirements theorem performance virtual machine 21 native machine cost privileged instructions led ibm engineers introduce hardware roughly performance 370 virtual machines stages 100 late models 370 main driving factors development hardware 370 virtual memory operating implemented virtual memory privileged instructions experience execution times penalty requirement access translation tables native execution shadow tables  
986182	computer	fields computational linguistics probability gram sequence items sample speech items letters base pairs application grams typically collected speech corpus items grams called numerical gram size referred size commonly size english gram gram computational biology size called gram specific names greek numerical english applications gram model type probabilistic language model predicting item sequence form markov model gram models probability communication theory computational linguistics instance statistical natural language processing computational biology instance biological sequence analysis data compression benefits gram models algorithms simplicity scalability – larger model store context understood enabling experiments scale efficiently examples figure sequences gram gram gram sequences examples word level grams grams counts times appeared google gram corpus grams gram models gram model models sequences notably natural languages statistical properties grams idea experiment theory question sequence letters sequence likelihood letter training data probability distribution letter history size probabilities letters sum gram model based probability terms language modeling independence assumptions word depends markov model approximation true underlying language assumption language model data addition nature language common unknown language model note simple gram language model probability word previous word model model distribution called distribution practice probability distributions assigning probabilities unseen grams smoothing techniques applications gram models statistical natural language processing speech recognition sequences modeled gram distribution parsing modeled gram composed language identification sequences characters letters alphabet modeled languages sequences characters grams referred generated space character gram modeled explicitly adding sequences generated dog dog dog dog multiple word terms strings remove spaces simply single space marks frequently element writing style introduces layout presentation required prediction methodology commonly reduced removed frequently functionality grams sequences type data features clustering sets satellite earth images determining earth image successful pass genetic sequence search identification species short sequences dna originated gram models criticized lack explicit representation range dependency explicit dependency range gram model natural languages incorporate dependencies movement gram model principle distinguish dependencies noise range drop exponentially distance markov model reason gram models impact linguistic theory explicit goal model dependencies criticism markov models language including gram models explicitly capture performance distinction gram models designed model linguistic knowledge claims complete models linguistic knowledge practical applications practice gram models extremely effective modeling language data core component modern statistical language applications modern applications rely gram based models machine translation applications rely exclusively models typically incorporate bayesian inference modern statistical models typically prior distribution describing inherent likelihood result likelihood function compatibility result observed data language model prior distribution inherent translation component distribution features variables represent position word sentence topic addition features based structure potential result syntactic features likelihood function observed data conventional linguistic theory incorporated features practice rare features specific generative theories grammar incorporated computational tend individual theories grammar vocabulary issue gram language models vocabulary computational linguistics natural language processing input includes dictionary database default language model estimated entire observed vocabulary estimate language model specific fixed vocabulary scenario grams corpus vocabulary word gram probabilities vocabulary observed essential explicitly model probability vocabulary introducing special token vocabulary vocabulary corpus effectively replaced special token grams counts option estimate transition probabilities grams involving vocabulary grams approximate matching grams efficient approximate matching converting sequence items set grams embedded vector space allowing sequence compared sequences efficient manner convert strings letters english alphabet single character grams dimensional space dimension measures occurrences combinations letters representation string strings rise gram strings real vector representation measured distance metrics applied vectors grams varying scores compare documents standard gram differs occurrence collection corpus documents form background vector event counts score comparing alternative models approach statistics grams modeling similarity likelihood strings source terms bayesian inference gram based searching detection applications grams science computational linguistics applied mathematics bias variance trade choose gram model trade stability estimate common choice training corpora millions smoothing techniques balance weight grams proper appeared training data frequent grams items training data probability smoothing unseen data sample introduce motivated bayesian practice smooth probability distributions assigning probabilities unseen grams reason models derived gram frequency counts severe grams explicitly – frequency smoothing methods simple add smoothing assign count unseen grams rule sophisticated models models methods equivalent assigning prior distribution probabilities grams bayesian inference compute posterior gram probabilities sophisticated smoothing models typically derived fashion independent skip gram field computational linguistics language modeling skip grams generalization grams components typically consecutive leave provide data sparsity conventional gram analysis formally gram consecutive sequence skip gram components occur distance input set skip grams includes grams addition grams syntactic grams grams defined paths syntactic dependency trees linear structure sentence economic news financial markets transformed syntactic grams tree structure dependency relations news economic markets financial syntactic grams intended reflect syntactic structure linear grams applications features vector space model syntactic grams tasks standard grams type syntactic grams speech grams defined fixed overlapping extracted speech sequences speech grams applications commonly retrieval  
990677	computer	sas statistical analysis software suite developed sas institute advanced analytics business intelligence data management predictive analytics sas developed north university 1966 1976 sas institute incorporated sas developed 1980s 1990s addition statistical procedures additional components introduction interface version 2004 social media analytics product 2010 technical overview terminology sas software suite alter manage data variety sources perform statistical analysis sas graphical user interface technical users advanced options sas language sas programs data steps manipulate data steps analyze data step consists series statements data step executable statements result software action statements provide instructions read data set alter data appearance data step phases compilation execution compilation phase statements processed syntax errors identified execution phase processes executable statement sequentially data sets organized tables rows called observations columns called variables additionally piece data descriptor step consists statements named procedures procedures perform analysis data sets produce statistics graphics 300 procedures substantial body programming statistical statements display sort data perform operations sas macros pieces code variables coded perform tasks sas data published excel formats output delivery introduced 2007 sas enterprise guide sas interface generates code manipulate data perform analysis automatically require sas programming experience sas software suite 200 components sas components include history origins development sas 1966 north university hired program analysis variance regression software ibm 360 computers project funded national institute health originally intended analyze data improve yields joined student james developed software statistical routines project 1968 integrated multiple regression analysis variance routines 1972 release sas project lost funding fund projects medical applications continued teaching university access mainframe computers project funded university experiment stations john joined project 1973 contributed software time series matrix algebra contributed sas programming service created sas documentation versions sas named released 1971 sas published limited release ibm mainframes main elements sas programming data step common procedures step version released sas 72 introduced merge statement features handling missing data combining data sets 1976 removed project north incorporated sas institute development sas designed sas architecture allowed compilers procedures input statements improved read data formats ibm mainframes generating reports file statements ability analyze linear models format procedure allowed developers appearance data 1979 sas 79 support operating introduced datasets procedure sas introduced language procedure sas version limited features sas accessible version introduced complete language array screen interactive user interface called display manager 1985 sas programming language allowed sas architecture software unix dos windows written fortran assembly language 1980s 1990s sas released components base sas sas graph produces graphics released 1980 sas component supports time series analysis component intended users sas clinical released 1990s food drug administration standardized sas clinical drug applications 2002 vertical products sas financial management sas human capital management called vision vision introduced developed sas founder john team developers advantage graphical user interface introduced 1984 apple macintosh shipped time 1989 updated versions released continuously 2002 release 2016 sas version 1990s wider range operating systems including macintosh os silicon graphics sas introduced features dot releases user interface based windows paradigm introduced support version introduced output delivery improved editor improved successive releases output options version operating systems supported reduced unix windows os linux sas version sas enterprise released 1999 history 2002 software introduced data patterns business intelligence applications 2004 sas version released project designed sas accessible broader range business users version custom user interfaces based user role established user interface sas enterprise guide software primary graphical user interface gui customer relationship management features improved 2004 sas interaction management 2008 sas announced project designed integrate data quality data integration master data management sas programming developers competing implementation programming sas copyright implementing functionality referred united kingdom court european court 11 august 2010 2012 european court favor programming finding functionality program programming language protected copyright version introduced students 2010 sas social media analytics tool social media monitoring sentiment analysis released sas rapid predictive creates basic models excel introduced 2010 interface programming language add excel performance computing partnership 2011 company released enterprise company introduced 27 data management products october 2013 october 2014 updates 2015 sas global forum announced products specialized industries training software releases sas releases 1972 release sas release software products 2011 sas largest set products customer intelligence numerous sas modules social media marketing analytics profile customers predict behaviors manage optimize communications sas sas framework framework primary functionality monitor transactions applications networks partners analytics identify sas enterprise risk risk modeling scenario analysis functions manage risk corporate policies sas enterprise risk management product set designed banks financial services organizations sas products monitoring managing operations systems referred sas management solutions sas data performance utilization creates reports sas performance management products provide graphical displays key performance department level sas supply chain intelligence product suite offered supply chain product demand managing distribution sas management set software environmental social economic effects identify relationships operations impact environment sas product sets specific industries government retail telecommunications aerospace marketing optimization performance computing university edition sas offers university edition commercial announcement university edition appeared 28 2014 university edition freely comparison products 2005 article journal family comparing statistical packages sas competitors spss alan wrote sas programs provide range data analysis data management tasks difficult learn spss easier learn documentation capable abilities expanded paid spss add concluded sas power users users benefit spss comparison university california los angeles competitors revolution analytics data labs products considerably cheaper sas 2011 comparison start starting basis comparison sas business model weighted heavily initial programs focusing revenue annual adoption sas largest market share advanced analytics 35 percent market 2013 largest market share business intelligence software share largest independent vendor market ibm spss oracle sas named leader data integration tool business intelligence platforms study published 2011 health services sas 42 percent data health service based sample articles drawn journals  
991666	computer	computing multiple instruction single data type parallel computing architecture functional units perform operations data pipeline architectures belong type data processing stage pipeline fault tolerance executing instructions detect mask errors manner task replication considered belong type instances architecture exist mimd simd common data parallel techniques scaling computational resources prominent computing space flight control computers arrays arrays processors charles architecture typical array parallel input data network hard wired processor nodes human brain combine process merge sort input data derived result arrays hard wired specific operation perform parallel integration convolution correlation matrix multiplication data sorting tasks array typically consists monolithic network computing nodes software configured specific application nodes fixed identical interconnect programmable processors contrast employ sophisticated individually programmable nodes monolithic depending array size design parameters wave propagation data array pulse human coined medical terminology major benefit arrays operand data partial contained passing processor array access external buses main memory internal caches operation standard sequential machines sequential limits parallel performance amdahl theorem apply data dependencies handled programmable node interconnect arrays extremely artificial intelligence image processing pattern recognition vision tasks animal processors machine learning implementing neural nets hardware arrays officially classified classification input typically independent values array input values merged combined result maintain independence simd vector processing unit array classified array classified mimd mimd viewed collection simd machines finally data transformed passes array node node multiple nodes operating data classification reason array category input data typically vector single data argue input vector single dataset arrays offered classic architecture parallel computing engineering class array viewed atomic classified single function multiple data merged result  
1002307	computer	engineering execution formally dynamic execution paradigm performance central processing units instruction cycles paradigm processor executes instructions availability input data execution units original program processor avoid idle waiting preceding instruction complete process instructions independently history execution restricted form data flow computation major architecture 1970s 1980s academic subject led yale simulator paper james smith published 1985 completed scheme describing precise behavior exceptions maintained machines machine execution 1964 resolve modern usage considered execution execution machines raw conflict – strictly speaking machines execution complete execution ibm 360 model 1966 introduced algorithm execution 1990 ibm introduced microprocessor execution limited floating instructions model 1990s execution common featured ibm motorola powerpc 1993 fujitsu 1995 intel pentium pro 1995 mips 1996 hp 1996 amd 1996 dec alpha 1996 notable exceptions trend include sun hp intel intel atom architecture ibm logical complexity technique reason reach mainstream machines mid 1990s processors meant cost sensitive markets paradigm silicon required implementation power usage design goal harder achieve execution design microprocessor manufacturers implementations execution mechanism reported manufacturers june 2017 january 2018 led millions systems named time advantage assumption manufacturers loading data processor cache allowing data cached privileged security boundary race condition privileged basic concept processors earlier processors processing instructions performed instruction cycle consisting steps processors paradigm processing instructions steps key concept processing processor avoid class stalls occur data perform operation processor avoids occurs step processor instruction completely ready processed missing data processors slots time instructions ready instructions processed normal instructions original code program processor handled data data operands processor registers complex circuitry convert maintain logical output processor runs instructions random benefit processing grows instruction pipeline speed difference main memory cache memory processor modern machines processor runs times faster memory time processor waiting data processed instructions dispatch issue issue differences created paradigm creation dispatch step issue step stage execute stage paradigm architecture earlier processors stages operated lock step pipelined fashion instructions program correct result correct fetch decode stages execute stage pipelined processor buffer buffer purpose partition memory access execute functions program achieve performance exploiting fine parallelism effectively memory latency processor perspective larger buffer theory increase throughput processor branch entire buffer lot clock cycles reducing effectiveness larger create heat die space reason processor designers multi design approach architectures purpose computing handle control intensive code control intensive code include nested branches occur frequently operating kernels architectures play role scheduling instruction word vliw architectures avoid false operand dependencies decrease frequency instructions issued technique called register renaming scheme physical registers defined architecture physical registers tagged multiple versions architectural register exist time execute program queue resolve issues branch exceptions queue programs exception requires instructions completed program queue discarded branch instructions exceptions instructions ability issue instructions branches resolve speculative execution  
1006355	computer	corporation american advanced technology company founded 1990 mit designed robots space exploration military defense incorporated company designs builds consumer robots including range autonomous vacuum floor autonomous cleaning devices history founded 1990 angle mit artificial intelligence lab sold robots deployed 000 defense security robots 2012 addition deployment units military data dangerous conditions nuclear detected oil oil criticized attempting band band robot electronic boundary radio band falls band radio radio observations february 2016 announced sell military robotics business capital partners focus consumer market robots automated vacuum cleaning robot released 2002 powered battery models station return cleaning cycle conjunction accessories rf company customers robot people experiment improve product api serial published serial port easily accessible modifications easy perform floor robot designed hard surface cleaning cleaning design 2013 developed evolution robotics acquired 2012 create create robot released 2007 create offers users possibility changing robot functions basic elements robotics adding sensors wireless connections computers hardware cleaning robot released 2013 floor successor discontinued products floor robot product commercially limited late 2005 product release 2006 models required special cleaning solution white hard units water versions marketed products favor floor 2016 dog dog designed released 2006 product objects floor unit hard industrial floor surfaces dog discontinued late 2010 real real robotic toy marketed 2000 produced partnership toy manufacturer production product meant human employed facial expressions developed robot developed corporation called connect 2010 pass pilot introduced public cleaning robot released april 2007 cleaning robot released september 2007 based autonomous version created science fair project created 2004 2004 discovery channel scientist challenge autonomous robot remote controlled robot toy mounted robot clean leaves air handle remote carry operate robot discontinued 2017 military robots april 2016 sold defense security unit company formed called robotics arm robot developed arm arm arm strings actuators motors robot speed control range visible thermal cameras infrared sensors transmit images locations participate carrying robot ability mesh network robots extend range sensors semi autonomous meaning perform tasks correction direct intervention 100 bought march 2012 hundreds  
1006597	computer	emerging technology field creating machines robots components scale opposed refers nanotechnology engineering discipline designing building nanorobots devices ranging size constructed nanoscale molecular components terms devices development development phase molecular machines tested sensor switch count specific molecules chemical sample applications biological machines identify cancer cells potential application detection measurement environment university demonstrated single car developed chemical process including wheels controlling environmental temperature scanning tunneling definition robot precise interactions nanoscale objects manipulate nanoscale resolution devices microscopy scanning microscopy description nanorobots molecular machines microscopy definition atomic force considered instrument configured perform robots nanoscale precision considered nanorobots theory richard graduate student originally suggested 1959 idea medical theoretical suggested repair machines day reduced size theory idea incorporated 1959 nanorobots size perform tasks unable utility natural environment common variants synthetic biology utility science fiction stories star limits episode earlier helped hold view nanorobots restricted factory environment form nanotechnology process replication developed inherently safe current plans developing molecular manufacturing include detailed theoretical discussion including specific design issues sensing power communication navigation manipulation computation medical context robert remain level approach level detailed engineering legal ethical implications technology document proposal development design technology methods source hardware source software addressed united nations assembly document united nations source accelerated development systems approach benefit society accelerate development established human heritage coming generations developed technology based ethical purposes technology stated fundamental key aim race technology development space race nuclear arms race race nanorobots occurring ground allowing nanorobots included emerging technologies reasons corporations electric hewlett packard development nanorobots involved starting apply nanorobots common medical procedures universities institutes granted government agencies developing medicine intent acquire rights future nanorobots aspects issues linked patents granted nanorobots patent companies specialized solely building patent series patents eventually radio war emerging fields technology tend dominated corporations manufacturing approaches manufacturing assembled molecular components task level difficulty engineers scientists continue approaches achieve development distinct techniques applied manufacturing nanorobots joint approach manufacturing nanorobots common medical surgical diagnosis drug delivery method manufacturing nanotechnology scale electronics industry 2008 practical nanorobots integrated devices operation advanced capabilities medical robot molecular machine nanoscale dna structure provide 2d 3d devices dna based machines activated molecules molecules dna biological circuit gates based dna materials engineered molecular machines drug delivery targeted health material based systems closely smart drug delivery allowing precise engineered prototypes surface bound systems reports demonstrated attachment synthetic molecular motors surfaces machine surface material surface motors position nanoscale materials surface manner collaboration founded robert 2000 involving 23 researchers organizations countries focuses developing practical aimed developing controlled capability building medical nanorobots emerging field hybrid systems combines biological synthetic structural elements biomedical robotic applications elements systems nanoscale size dna mechanical direct writing nanoscale features surface approaches material attached magnetic guided body based approach biological model purposes electromagnetic fields control motion biological integrated device university created chip based cells replace dna process called reverse deliver genetic vector devices – delivery process called gene ability engineer cellular dna usage vectors approach appeared form gene delivery systems gene vectors send modified causing display 3d printing 3d printing process dimensional structure built processes additive manufacturing nanoscale 3d printing involves process incorporated scale print structure scale precision 3d printing machine improved greatly steps process 3d printing 3d printing laser method incorporated improvement technique precise nanoscale 3d printing process laser machine plate details segment plate transferred 3d printer regions desired 3d printing process repeated built 3d printing process benefits increases accuracy printing process potential create functional segments 3d printer liquid precisely correct focused laser beam laser beam guided leaves solid wide fine resolution enables creation structured process takes laser extremely scale create structure process quick nanoscale 3d printing standards ultra features 3d micro technique approach focused laser trace desired 3d object block nonlinear nature photo solid laser focused remaining feature sizes easily produced complex structures moving potential potential medicine include diagnosis targeted drug delivery cancer biomedical surgery monitoring health care plans future medical nanotechnology expected employ nanorobots patient perform cellular level nanorobots intended medicine replication increase device complexity reduce reliability medical mission nanotechnology wide range technologies developing customized optimize delivery effects commonly result drug delivery methods intended target cells accurately researchers harvard mit special rna measuring drug rna cancer cells cancer cell releases drug cancer cell directed method drug delivery potential cancer patients avoiding negative effects commonly drug delivery demonstration operating living carried 2014 university california san mri guided potential nanorobots application nanorobots repair tissue cells white blood cells cells white blood cells include cells response size nanorobots surface white cells blood assist tissue repair process accelerate recovery science mechanism complex cells blood process mechanism involving cell surface molecules active force dilation physical cells cells robots blood complex mechanism united food drug administration nanotechnology basis size university texas san developed controlled remotely electromagnetic field series nanorobots record interact biological cells scientists technology treatment cancer cultural references characters science theater engineered ship systems appearance season series programmed people perform  
1007969	computer	iterative reconstruction refers iterative algorithms reconstruct 2d 3d images imaging techniques computed tomography image reconstructed projections object iterative reconstruction techniques computationally expensive alternative common filtered projection method image single reconstruction step scientists extremely fast computations massive parallelism iterative reconstruction iterative reconstruction practical basic concepts reconstruction image acquired data inverse solve direct algorithm approximate solution visible reconstruction artifacts image iterative algorithms approach correct solution multiple iteration steps reconstruction cost computation time variety algorithms starts assumed image computes projections image original projection data updates image based difference calculated actual projections algebraic reconstruction algebraic reconstruction technique art iterative reconstruction technique computed tomography iterative sparse minimum variance iterative sparse minimum variance algorithm iterative parameter reconstruction method inspired compressed sensing applications synthetic radar computed tomography scan magnetic imaging mri statistical reconstruction typically components statistical iterative image reconstruction algorithms learned iterative reconstruction learned iterative reconstruction updating algorithm learned training data techniques machine learning convolutional neural networks incorporating image model typically faster quality applied ct mri reconstruction advantages advantages iterative approach include improved noise capability optimal image data method applied tomography pet ray paths noise statistics poor statistical likelihood based approaches statistical likelihood based iterative expectation maximization algorithms preferred method reconstruction algorithms compute estimates distribution events led measured data based statistical principle providing noise artifacts common density function function space extremely dimensions methods maximum likelihood solution maximum methods advantages counts bayes penalty methods yield superior performance expectation maximization based methods involve likelihood function considered superior set projections distributed uniformly angle projections sparse missing occur ct ct metal artifacts require portions projection data magnetic imaging reconstruct images data acquired multiple receive sampling patterns conventional grid improved regularization techniques total variation extended modeling physical processes improve reconstruction iterative algorithms reconstruct images data acquired short time required real time mri electron tomography limited projections acquired hardware limitations avoid biological damage sensing techniques regularization functions function improve reconstruction interpretation benefits iterative image reconstruction mri  
1013210	computer	branch instruction program executing instruction sequence default behavior executing instructions branch branching refer switching execution instruction sequence result executing branch instruction branch instructions implement control flow program loops executing sequence instructions conditions branch instruction branch branching conditional branch branching depending condition depending specifies address instruction sequence target address branch instruction classified direct indirect relative meaning instruction target address specifies target address register memory location specifies difference current target addresses implementation branch instruction change program counter pc cpu program counter stores memory address instruction executed branch cpu instructions sequence memory cells branch cpu program counter set argument jump instruction instruction instruction address memory flow control branch cpu program counter instruction executed instruction branch instruction flow control term branch referring programs level languages programs written machine code assembly language level programming languages branches form conditional statements forms instruction sequence executed conditions branch instructions jump execution instruction sequence machine level branch instructions called jump instructions machine level jump instructions typically conditional forms depending condition distinct forms called jump automatically save address return address stack allowing single multiple locations code cpus flag registers earlier instruction sets condition flag register earlier instruction arithmetic logic instruction close branch instruction branch stored condition branch jump flag set temporary stored flag register located flag register design simple slower simple computers fast computers flag register bottleneck speed instructions operate parallel execution units set flag bits sequence machines instructions condition jump instruction branch label register negative simple designs comparison branches execute arithmetic power flag register branches fast designs comparison branches faster flag register branches comparison branches access registers parallelism cpu mechanisms calculation simple cpu architectures microcontrollers implement conditional jump conditional skip instruction operation conditional jump implemented conditional skip jump instruction examples depending architecture assembly language jump instruction typically form word jump word branch letters extra parameter representing condition details included range jump offset size special addressing mode locate actual effective offset table lists machine level branch jump instructions architectures performance branch instructions achieve performance modern processors pipelined consist multiple partially process instruction feed stage pipeline start instruction program design instructions execute sequence conditional branch instructions impossible sequence conditional branches stalls pipeline program techniques improve speed reducing stalls conditional branches historically branch prediction statistics result optimize code programmer compile version program data code branches statistics code compiler optimize branches released code optimization fastest branch direction frequently control flow path permit cpus designed branch timing cpus power architecture instruction set designed branch compiler cpu branch software branch prediction requires complex software development process software hardware branch predictors moved statistics electronics branch predictors processor guess outcome conditional branch processor logic guess execute expected instruction flow simple hardware branch prediction scheme assume branches program counter loop branches larger program counter leave loop branch predictors developed running simulation variety programs predictors count previous branch faster expensive computers faster branch prediction electronics cpu hardware branch prediction branch compiler superior branch prediction hardware branch prediction logic written branches branches operations conditional moves branch branches technique branch delay slot approach instruction branch executed instruction pipeline stalls approach historically popular risc computers family compatible cpus cpus pipeline faster cpus expected pipelines superscalar cpus execute instructions  
1014669	computer	overlay network network built network structure nodes overlay network connected virtual logical links corresponds path physical links underlying network distributed systems peer peer networks client server applications overlay networks nodes internet internet originally built overlay telephone network advent voip telephone network increasingly overlay network built internet telecommunication overlay networks telecommunication availability digital circuit switching equipment optical fiber telecommunication transport networks ip networks combined broader internet optical fiber layer transport layer ip circuit switching layers enterprise private networks telecommunication networks frame transfer mode packet switching legacy ip based mpls networks virtual private networks started 2001 2002 physical overlay networks complex figure combine logical layers operated built entities businesses universities government separation concerns time broad set services proposed single telecommunication operator ranging broadband internet access voice ip competitive operators internet internet basis networks constructed permit routing messages ip address distributed hash tables route messages node specific logical address ip address advance overlay networks proposed improve internet routing quality service guarantees achieve quality streaming media previous ip multicast wide acceptance require modification routers network hand overlay network deployed hosts running overlay protocol software cooperation overlay control packets underlying network overlay nodes control sequence overlay nodes message reaching destination technologies overlay network reliable efficient content delivery multicast academic includes multicast overlay network overlay network routing quality service guarantees overlay networks architectures distributed internet applications detect recover interference current wide routing protocols minutes recover improved application layer overlay nodes monitor internet paths determine packets internet nodes application specific metrics overlay network simple conceptual design nodes deployed locations internet nodes form application layer overlay routing packets nodes monitor quality internet paths accurately automatically select paths packet reducing time required recover poor quality service multicast overlay multicast peer peer multicast bandwidth multi source multicast distributed nodes critical capability wide range applications including audio video multi party games content distribution decade projects explored multicast efficient scalable mechanism support communication applications multicast size set single node avoids redundant communication network limited deployment ip multicast effort network layer multicast protocol led considerable alternate approaches implemented application layer systems overlay multicast approach participating organize overlay topology data delivery edge topology corresponds unicast path systems underlying internet multicast functionality implemented routers goal multicast protocol construct maintain efficient overlay data transmission list overlay network protocols overlay network protocols based tcp ip include overlay network protocols based ip include  
1030104	computer	dark term describing portions internet public view hidden networks architecture internet internet called network takes online drug called road considered deep communication news network applications including terminology term originally computers hidden programmed receive messages respond remaining dark account detailed online transaction 1971 students massachusetts institute technology stanford university accounts artificial intelligence laboratory term usage incorporated services dark overlay network accessed specific software configurations standard communication protocols ports types dark include networks file sharing peer peer connection privacy networks term surface referring content search engines term dark hidden services term deep history platform search indexed terms terms distinct origins coined 1970s networks isolated government founded military network evolved internet security purposes addresses receive data network lists answer term gained public acceptance publication future content distribution 2002 paper peter paul england employees argued presence primary development digital rights management technologies copyright paper type parallel network requires specific protocol user connect 2005 book war digital generation reach file sharing networks subsequently 2014 book dark term range including drug markets harm communities social media features encryption countries channels sale organizations anti government actions reasons software require specific software installed network configurations access accessed browser browser bundle alternatively configured perform function  
1034358	computer	signal processing transform product input signal family analysis primitives called wavelet transform generated expressed single analogous called wavelet wavelet theory definitions term transform coined steve title published paper term transform steve portion function transform represents transformed plane signals radar pulse compression published reference transform specific signal representations based families functions frequency frequency varying time addition time frequency shifting scale paper gaussian transform successful application detection radar improving target detection previous approaches term term transform proposed transform independently applications transform signal analysis representation framework interference spread spectrum communications processing time domain transform transform transform introduced 1992 signal representation based varying frequency signals signals references asymmetric transform phase frequency rate 2016 asymmetric transform sparse representation data 2015 80  
1053303	computer	statistical learning theory framework machine fields statistics functional analysis statistical learning theory deals finding predictive function based data statistical learning theory led successful applications fields vision speech recognition bioinformatics introduction goals learning understanding prediction learning falls categories including supervised learning unsupervised learning online learning reinforcement learning perspective statistical learning theory supervised learning understood supervised learning involves learning training set data training input output pair input maps output learning consists function maps input output learned function predict output future input depending type output supervised learning regression classification output takes continuous range values regression law regression performed voltage input current output regression functional relationship voltage current output element discrete set labels classification common machine learning applications facial recognition instance picture person input output label person input represented vector elements represent pixels picture learning function based training set data function set data data training set formal description vector space inputs vector space outputs statistical learning theory takes perspective unknown probability distribution product space exists unknown training set samples probability distribution input vector training data output corresponds inference consists finding function 11 12 space functions called hypothesis space hypothesis space space functions algorithm search 14 loss function metric difference predicted 15 actual 16 expected risk defined target function function 18 18 probability distribution 21 unknown measure expected risk measure based training set sample unknown probability distribution called empirical learning algorithm function 23 empirical risk called empirical risk minimization loss functions choice loss function determining factor function 23 chosen learning algorithm loss convergence rate algorithm loss function convex loss functions depending regression classification regression common loss function regression square loss function l2 norm loss function ordinary squares regression form absolute loss l1 norm classification sense indicator function natural loss function classification takes predicted output actual output takes predicted output actual output binary classification 27 29 step function regularization machine learning major overfitting learning prediction goal function closely observed data accurately predict output future input empirical risk minimization runs risk overfitting finding function matches data predict future output overfitting solutions training set data variation learned function stability solution guaranteed generalization consistency guaranteed regularization solve overfitting stability regularization accomplished hypothesis space 12 common 12 linear functions reduction standard linear regression 12 restricted polynomial degree 33 bounded functions l1 hypothesis space avoids overfitting form potential functions limited choice function empirical risk close regularization regularization consists 35 fixed positive parameter regularization parameter regularization ensures existence stability solution  
1057467	computer	james born august 22 1947 american scientist object oriented creating object modeling technique unified modeling language born pennsylvania received physics massachusetts institute technology mit california institute technology received science mit professor jack started career 1960s digital equipment corporation dec lead scientist 1968 1994 electric development center developing technology teaching electric led development object modeling technique object modeling language software modeling designing 1994 joined rational software develop unified modeling language merged software development rational unified process 2003 moved ibm acquisition rational software retired 2006 grown 2009 california main formal description languages semantics computation tools programming productivity applications complex algorithms data structures graduate mit contributed development data flow architecture thesis parallel programming language parallel processor basis network architecture data flow contributions object modeling technique rational unified process unified modeling language publications written books selection includes  
1060184	computer	developed gui released accessing dictionary files dictionary successor developed version earlier project removed copyright reports project google code supported platforms runs linux windows freebsd solaris dictionaries user choice installed separately dictionary files created converting files programs compatible dictionary format platforms iphone touch ipad applications app store include dictionary universal store dictionaries partial list dictionaries converted format include versions dictionary dictionaries languages features scan mode displayed allowing easy dictionary lookup combined provide rough translations foreign language websites september 25 2006 online version operation online version includes access major dictionaries wikipedia chinese previous versions dictionary program developed chinese company version design increasing search capabilities adding variety languages assisted collaboration developers author produced command version called  
1064587	computer	sequence adjacent elements string typically letters gram frequency distribution string commonly simple statistical analysis applications including computational linguistics cryptography speech recognition word pairs avoiding connecting allowing simulation dependencies dependency grammar head word explicit dependency relationship provide conditional probability token preceding token relation conditional probability applied probability token preceding token equal probability occurrence divided probability preceding token applications successful language models speech recognition special gram frequency attacks cryptography solve frequency analysis frequency approach statistical language identification activities linguistics involve include attempts english string repeated frequency english language frequency common letter english corpus complete frequencies larger corpus  
1075261	computer	mitsubishi electric manufactures electric architectural equipment major worldwide producer panels corporation established 15 january united products manufactured sold mitsubishi electric united headquartered california  
1082784	computer	history origins seiko epson corporation company called founded local clock owner japan supported investment family founder seiko manufacturer watch seiko instruments company started operation 22 employees established factory manufacturing seiko 1959 factory split merged form seiko epson corporation company developed technologies developed portable seiko 1963 watch seiko 1969 automatic power generating watch seiko auto 1988 spring drive watch movement 1999 watch business root technologies major businesses seiko epson accounts total revenues company sold seiko watch corporation subsidiary seiko corporation printers 1961 established company called subsidiary supply precision seiko seiko selected official time 1964 summer tokyo printing required time events started developing electronic printer september 1968 launched mini printer electronic printer incorporated june 1975 epson coined generation printers based released public epson electronic printer april epson america established sell printers june 1978 80 80 column dot matrix printer released market printer commodore pet development improved model 80 80 launched october 1980 company advertising selling printer united july 1982 officially named epson corporation launched handheld 20 20 1983 portable color lcd developed launched company november 1985 epson corporation merged form seiko epson corporation company developed micro technology crystal heat ink print head ink released epson 500 printer epson 800 march 1993 shortly 1994 epson released resolution color printer considered resolution epson color utilizing micro head technology models series employed special ink hard drives hd hd interface specifications reference hardware 3rd addition publishing 1994 epson started sales sell products retail stores united started epson sales program purpose program improve sales improve retail sales knowledge epson products address epson customer service retail environment assigned shift typically hours week epson started program marketing sales solutions marketing contract epson june 24 2007 epson represented sales epson hired ensure retail customers displayed products properly regular sales force sales solutions leaving retail require sales skills personal computers starting 1983 epson entered personal market cp compatible z80 machine 1986 company shifted growing pc compatible market epson pc market 1996 century june 2003 company public tokyo stock exchange 2009 family individuals companies major seiko epson power seiko seiko epson common including key family managed operated completely independently epson established brand image rarely seiko 2004 epson introduced digital camera supports mount mount lenses adapter camera digital market sensor standard 35 film frame lenses mounted field view times standard camera 2006 replaced expensive hardware identical epson released firmware patch bring functionality digital camera manufacturer upgrade 2009 company owner watch largest manufacturers japan september 2012 epson introduced printer called epson expression xp 800 ability print expression models scanners september 2015 epson debuted printer epson print enables user ink separate ink quarter 2012 epson global market share sale printers devices 15 20 percent epson involved smart glasses market 2016 company models epson 100 epson 200 2016 company released pro 2000 enterprise oriented upgraded version 200 cameras company release consumer smart glasses popular drone person view drone control printers epson introduced printer control language epson standard code printers industry standard controlling print era dot matrix printers popularity initially started epson 80 robots epson robots robotics design manufacturing department epson seiko epson produces microcontrollers ink july 2003 dutch consumer association 000 epson printers netherlands based epson customers ink month epson products issued statement ink left epson printers function properly epson designed ink left developed electric head mechanism mechanism risk expensive repair reason dutch consumer association statement epson statement coverage sheet paper printing epson america class action brought los angeles superior court agreed 45 purchased epson printer april 1999 20 epson store news service epson filed international trade commission february 2006 24 companies manufactured distributed epson compatible ink march 30 2007 judge paul issued initial ink question epson patents judge recommended companies manufacturing epson epson 2015 emerged epson printers reported 20 ink remains  
1103630	computer	computing single instruction stream single data stream architecture single core processor executes single instruction stream operate data stored single memory corresponds von neumann architecture main defined based concurrent instructions data streams architecture michael concurrent processing characteristics pipelined processors superscalar processors common examples modern computers instructions control unit memory module decoded processing unit processes data retrieved memory module  
1146204	computer	operating systems based linux kernel embedded systems consumer electronics set boxes smart personal video vehicle networking equipment routers switches wireless access wireless routers machine control industrial automation navigation equipment flight software medical instruments operating systems based linux kernel mobile devices touchscreen based embedded devices smartphones tablets personal digital portable media players include touchscreen history linux kernel ported variety cpus processor desktop server arc arm mips powerpc processors linux alternative proprietary operating linux kernel subset linux distribution floppy disk resource hardware devices coverage cost freely source code ease linux shipped consumer devices devices covering sharp family gps navigation devices series smartphones motorola series devices running os developed fish nokia nokia android linux kernel based operating acquired extended google introduced 2008 highly competitive platform smartphones tablets july 2012 android smartphone market share united 52 reaching worldwide 2015 communities availability consumer embedded devices communities users developers formed devices replacement enhancements linux distribution shipped device availability source code communities surrounding devices devices standardized build systems appeared including platform usage advantages embedded linux proprietary embedded operating systems include multiple software development support licensing stable kernel ability read modify source code technical disadvantages include memory kernel root user mode kernel mode memory access complex device drivers framework  
1152833	computer	ip multimedia ip multimedia core network ims architectural framework ip multimedia services historically mobile phones voice services circuit switched style network strictly ip packet switched network alternative methods voice voip multimedia services smartphones standardized industry ims architectural framework provide standardization ims originally designed wireless standards body 3rd generation partnership project vision mobile networks original formulation represented approach internet services vision updated requiring support networks wireless lan fixed lines ims protocols session protocol sip ims intended applications aid access multimedia voice applications wireless terminals create form fixed mobile convergence horizontal control layer access network service layer logical architecture perspective services control functions control layer common horizontal layer implementation map reduced cost complexity alternative overlapping technologies access services wired wireless networks include combinations generic access network sip increasingly easier access content mechanisms control traditional wireless fixed operators ims examples global standards based ims basis voice rich communication services advanced messaging architecture functions diagram explained ip multimedia core network collection functions linked standardized interfaces form ims network function node hardware box combine functions node split single function nodes node multiple times single network load balancing issues access network user connect ims standard ip ims terminals mobile phones personal digital computers register ims network country network requirement ip sip user fixed access digital subscriber cable ethernet mobile access wireless access supported phone systems telephone service ims compatible systems supported core network – subscriber server subscriber server user profile server function master user database supports ims network entities handle calls subscriber performs authentication user provide subscriber location ip location register authentication centre subscriber location function map user addresses multiple user ims ip multimedia private identity ip multimedia public identity globally user agent public user identity phone series digits uniform resource identifier digits sip sip john ip multimedia private identity ip multimedia private identity unique allocated global identity assigned network operator form network access identifier user domain registration administration purposes ims user ip multimedia public identity ip multimedia public identity user communications users included business card address record multiple shared phone reached identity single phone entire family globally user agent globally user agent identity unique combination instance types public temporary public user identity public user identity set subscriber database subscriber service service session control function sip servers called session control function process sip packets ims application servers sip application servers host execute services interface sip application server developed voice function server depending actual service operate sip mode sip user agent mode sip mode located network external party network located network query interfaces sip functional model application server incoming control model application server control model store transaction store session depending specific service executed interfaces incoming interfaces application logic service public service identity public service identify services hosted application servers user takes form sip stored distinct media servers media resource function media functions media manipulation voice stream playing divided media resource function controller media resource function processor media resource functional entity responsible collection published consuming entities modes control function sip processes requests routing determined session includes routing functionality based telephone interfaces circuit switched networks networks user message transfer ims sip ip media networks pulse code ims real time transport protocol media resources media resources components operate media plane control ims core functions media server media ngn interconnection types generation networking interconnection ngn interconnection mode direct indirect direct interconnection refers interconnection network domains intermediate network domain indirect interconnection layer refers interconnection network domains intermediate network domain acting transit networks intermediate network domain provide transit functionality network domains interconnection modes carrying service layer media traffic charging offline charging applied users pay services month online charging credit based charging services real time credit control services applied session charging function addresses addresses distributed ims entities provide common location entity send charging charging data function addresses offline online charging function online ims based architecture ims based emulation ip networks services analog devices ims based ims devices ims normal sip users analog terminal standard analog interfaces connect ims based services control terminal session control handling ims components session handling features ims allowing sip application dynamically based user profile implemented filter mechanism apply filter criteria determine sip requests note services party applied network services party applied network respective initial filter criteria initial filter criteria xml based format describing control logic represent user application stored ims profile user registration registered users processing demand services acting users valid registration user profile changed composed types security aspects ims systems security defined 33 lack interfaces devices support situation provide protection defines security mechanisms ims security mechanism relies authentication performed network attachment procedures user profile ip address mechanism weak protected interface ims architecture capabilities terminals published specifications valid authentication option effort fixed networks procedures lack capabilities option interface releases included method common ims platform approach variants authentication functionality ims terminal perspective implementations interface  
1157909	computer	object oriented programming systems languages applications annual acm conference takes united conference typically held europe operated special programming languages association computing machinery acm annual conference covering topics object oriented programming systems languages applications conferences offers simultaneous sessions meaning people academic conference students peer reviewed papers academic experience reports conduct panels object oriented programming develop mainstream programming paradigm helped topics including design patterns aspect oriented programming model driven engineering software development domain specific languages conference held 1986 2010 conference mission bring researchers software programming design software engineering explore software software practice stands systems programming languages applications software humanity conference technical papers presentations change intended serve framework organizing efforts topics traditionally maintain focus allowing conferences trends challenges software  
1163167	computer	theory computation automata theory powerset construction subset construction standard method converting finite automaton nfa deterministic finite automaton dfa recognizes formal language theory nfas additional flexibility unable recognize language recognized dfa practice converting easier construct nfas efficiently executable dfas nfa dfa exponentially larger construction nfas construction called powerset construction subset construction distinguish types automata published michael 1959 simulate operation dfa input string track single time automaton reach prefix input contrast simulate nfa track set automaton reach prefix input choices automaton prefix input set reached input symbol set deterministic function sets nfa play role nfa simulation single dfa play dfa simulation sets nfa simulation interpreted dfa construction powerset construction applies nfa transformations consuming input symbols ε moves automaton defined set set input symbols transition function mapping input symbol set initial set accepting dfa subsets initial dfa element set initial transition function dfa maps representing subset input symbol set set reached transition dfa accepting accepting nfa simplest version powerset construction set dfa powerset set subsets dfa initial alternative version construction creates nfa ε moves nfa ε moves called ε nfa construction modified deal computing ε closure set ε moves van recognizes incorporating closure computation powerset construction multiple initial nfas defined multiple initial initial dfa set initial nfa nfa ε moves set initial ε moves nfa initial accepting alphabet consists symbols ε moves initial dfa constructed nfa set nfa ε moves set transition input symbol follow additionally ε moves     reasoning dfa constructed nfa start dfa remaining 11 sets powerset set nfa complexity dfa consist sets nfa nfa converted dfa exist nfas subset initial subset converted dfa worst time complexity simple requiring language strings alphabet characters represented nfa requires dfa character suffix input picture applications algorithm dfa minimization powerset construction converts input dfa nfa reverse language initial accepting converts nfa dfa powerset construction process worst complexity exponential dfa minimization algorithms examples performs worst complexity construction converts deterministic automaton deterministic automaton deterministic automaton log powerset construction machinery  
1166059	computer	boltzmann machine called stochastic hopfield network hidden units type stochastic recurrent neural network markov random field boltzmann machines stochastic generative hopfield networks neural networks capable learning internal representations represent sufficient time solve difficult theoretically locality nature training algorithm parallelism dynamics simple physical processes boltzmann machines connectivity proven practical machine learning inference connectivity properly constrained learning efficient practical named boltzmann distribution statistical mechanics sampling function called energy based models invented 1985 hinton professor carnegie mellon university professor university structure boltzmann machine hopfield network network units energy defined network units produce binary hopfield nets boltzmann machine units stochastic global energy boltzmann machine identical form hopfield network weights represented symmetric matrix 13 unit probability difference global energy single unit written 15 assuming symmetric matrix weights energy relative probability boltzmann factor property boltzmann distribution energy proportional negative log probability 18 boltzmann constant absorbed artificial notion temperature 19 terms probabilities unit sum solving 26 probability unit scalar 19 referred temperature relation source logistic function probability expressions variants boltzmann machine network runs repeatedly choosing unit running temperature probability global network depends global energy boltzmann distribution initial process started log probabilities global linear relationship true machine thermal meaning probability distribution global running network temperature temperature gradually decreases reaching thermal temperature converge distribution energy level global minimum process called simulated train network chance converge global external distribution weights set global probabilities lowest training training units boltzmann machine divided visible units hidden units visible units receive environment training set set binary vectors set distribution training set denoted 30 discussed distribution global boltzmann machine reaches thermal denote distribution hidden units 31 goal approximate real distribution 30 31 produced eventually machine measure distributions 34 sum 36 34 function weights determine energy energy determines 38 boltzmann distribution gradient descent algorithm 34 weight changed partial derivative 34 respect weight phases boltzmann machine training positive phase visible units binary vector sampled training set 42 negative phase network allowed freely units determined external data gradient respect weight simple proven equation result thermal probability 48 global 49 network running boltzmann distribution boltzmann machine learning rule change weights local connection speaking neurons connects realistic connection neural network training algorithms backpropagation training boltzmann machine em algorithm heavily machine learning minimizing equivalent maximizing log likelihood data training procedure performs gradient log likelihood observed data contrast em algorithm posterior distribution hidden nodes calculated maximization expected complete data likelihood step training single node activity boltzmann machine theoretically computational medium instance trained photographs machine theoretically model distribution photographs model complete partial practical boltzmann machine learning correctly machine scaled larger trivial machine effects restricted boltzmann machine learning boltzmann machines efficient architecture called restricted boltzmann machine connections hidden units training activities hidden units treated data training level method stacking train layers hidden units efficiently common deep learning strategies layer generative model extension restricted boltzmann machine real valued data binary data boltzmann machines https youtube watch practical application restricted boltzmann machines performance improvement speech recognition software deep boltzmann machine deep boltzmann machine type binary markov random field probabilistic graphical model multiple layers hidden random variables network coupled stochastic binary units set visible units 51 layers hidden units 52 connection links units layer probability assigned vector 54 set hidden units 55 model parameters representing visible hidden hidden hidden interactions layers form restricted boltzmann machine graphical model layers form directed generative model layers symmetric learn complex abstract internal representations input tasks object speech recognition limited labeled data fine representations built supply unlabeled sensory input data deep convolutional neural networks inference training procedure directions pass deep boltzmann machine representations input structures slow speed limits performance functionality exact maximum likelihood learning approximate maximum likelihood learning option field inference estimate data dependent approximate expected sufficient statistics markov chain monte carlo approximate inference input 25 50 times slower single pass joint optimization data sets tasks feature representation history boltzmann machine monte carlo version hopfield network idea stochastic weights models considered cognitive sciences articles appeared publication john hopfield connection physics statistical mechanics spin glasses idea applying model sampling project ideas change sign energy function paul theory explicit drawn statistical mechanics boltzmann machine formulation led terminology physics energy standard field widespread adoption terminology encouraged led variety concepts methods statistical mechanics reason simulated inference independent models considered special markov random fields widespread application fields including linguistics robotics vision artificial intelligence  
1170097	computer	hopfield network form recurrent artificial neural network john hopfield 1982 earlier 1974 hopfield nets serve content addressable associative memory systems binary threshold nodes guaranteed converge local minimum converge false pattern wrong local minimum stored pattern expected local minimum hopfield networks provide model understanding human memory structure units hopfield nets binary threshold units units values determined units input threshold hopfield nets units values convention literature units values pair units hopfield network connection connectivity weight sense hopfield network formally complete graph set neurons function links pairs units real connectivity weight connections hopfield typically restrictions constraint weights symmetric guarantees energy function decreases activation rules network asymmetric weights exhibit periodic chaotic behaviour hopfield behavior phase space network ability content addressable associative memory updating updating unit node graph artificial neuron hopfield network performed rule updates hopfield network performed neurons weight units powerful impact values neurons connection weight neurons 12 updating rule implies values neurons converge weight positive weight negative energy hopfield nets scalar network referred energy network called energy definition ensures units randomly chosen update energy decrease stay repeated updating network eventually converge local minimum energy function considered function local minimum energy function stable network note energy function class models physics models special markov networks probability measure measure markov property running hopfield networks setting values units desired start pattern repeated updates performed network pattern convergence hopfield proved nonlinear stable periodic chaotic systems context hopfield networks pattern final stable pattern change updating training training hopfield involves energy serve content addressable memory network converge recover input trained input called associative memory memories basis similarity train hopfield units energy minimum network converge network properly trained energy network local learning rules learning rules store memory hopfield network desirable learning rule properties properties desirable learning rule human brain learning concepts reason human learning incremental learning incremental trained huge batch training data learning rule hopfield networks theory introduced donald 1949 explain associative learning simultaneous activation neuron cells leads increases strength cells neurons wire neurons fail link rule local incremental hopfield networks implemented manner learning patterns 22 represents bit pattern 23 bits neurons equal pattern 23 product 25 positive positive weight 26 values tend equal bits neurons learning rule rule introduced 1997 local incremental hopfield network trained rule capacity network trained rule weight matrix neural network follow learning rule 28 form local field neuron learning rule local account neurons rule patterns weights generalized rule local field patterns patterns network training called retrieval repeated updates eventually lead convergence retrieval network converge patterns training patterns energy patterns local minimum stored pattern pattern linear combination retrieval patterns 29 patterns exist sum capacity network capacity hopfield network model determined neuron amounts connections network memories stored dependent neurons connections recall accuracy vectors nodes vectors storage 1000 nodes 1991 occur store vectors hopfield model recall pattern items tend individual wrong pattern occurs hopfield network model stored item retrieval perfect capacity 14 loaded network learning method models inspired hopfield network storage limit reduce retrieval error rate capable shot learning human memory hopfield model accounts associative memory memory vectors memory vectors spark retrieval vector network process occur associative memory hopfield network types operations auto association association vector vectors storage types operations store single memory matrix representation matrix operations combination auto associative associative note network model utilizes learning rule 1949 learning rule basically learning occurs result weights activity occurring 2001 neural network model account recall accuracy incorporating probabilistic learning algorithm retrieval process learning occurs result weights network remain fixed model switch learning stage recall stage adding rapid occurs hopfield model recall task entire network change activation single node rule describes behavior neurons activations multiple neurons map activation rate weights neurons connections activated neuron activated hopfield rule retrieval hopfield network note hopfield fashion hopfield nonlinear activation function linear function create hopfield rule hopfield nonlinear activation function rule modify values vector direction stored patterns  
1178658	computer	opensolaris discontinued source operating based solaris created sun microsystems project sun build developer user community software acquisition sun microsystems 2010 oracle decided development core software replaced opensolaris distribution model proprietary solaris express prior oracle moving core development closed opensolaris developers decided fork core software project foundation aims continue development distribution opensolaris distributions continuing development offering support opensolaris unix release svr4 code base developed sun late 1980s version variant unix source opensolaris developed combination software subsequent solaris includes variety software including popular desktop server software august 13 2010 details started opensolaris project release closed source proprietary version solaris solaris 11 history opensolaris based solaris originally released sun 1991 solaris version unix release svr4 jointly developed sun merge features existing unix systems licensed sun novell replace sunos planning opensolaris started 2004 pilot program formed september 2004 18 sun community months growing external participants sun submitted common development distribution license osi approved january 14 2005 solaris code base solaris dynamic facility commonly tool analysis debugging tuning applications systems released january 25 2005 newly launched opensolaris solaris code released june 14 2005 remains code pre compiled binary files direct newly project community advisory board announced april 2005 elected pilot community employees sun broader software community sun hopper rich february 2006 sun approved opensolaris body independent opensolaris board task creating document organization invited stephen developers sun solaris organization prominent opensolaris community generation solaris os version development sun eventually solaris codenamed derived opensolaris code opensolaris builds sun microsystems control solaris generation solaris os eventually solaris code opensolaris stable releases opensolaris based builds initially sun solaris express program distribution based opensolaris code combination software solaris releases independent distribution released june 17 2005 emerged march 19 2007 sun announced hired founder head project effort produce complete opensolaris distribution tools gnu network based package management distribution planned user experience successor solaris express basis future releases solaris 2008 opensolaris 2008 released format live installed desktop environment primary user interface opensolaris 2008 11 release included gui capabilities time functionality macos time machine december 2008 sun microsystems toshiba america systems announced plans toshiba laptops pre installed opensolaris april 2009 opensolaris 2008 11 release software packages june 2009 opensolaris 2009 released support sparc platform january 2010 announced solaris express program closed opensolaris binary release scheduled released march 26 2010 opensolaris 2010 release appeared august 13 2010 oracle discontinued opensolaris binary distribution focus solaris express binary distribution program source code continue accepted community oracle source code continue released source oracle code releases occur binary releases internal email released opensolaris kernel developer oracle post opensolaris august 13 2010 upstream contributions continue oracle downstream source code publishing continue binary distribution continue solaris express model release source code occur binary binary frequent september 14 2010 formally launched centre london fork technical sense opensolaris project deliver family operating binary compatible oracle products solaris 11 solaris 11 express based os opensolaris distribution based release based os project package management opensolaris november 12 2010 final build opensolaris published oracle release repository serve upgrade path solaris 11 express oracle solaris 11 express 2010 11 solaris 11 release post opensolaris distribution oracle released november 15 2010 release model opensolaris offered development production stable releases opensolaris installed rom usb drives network automated usb network install images types releases opensolaris network aware package management called image add remove manage installed software update releases packages development releases opensolaris published oracle typically weeks repository production releases release repository receive updates production release sun customers paid support contracts access updates production releases paid support production releases access security updates bug offered sun support repository sun documentation hardware compatibility list opensolaris choosing hardware opensolaris deployment extensive opensolaris administration usage development documentation online including community contributed license sun released solaris source code common development distribution license based mozilla public license version approved source license source initiative osi january 2005 files licensed combined files licensed licenses source proprietary sun announcement java release gnu public license rich green possibility releasing solaris green green sun close january 2007 reported sources sun told opensolaris dual licensed green responded day article incorrect sun dual licensing arrangement subject agreement rest opensolaris community conferences annual opensolaris developer conference organized german unix user february 27 march 2007 germany 2008 joint effort opensolaris user june 2008 2009 october 2009 germany 2007 sun microsystems organized opensolaris developer held october 13 2007 university california united 2008 opensolaris developer returned 2008 prior launch sun opensolaris distribution 2008 conference san francisco california opensolaris storage organized sun held september 21 2008 preceding storage developer conference california opensolaris storage conference file storage technologies fast february 23 2009 san francisco united november 2009 solaris opensolaris security held sun preceding installation administration conference derivatives notable derivatives include  
1191184	computer	image resolution image holds term applies raster digital images film images types images resolution image image resolution measured resolution close lines resolved resolution units tied physical sizes lines lines inch size picture lines picture height simply lines lines pairs lines pair dark adjacent light dark light resolution lines dark lines light lines pairs photographic lens film resolution pairs resolution digital images resolution digital cameras pixel resolution term resolution considered equivalent pixel count digital imaging international standards digital camera field called total pixels relation image sensors recorded pixels captured notation recorded pixels 1000 standards effective pixels image sensor digital camera count pixel sensors contribute final image including pixels image support image filtering process opposed total pixels includes unused light pixels edges image pixels height pixels wide resolution lines picture height lines pixel counts referred resolution convention pixel resolution set positive integer pixel columns pixel rows height popular convention resolution total pixels image typically calculated pixel columns pixel rows include describing pixels unit pixels unit pixels inch square inch pixel resolutions true resolutions referred serve upper image resolution image pixel resolutions pixels rendered sharp squares smooth image reconstruction pixels preferred pixels sharp squares image pixels pixels height total pixels refer image quality image printed 28 inches wide quality image printed inches wide count pixels real measure resolution digital camera images color image sensors typically set alternate color filter types light sensitive individual pixel sensors digital images ultimately require red green blue pixel displayed printed individual pixel image sensor supply pieces image produce colors output pixel spatial resolution terms digital images reference hardware capturing images spatial resolution refers ability imaging objects spatial resolution techniques unable objects close measure closely lines resolved image called spatial resolution depends properties creating image pixel resolution pixels inch practical purposes clarity image decided spatial resolution pixels image spatial resolution refers independent pixel values unit spatial resolution consumer displays range 50 800 pixel lines inch scanners optical resolution distinguish spatial resolution pixels inch remote sensing spatial resolution typically limited diffraction focus distortion ground sample distance image pixel earth surface typically considerably spot size measures spatial resolution data observation physical distance objects image depends distance varies object hand electron microscopy resolution refers minimum separation adjacent parallel lines atoms resolution refers minimum separation adjacent detected interpreted adjacent columns atoms instance helps detect difficult achieve key individual atoms interact stereoscopic 3d images spatial resolution defined spatial recorded captured stereo camera left camera spectral resolution pixel encoding limit stored digital image term color profile digital images reference hardware capturing images spectral resolution ability resolve spectral features bands separate components color images distinguish light images resolve differences spectrum wavelength measuring storing traditional common rgb color images temporal resolution temporal resolution refers precision measurement respect time movie cameras speed cameras resolve events time time resolution movies 24 48 frames frames speed cameras resolve 50 300 frames cameras displays offset color components relative mix temporal spatial resolution quantum physics trade temporal resolution measurement spatial resolution uncertainty principle time space trade inherent property fourier transform audio resolution resolution determines represent distinguish differences intensity expressed levels bits bits 256 levels typical image files resolution subtle differences intensity represented theory practice effective resolution typically limited noise level bits representation resolution media list traditional analog horizontal resolutions media list includes popular formats rare formats values approximate actual quality vary machine machine tape tape ease comparison values systems replace analog formats resolution  
1203063	computer	level set methods conceptual framework level sets tool numerical analysis surfaces shapes advantage level set model perform numerical computations involving curves surfaces fixed grid objects called approach level set method easy follow shapes change topology shape splits holes reverse operations level set method tool modeling time varying objects drop oil floating water figure ideas level set method upper left corner shape bounded region boundary red surface graph level set function determining shape flat blue region represents plane boundary shape level set shape set plane positive shape boundary row shape changing topology splitting hard transformation boundary shape evolution algorithm detect moment shape splits construct newly curves hand row level set function translated easier shape level set function shape shape handle shape dimensions level set method amounts representing closed curve shape boundary function called level set function represented level set level set method function function assumed positive values region curve negative values level set equation curve moves normal direction speed 14 level set function level set equation 17 euclidean norm denoted single 18 time partial differential equation equation solved finite differences grid numerical solution level set equation requires sophisticated techniques simple finite difference methods fail methods method level set method guarantee volume shape level set field shape size uniform field shape level set level set time steps reason finite difference schemes required essentially schemes time simulations sophisticated methods deal difficulty developed combinations level set method field unit circle 19 constant rate boundary circle moves normal fixed speed circle eventually initial distance field constructed function signed euclidean distance boundary positive negative initial circle gradient field circle normal field constant time level initial boundary fields circular effectively temporal integration equation fixed method surface equation history level set method developed 1980s american james popular disciplines image processing graphics computational geometry optimization computational fluid dynamics computational level set data structures developed facilitate level set method applications computational fluid dynamics math model interface interactions apply specific function compact level set method helps solving equations numerical simulation flow interface water air ensures accurate fast calculation interface equations 2018 distance function locate distance function represents distance analyzed interface distance function identified 2d 3d negative values refer positive values refer corresponds position interface function inserted compact level set method specific mass interface diffusion interface numerical expected treatment fluid interface minimize level set method smooth cell function explicitly defines interface position transition interface smooth magnitude cell size avoid introduction scale equal mesh interface jump property cell 1992 reconstruct material properties flow specific mass function type 20 empirical coefficient equal characteristic varies phenomenon simulated represents interface cells represents interface note method interface virtual represented smooth function physical properties specific mass calculated                 21 specific mass equation applied properties  
1210851	computer	rule programming programming programming language circles overview rule opinion argued flexibility designed lisp programming language includes functionality theoretically write complex program features required develop manage complexity programming languages equivalent subset methods lisp interpreted systems include complex highly systems including custom interpreter domain specific language rule suggests accepted featured language lisp paul nature concept based real issues rule written 1993 rule preceding rules reason robert declared set complicated programs rule applies refers common lisp implementations 1990s depend level core compiled issue variable quality compared common lisp  
1222578	computer	statistical classification including machine learning main approaches called generative approach discriminative approach compute classifiers approaches degree statistical modelling terminology major types distinguished distinction classes consistently refers classes generative learning conditional learning discriminative learning classes calling generative classifiers joint distribution discriminative classifiers conditional distribution distribution distinguishing classes classifier based generative model generative classifier classifier based discriminative model discriminative classifier term refers classifiers based model standard examples linear classifiers generative classifiers bayes classifier linear analysis discriminative model logistic regression model classifier perceptron support vector machine application classification observation label probability distribution labels compute probability distribution distribution classifier estimate probability label observation discriminative model base classification estimate joint distribution generative model compute conditional probability base classification increasingly indirect increasingly probabilistic allowing domain knowledge probability theory applied practice approaches depending hybrids combine multiple approaches definition alternative division defines generative model model conditional probability target discriminative model model conditional probability target observation precise definition terminology generative model generate random instances observation target observation target discriminative model discriminative classifier model target variable observation difference distinguish classify subtle consistently distinguished term discriminative classifier meaning classify inputs relationships models application classification frequently continuous variable target discrete variable consisting finite set labels conditional probability interpreted deterministic target function inputs outputs finite set labels definitions generative model closely model conditional distribution model distribution label model joint distribution equivalent model distribution label values 12 distribution observations label 13 14 model joint probability distribution model distribution label relative frequencies step distinguished model joint distribution distribution individual variables computed distributions 16 17 continuous integrating discrete conditional distribution computed definition conditional probability 18 19 model conditional probability estimated probability distributions variables denoted 20 12 estimate conditional probability bayes rule generative model 13 estimate discriminative model estimate note bayes rule computing conditional probability terms definition conditional probability computing conditional probability terms joint distribution frequently contrast discriminative classifiers generative algorithm models data generated signal question based generation assumptions category generate signal discriminative algorithm care data generated simply signal discriminative algorithms learn 27 data classify data hand generative algorithms learn 28 transformed 27 classify data advantages generative algorithms 28 generate data existing data hand discriminative algorithms performance classification tasks discriminative models model distribution observed variables express complex relationships observed target variables perform generative models classification regression tasks classes complementary views procedure types generative models types generative models observed data sampled generative model fitting parameters generative model maximize data likelihood common method statistical models true distribution model application subset variables conditional values argued approximation assumptions solve hand accurate model conditional density functions discriminative model application specific details ultimately approach suitable examples simple suppose input data 31 set labels 32 33 data data joint probability distribution 28 empirical measure 27  
1236187	computer	computing pipeline data pipeline set data processing elements connected series output element input elements pipeline executed parallel time fashion buffer storage inserted elements pipelines include operating systems provide unix syntax string program runs pipeline implement simple serial execution true pipelining waiting program starting concept motivation pipelining commonly concept life assembly car factory specific task engine wheels separate station stations carry tasks parallel car car task performed moves station variations time complete tasks buffering holding cars space stations upstream stations station suppose car requires tasks 20 15 minutes tasks performed single station factory output car 45 minutes pipeline stations factory output car 45 minutes 20 minutes pipelining decrease latency total time item increase throughput rate items processed design balancing stages throughput pipeline element designer divide resources stages time complete tasks car assembly tasks 15 minutes 20 15 minutes latency 45 minutes car finished 15 minutes 20 buffering processing elements fixed time process item item received element released previous single clock cycle items flow pipeline constant speed waves water channel wave pipelines synchronization buffering stages storage data items buffering pipeline stages processing times items created pipeline graphics pipeline processes rendered screen element checks output pieces partly hidden buffering accommodate rates application items stage output buffer stages simply hardware register suitable synchronization logic stages stage stores data item register data signal stage data data received signal stage waiting signal storing data item register stage waiting data signal ready process item stage processing times element variable pipeline waiting element previous items input frequency pipeline stalls reduced providing space item input buffer stage multiple item buffer implemented queue upstream stage queue frequency events decrease buffer slots theory buffer slots depending processing times desired performance nonlinear pipelines stage takes designer provide processing elements carry task parallel single input buffer single output buffer element processing current data item common output buffer takes data item common input buffer concept linear dynamic pipeline banks serving clients single waiting queue dependencies items applications processing item stage depend processing previous item stage pipeline stage correctly process item item stage situation occurs instruction pipelines suppose arithmetic instruction reads contents register supposed modified earlier instruction stage instruction operands stage writes result register stage process instruction instruction reaches stage register incorrect handle correctly pipeline extra circuitry logic takes action strategies include costs pipelined typically requires resources circuit elements processing units memory executes batch time stages share resources buffering additional synchronization logic elements transfer items separate processing elements increase latency pipelines additional complexity cost pipelining considerable dependencies processing items guess strategy handle cost implementing strategy complex instruction sets motivated simplify architecture risc vliw compilers task machine instructions improve performance instruction pipelines  
1268939	computer	purpose computing graphics processing units gpgpu rarely graphics processing unit gpu typically handles computation graphics perform computation applications traditionally handled central processing unit cpu multiple video cards graphics chips parallel nature graphics processing addition single gpu cpu framework advantages multiple cpus offer chip essentially gpgpu pipeline parallel processing gpus cpus data image graphic form gpus operate frequencies typically times cores gpus process pictures graphical data traditional cpu data graphical form gpu scan analyze create speedup gpgpu pipelines developed century graphics processing pipelines fit scientific computing developed direction history principle arbitrary boolean function including addition multiplication mathematical functions built complete set logic operators 1987 game life examples purpose computing stream processor called special sequence logical operations bit vectors purpose computing gpus practical popular 2001 advent programmable floating support graphics processors notably involving matrices vectors dimensional vectors easy translate gpu acts native speed support types scientific computing community experiments hardware matrix multiplication 2001 common scientific programs faster gpus cpus implementation 2005 efforts gpus purpose processors required computational terms graphics primitives supported major apis graphics processors translation advent purpose programming languages apis nvidia allowed programmers underlying graphical concepts favor common performance computing concepts hardware vendor independent offerings include apple modern gpgpu pipelines speed gpu requiring explicit conversion data graphical form implementations language code running cpu gpu return values create gpgpu framework dominant purpose gpu computing language standard defined cross platform gpgpu platform additionally supports data parallel compute cpus supported intel amd nvidia arm platforms involved development implementations developed supported linux operating systems hosted compiled modern operating dominant proprietary framework nvidia nvidia launched 2006 software development kit sdk application programming interface api programming language code algorithms execution series gpus programming standards parallel computing include vendor independent mark harris founder gpgpu coined term gpgpu sdk created designed accelerate existing code bases gpus minimal effort simplified programming model devices memory additionally multi core cpus targeted source code developed university toronto 2003 2005 collaboration nvidia created common intermediate language supports virtual functions debugging integrated visual studio visual studio extension visual studio introduced gpu computing api released 11 api gpu created introduces native gpu computing capabilities language gpu simplified gpu programming model based gpu parallel parallel automatic memory management matlab supports gpgpu acceleration parallel computing matlab distributed computing server party packages gpgpu processing simulate physics physics engines commercial implementations include physics typically video games close metal called stream amd gpgpu technology based gpus accelerated massive parallelism library execution code exploiting data parallel hardware gpus mobile computers trend increasing power mobile gpus purpose programming mobile devices running major mobile operating systems google android enabled running code mobile device gpu apple introduced proprietary metal api ios applications execute arbitrary code apple gpu compute hardware support video cards produced vendors nvidia amd cards vendors implementing data format support integer floating formats 32 bit 64 bit introduced model standard rank features graphic cards simple model version integer pre video cards supported integer color types formats red element green element blue element alpha common formats floating fixed function limited graphics including compliant gpus sufficient representation displays note representation limitations sufficient graphics processing power graphics programmers formats floating data formats effects dynamic range imaging gpgpu applications require floating accuracy video cards specification model suggested support precision types partial precision precision support floating 32 24 bit component partial precision series gpus supported precision programmable pipeline supported vertex processors nvidia series supported vendors graphics supported mixture formats model altered specification increasing precision requirements minimum support pipeline model compliant generation series supports pipeline nvidia series continued support precision partial model nvidia model gpus introduced support render targets easily support dynamic range rendering implementations floating nvidia gpus ieee compliant true vendors implications considered scientific applications 64 bit floating values double precision commonly cpus supported gpus gpu architectures ieee lack double precision efforts occurred emulate double precision floating values gpus speed benefit computing gpu operations gpu operate fashion operation performed values color color gpu produce color operation functionality graphics basic data type vector dimensional examples include vertices colors normal vectors texture coordinates applications performance vector instructions termed single instruction multiple data simd cpus gpu cpu originally data simply passed central processing unit cpu graphics processing unit gpu display device time valuable gpus store simple complex structures data passed cpu analyzed image set scientific data represented 2d 3d format video card understand gpu access draw operation analyze data forms cpu pixel data element speed access cpu larger random access memory hard drive slower gpus video cards typically amounts expensive memory faster access portion data set analyzed gpu memory form textures easily readable gpu forms speed increase distinguishing feature gpgpu design ability transfer gpu cpu data throughput directions ideally speed specific algorithm gpgpu pipelines improve efficiency data sets data 2d 3d complex graphics pipelines scientific computing fields data sets mapping dimensional analysis analysis protein study complex pipelines improve efficiency image processing vision fields parallel processing heavily optimized pipelines speed increases times original cpu based pipeline task simple gpu program data average lighting values view camera graphics program main program cpu cpu screen view advanced edge detection return numerical processed image representing vision program controlling mobile robot gpu fast local hardware access pixel picture element image analyze average apply edge filter convolution filter speed cpu typically access slower random access memory copies graphic question gpgpu software concept hardware concept type algorithm piece equipment specialized equipment designs enhance efficiency gpgpu pipelines traditionally perform algorithms amounts data data level tasks specialized computing highly tailored machines built adds layer computing units cpus correspond gpus processing caches historically cpus hardware managed caches earlier gpus software managed local memories gpus increasingly purpose applications art gpus designed hardware managed multi level caches helped gpus mainstream computing 200 series architecture gpus feature l2 cache gpu level cache gpu level cache gpu level cache pascal gpu level cache register file gpus register files reduce context switching latency register file size increasing gpu generations total register file size pascal gpus comparison size register file cpus typically tens hundreds energy efficiency projects compared energy efficiency gpus cpus stream processing gpus designed graphics operations programming design gpus effective solved stream processing hardware discussion referring vertices fragments textures concerns legacy model gpgpu programming graphics apis perform purpose computation introduction nvidia 2007 vendor independent 2008 purpose computing apis gpgpu codes map computation graphics primitives stream processing nature gpus remains valid apis gpus process independent vertices fragments process parallel effective programmer process vertices fragments sense gpus stream processors processors operate parallel running kernel records stream stream simply set records require computation streams provide data parallelism kernels functions applied element stream gpus vertices fragments elements streams vertex kernels element read input perform operations write output multiple inputs multiple outputs piece memory readable writable arithmetic intensity defined operations performed word memory transferred gpgpu applications arithmetic intensity memory access latency limit computational speedup ideal gpgpu applications data sets parallelism minimal dependency data elements gpu programming concepts computational resources variety computational resources gpu program write texture output framebuffer render texture render texture stream textures stream common form stream gpgpu 2d grid naturally rendering model built gpus computations naturally map matrix algebra image processing physically based simulation textures memory texture memory reads operations automatically gpu kernels compute kernels body loops programmer operating grid cpu code gpu programmer specifies body loop kernel data loop geometry processing flow control sequential code control flow program statements forms loops flow control structures gpus conditional writes performed properly series arithmetic bit operations conditional branching gpus branching performance penalty branching loops cpu gpu code methods static branch resolution pre computation loop splitting achieve branching hardware support exist gpu methods map map operation simply applies function kernel element stream simple stream constant increasing brightness image map operation simple implement gpu programmer generates pixel screen applies program result stream size stored output buffer reduce computations require calculating stream stream element larger stream called reduction stream reduction performed multiple steps prior step input current step range operation applied reduced stream element remains stream filtering stream filtering essentially uniform reduction filtering involves removing items stream based criteria scan scan operation termed parallel prefix sum takes vector stream data elements arbitrary associative binary function identity element input exclusive scan produces output scan produces output require identity exist operation inherently serial efficient parallel scan algorithms implemented graphics processing units scan operation sparse matrix vector multiplication operation naturally defined vertex processor vertex processor adjust position vertex programmer control grid extensions controlling vertex processor perform direct operation location grid fixed time creation altered programmer logical operation implemented step implementation output output address operation address output maps current output slot dedicated compute kernels performed indexed writes reverse elements map elements map dedicated compute kernels performed indexed reads performed texture sort sort operation transforms set elements set elements common implementation gpus sort integer floating data coarse grained merge sort fine grained sorting networks comparable data search search operation programmer element stream neighbors element gpu speed search individual element multiple searches parallel search method binary search elements data structures variety data structures represented gpu applications gpus purpose computing bioinformatics gpgpu usage bioinformatics molecular dynamics expected highly dependent configuration gpu performance compared multi core x86 cpu socket gpu performance gpu supported features kernel kernel performance comparison details configuration view application nvidia house testing documentation gpu tesla gpu nvidia recommended gpus application check developer certification  
1281850	computer	learning reinforcement learning technique machine learning goal learning learn policy agent action require model environment handle stochastic transitions requiring finite markov decision process learning policy optimal sense expected total reward successive steps starting current learning identify optimal action selection policy infinite exploration time partly random policy names function returns reward provide reinforcement stand quality action reinforcement learning reinforcement learning involves agent set set actions performing action agent transitions executing action specific agent reward numerical score goal agent maximize total future reward adding maximum reward future reward achieving current effectively current action potential future reward potential reward weighted sum expected values future steps starting current process train reward measured negative total time spent alternatively cost train equal time strategy enter train door minimizing initial wait time train slow entry initial action entering door people train attempt board total time cost day random chance exploration decide wait people initially wait time entry time board path reward previous day total time exploration initial patient action larger cost negative reward strategy cost strategy algorithm weight step steps future calculated factor received earlier received start interpreted probability step algorithm function quality action combination learning arbitrary fixed chosen programmer time agent action reward 11 12 depend previous 13 selected action 14 updated core algorithm simple iteration update weighted average 16 reward received moving 17 12 19 learning rate 20 episode algorithm 12 final terminal learning learn tasks factor action values finite infinite loops final 22 23 updated set reward 24 observed 22 26 equal influence variables explore exploit learning rate step size determines extent newly acquired factor agent learn exclusively exploiting prior knowledge factor agent prior knowledge explore deterministic environments learning rate 27 optimal stochastic algorithm technical conditions learning rate require decrease practice constant learning rate 28 factor factor determines future factor agent short current 11 update rule factor term reward factor action values terminal agent reaches environment utilities additive infinite factor function learning leads propagation errors function approximated artificial neural network starting factor increasing final learning initial conditions learning iterative algorithm assumes initial condition update occurs initial values initial conditions encourage exploration matter action selected update rule values alternative increasing choice probability reward 24 initial conditions idea time action reward set 14 learning fixed deterministic model incorporates initial conditions expected predict participants behavior model assumes arbitrary initial condition consistent human behaviour repeated binary choice experiments implementation learning simplest stores data tables approach increasing actions function approximation learning combined function approximation apply algorithm larger space continuous solution adapted artificial neural network function function approximation speed learning finite algorithm earlier experiences unseen technique decrease action space values learning balance time involves position space angle yields element vector describes encoded values space valid actions multiple values assigned exact distance starting position infinity infinity history learning introduced 1989 convergence proof 1992 detailed mathematical proof 1994 1996 dynamic programming book addressing delayed title phd thesis earlier 1981 reinforcement solved adaptive array memory matrix table learning architecture introduced term reinforcement learning learning algorithm written mathematical paper iteration performs computation term animal learning theory model values backpropagation consequence situation situations computes values vertically actions horizontally demonstration graphs delayed reinforcement learning contained desirable neutral computed evaluation function learning learning algorithm 2014 google deepmind patented application learning deep learning titled deep reinforcement learning deep learning play atari games expert human levels variants deep learning deepmind deep convolutional neural network layers convolutional filters mimic effects receptive fields reinforcement learning nonlinear function neural network represent sequence observations updates change policy data distribution target values technique experience inspired mechanism random sample prior actions action observation sequence data distribution iterative update target values updated reducing target double learning future maximum approximated action learning evaluated function current action selection policy noisy environments learning action values learning variant called double learning proposed correct double learning policy reinforcement learning algorithm policy evaluation select action practice separate functions trained symmetric fashion separate experiences 33 34 double learning update step estimated future evaluated policy issue algorithm combined deep learning algorithm double original algorithm delayed learning alternative implementation online learning algorithm correct learning variant learning combination linear function approximation advantage convergence guaranteed function approximation estimate action values  
1290139	computer	office 2003 codenamed office 11 office suite developed distributed windows operating office 2003 released manufacturing august 19 2003 released retail october 21 2003 successor office xp predecessor office 2007 features office 2003 include rights management collaboration features improved support smart tags xml extended office online services office 2003 introduces programs office product program designing electronic structured data forms note program creating organizing graphics handwritten notes recorded audio introduces picture manager graphics software manage share digital images release office 2003 office productivity suite integrated dedicated workers result office names programs office 2003 version support windows xp colors visual introduces updated office 2003 version office include menu bar programs version include 2003 file format default file format compatible windows 2000 windows xp windows server 2003 windows vista windows windows server 2008 windows nt windows 98 windows version office compatible windows 2000 office 2007 requires windows xp version released total service office 2003 service pack released july 27 2004 service pack released september 27 2005 service pack released september 17 2007 mainstream support office 2003 april 14 2009 extended support april 2014 dates mainstream extended support windows xp features core applications word excel access minor improvements office xp outlook 2003 received improved functionality including email calendar sharing display complete support search authentication cached exchange mode key benefit outlook 2003 improved mail filter tablet pen support introduced productivity applications word 2003 introduced reading layout view document comparison change tracking annotation task voice comments xml based format features excel 2003 introduced list commands statistical functions xml data import analysis transformation document features access 2003 introduced backup command ability view object dependencies error checking forms reports features office 2003 features improvements smart tags smart tag lists defined xml regular expressions extended type library smart tag recognition access 2003 introduced conditional replace elements tools creating tables cells dynamic flash support publishing features 2003 introduced generic color printer driver commercial printing rights management capabilities introduced document productivity applications limit access set users types actions users perform support managed code add solutions introduced office 2003 version office include applications office assistant ability service original setup files office components save settings allowed users choose locally cached installation source files utility resource kit tools office version support windows 2000 picture basic editing features called office picture manager included basic included disc media content hosted online office application office online major office 2003 feature box office online articles training courses art stock photos media including party add office programs office 2003 features broad xml integration designing customized xml transforming xml data data model document based library introduced office xml integration office 2003 integration facilitate data exchange publishing 2003 introduced data xml based forms based databases editions released separate editions office 2003 basic student standard business professional retail editions upgrade versions basic edition original equipment manufacturers student edition intended office 2003 applications purchase standalone products  
1290145	computer	office xp codenamed office office suite created distributed windows operating office xp released manufacturing march 2001 retail 31 2001 successor office 2000 predecessor office 2003 features office xp include smart tags selection based search feature recognizes types document users perform additional actions task interface popular menu bar commands screen facilitate quick access document collaboration capabilities support integrated handwriting recognition speech recognition capabilities office xp incorporated features address reliability issues observed previous versions office office xp introduces separate document imaging document scanning applications office assistant commonly introduced office users disabled default office xp change key element campaign office xp office xp windows 95 office xp compatible windows nt windows 98 windows 2000 windows windows xp windows vista version support windows nt windows 98 windows successor office 2003 support operating systems released service office xp mainstream support office xp july 11 2006 extended support july 12 2011 office xp received positive reviews release critics collaboration features document protection recovery functionality smart tags suite handwriting recognition speech recognition capabilities criticized viewed offerings competitors 2002 60 office xp licenses sold history meeting financial analysts july 2000 demonstrated office xp office included subset features designed time strategy intended provide extensive client access services features speech recognition server 2001 codenamed development time improve collaboration users office 2000 office august released office beta product evaluation purposes period office characterized release predecessor office 2000 future version planned include options integrated speech recognition improved collaboration capabilities enhanced support services complete beta compatible windows 95 windows 98 windows nt windows 2000 release office beta intended product office 2001 office 2002 office office xp experience brand experiences enabled product time intended version visual studio visual studio sources stated company office product partially company strategy ultimately decided office xp final product brand windows codenamed developed concurrently individual office xp products excel word continue based naming named 2002 office xp beta released 000 technical late 2000 beta introduced improvements setup tools custom maintenance allowed setup components modified installation setup process office xp version windows product support windows 95 windows nt release beta announced corporate kit program office xp 500 000 corporate customers evaluate corporate beta version product total machines individual copies cost 19 95 august 31 2001 office xp released manufacturing march 2001 retail 31 2001 service released total service office xp introduced security enhancements stability improvements software bugs product service separate client file updates client updates intended users installed office xp rom office update standalone required office xp installation media installation process installed file updates require access installation media intended network deploy updates office xp users installed product server location users manually install file updates file updates require windows office xp shipped version september 25 2001 released windows windows windows nt windows 2000 windows shipped windows xp service pack released december 11 2001 included performance security improvements stability improvements based error reports users resolved issue documents saved service pack released august 21 2002 included standalone updates updates included cumulative security excel word address code embedded document macros file version client version requires installed file updates released applied client office xp earlier updates designed update images fail applied clients service pack released march 30 2004 included released updates stability improvements based feedback error reports received users require earlier service installed office xp client updated image file version installed features user interface office xp appearance compared previous versions office involved removing visually competing elements visually items increasing letter word defining background color bring elements smart tags excel 2002 word 2002 introduce smart tags commands specific types including addresses calendar dates personal names telephone symbols tracking documents smart tag denoted document mouse displays list commands mouse keyboard symbol smart tag excel stock cell contact smart tag word document display options send mail message schedule meeting contact excel word support smart tags developers organizations display custom commands specific smart tags word outlook 2002 configured default mail editor options commands previous versions office updated include smart tags shared office xp programs smart tag individual options automatic correction automatic correction occurring future access options box represented blue box mouse options smart tag options original content change based active program provide specific characteristics content users release office xp repository smart tags installed users examples party companies produced smart tags release office xp include released smart tag notes introduced january 2002 task office xp introduces task interface popular menu bar commands screen facilitate quick access office xp includes startup search insert art task task exclusive programs word 2002 includes task dedicated style options users switch task buttons drop list specific task users switch default startup task automatically users launch office xp program individual commands existing file create file template add network location office search task includes individual basic advanced modes users query local remote locations files basic mode users perform searches advanced mode additional file property query options indexing service improve returned search performed insert art task excel word options search insert online art files office task office xp programs accommodate 24 items compared 12 office 2000 items provide visual representation users distinguish types content office task items copied file formats xml support access 2002 excel 2002 support xml users save excel xml office xml compatibility pack 2006 released compatibility pack office 2000 office xp office 2003 enables users edit save excel word office xml documents introduced office 2007 compatibility pack requires windows 2000 windows server 2003 windows xp versions windows update enables compatibility documents created office 2010 office 2013 office 2016 alternative user input handwriting recognition office xp introduces handwriting recognition office programs allowing users write mouse entering typing keyboard users insert handwritten notes excel add handwritten comments presentations send handwritten mail messages outlook write word documents notes written handheld pc pocket pc converted word documents handwritten content word documents converted word active mail editor outlook handwritten mail messages installed handwriting functionality internet outlook express handwriting recognition engines english simplified chinese traditional chinese japanese korean versions office xp tablet pack office xp extension windows journal notes outlook 2002 items import meeting outlook 2002 notes speech recognition speech recognition based technology office xp programs allowing users active documents change document navigate interface voice speech recognition feature modes dictation spoken voice command interface features speech recognition installed office xp setup speech option tools menu word 2002 installed microphone command language appears upper corner screen corner east versions office xp launched time speech recognition offers improve recognition accuracy providing instructions adjust microphone optimal performance speech recognition speech profile store user voice users speech recognition settings including pronunciation sensitivity voice command mode accuracy recognition response time dictation mode microphone settings speech control panel regional language options language additional settings speech recognition engines english japanese simplified chinese languages recommended game device microphone speech recognition reliability office xp incorporated features address reliability issues observed previous versions office security excel word updated provide encryption options based additionally office xp programs provide options users digitally sign documents installation deployment previous version office office xp user previous configuration office xp installed image hosted server https office resource kit includes improvements deployment functionality compared office 2000 version setup office xp configuration file prior deployment custom installation installation programs features network installed setup options finally custom maintenance updated provide options office xp including user preferences security settings save settings introduced office 2000 optional download account users remotely store office settings office update updated support local storage network share effort software incorporated product activation technology versions office xp users single software manner user license agreement single user install primary device portable device laptop users substantial hardware office xp device software internet telephone product activation require office xp introduced optional based activation model allowed consumers annually license product receive incremental updates reduced price compared cost retail version originally intended deliver activation model united customers retail availability office xp 31 2001 decided consumers select locations citing delivery approach distributed optical media single retail partners attended live events pilot experiment consumers australia france purchase office xp starting 2001 worldwide release activation model success pilot experiment support 2002 based feedback demonstrated understood consumers office released decade office xp based licenses consumers user assistance question feature appears corner office xp programs users type natural language questions receive answers office assistant office additionally office updated display content internet response query office assistant disabled default appears activated editions component products packaged editions retail packages upgrade versions oem versions inclusion pcs volume license versions required activation editions core components word excel outlook editions business edition reception office xp received mixed positive reviews release collaboration data recovery features stated office xp offered host incremental improvements predecessor office 2000 ultimately concluded enhancements suited individuals criticism directed productivity suite strict hard disk space requirement windows 95 awarded office xp star editors pc magazine rated office xp product emphasis user control options features introduced previous versions regarded offers gains york times stated office xp list features improved arrangement offered collaboration features regarded huge previous versions paul regarded office xp upgrade stated smart tags feature minor upgrade numerous office xp positive speech recognition feature frequently criticized lack advanced functionality regarded recognize editing commands select sentence required users manually switch command dictation modes pc magazine stated speech recognition handwriting recognition features reliable assessment pc magazine stated speech recognition accurate commands editing recommended ibm voice dictation york times confidence feature installed default microphone included office xp concluded bad draft clean recognition errors paul stated voice recognition bad worth sort compared products  
1303494	computer	science suffix array array string data structure data compression algorithms field suffix arrays introduced simple space efficient alternative suffix trees independently discovered 1987 array enhanced suffix arrays suffix arrays additional tables functionality suffix trees time memory complexity suffix array subset string called sparse suffix array multiple probabilistic algorithms developed minimize additional memory usage including optimal time memory algorithm definition denote ranging suffix array defined array integers providing starting positions entry math starting position suffix math math codice indexed special letter codice unique character suffix array starting positions suffix array written vertically clarity refers suffix starting position suffix codice correspondence suffix trees suffix arrays closely suffix trees suffix tree algorithm replaced algorithm suffix array enhanced additional array time complexity advantages suffix arrays suffix trees include improved space requirements simpler linear time construction algorithms compared algorithm improved cache locality space efficiency suffix arrays introduced improve space requirements suffix trees suffix arrays store 16 integers assuming integer requires 17 bytes suffix array requires 18 bytes total 19 bytes required suffix tree implementation applications space requirements suffix arrays analyzed bits suffix array requires 20 space original alphabet size 21 requires 22 bits human 23 24 suffix array 16 times memory motivated trend compressed suffix arrays based compressed data structures require space size construction algorithms suffix tree built converted suffix array tree depth exist algorithms build suffix array approach construct suffix array comparison based sorting algorithm algorithms require 20 suffix suffix comparison runs time runtime approach 30 advanced algorithms advantage arbitrary strings algorithms achieve goals algorithms achieve goals algorithm algorithm simple 100 enhanced simultaneously construct array algorithm fastest suffix array construction algorithms implementation linear super linear construction approaches time space requirements suffix array construction algorithms supported alphabet constant alphabet size bound constant integer characters integers range depending 16 character allowed suffix array construction algorithms based approaches recursive algorithm integer algorithm runs linear time basis parallel external memory suffix array construction algorithms algorithm updating suffix array edited suffix array scratch theoretical worst time complexity 20 appears perform practice experimental authors implementation dynamic suffix arrays efficient reasonable letters original applications suffix array string locate occurrence pattern 34 string finding occurrence pattern equivalent finding suffix suffix array efficiently binary searches search starting position interval determines position finding pattern 34 37 string 16 takes 40 time single suffix comparison compare 37 characters bound improved 42 time idea pattern comparison compare characters common prefix pattern current search interval improve bound achieve search time 43 suffix trees suffix sorting algorithms compute transform requires sorting string string special string character character matrix corresponds suffix array computed linear time constructing suffix array string 44 suffix arrays based machine translation storage phrase table statistical machine translation additional applications suffix array require array detailed application  
1307911	computer	bootstrap called machine learning algorithm designed improve stability accuracy machine learning algorithms statistical classification regression reduces variance helps avoid overfitting applied decision tree methods type method special model approach description technique standard training set size generates training sets size sampling uniformly replacement sampling replacement observations repeated set expected fraction unique examples rest sample bootstrap sample models fitted bootstrap samples combined output regression classification leads improvements procedures 1996 include artificial neural networks classification regression trees subset selection linear regression 1994 application improvement learning hand performance stable methods nearest neighbors 1996 data illustrate basic principles analysis relationship temperature data 1986 analysis relationship temperature data set linear based plot mathematically relationship bandwidth building single complete data set 100 bootstrap samples data drawn sample original data set distribution bootstrap sample fit predictions 100 range data predicted smooth lines figure lines data result bandwidth average 100 fitted subset original data set predictor red stable history bootstrap proposed 1994 improve classification combining randomly generated training sets 1994 technical report  
1331441	computer	document classification document library science science science task assign document classes categories manually intellectual classification documents library science algorithmic classification documents science science overlapping document classification documents classified texts images music document special classification classification documents classified subjects attributes document type author printing rest article subject classification considered main subject classification documents content based approach request based approach content based request based classification content based classification classification weight subjects document determines class document assigned common rule classification libraries 20 content book class book assigned automatic classification times appears document request oriented classification indexing classification request users documents classified classifier entity queries decide entity hand 1985 request oriented classification classification targeted audience user library database studies classify documents compared historical library understand request oriented classification policy based classification classification reflects purpose library database classification classification indexing based user studies empirical data users applied request oriented classification regarded user based approach classification indexing distinction assigning documents classes classification assigning subjects documents subject indexing argued distinction writes serve 2003 view distinction purely supported classification transformed vice versa 1986 2004 2008 1991 labeling document assigning term controlled vocabulary document time assign document class documents indexed term documents indexed classified belong class documents automatic document classification automatic document classification tasks divided supervised document classification external mechanism human feedback correct classification documents unsupervised document classification document clustering classification reference external semi supervised document classification documents labeled external mechanism software products license models techniques automatic document classification techniques include applications classification techniques applied  
1360091	computer	backpropagation method artificial neural networks calculate gradient calculation weights network backpropagation propagation errors error computed output distributed layers commonly train deep neural networks backpropagation generalization rule multi layered feedforward networks chain rule compute gradients layer closely algorithm continuing neural backpropagation backpropagation special technique called automatic context learning backpropagation commonly gradient descent optimization algorithm adjust weight neurons calculating gradient loss function motivation goal supervised learning algorithm function maps set inputs correct output motivation backpropagation train multi layered neural network learn internal representations learn arbitrary mapping input output learning optimization understand mathematical derivation backpropagation algorithm helps develop relationship actual output neuron correct output training simple neural network input units output unit hidden units neuron linear output weighted sum input initially training weights set randomly neuron learns training examples consist set inputs network correct output output network produce inputs trained initial network compute output differs random weights common method measuring expected output actual output squared error measure error network single training input correct output actual output horizontal axis error vertical axis result minimum corresponds output minimizes error single training minimum horizontal axis error network produce output matches expected output mapping inputs outputs reduced optimization finding function produce minimal error output neuron depends weighted sum inputs 11 12 weights connection input units output unit error depends incoming weights neuron ultimately changed network enable learning weight separate horizontal axis error vertical axis result neuron weights plot require 13 dimensions commonly algorithm set weights minimizes error gradient descent backpropagation calculate descent direction derivation single layered network gradient descent method involves calculating derivative squared error function respect weights network backpropagation assuming output neuron squared error function factor 18 included expression arbitrary learning rate matter constant coefficient introduced neuron 19 output 20 defined input 22 neuron weighted sum outputs 23 previous neurons neuron layer input layer 23 input layer simply inputs 25 network input units neuron 26 variable 27 denotes weight neurons 28 19 activation function 30 linear differentiable commonly activation function logistic function convenient derivative finding derivative error calculating partial derivative error respect weight 33 chain rule factor hand term sum 22 depends 33 neuron layer input layer 38 derivative output neuron 19 respect input simply partial derivative activation function assuming logistic function reason backpropagation requires activation function differentiable activation function differentiable popular factor straightforward evaluate neuron output layer 42 19 arbitrary layer network finding derivative 15 respect 20 obvious 15 function inputs neurons 48 receiving input neuron 19 total derivative respect 20 recursive expression derivative derivative respect 20 calculated derivatives respect outputs 54 layer – closer output neuron – update weight 33 gradient descent choose learning rate 58 change weight reflect impact 15 increase decrease 33 increase 33 increases 15 conversely 64 increase 33 decreases 15 67 weight product learning rate gradient 68 guarantees 33 decreases 15 equation 33 15 loss function loss function function maps values variables real intuitively representing cost values backpropagation loss function difference network output expected output training network assumptions mathematical expression loss function conditions propagation written average 75 error functions individual training examples 78 reason assumption backpropagation algorithm gradient error function single training generalized error function assumption written function outputs neural network loss function 79 vectors 80 select error function measuring difference outputs standard choice square euclidean distance vectors 17 error function training examples written average individual examples continuous backpropagation derived context control theory 1960 1961 principles dynamic programming 1962 published simpler derivation based chain rule multi stage dynamic optimization method 1969 backpropagation derived multiple researchers 60 implemented computers 1970 examples 1960s researchers include 1969 paul neural nets analyzing depth 1974 phd thesis 1986 david hinton james backpropagation gained recognition 1970 published method automatic discrete connected networks nested differentiable functions corresponds backpropagation efficient sparse networks 1973 backpropagation adapt parameters controllers proportion error gradients 1974 mentioned possibility applying principle artificial neural networks 1982 applied method neural networks 1986 hinton method generate internal representations incoming data hidden layers neural networks 1993 wan win international pattern recognition contest backpropagation 2000s fell returned 2010s powerful gpu based computing systems language structure learning models algorithm explain variety phenomena language learning  
1363880	computer	random forests random decision forests learning method classification regression tasks operates constructing decision trees training time class mode classes classification prediction regression individual trees random decision forests correct decision trees overfitting training set algorithm random decision forests created random method formulation implement stochastic approach classification proposed extension algorithm developed registered random forests trademark owned extension combines idea random selection features introduced independently construct collection decision trees controlled variance history method random decision forests proposed 1995 established forests trees splitting gain accuracy grow forests randomly restricted sensitive selected feature dimensions subsequent lines concluded splitting methods randomly forced feature dimensions note observation complex classifier larger forest accurate sharp contrast common belief complexity classifier grow level accuracy overfitting explanation forest method theory stochastic development notion random forests influenced introduced idea searching random subset decisions splitting node context growing idea random selection influential design random forests method forest trees grown variation trees introduced training randomly chosen fitting tree node finally idea node optimization decision node selected procedure deterministic optimization introduction random forests proper paper describes method building forest trees procedure combined addition paper combines form basis practice random forests report offers theoretical result random forests bound generalization error depends strength forest correlation algorithm decision tree learning decision trees popular method machine learning tasks tree learning closest meeting requirements serving procedure data mining invariant scaling transformations feature values robust inclusion features produces models accurate trees grown deep tend learn highly patterns training sets bias variance random forests multiple deep decision trees trained training set goal reducing variance increase bias loss greatly performance final model training algorithm random forests applies technique bootstrap tree training set responses repeatedly times random sample replacement training set trees samples training predictions unseen samples predictions individual regression trees majority classification trees procedure leads model performance decreases variance model increasing bias predictions single tree highly sensitive noise training set average trees trees simply training trees single training set trees tree times training algorithm deterministic bootstrap sampling trees training sets additionally estimate uncertainty prediction standard deviation predictions individual regression trees samples trees parameter typically trees depending size nature training set optimal trees cross validation bag error prediction error training sample trees bootstrap sample training error tend level trees fit random forests procedure describes original algorithm trees random forests scheme modified tree learning algorithm candidate split learning process random subset features process called feature reason correlation trees ordinary bootstrap sample features strong predictors response variable target output features selected trees causing analysis random projection contribute accuracy gains conditions typically classification features features split regression minimum node size default adding step yields extremely trees ordinary random forests individual trees main differences tree trained learning sample bootstrap sample splitting tree computing locally optimal cut feature based gain random cut selected selected uniform distribution feature empirical range tree training set randomly generated splits split yields score chosen split node ordinary random forests randomly selected features considered node default values parameter classification regression features model properties variable random forests rank variables regression classification natural technique original paper implemented package step measuring variable data set fit random forest data fitting process bag error data recorded forest errors independent set training measure feature training values feature training data bag error computed data set score feature computed difference bag error trees score normalized standard deviation differences features produce values score ranked features produce values statistical definition variable measure analyzed method determining variable data including variables levels random forests favor attributes levels methods partial growing solve data features relevance output larger relationship nearest neighbors relationship random forests nearest neighbor algorithm nn 2002 viewed called weighted schemes models built training set predictions 11 neighborhood weight function 13 negative weight training relative tree weights 14 sum weight functions forest predictions set trees individual weight functions 17 predictions forest weighted neighborhood scheme weights average individual trees neighbors interpretation 14 sharing tree neighborhood depends complex structure trees structure training set shape neighborhood random forest local feature unsupervised learning random forests construction random forest predictors naturally lead measure observations define random forest measure unlabeled data idea construct random forest predictor data generated synthetic data observed data original unlabeled data synthetic data drawn reference distribution random forest handles mixed variable types invariant transformations input variables robust observations random forest easily deals semi continuous variables variable selection random forest contribution variable dependent variables random forest variety applications clusters patients based tissue data variants decision trees linear models proposed evaluated base random forests logistic regression bayes classifiers kernel random forest machine learning kernel random forests establish connection random forests kernel methods modifying definition random forests kernel methods easier analyze history person link random forest kernel methods random forests grown random vectors tree construction equivalent kernel acting true margin established connection random forests adaptive nearest neighbor random forests adaptive kernel estimates proposed random forest kernel art kernel methods defined estimates explicit link estimates random forest explicit expressions kernels based centered random forest uniform random forest simplified models random forest named centered uniform proved upper rates consistency definitions centered forests centered forest simplified model original random forest uniformly attribute attributes performs splits center cell pre chosen attribute algorithm binary tree level 21 built 22 parameter algorithm uniform forest uniform forest simplified model original random forest uniformly feature features performs splits uniformly drawn cell feature random forest training sample 23 24 25 aim predicting response 26 random variable 27 regression function 28 random regression forest 29 regression trees denote 30 predicted 31 tree 33 independent random variables distributed generic random variable 34 independent sample 35 random variable node splitting sampling procedure tree construction trees combined form finite forest estimate 36 regression trees 37 38 cell 31 designed 40 dataset 35 42 random forest estimates satisfy 43 44 random regression forest level samples target cell tree trees contributions observations cells density data observations belong cells improve random forest methods defined equal 46 cells 31 forest define connection function 29 finite forest 49 proportion cells shared 31 51 52 defines centered construction centered level 21 centered forest predictions 54 kernel function connection function uniform built uniform forest predictions 54 kernel function connection function relation random forest predictions random forests close cell controlled assume exist sequences 58 relation infinite infinite random forest trees 29 infinity infinite random forest infinite estimates close observations cell bounded assume exist sequences consistency assume 67 68 centered gaussian noise independent 27 finite variance 70 27 uniformly distributed 72 proved upper rates consistency centered uniform consistency centered providing 75 exists constant 78 consistency uniform providing 75 exists constant rf scientific algorithm scientific advantages quality assessment wikipedia articles  
1370562	computer	integrity integrity real time operating systems produced marketed green software integrity integrity posix intended embedded systems 32 bits 64 bits supported architectures include variants arm mips powerpc x86 integrity supported popular libraries integrity integrity version integrity military 16 22 35 commercial aircraft kernel design guarantees bounded computing times features dynamic memory allocation security engineering abilities allowed evaluation level national security agency nsa target evaluation architecture security target evaluation components file networking definition focusing solely core kernel operating systems windows linux evaluated levels include abilities supported processor architectures integrity architecture support package support processor families  
1396397	computer	mathematics interpolation extension interpolation data dimensional regular grid surface surfaces interpolation nearest neighbor interpolation interpolation accomplished convolution algorithm image processing interpolation chosen nearest neighbor interpolation image speed issue contrast interpolation takes pixels account interpolation considers 16 pixels images interpolation interpolation artifacts computation suppose function values derivatives corners unit square surface written interpolation consists determining 16 coefficients matching 11 function values yields equations equations derivatives 16 17 directions equations 26 mixed partial derivative expressions procedure yields surface 11 unit square 35 continuous continuous derivatives interpolation sized regular grid accomplished surfaces derivatives match boundaries unknown parameters equations matrix linear equation matrix linear equation 40 42 calculated easily matrix form 16 coefficients derivatives function values derivatives unknown typically approximated function values corners unit square finite differences single derivatives method slope surrounding axis calculate 49 left target calculate slope cross derivative derivative axes time procedure 16 derivatives target procedure values usual values 56 target direction calculating equivalent edges dataset missing surrounding missing approximated methods simple common method assume slope existing target continues change calculate missing convolution algorithm interpolation requires solution linear grid cell properties applying convolution kernel dimensions 60 set 75 note integers approach proposed 64 corresponds produces convergence respect sampling interval original function matrix notation common 64 express equation friendly manner 67 dimension note dimensional convolution interpolation sample required samples located left samples indexed distance indexed denoted 67 dimensions applied 16 17 graphics algorithm frequently scaling images video display fine common algorithm negative kernel artifacts increases acutance apparent desirable  
1398487	computer	super resolution imaging class techniques enhance resolution imaging optical diffraction limit systems resolution digital imaging sensors enhanced radar imaging applications magnetic imaging mri resolution computed tomography decomposition based methods music compressed sensing based algorithms employed achieve standard algorithm super resolution imaging techniques image processing super resolution microscopy basic concepts ideas surrounding super resolution fundamental issues relevant physical theoretical principles diffraction limit physical object optical instrument image limits laws physics formulated diffraction equations wave theory light uncertainty principle quantum mechanics transfer increased boundary packets limits diffraction limit procedures magnetic molecular level called field remain consistent equations expression diffraction limit spatial frequency domain fourier light distributions expressed series light patterns range technically spatial frequencies taught diffraction theory upper limit cut spatial frequency pattern elements fail transferred optical image resolved set diffraction theory fixed upper limit laws physics broken spatial frequency band cut spatial frequency implemented dark field microscopy theoretical rules broken bands received image assumptions object multiple uncertainty term super resolution techniques object details statistical treatment image standard resolution limits multiple involves exchange signal noise assumption target remained invariant resolution localization true resolution involves distinction target star spectral single double requiring separable image target single location determined precision image finding center image light distribution word ultra resolution proposed process precision localization procedure typically referred super resolution summary technical achievements performance imaging devices classified super resolution utilize stay laws physics theory techniques term applied optical super resolution spatial frequency bands bandwidth diffraction fixed spatial frequency spectrum dark field illumination microscopy synthesis aliasing reconstruction algorithms input resolution images sampled aliasing aliasing frequency content desired reconstruction image embedded frequency content observed images sufficient observation images set observations vary phase images scene shifted pixel phase separate frequency content true frequency content resolution image accurately reconstructed practice frequency based approach reconstruction spatial approaches shift add fusion presence aliasing condition reconstruction technical implementations single frame multiple frame variants multiple frame pixel multiple resolution images scene creates improved resolution image resolution images created resolution images descriptions scene single frame methods attempt image introducing blur methods resolution images images guess resolution image algorithms divided domain frequency space domain originally super resolution methods grayscale images researchers methods adapt color camera images super resolution 3d data promising deep convolutional networks perform super resolution  
1410175	computer	engineering microarchitecture called organization instruction set architecture isa implemented processor isa implemented implementations vary goals design technology architecture combination microarchitecture instruction set architecture relation instruction set architecture isa roughly programming model processor assembly language programmer compiler writer isa includes execution model processor registers address data formats microarchitecture includes processor interconnect implement isa microarchitecture machine represented detailed elements machine single gates registers complete arithmetic logic units alus larger elements separate data control path data person designing specific microarchitecture data flow diagram block diagram microarchitecture diagram elements arithmetic logic unit register file single symbol typically diagram connects elements lines lines distinguish buses require buffer device drives bus buses driven single source address bus simpler computers driven memory address register individual control lines simple computers single data bus organization single bus diagram complex computers multiple buses machine operations simultaneously element represented describing logic gates implement logic gate represented circuit diagram describing connections transistors implement logic family machines instruction set architecture capable executing programs circuitry solutions advances semiconductor manufacturing generations processors achieve performance isa principle single microarchitecture execute minor microcode aspects microarchitecture pipelined commonly design microarchitecture technique modern microprocessors microcontrollers pipelined architecture multiple instructions overlap execution assembly pipeline includes stages fundamental microarchitecture designs stages include instruction fetch instruction decode execute write architectures include stages memory access design pipelines central tasks execution units essential microarchitecture execution units include arithmetic logic units alu floating units fpu load store units branch prediction simd units perform operations calculations processor choice execution units latency throughput central design task size latency throughput connectivity memories decisions level design decisions include peripherals memory controllers considered design process includes decisions performance level connectivity peripherals architectural design achieving specific performance level main goal design closer attention constraints microarchitecture design decisions affect attention paid issues chip cost power consumption logic complexity ease connectivity ease debugging concepts instruction cycles cpus single chip microprocessors multi chip implementations programs performing steps instruction cycle repeated continuously power increasing execution speed simple series steps memory hierarchy includes caching main memory volatile storage hard disks program instructions data slower processor step introduces cpu terms delay data bus considerable designs avoid delays central goal execute instructions parallel increasing effective execution speed program efforts introduced complicated logic circuit structures initially techniques implemented expensive mainframes supercomputers circuitry techniques semiconductor manufacturing techniques implemented single semiconductor chip moore law instruction set choice instruction sets shifted originally simple complex load store architectures vliw types fashion architectures dealing data parallelism include simd vectors labels denote classes cpu architectures cisc label designs denoted cisc simpler modern risc processors choice instruction set architecture greatly affect complexity implementing performance devices prominent strategy develop risc processors simplify instructions minimum individual semantic complexity combined encoding simplicity uniform instructions easily fetched decoded executed pipelined fashion simple strategy reduce logic levels reach operating frequencies instruction cache memories operating frequency inherently code density register sets factor slow memory accesses instruction pipelining powerful techniques improve performance instruction pipelining processor designs carry steps instruction moving portions circuitry left idle step instance instruction decoding circuitry idle execution pipelining improves performance allowing instructions processor time basic processor start decode step instruction waiting instructions flight time processor times fast instruction takes complete steps cpu instructions faster risc pipelines easier construct separating stage instruction process cycle processor operates assembly fashion instructions coming reduced complexity classic risc pipeline pipelined core instruction cache size die fit core cisc design real reason risc faster designs sparc mips times fast intel motorola cisc solutions clock speed price pipelines limited risc designs 1986 vax implementation vax heavily pipelined design commercial mips sparc designs modern cpus embedded cpus pipelined cpus pipelining constrained embedded processors cisc machines vax modern pentium implemented microcode pipelines improvements pipelining caching major advances enabled processor performance circuit technology based cache improvements chip manufacturing allowed circuitry die designers started common add increasing cache memory die cache simply fast memory accessed cycles opposed talk main memory cpu includes cache controller reading writing cache data cache simply appears processor cache controller reads risc designs started adding cache mid late 1980s total grew time typical cpus powerful cpus organized multiple levels memory hierarchy speaking cache performance reduced caches pipelines perfect match sense build pipeline faster access latency chip memory chip cache memory meant pipeline speed cache access latency time allowed operating frequencies processors increase faster rate chip memory branch prediction barrier achieving performance instruction level parallelism pipeline stalls branches conditional branch late pipeline conditional branches depend coming register time processor instruction decoder conditional branch instruction time register read pipeline cycles branch pipeline clock speeds increase depth pipeline increases modern processors 20 stages average instruction executed branch intervention techniques branch prediction speculative execution branch branch prediction hardware branch reality branch called modern designs complex statistical prediction systems watch branches predict future accuracy guess hardware instructions waiting register read speculative execution enhancement code predicted path executed branch yield performance guess risk huge penalty guess bad instructions superscalar complexity gates support concepts improvements semiconductor manufacturing allowed logic gates processor processes single instruction time programs executed faster multiple instructions processed simultaneously superscalar processors achieve functional units alus replication functional units die single issue processor limits manufactured late 1980s superscalar designs started enter market modern designs common load units store instructions store integer math units floating units simd unit sort instruction issue logic grows complexity reading huge list instructions memory execution units idle collected execution addition caches reduces frequency duration stalls waiting data fetched memory hierarchy stalls designs cache force cache controller processor wait instruction program data cache execution ready instruction processed instruction cache happened programmed technique avoid operand dependency stalls instruction result latency floating operation multi cycle operations register renaming register renaming refers technique avoid execution program instructions registers instructions suppose instruction register set instructions executed leave register set set assigned register sets instructions executed parallel series multiprocessing multithreading growing cpu operating frequencies dram access times techniques exploited instruction level parallelism ilp program stalls occurred data fetched main memory additionally transistor counts operating frequencies advanced ilp techniques required power dissipation levels cooled reasons generations computers started exploit levels parallelism exist single program program thread trend throughput computing idea originated mainframe market online transaction processing execution speed transaction capacity deal massive transactions transaction based applications network routing serving greatly increasing decade industry capacity throughput issues technique parallelism achieved multiprocessing systems systems multiple cpus mainframes supercomputers scale servers business market corporations scale common personal computers multiple cpus appeared 1990s transistor size semiconductor technology advances multi core cpus appeared multiple cpus implemented silicon chip initially chips embedded markets simpler cpus multiple fit piece silicon 2005 semiconductor technology allowed dual desktop cpus chips manufactured volume designs sun microsystems simpler scalar designs fit processors piece silicon technique popular multithreading multithreading processor fetch data slow memory data processor switches program program thread ready execute speed program thread increases throughput reducing time cpu idle multithreading equivalent context switch operating level difference cpu thread switch cpu cycle hundreds thousands cpu cycles context switch requires achieved hardware register file program counter active thread enhancement simultaneous multithreading technique superscalar cpus execute instructions programs threads simultaneously cycle  
1410331	computer	scan row raster scanning pattern video ray tube crt display television set monitor crt screens horizontal scan lines visually viewed distance lines black lines scan signal maximum vertical resolution displayed visual graphics term single row pixels raster graphics image scan lines representations image data image file formats special rules data scan rule scan starts boundary byte word file format compatible raster data analyzed level scan lines convert formats  
1430758	computer	fanuc fanuc companies japan fanuc america corporation michigan usa fanuc europe corporation provide automation products services robotics numerical control wireless systems fanuc largest makers industrial robots fanuc fujitsu developing numerical control systems company automatic numerical control history 1955 fujitsu approached engineer lead subsidiary dedicated field numerical control form automation involved sending instructions encoded magnetic tape motors controlled movement tools effectively creating programmable versions machines heavily team 500 employees shipped numerical control machine machine 1972 computing control division independent fanuc established phase expansion numerical control code standard programming language time largest cnc companies based 1982 fanuc captured cnc market fanuc listed tokyo stock exchange 100 stock market headquartered 1982 fanuc entered joint venture motors corporation called robotics corporation produce market robots united company 50 percent owned partner based providing management fanuc products 1987 fanuc entered joint venture electric company companies formed fanuc automation manufacture numerical control cnc devices stopped cnc equipment plant company produces fanuc cnc devices fanuc german engineering machines cheaper produce easier reliability manufacturing costs company clients include numerous japanese automobile electronics manufacturers industrial robots allowed companies panasonic produce television sets month lcd screens 25 people fanuc joint subsidiaries offices 46 countries largest cnc controls market share 65 global market leading global manufacturer factory automation systems subsidiaries joint fanuc europe corporation company headquartered customers europe sales service support europe fanuc america corporation responsible fanuc operations north south america current organized 2013 fanuc activities including fanuc robotics america corporation 1992 2013 fanuc cnc america 2010 2013 earlier fanuc america corporation fanuc robotics america corporation 1992 2013 supplied robotic automation north south america 000 robots installed produced software controls vision products aid development robotic systems headquartered michigan company regional locations canada mexico brazil company systems applications including automotive medical devices founded 1982 joint venture fanuc motors corporation named robotics corporation staff 70 technical center michigan 1992 company owned subsidiary fanuc japan company robotics industries association international robotics 2010 fanuc america corporation prior cnc business unit fanuc intelligent platforms combined company fanuc cnc america business unit owned subsidiary fanuc japan offered cnc systems manufacturing intelligence software products field advanced technical services expanded training classes vast cnc replacement motor repair return field support 24 hours support headquartered offered cnc laser technical services training replacement motor repair return field support hours support 30 locations canada mexico brazil company services machine tool machine tool tool variety industries 1977 company established owned subsidiary fanuc japan fanuc intelligent platforms 1986 2010 joint venture electric fanuc 2009 fanuc agreed split fanuc cnc business renamed business intelligent platforms fanuc india operations led fanuc controller control device naming generation fanuc numerical control levels device control capabilities referred model series controller model typically device control capabilities depending software functions licensed device common control capabilities model updates model letter model unusual letter model specific syntax distinguishing model device type series spaces result difficulty searching service equipment fanuc series valid types controls machines controller capabilities separate aided manufacturing software control systems model differences manufacturing software efficiently programming capabilities fanuc controllers include  
1464404	computer	register event event consumer electronics pc processors computing brought market history participants conference 1954 institute radio engineers circuit theory transistor circuits conference held local american institute electrical engineers merge day ieee conference consisted papers organizations bell telephone laboratories electric massachusetts institute technology university pennsylvania registration registration people registered international canada england japan subsequent conferences international participants international presentation 1965 program committee increased 1970 meeting separately europe japan selected regional program final program meeting america 1954 conference appears publications documents transistor conference conference transistor circuits conference national conference transistor circuits current international solid circuits conference 1960 founded mid 1960s center semiconductor development united shifting west 1978 conference held alternate york 1990 san francisco permanent 2013 special programs 60 circuit soc innovation education program evolution educational adding short 1993 1995 short directed engineers knowledge demands purpose provide engineers topic gain deep topics applications audience 2011 evolved day format simultaneous events technical program committee technical program committee extremely fluid deal constantly changing topics industry 1968 list digital analog linear address papers dropped program overlap topics addition digital split digital memory signal processing 1992 emerging technologies launched seek applications analog data energy efficient digital performance digital medical displays memory rf technology directions emerging technologies wireless executive committee strictly profit organization vision executive committee 1980 conference chair filled previous program chair provide term conference chair extended  
1513732	computer	michael jordan american scientist professor university california berkeley researcher machine learning statistics artificial intelligence leading figures machine learning 2016 science reported influential scientist jordan received 1978 university mathematics 1980 university phd cognitive science 1985 university california san university california san jordan student david pdp 1980s jordan professor university california berkeley split department statistics department professor department brain cognitive sciences mit 1988 1998 1980s jordan started developing recurrent neural networks cognitive model driven cognitive perspective background traditional statistics jordan bayesian networks machine learning community links machine learning statistics prominent methods approximate inference expectation maximization algorithm machine learning machine learning 2001 jordan board journal machine learning public letter argued access support access journal journal machine learning created support evolution field machine learning honors awards jordan received numerous awards including student paper award international conference machine learning 2004 paper award american control conference 1991 acm aaai allen award ieee neural networks pioneer award award 2010 named fellow association computing machinery contributions theory application machine learning jordan national academy science national academy engineering american academy arts sciences named institute mathematical statistics received david prize 2015 acm aaai allen award 2009 2016 jordan identified influential scientist based analysis published literature semantic project  
1514392	computer	machine learning study construction algorithms learn predictions data common task algorithms data driven predictions decisions building mathematical model input data data build final model multiple datasets data sets commonly stages creation model model initially fit training dataset set examples fit parameters weights connections neurons artificial neural networks model model neural bayes classifier trained training dataset supervised learning method gradient descent stochastic gradient descent practice training dataset consist pairs input vector scalar output vector scalar commonly denoted target label current model training dataset produces result compared target input vector training dataset based result comparison specific learning algorithm parameters model adjusted model fitting include variable selection parameter estimation fitted model predict responses observations dataset called validation dataset validation dataset evaluation model fit training dataset tuning model hidden units neural network validation datasets regularization stopping training error validation dataset increases sign overfitting training dataset simple procedure complicated practice validation dataset error training producing multiple local led creation rules overfitting begun finally dataset dataset provide evaluation final model fit training dataset data dataset training cross validation dataset called dataset training dataset training dataset dataset examples learning fit parameters weights classifier approaches search training data empirical relationships tend data meaning identify exploit apparent relationships training data hold validation dataset validation dataset dataset examples architecture classifier called development set set artificial neural networks hidden units testing set mentioned follow probability distribution training dataset avoid overfitting classification parameter adjusted validation dataset addition training datasets suitable classifier sought training dataset train candidate algorithms validation dataset compare decide finally dataset performance characteristics accuracy sensitivity measure validation dataset functions hybrid training data testing level training final testing basic process validation dataset model selection training dataset validation dataset dataset application process stopping candidate models successive iterations network training error validation set grows choosing previous model minimum error dataset dataset dataset independent training dataset probability distribution training dataset model fit training dataset dataset minimal overfitting figure fitting training dataset opposed dataset overfitting set set examples performance generalization classifier dataset simply original dataset set set method cross validation dataset repeatedly split training dataset validation dataset cross validation repeated equal datasets training validation validation training repeatedly selecting random subset validation dataset model performance additional dataset held cross validation cross validation situations data notably time series hierarchical classification parameter adjustment hierarchical classification referred instance space decomposition splits complete multi class set classification serves learning accurate concepts simpler classification boundaries individual feature selection procedures classification decomposition central choice combination classification steps called classification path depending application derived confusion matrix reasons typical errors finding prevent future validation set classes frequently confused instance space decomposition classification classes difficult separate classes treated single joint class finally classification step joint class classified initially confused classes  
1525837	computer	os operating designed team led dijkstra 1965 66 published 1968 dijkstra named simply dutch university technology netherlands batch supported multitasking designed multi user operating set processes static introduced forms software based virtual memory support hardware based memory management programmers forced actual physical locations memory modified algol compiler programming language supported dijkstra automatically generate calls routines requested memory virtual memory buffering device data portion operating code algol 60 compiler programming construct time design design layered structure layers depend layers constraint layers depend layers designers reasoning formal methods facilitate building testing layers implemented layer testing layer division kernel layers multics segmentation model subsequent operating systems extent including windows nt macos layers code written assembly language dutch word size 27 bits 32 core memory memory providing store cache algorithm paper tape readers paper tape printers  
1553421	computer	code apple generation operating period development apple purchase late 1996 announcement mac os called macos 1998 operating represented strategy apple intended operating x86 based pcs dec alpha workstations powerpc based macintosh hardware addition underlying api frameworks ported windows nt eventually apple platforms dropped versions consisted operating ported power macintosh gui mac existing classic mac os technologies ported including mac os blue box emulation layer history announced san francisco january 1997 demonstrated 1997 worldwide developers conference subsequent developer releases computers x86 powerpc processors version analogous mac os public beta unified version quarter 1998 apple development schedule integrating features systems difficult features upcoming releases 1998 york steve jobs announced released mac os server shipped 1999 version released code base source macos design defining features operating included heavily modified hybrid source foundation kernel bsd operating layer based object oriented yellow box api framework blue box compatibility environment running classic mac os applications java virtual machine user interface modeled mac os appearance file management functions served previous mac os versions handled port manager additional features classic mac os included column view dropped favor functionality column view macos blue box environment running powerpc architecture responsible providing runtime compatibility existing mac os applications compared integrated classic compatibility layer featured mac os blue box interface users distinct barrier legacy software native applications applications windows single blue box emulation window applications native yellow box api limited cross environment caused user interface avoid running emulation environment advantage features software yellow box api yellow box object oriented model completely model classic apis difference frameworks meant transition legacy code required effort developer lack adoption prominent figures macintosh software market including adobe systems major factors apple decision project 1998 yellow box technologies macos api developers apple ported existing classic mac os technologies operating implemented api provide classic mac os api compatibility mac os libraries ported developers allowed developers maintain compatibility native functionality current enabling advantage features pattern music code names apple designated operating releases 1990s generation operating successor completed operating code named george blue named american musical code names include mac os mac os mac os mac os  
1561411	computer	photography image processing color balance global adjustment colors typically red green blue primary colors goal adjustment render specific colors – neutral colors – correctly method called gray balance neutral balance white balance color balance mixture colors image color correction generalized versions color balance correct colors change image data acquired sensors – film electronic image sensors – transformed acquired values values color display aspects acquisition display process color correction essential – including acquisition sensors match sensors human eye properties display medium viewing conditions acquisition display viewing conditions color balance operations popular image editing applications operate red green blue channel pixel values respect color sensing model film photography color balance typically achieved color correction filters lights camera lens generalized color balance adjustment neutral called white balance phrase color balance refers adjustment addition colors displayed image appearance colors original scene neutral gray neutral white colors scene neutral color balance humans colors trees concern human human subject address critical color balance issue color formulated balance true neutral color purpose color primary entire brightness range patent transfer entire brightness range inherent linear transfer characteristic viewing altered color separation guide color control patch 18 color guide 100 density 50 density color 50 density result ratio estimation adaptation digital cameras select color correction based type scene lighting manual lighting selection automatic white balance custom white balance algorithms processes perform generalized adaptation methods exist color balancing setting button camera user processor nature scene lighting option cameras button press camera gray card neutral object image light enables digital camera set correct color balance light literature estimate lighting camera data transform image data variety algorithms proposed quality examples references lead reader examples artificial neural network bayesian method colors color balancing image colors image color balanced color image appears shifted color color balancing terms removing color color balance color algorithms techniques color frequently color balancing color adaptation color balancing consists steps determining image captured scaling components image transforming components viewing white balancing camera native rgb color model produce color distortion colors monitor rgb sets camera difference typically factor favor camera rgb color balance time image captured edit monitor color balance balancing raw image data tend produce distortion colors balancing monitor rgb mathematics color balance color balancing performed component image rgb matrix type transformation image captured wrong white balance setting digital camera color filter scaling monitor principle scale relative image objects believed neutral surface believed white object count corresponds white red values green blue result theory color balanced image type transformation matrix matrix color balanced red green blue components pixel image red green blue components image color balancing 11 red green blue components pixel believed white surface image color balancing simple scaling red green blue channels color balance tools white tool demonstrated performing white balancing set assumed produce errors colors render neutral surfaces neutral scaling image transformed values color balancing performed termed von transformation demonstrated offer balancing monitor rgb mentioned bridge mathematically computes 13 14 15 color balanced values 16 17 18 values viewing white image transformed 19 20 21 values object believed white color balanced image 22 23 24 values pixel color balanced image values monitor matrix 25 27 28 29 monitor rgb von method von theory color sensitive cone types retina dominant explanation color 100 motivated method converting color color space representing effective stimuli medium short wavelength cone types modeled independently matrix converts rgb primary values scaled balance neutral color converted desired final color space 32 33 34 color balanced cone values 35 36 37 values object believed white color balanced image 38 40 values pixel color balanced image matrices convert space von derived color matching functions color matching functions matrices reference books scaling camera rgb measure model gaussian camera spectral camera rgb spaces performed monitor rgb camera raw rgb values matrix convert rgb space adobe rgb balancing preferred adaptation spaces images balanced transforms rgb spaces identified spaces camera monitor spaces adaptation measured color appearance models systems performed majority image sets sharp spaces adaptation color matrix change matrix fixed color space space linear model basis terms proper color transformation weighted sum fixed linear transformations consistently  
1625328	computer	primary business manufacture sale automation components equipment systems medical equipment digital blood pressure monitors developed electronic gate named ieee milestone 2007 manufacturers automated machines magnetic card readers provider drive systems custom control systems oil gas industries named 100 global 2013 september 30 2015  
1635643	computer	voice activity detection vad speech activity detection speech detection technique speech processing presence absence human speech detected main vad speech coding speech recognition facilitate speech processing processes speech audio session avoid coding transmission packets voice internet protocol applications saving computation network bandwidth vad enabling technology variety speech based applications vad algorithms developed provide varying features latency sensitivity accuracy computational cost vad algorithms provide analysis speech voice activity detection language independent investigated time assignment speech interpolation systems algorithm overview typical design vad algorithm feedback sequence vad decision improve noise estimate noise reduction stage vary threshold feedback operations improve vad performance stationary noise noise varies lot set published vad methods decision rule frame frame basis measures distance speech noise measures vad methods include spectral slope correlation coefficients log likelihood ratio weighted modified distance measures independently choice vad algorithm voice detected noise noise detected voice false positive false negative vad operating mobile phone detect speech presence range diverse types acoustic background noise difficult detection conditions vad fail safe speech detected decision chance losing speech segments biggest difficulty detection speech environment signal noise impossible distinguish speech noise simple level detection techniques speech noise applications wide range applications digital mobile radio digital simultaneous voice data speech storage desirable provide transmission speech coding parameters advantages include average power consumption mobile average bit rate simultaneous services data transmission capacity storage chips improvement depends percentage speech reliability vad detect hand percentage speech activity hand loss active speech preserve quality vad algorithm heavy noise conditions application vad conjunction predictive maximize agent productivity set predictive calls – answering machines person answers typically speak period answering machine messages continuous speech setting vad parameters correctly determine person machine person transfer agent answering machine correctly person answering agent leaves called party phone combined volume created develop lists performance evaluation evaluate vad output compared vad – created hand presence absence voice performance vad commonly evaluated basis parameters method objective performance vad approximate measure effects speech signal times hidden presence background noise depending model chosen noise synthesis measured objective tests reality carry tests main aim ensure perceived acceptable requires judge processing tested marks features marks speech sequences calculate average features listed providing global estimate behavior vad tested objective methods initial stage evaluate quality vad methods expensive require people days proposal standardized  
1680216	computer	register file array processor registers central processing unit cpu modern integrated circuit based register files implemented fast static multiple ports distinguished dedicated read write ports ordinary read write ports instruction set architecture cpu define set registers stage data memory functional units chip simpler cpus architectural registers correspond entries physical register file cpu complicated cpus register renaming mapping physical entry stores architectural register dynamically execution register file architecture visible programmer opposed concept transparent caches register bank switching register files register banks processors register banks arm processors arm register banks fast interrupt request x86 processors context switching fast interrupt switching instruction decoder register files instruction issued existing processors support superscalar context switching mechanism arm register bank registers compatible processors bits program status word select active register bank implementation usual layout convention simple array read vertically single word runs horizontally row bit cells data bit lines vertically sense convert read logic levels convention larger register files constructed simple arrays register files word entry port bit bit read port bit lines bit write port bit cell wire pitch increases square ports transistor increases linearly faster multiple redundant register files read ports single register file read ports mips integer unit read write port 32 entry 64 bit register file implemented process chip arm popular approaches registers multiple register files distributed register file configuration register file configuration principle operation 64 bit wide register file read write ports single bit wide register file single read port single write port bit level parallelism wide register files ports faster operations single cycle cycles ports bit bits register file bits processor word size occasionally wider extra bits register bit data word 68000 address registers separate register file data registers array basic scheme bit cell microarchitecture register files special prevent multiple write ports writing entry simultaneously instruction scheduling hardware ensures instruction cycle writes entry multiple instructions register issued write enables finite time write operation read operation return common written data read ports simultaneous read write entry larger network functional units register file pitch matched serves pitch matching avoids passing corners lot unit bit pitch unit bit pitch forced unit units register files wires bit write port bit lines contact silicon bit cell set pitch saved machines multiple units bit pitch single forces multiple copies register file alpha instance micro architecture implement shadow register file architecture copies integer register file copies floating register locate future scaled file read write port extra cycle data context switch issue logic attempted reduce operations forwarding data greatly improved integer performance reduce impact limited superscalar speculative execution design adapted sparc mips x86 implementation mips multiple register file floating unit copies floating register file write read ports wrote copies time context switch support integer operation integer register file remain shadow register file abandoned design favor embedded market sparc shadow register file architecture copies integer register files future retired scaled read write port copies floating register file alpha x86 locate unit unit renaming register files load instruction instruction fetch decoding stage context switch design ibm mechanism major microprocessors merging register file decoder register file independently decoder involve context switch alpha x86 register file serve decoder thread level instruction 32 register files 32 purpose registers read write port facilitate simultaneous multithreading instruction cross register file lack context switch x86 processor typical pre cpu individual register file purpose register decoder push stack located floating unit starting pentium typical pentium compatible x86 processor integrated single port architectural register file architectural registers control registers registers condition code registers based register instruction pointer flag register segment registers file push stack default register virtually simulated stack require x86 register instruction exist stack instruction independently stored executed parallel pipeline stages decoding micro operations renaming execution register files require additional cycle data register files architectural floating located code buffer called buffer buffer connected bus register file remains x86 register file stack serve storing x86 register file increased dual ported increase bandwidth result storage registers condition code control flag main register file individual files micro rom instruction registers segment register separated purpose register file instruction pointer located instruction facilitate register renaming execution stack merged floating register file 128 bit register debuted pentium iii register file located separately x86 integer register files implementations pentium introduced shadow register file architecture expanded copies dual ported integer architectural register file consist context switch future file scaled file integer floating solve register bottleneck exist x86 architecture micro fusion introduced entries architectural registers total 32 bytes capacity file segment register instruction pointer remain file program speculative file file served scaled shadow register file context switch scaled file store instruction independently instruction require feature integer operation instruction require loading register file uncommon x86 processor register file instruction time file served scale file pentium architecture remains dual ported register file entries shared decoder register shadow register file shadow register file architecture including floating function processor architectural register file external locate processor retired internal register file locate core register renaming buffer core unit called register table located instruction size register size core increased bus instructions decoded extended register file dual ported read write quad ported read write register remain entries including segment register instruction pointer unable access file code instruction total file size expanded 16 entries total size file pentium pipeline port decoder increased located table code buffer register file increase quad ported read write register remain entries extended 16 entries mode remain shadow register file architecture including floating functions x86 implementations processors integer floating registers incorporated unified ported read write purpose register file 32 bit 16 16 file register file extended enhanced shadow register file architecture executing hyper threading thread independent register files decoder bridge replaced shadow register table architectural registers advance physical register file decoding buffer bridge carry architectural register atom modern simplified revision includes single copies register file share thread decoder register file dual port design 16 entries 16 entries register 16 entries condition code integrated file entries shadow based register entries register separated main original design located execution unit file registers single ported instruction scaled shadow register file core shadow register file architectural registers shadow register file architecture file renaming purpose lack execution architecture floating register file thread difference unified register file dedicated register file hyper threading separate register thread purpose integer register file 16 register files entries file 128 register files 32 bit registers vector instruction storage l2 cache intel x86 lines register file internal design embedded processors pentium compatible reverse engineered processors register file individually pentium hand register file decoder x86 exist structure introduction physical unified renaming register file bridge pentium register naming attempting replace architectural register file skip x86 decoding scheme integer execution storage alu result mechanism integer operation amd design register file intel support shadow register file architecture lack context switch require register file function separate link register table cpu dedicated integer decoder floating decoder mechanism intel pre pentium processor processor entries temporary register file entries future register file entries fetched register file entries register file register files entries file link x86 integer renaming register floating renaming included shadow register scaled 40 entries unified register file integer operation decoded register file entries scratch register 16 future register file 16 register file amd designs shadow register design architecture individual direct link design register files register files located physical register file linked scales integer floating amd designs x86 manufacturers mechanism lack integer performance register renaming cpu companies amd increase cache size reduce bottleneck amd integer operation core pentium separate renaming integer register load decode stage theoretically shorter pipeline intel implementation cost branch prediction missing rate intel cycles instruction executed instruction wide implementations execute instruction set intel implementation alpha sparc mips register file load fetch operand time require multiple register files achieve arm processor hand integrate multiple register files load fetch instructions arm special purpose instruction set arm isa require accumulator stack base registers accumulator base stack thumb mode store multiple instructions independently code size fit register architectural register table shared decoder instructions simple bank switching major difference arm designs arm purpose register quick bank switching requiring additional register file superscalar x86 sharing mechanism arm store data individually x86 data dependency instructions stored file mode 16 compared arm 13 31 data impossible superscalar multiple register files feed decoder x86 code complex compared arm x86 larger power arm processor competitive pentium core party x86 equivalent processors arm dedicated register file architecture amd bring reasonable performance register renaming execution leave intel atom x86 processor core mobile competition x86 processor merged integer floating register single file introduction physical register table enhanced table renaming internal core register renaming processors perform register renaming functional unit write subset physical register file arrangement eliminate multiple write ports bit cell register file effectively stack register files single write ports benefits replication read ports limit technique stack write read inputs functional unit ports dominated transistor push technique limit register windows sparc isa defines register windows bit architectural names registers window larger register file hundreds entries implementing register files hundreds entries requires register window 16 registers moved architectural register refer registers larger array architectural register refer physical registers 20 36 52 68 100 windows physical file save sparc implementations implement 32 entry register file cell bits read external ports contents bits rotation single cycle movement register window wires movement local bandwidth power technique register renaming mapping file stores bit virtual register physical registers renaming file renaming branch branch detected renaming single cycle register renaming  
1694855	computer	thresholding simplest method image segmentation grayscale image thresholding create binary images 2001 definition simplest thresholding methods replace pixel image black pixel image intensity fixed constant white pixel image intensity constant image dark tree completely black white completely white thresholding methods thresholding completely automated automatically select threshold 2004 thresholding methods based algorithm 2004 thresholding colour images approach separate threshold rgb components image combine operation reflects camera data stored correspond people recognize colour colour models note circular requires circular thresholding colour model 2007 probability distributions histogram shape based methods thresholding algorithms assumptions image intensity probability distribution common thresholding methods distributions algorithms developed distributions distributions circular distributions automatic thresholding automatic thresholding extract encoded pixels minimizing background noise accomplished utilizing feedback loop optimize threshold converting original grayscale image binary idea separate image background note limits threshold selection limit mentioned user larger limit difference successive threshold values advantages execution boundary background starting grayscale image pick starting threshold values based separated image histogram finding average pixel algorithm converge faster allowing limit chosen method limitations automatic thresholding background contrast ratio exists meaning picture lighting conditions minimal  
1702294	computer	telecommunications interconnection physical linking carrier network equipment facilities network term refer connection carrier facilities equipment customer connection carriers united law interconnection defined 47 51 linking networks mutual exchange traffic primary tools introduce competition telecommunications markets interconnection requirements dominant carriers history united bell post communications bell owned phones interconnection separate phones terminal equipment networks popular bell calls change phone united allowed bell owned equipment connected network decisions led transformation american distance telephone industry competitive business changed decision 1968 required bell companies permit interconnection radio telephone operators standard electrical interconnection registered jack family standards introduced bell 1970s 1976 gained popularity worldwide international standard europe interconnection interconnect account commercial commercial focus eu offer network features enable competitors provide services compete interconnect decided major impact development rate growth market segments eu based examples  
1706303	computer	recurrent neural network rnn class artificial neural network connections nodes form directed graph sequence exhibit temporal dynamic behavior time sequence feedforward neural networks rnns internal memory process sequences inputs applicable tasks connected handwriting recognition speech recognition term recurrent neural network refer broad classes networks structure finite infinite classes networks exhibit temporal dynamic behavior finite recurrent network directed graph replaced strictly feedforward neural network infinite recurrent network directed graph finite infinite recurrent networks additional stored storage direct control neural network storage replaced network graph incorporates time delays feedback loops controlled referred memory short term memory networks recurrent units history recurrent neural networks based david 1986 hopfield networks discovered john hopfield 1982 1993 neural history solved deep learning task required 1000 subsequent layers rnn time lstm short term memory lstm networks discovered 1997 set accuracy records multiple applications domains 2007 lstm started speech recognition traditional models speech applications 2009 temporal classification ctc trained lstm network rnn win pattern recognition competitions connected handwriting recognition 2014 chinese search ctc trained rnns break 00 speech recognition benchmark traditional speech processing methods lstm improved vocabulary speech recognition speech synthesis google android 2015 google speech recognition experienced performance jump 49 ctc trained lstm google voice search lstm records improved machine translation language modeling multilingual language processing lstm combined convolutional neural networks cnns improved automatic image architectures rnns variants recurrent basic rnns network neuron nodes organized successive layers node layer connected directed connection node successive layer node neuron time varying real valued activation connection real valued weight nodes input nodes receiving data network output nodes hidden nodes modify data route input output supervised learning discrete time settings sequences real valued input vectors input nodes vector time time step input unit computes current activation result nonlinear function weighted sum activations units connect supervisor target activations supplied output units time steps input sequence speech signal spoken final target output sequence label reinforcement learning settings target signals fitness function reward function occasionally evaluate rnn performance input stream output units connected actuators affect environment play game progress measured sequence produces error sum target signals activations computed network training set numerous sequences total error sum errors individual sequences networks jordan networks network layer network arranged horizontally addition set context units middle hidden layer connected context units fixed weight time step input fed learning rule applied fixed connections save previous values hidden units context units connections learning rule applied network maintain sort allowing perform tasks sequence prediction power standard multilayer perceptron jordan networks networks context units fed output layer hidden layer context units jordan network referred layer recurrent connection jordan networks simple recurrent networks variables hopfield network rnn connections symmetric requires stationary inputs rnn process sequences patterns guarantees converge connections trained learning hopfield network perform robust content addressable memory connection associative memory introduced associative memory network variant hopfield network stores associative data vector passing matrix typically encoding preferred binary encoding associative pairs stochastic models markov optimized increased network stability relevance real applications network layers driven input recall association produce output layer network connected random hidden layer weights output neurons network change trained time series variant neurons liquid machine independent rnn independently recurrent neural network addresses gradient vanishing traditional connected rnn neuron layer receives context connectivity neurons layer neurons independent history gradient backpropagation avoid gradient vanishing short term memory cross neuron explored layers trained nonlinear functions skip connections deep networks trained recursive recursive neural network created applying set weights differentiable graph structure structure networks typically trained reverse mode automatic process distributed representations structure logical terms special recursive neural networks rnn structure corresponds linear chain recursive neural networks applied natural language processing recursive neural tensor network tensor based composition function nodes tree neural history neural history unsupervised stack rnns input level learns predict input previous inputs inputs rnn hierarchy inputs level rnn internal rarely level rnn studies compressed representation rnn input sequence precisely reconstructed representation level effectively description negative probability data lot incoming data sequence level rnn supervised learning easily classify deep sequences events rnn hierarchy rnns level level learned predict inputs forced learning phase predict additional units hidden units changing easy learn rarely changing memories helps inputs focus remaining events generative model partially vanishing gradient automatic backpropagation neural networks 1992 1993 solved deep learning task required 1000 subsequent layers rnn time rnns rnns weights 11 standard 12 weights product direct mapping finite machine training stability representation short term memory formal proof stability short term memory short term memory lstm deep learning avoids vanishing gradient lstm augmented recurrent gates called gates lstm errors vanishing errors flow virtual layers space lstm learn tasks require memories events happened thousands millions discrete time steps earlier specific lstm evolved lstm delays events handle signals mix frequency components applications lstm rnns train temporal classification ctc rnn weight matrix probability label sequences training set input sequences ctc alignment recognition lstm learn recognize context sensitive languages previous models based hidden markov models hmm concepts recurrent unit recurrent units mechanism recurrent neural networks introduced 2014 form simplified variants performance music modeling speech signal modeling short term memory parameters lstm lack output gate directional directional rnns finite sequence predict label element sequence based element future contexts outputs rnns processing sequence left left combined outputs predictions target signals technique proved combined lstm rnns continuous time continuous time recurrent neural network ordinary differential equations model effects neuron incoming train neuron 13 network action potential 14 rate change activation applied evolutionary robotics address vision operation minimal cognitive behaviour note sampling theorem discrete time recurrent neural networks viewed continuous time recurrent neural networks differential equations transformed equivalent difference equations transformation occurring post node activation functions 25 pass filtered prior sampling hierarchical hierarchical rnns connect neurons hierarchical behavior recurrent multilayer perceptron network recurrent multi layer perceptron network consists multiple layers nodes feed layer feedback connections connected feed connections multiple model multiple recurrent neural network neural based computational model simulate functional hierarchy brain organization depends spatial connection neurons distinct types neuron activities distinct time properties activities continuous sequences set behaviors primitives integrated diverse sequential behaviors biological type hierarchy discussed memory prediction theory brain function book intelligence neural turing machines neural turing machines method recurrent neural networks external memory resources interact processes combined analogous turing machine von neumann architecture differentiable allowing efficiently trained gradient descent differentiable neural differentiable neural computers extension neural turing machines allowing usage amounts memory address record neural network automata neural network automata replaced differentiable trained complexity context grammars training gradient descent gradient descent iterative optimization algorithm finding minimum function neural networks minimize error term changing weight proportion derivative error respect weight linear activation functions differentiable methods developed 1980s 1990s standard method called backpropagation time generalization propagation feed networks method instance automatic reverse mode minimum principle computationally expensive online variant called real time recurrent learning instance automatic mode vectors algorithm local time local space context local space unit weight vector updated stored connected units unit update complexity single unit linear dimensionality weight vector local time updates depend time step multiple time steps time biological neural networks local respect time space computing partial derivatives time complexity hidden weights time step computing matrices takes weights time step cost storing activations time online hybrid intermediate complexity exists variants continuous time major gradient descent standard rnn architectures error gradients exponentially size time events lstm combined hybrid learning method attempts overcome solved independently recurrent neural network reducing context neuron cross neuron explored layers memories range including term memory learned gradient vanishing algorithm called recursive backpropagation implements combines paradigms locally recurrent networks locally recurrent networks algorithm minimize global error term improves stability algorithm providing view gradient calculation techniques recurrent networks local feedback approach computation gradient rnns arbitrary architectures based signal flow graphs derivation batch algorithm based lee theorem network sensitivity calculations proposed wan fast online version proposed global optimization methods training weights neural network modeled linear global optimization target function formed evaluate fitness error weight vector weights network set weight vector network evaluated training sequence typically sum squared difference predictions target values training sequence represent error current weight vector arbitrary global optimization techniques minimize target function common global optimization method training rnns genetic algorithms unstructured networks initially genetic algorithm encoded neural network weights manner gene represents weight link network represented single fitness function evaluated population neural networks evolved stopping criterion common stopping scheme stopping criterion evaluated fitness function squared error network training goal genetic algorithm maximize fitness function reducing squared error global evolutionary optimization techniques seek set weights simulated particle optimization fields models rnns systems theory analysis recursive neural networks structure linear chain recursive neural networks operate hierarchical structure combining child representations representations recurrent neural networks operate linear time combining previous time step hidden representation representation current time step rnns nonlinear versions finite response infinite response filters nonlinear model applications applications recurrent neural networks include  
1706332	computer	feedforward neural network artificial neural network connections nodes form cycle recurrent neural networks feedforward neural network simplest type artificial neural network network moves direction input nodes hidden nodes output nodes cycles loops network single layer perceptron simplest neural network single layer perceptron network consists single layer output nodes inputs fed outputs series weights sum products weights inputs calculated node threshold typically neuron takes activated typically takes typically neurons activation function called artificial neurons linear threshold units literature term perceptron refers networks consisting units neuron 1940s perceptron created values activated threshold perceptrons trained simple learning algorithm called rule errors calculated output sample output data create adjustment weights implementing form gradient descent single layer perceptrons capable learning linearly separable patterns 1969 famous entitled perceptrons minsky papert impossible single layer perceptron network learn function multi layer perceptrons capable producing boolean function single threshold unit limited computational power networks parallel threshold units approximate continuous function compact interval real interval result peter learning rule simple universal consisting single layer perceptrons single layer neural network compute continuous output step function common choice called logistic function choice single layer network identical logistic regression model statistical modeling logistic function sigmoid function continuous derivative backpropagation function preferred derivative easily calculated multi layer perceptron class networks consists multiple layers computational units feed neuron layer directed connections neurons subsequent layer applications units networks apply sigmoid function activation function universal approximation theorem neural networks continuous function maps real output interval real approximated closely multi layer perceptron hidden layer result holds wide range activation functions functions multi layer networks variety learning techniques popular propagation output values compared correct answer compute error function techniques error fed network algorithm weights connection reduce error function process training cycles network converge error calculations network learned target function adjust weights properly applies method linear optimization called gradient descent network derivative error function respect network weights weights error decreases surface error function reason propagation applied networks differentiable activation functions teaching network perform samples training samples subtle issue requires additional techniques limited training samples network training data fails capture true statistical process generating data computational learning theory concerned training classifiers limited data context neural networks simple heuristic called stopping ensures network examples training set typical propagation algorithm speed convergence possibility local minimum error function practical methods propagation multi layer perceptrons tool choice machine learning tasks series independent neural networks behavior brain neurons perform handle task finally combined  
1724712	computer	unix iii discontinued version unix operating released unix support announced iii late 1981 released bell labs 1982 unix iii mix version unix unix unix unix rt unix iii supported dec pdp 11 vax computers called iii considered release unix unix internally supported bell labs manual refers unix release unix versions called official release unix iii based unix iii introduced features named command queue combined improvements version unix organizations include notable bsd screen editing party variants iii include versions hp ux irix pc pc ux  
1738259	computer	passive optical network pon telecommunications technology provide fiber consumer domestic commercial pon distinguishing feature implements architecture fiber optic enable single optical fiber serve multiple individual customers commercial pon individual hub customer passive optical networks referred customer elements characteristics pon pon consists optical terminal olt service provider central office hub optical network units onus optical network terminals users pon reduces fiber central office equipment required compared architectures passive optical network form fiber optic access network downstream signals broadcast premises sharing multiple encryption prevent upstream signals combined multiple access protocol time division multiple access history major standard institute electrical electronics engineers ieee telecommunication standardization sector international telecommunication union develop standards industry organizations society cable telecommunications engineers radio frequency carrying signals passive optical network starting 1995 fiber architectures service access network formed major telecommunications service providers vendors international telecommunications union standardized generations pon standard based transfer mode referred pon improvements original standard – favor protocol – led final version referred broadband pon typical 12 downstream bandwidth upstream traffic standard rates gigabit capable passive optical networks standard represented increase compared total bandwidth bandwidth efficiency larger variable packets standards permit choices bit rate industry downstream bandwidth upstream bandwidth method efficient user traffic frame segmentation mid 2008 installed 800 000 lines british company advanced india usa networks deployed numerous networks trends growth pon technologies defined pon downstream upstream – pon designed devices network security developed 2009 cable manufacturing business meet requirements air force secure passive optical network gigabit passive optical network technology distribution requirements federal government green technologies allowed federal government technologies alternative active ethernet encryption chief united department issued technology 2013 marketed military companies corporation ieee 2004 ethernet pon epon standard 802 2004 ethernet project ieee 802 epon short network ethernet packets fiber optic cables single protocol layer epon standard 802 ethernet frames symmetric gigabit upstream downstream rates epon applicable data networks service voice data video networks epon epon ieee 802 ieee 802 epon supports downstream wavelength plan support simultaneous operation wavelength separate wavelength operation ieee 802 ieee 802 pon concurrently upstream channel support simultaneous operation ieee 802 802 simultaneously single shared channel 2014 40 installed epon ports deployed pon technology globally epon foundation cable business services epon specifications epon compatible ethernet standards requires conversion connect ethernet based networks upstream downstream technology connects type ip based communications ethernet epon inexpensive implement network elements pon takes advantage wavelength division multiplexing wavelength downstream traffic upstream traffic single mode fiber epon basic wavelength plan wavelength downstream traffic wavelength upstream traffic optional overlay services typically rf analog video bit rate standards optical power common 28 loss budget products announced expensive corresponds 32 split error correction provide loss budget systems improve budget increase epon protocols permit split 128 32 epon practice deployed split ratio 32 pon consists central office node called optical terminal olt user nodes called optical network units onus optical network terminals called optical distribution network term single onu multiple units onu customer premises device individual unit technologies ethernet pair speed standard operate existing wiring power lines phone lines cables onu device pon customer service interfaces user onus implement separate subscriber unit provide services telephony ethernet data video olt interface pon service core network typically include onu pon native service interfaces user services include voice telephone service voice ip voip data typically ethernet 35 video onu functions separated pon shared network olt single stream downstream traffic onus onu reads content packets addressed encryption prevent downstream traffic upstream bandwidth allocation olt responsible upstream bandwidth onus optical distribution network shared onu upstream transmitted random times onus varying distances olt meaning transmission delay onu unique olt measures delay sets register onu physical layer operations maintenance messages delay respect onus pon delay onus set olt called individual onus grant permission defined interval time upstream transmission grant map dynamically calculated map bandwidth onus onu receives bandwidth service services – – require essentially constant upstream bandwidth olt provide fixed bandwidth allocation service classes data service require constant upstream bit rate data traffic sites highly variable dynamic bandwidth allocation pon upstream traffic traffic engineering concepts statistical multiplexing downstream traffic lan special feature pon architecture downstream onu accept completely arbitrary downstream time slots time size forms status status olt continuously extra bandwidth onu onu traffic send idle frames allocation olt onu sending idle frames increases bandwidth allocation onu onu transferred olt idle frames onu reduces allocation advantage requirements onu disadvantage olt assign bandwidth onus olt onus onu called transmission priority traffic class onu reports separately olt report message measure queue knowledge service level agreement entire pon size olt optimize allocation bandwidth pon epon systems mechanism equivalent solution olt onus queue status bandwidth gate message onus report status report message variants pon epon deployed november 2014 epon 40 deployed ports 2015 market share reach pon passive optical optical distribution network upstream direction onu optical network units optical network terminal assigned time slot time domain olt receiving signals onu time downstream direction olt continuously transmit onus data address labels embedded signal epon data cable service interface specification ethernet passive optical network set cable television laboratory specifications implement service layer interface existing ethernet pon epon epon media access control mac physical layer standards short implements operations administration maintenance functionality existing epon equipment epon olt cable systems platform called terminology addition offering ip service capabilities supports ethernet forum 14 services delivery ethernet services business customers radio frequency radio frequency type passive optical network rf signals copper hybrid cable pon direction stand optical overlay existing pon epon overlay based wave division multiplexing passive combination wavelengths single reverse rf support upstream return rf separate wavelength pon return wavelength society cable telecommunications engineers interface rf offers compatibility existing rf technology offers additional bandwidth rf based services completed standard collection standardized options compatible mixed pon standards offers support rf technologies locations fiber copper feasible technology targeted cable operators existing networks pon wavelength division multiplexing pon pon standard type passive optical networking developed companies multiple wavelengths pon separate optical network units onus virtual existing physical infrastructure alternatively wavelengths statistical multiplexing provide efficient wavelength utilization delays experienced onus common standard pon agreed definition term definitions pon dedicated wavelength onu definitions wavelength direction pon pon difficult list pon vendors definition provide bandwidth traditional copper based access networks pon privacy scalability onu receives wavelength advantages mac layer simplified connections olt onus realized wavelength domain media access control pon wavelength speed protocol easy pay grow upgrade challenges cost initial set cost components temperature control challenge wavelengths tend environmental temperatures pon time wavelength division passive optical network pon primary solution generation passive optical network stage service access network april 2012 pon commercially deployed gigabit pon pon gigabit pon pon systems reach optical access networks concept reach optical access network replace optical electrical optical conversion takes local exchange continuous optical path customer core network cost reducing electronic equipment real required local exchange wire center proof concept serve users reach technology termed reach pon argue term pon applicable instances distribution remains passive enabling technologies topology pon transmission modes downstream olt onu upstream onu olt downstream transmission olt optical signal onus continuous mode downstream channel optical data signal upstream channel onus transmit optical data signal result signals transmitted onus fiber power serving power overlapping solve mode transmission upstream channel onu optical packet allocated time slot transmit onus share upstream channel time division multiplexing mode phases optical packets received olt packet packet onus transmit optical packet phase distance olt onu random distance olt onus uniform optical packets received olt phase variation amplitude variation short time 40 mode clock data recovery mode mode employed transmission mode requires mode mode short time kinds pon continuous mode optical communication link fiber premises passive optical networks powered components split signal signal distributed beam typically splits signal single fiber 16 32 256 depending manufacturer single cabinet beam provide switching buffering capabilities power supply connection called link connection optical network terminals customer perform special functions required absence switching signal leaving central office broadcast users served including signal intended optical network terminal filter signals intended customers addition buffering individual optical network terminal multiplexing scheme prevent signals customers types multiplexing achieving wavelength division multiplexing time division multiplexing wavelength division multiplexing customer signal unique wavelength time division multiplexing customers equipment market single definition pon equipment vendors claim released pon equipment product pon product market passive optical networks advantages disadvantages active networks avoid involved keeping electronic equipment operating analog simplify delivery analog television signal served single switching device central office equipped powerful piece equipment called optical terminal olt addition customer optical network terminal transmit central office nearest switching device reach achieve distance central office plant based active optical networks optical distribution networks designed topology active networking located central office allowing users network required optical distribution frame passive optical components drivers modern passive optical network reliability cost passive functionality single mode passive optical components include branching devices wavelength division filters components loop fiber loop hybrid fiber cable optical network digital hierarchy systems telecommunications networks optical communications systems utilize optical fiber wavelength division systems proposed requirements components published 2010 technologies broad variety passive optical components applications include transmission distribution optical monitoring fiber bit rate optical connects route diversity polarization diversity communication optical components power split combined based wavelength composition optical signal wavelength division optical components split power wavelengths wavelength passive optical components power split combined independently wavelength composition optical signal component combine divide optical signals simultaneously transmission single fiber passive optical components data format transparent combining optical power ratio ratio content signals wavelength wavelength power optical port passive component light wavelength range pass direction providing light reverse direction integral components laser modules optical reduce noise caused multi path reflection analog transmission systems optical operates optical reverse directed port output lost optical transmission type branching component optical power based direction propagation fiber optic filter component ports wavelength sensitive loss isolation return loss fiber optic filters wavelength components specific range wavelengths pass reflect classification filter types  
1741558	computer	program context grammar randomly generate form science papers elements papers formed including graphs created scientists massachusetts institute technology stated aim maximize sample output abstract methodology typical access redundancy prominent 2005 paper generated methodology typical access redundancy accepted reviewed paper 2005 informatics authors invited speak authors received team space separately conference series randomly generated track conferences professor 2000 2005 sponsored institute electrical electronics engineers ieee stopped 2006 2008 paper attempt authors claim accepts quality papers requests computing writer acm queue sentences paper individually regarded automated detection articles suggested human readers effective root router mit graduate occurrence methodology attribute paper apparent limited knowledge reliable filter requires review peer domain experts fictional named publish false scientific articles international conferences partially author named swedish short film published papers conferences proceedings conference organizing committee names speakers removed websites google performed institute electrical electronics engineers subject criticism papers discovered conference publications notably researcher university demonstrated calculations based google output set generated documents citing effectively academic link 2010 paper method author managed rank instance  
1775388	computer	pattern recognition nearest neighbors algorithm nn parametric method classification regression input consists closest training examples feature space output depends nn classification regression nn type instance based learning learning function approximated locally computation classification nn algorithm simplest machine learning algorithms classification regression technique assign weight contributions neighbors neighbors contribute average common weighting scheme consists neighbor weight distance neighbor neighbors set objects class nn classification object property nn regression training set algorithm explicit training step required nn algorithm sensitive local structure data statistical setting suppose pairs values class label probability distributions norm training data algorithm training examples vectors feature space class label training phase algorithm consists storing feature vectors class labels training samples classification phase user defined constant unlabeled vector query classified assigning label frequent training samples nearest query commonly distance metric continuous variables euclidean distance discrete variables classification metric overlap metric distance context gene expression data nn employed correlation coefficients classification accuracy nn improved distance metric learned specialized algorithms margin nearest neighbor components analysis basic majority classification occurs class distribution examples frequent class tend prediction tend common nearest neighbors overcome weight classification account distance nearest neighbors class regression nearest weight proportional inverse distance overcome abstraction data representation organizing map som node center cluster density original training data nn applied som parameter selection choice depends data larger values reduces noise classification boundaries classes distinct selected heuristic techniques optimization special class predicted class closest training sample called nearest neighbor algorithm accuracy nn algorithm presence noisy features feature scales consistent effort selecting scaling features improve classification popular approach evolutionary algorithms optimize feature scaling popular approach scale features mutual training data training classes binary class classification helpful choose avoids tied popular choosing optimal setting bootstrap method nearest neighbor classifier nearest type classifier nearest classifier class closest feature space 11 size training data set approaches infinity nearest classifier guarantees error rate bayes error rate minimum error rate distribution data weighted nearest classifier nearest classifier viewed assigning nearest weight 12 weight weighted nearest classifiers nearest assigned weight 13 14 analogous result strong consistency weighted nearest classifiers holds 15 denote weighted nearest classifier weights 16 subject conditions class distributions risk 18 19 20 21 optimal weighting scheme 22 terms display set 23 optimal weights dominant term expansion risk 28 true nearest classifier properties nn special variable bandwidth kernel density uniform kernel version algorithm easy implement computing distances stored examples computationally intensive training sets approximate nearest neighbor search algorithm nn computationally data sets nearest neighbor search algorithms proposed seek reduce distance performed nn strong consistency data approaches infinity class nn algorithm guaranteed yield error rate bayes error rate minimum error rate distribution data improvements nn speed graphs multi class nn classification cover 1967 prove upper bound error rate bayes error rate minimal error rate 31 nn error rate classes 32 bayesian error rate 30 approaches limit reduces bayesian error rate error rates error rate nearest classifiers nearest classifier joint distribution 34 consistent 35 36 37 38 denote nearest classifier based training set size conditions risk yields 40 41 choice 23 offers trade terms display 43 nearest error bayes error optimal rate 28 metric learning nearest neighbor classification performance improved supervised metric learning popular algorithms components analysis margin nearest neighbor supervised metric learning algorithms label learn metric pseudo metric feature extraction input data algorithm processed redundant measurement feet input data transformed reduced representation set features named features vector transforming input data set features called feature extraction features extracted carefully chosen expected features set extract relevant input data perform desired task reduced representation size input feature extraction performed raw data prior applying nn algorithm transformed data feature space typical vision computation pipeline recognition nn including feature extraction dimension reduction pre processing steps implemented opencv dimension reduction dimensional data dimensions dimension reduction performed prior applying nn algorithm avoid effects dimensionality dimensionality nn context basically euclidean distance dimensions vectors search query vector imagine multiple circle query center distance query data search space feature extraction dimension reduction combined step principal component analysis pca linear analysis lda correlation analysis techniques pre processing step clustering nn feature vectors reduced dimension space machine learning process called dimensional embedding dimensional datasets performing similarity search live video streams dna data dimensional time series running fast approximate nn search locality sensitive random projections dimensional similarity search techniques feasible option decision boundary nearest neighbor rules compute decision boundary compute decision boundary explicitly efficiently computational complexity function boundary complexity data reduction data reduction huge data sets data accurate classification data called prototypes selection class training examples classes called class class include class nn produce noise detected separated future analysis natural training called nn class nearest neighbors include examples classes cnn data reduction nearest neighbor cnn algorithm algorithm designed reduce data set nn classification set prototypes training data classify examples accurately data set training set cnn classification examples prototypes called absorbed efficient scan training examples decreasing ratio ratio training defined distance closest color distance closest label ratio interval classes inclusion set prototypes label called external calculation ratio figure data labeled colors initial label red external blue green closest external closest red ratio attribute initial cnn series figures classes red green blue initially 60 class classification map pixel classified data classification map white correspond regions tied green red blue nearest neighbors reduced data set class selected nn rule nearest neighbors instances belong classes squares prototypes circles absorbed left corner class prototypes absorbed classes prototypes varies 15 20 classes classification map prototypes initial data set figures produced fast nearest neighbor variant cnn fastest data set reduction algorithms nn classification nn regression nn regression nn algorithm continuous variables algorithm weighted average nearest neighbors weighted inverse distance algorithm nn distance nearest neighbor local density estimate popular score anomaly detection larger distance nn local density query account neighborhood query average distance nn simple model classic data mining method local factor comparison complex approaches scale experimental analysis validation confusion matrix matching matrix tool accuracy nn classification robust statistical methods likelihood ratio applied  
1803656	computer	linux kernel operating targeted smartphones announced software april 25 2005 based source standard technology designed scalability battery power usage single chip mobile phones 35 phones mobile devices commercial linux powered version linux kernel offers boot times event includes sound driver support embedded systems standard linux 21 kernels exists software based eclipse easy development environment platform  
1813588	computer	digital distribution referred content delivery online distribution electronic software distribution delivery distribution digital media content audio video software video games term distribution online delivery medium internet physical distribution methods paper optical term online distribution typically applied products add products commonly content advancement network bandwidth capabilities online distribution prominent century content distributed online consists books films television programs music software video games streaming involves content user request demand allowing user store contrast content hard drive form storage media offline access future networks content delivery networks content internet availability performance alternative technologies content delivery include peer peer file sharing technologies alternatively content delivery platforms create content remotely acting hosted content management systems term film distribution distribution content physical media distribution analog media photographic film magnetic tape digital cinema basis primary characteristic online distribution direct nature commercially successful artists enter industry publishing chain artists fund retail industries video games artists bound unable content profit lead standardization content ideas online distribution artist public easily minimum business overhead leads cheaper consumer increased artists increased freedom online distribution platforms form digital rights management online distribution door business models music model instance artist release track album book time waiting completed continue projects spent money time project video games increased flexibility demonstrated models result models artists artist teams time expertise product music industry artists access distribution channels major record labels restrictions manufacturing costs growing collection internet labels offer distribution independent artists online music stores marketing services bands completely offer music sale independently controlled websites issue formats content delivered devices data conversion impact traditional retail rise online distribution traditional business models challenges opportunities traditional online distribution traditional media markets including music press software application streaming television radio accounts bandwidth united kingdom music online distribution led sales 2000s sales cut online distribution canadian music chain record online distribution close traditional retail main reason sales hit digital music accessible copyright sales music industry realized change business model rapidly changing technology step music industry online space successful reasons development audio compression file formats users music files quality format compressed mb file format require comparison song require storage file size yields internet transfer speeds transition online space sales profit artists allowed costs distribution costs possibility total costs aided artists breaking scene recognition emerging artists market compete distribution channels internet artists control music terms ownership rights creative process addition providing global users easier access content online stores users choose purchase entire album titles single 2004 2006 revenue videos traditional network television movies video content online content owner party services youtube amazon prime video internet based video services content owners users access content computers smart phones tablets appliances video game consoles set boxes smart film include digital called digital hd ray disc ultra hd ray 3d ray dvd books companies distribution invested equipment operating systems direct capital keeping technology phenomenon books digital users ability access books handheld digital book readers benefit electronic book readers users access additional content links electronic book readers users portability books reader hold multiple books depending size hard drive companies adapt digital media market sales vice president books stated shifting electronic books books sales rise 68 independent experienced sales 23 quarter 2012 books major science fiction books started sell books july 2012 stated model removing digital distribution business book media press books video games online distribution changing structure video game industry creator digital distribution service formulated advantages physical retail distribution 2000s increasing titles commercially successful classic games possibility digital distribution creation game titles video game producers independent game developer commercially feasible 2004 rise digital distribution services pc amazon digital services games windows – live origin offered properties digital bought games green gaming strict policy services strict strict forms digital distribution friendly physical optical disc creation 30 requires 300 feet natural gas oil 24 water boxes increases risk cancer challenges issue data formats content delivered devices data conversion streaming services requiring constant internet connection content content stored locally content transferred physical media enabling owners content infrastructure consumer devices  
1841851	computer	stereopsis greek stereo meaning solid appearance term refer perception depth dimensional structure basis visual eyes individuals developed vision eyes humans animals located positions head vision images projected eyes differences relative horizontal position objects images differences referred horizontal processed visual cortex brain yield depth perception naturally viewing real dimensional scene eyes simulated images separately eye method called perception depth referred stereoscopic depth perception depth dimensional structure visible eye differences object size motion parallax differences image object time movement depth term stereopsis stereoscopic depth refer unique depth vision referred 3d suggested real separation depth linked precision depth derived precision – perceived – guide planning motor action coarse fine stereopsis distinct aspects stereopsis coarse stereopsis fine stereopsis provide depth degree spatial temporal precision stereopsis individual achieve limited level visual eye patients visual tend larger spatial frequencies input images achieve stereopsis fine stereopsis requires eyes visual detect spatial differences easily visual development visual coarse stereopsis develop fine stereopsis coarse stereopsis movements fine stereopsis develop subsequent stage coarse stereopsis mechanism eyes aligned surgery static dynamic stimuli suggested distinguish types stereoscopic depth perception static depth perception static stereo perception motion depth perception stereo motion perception individuals depth perception static tests article contour motion depth tested dynamic random dot study combination motion stereopsis static stereopsis perception mechanisms strong stereoscopic mechanism consists mechanisms coarse fine stereopsis processed coarse stereopsis derived stimuli stimuli range fusion depth magnitude coarse stereopsis appears processes spatial frequency motion fine stereopsis processes spatial frequency coarse stereoscopic provide depth individuals lack fine stereopsis individuals integrate stimuli stereoscopic cues motion brain combines cues – including stereo motion angle cues – sensing motion depth 3d object position active vision science neighboring disciplines impact stereopsis humans ability stereopsis study distinguish depth horizontal minutes arc 80 distinguish depth horizontal differences 30 arc stereopsis positive impact practical tasks threading fast games professional activity involve operating stereoscopic instruments tasks profit visual depth cues stereopsis requiring precise distance include requirement demonstrate level stereopsis requirement pilot fly post accomplished vision demonstrate stereo car driving study positive impact stereopsis specific situations intermediate distances study elderly visual field loss field view predictors crash elderly values visual contrast sensitivity vision advantages stereopsis enhancement vision quality summation double vision scores summation appears close eye visually situations recognized vision including stereopsis factor post surgical outcome stereopsis visible potential impact children angle angle affect normal eye contact causing details effects growing introduction 3d display technology entertainment medical scientific imaging quality vision including stereopsis key capability success modern society lack stereo vision lead stereo people advantage scene depth cues kinds artists stereopsis history stereopsis stereopsis explained charles mind object dimensions pictures projected recognized eye views visual horizontal positions eye image differs objects distances eyes project images eyes horizontal positions depth horizontal effective depth creating depth flat pictures horizontal display pictures separately eyes invented da vinci realized objects distances eyes project images eyes horizontal positions concluded impossible realistic depth scene single object column circular cross object flat wall chosen object discovered horizontal features column objects projects identical images eyes popular times david combined photography meant tens thousands produced 1960s stereopsis dedicated exploring limits relationship vision researchers included peter 1960s invented random dot previous image objects image random dot square matrix 000 dot 50 probability black white objects image images random dot essentially identical square shifted horizontally dot horizontal gap left shifting filled random shifted square images viewed eye square visible closer background called square image eye eye stimuli hidden actual eyes random dot stereopsis correspondence dot image image visual systems solve correspondence intended depth false matches understand 1960s jack neurons cat visual cortex receptive fields horizontal positions eyes established neural basis stereopsis david eventually neurons visual cortex 1980s neurons brain responded depth random dot 1970s invented random dot viewed led popular eye pictures 1989 demonstrated photographs images parallax depth perception scene named phenomenon shadow stereopsis stereoscopic depth perception effective phenomenon photographs moon times moon 3d absence stereoscopic human stereopsis popular culture device eye images allowing stereopsis pictures eye led stereopsis times allowing stereo photographs viewed red green glasses allowing stereo movies viewed 1939 concept complex view master remains production 1950s glasses allowed stereopsis movies 1990s eye pictures require viewers form fusion eye views images introduced basis stereopsis appears processed visual cortex cells receptive fields horizontal positions eyes cell active preferred correct position left eye correct position eye detector person object eyes converge object appears center retina eyes objects main object shifted relation main object main object remains center images eyes shifted left eye image shifted left eye image eye horizontal position perspective scene images images observed single view scene phenomenon vision stereopsis double vision form stereopsis called stereopsis images cross images image time phenomenon stereopsis fusion stereopsis fusion stereopsis maintained images extent horizontal direction vertical direction demonstrated random dot initially interpreted extension reaches stereoscopic depth perceived random presence 15 interpreted stereopsis stereo vision stereo vision field vision mobile robotics detect obstacles applications include surgical robotics cameras pictures scene separated distance – eyes images shifting images match shifted called objects image match calculate distance human eyes change angle distance observed object represents extra complexity calculations geometry simplest camera image plane images alternatively converted linear transformation image plane called image stereo vision cameras fixed lighting called structure motion techniques fixed camera lighting called stereo techniques shape stereo display attempts human stereo vision rapidly changing displays numerous patents 3d television cinema filed commercial activity involving patents exclusively patent tend time 3d television cinema require digital projector moving images coupled imax 3d cinema stereoscopic offered sharp started notebook built stereoscopic lcd technology required user viewing generated images technology employ lenses liquid crystal displays user special glasses stereopsis tests stereopsis tests short images eye 3d image perceived achieved visible polarized glasses visible red green glasses lenses visible eye head mounted display technology type eye depending level detected series selected levels types common clinical tests stereopsis random dot contour random dot stereopsis tests pictures stereo figures embedded background random contour pictures targets eye separated horizontally random dot ability stereopsis tested lang consists random dot series parallel lenses shapes separate views eye hologram stereopsis image field random shapes increasing stereopsis consists cat ability stereopsis arc star arc car arc image viewed distance eye plane special tests children contour examples contour fly picture fly displayed edges patient glasses picture determine figure images vary 400 100 arc 800 40 arc treatment stereopsis complete called include eye vision people stereopsis vision individuals enhance vision improving eye movement evidence improved learning treatment animals evidence stereopsis animal kingdom occurs birds fish  
1842685	computer	image processing gaussian blur gaussian smoothing result image gaussian function named mathematician scientist graphics software typically reduce image noise reduce visual technique smooth blur viewing image screen produced focus lens shadow object usual illumination gaussian smoothing pre processing stage vision algorithms enhance image structures scale space representation scale space implementation mathematically applying gaussian blur image image gaussian function dimensional transform contrast circle circular box blur accurately fourier transform gaussian gaussian applying gaussian blur reducing image frequency components gaussian blur pass filter mathematics gaussian blur type image filter gaussian function normal distribution statistics calculating transformation apply pixel image gaussian function dimension dimensions product gaussian functions dimension distance origin horizontal axis distance origin vertical axis standard deviation gaussian distribution applied dimensions produces surface contours circles gaussian distribution center values distribution build convolution matrix applied original image convolution process visually figure pixel set weighted average pixel neighborhood original pixel receives weight gaussian neighboring pixels receive weights distance original pixel increases blur boundaries edges uniform filters scale space implementation theory gaussian function image meaning entire image included calculations pixel practice computing discrete approximation gaussian function pixels distance influence considered effectively contributions pixels range typically image processing program calculate matrix dimensions function ensure result close entire gaussian distribution addition symmetric gaussian blur applied dimensional image independent dimensional calculations termed separable filter applying dimensional matrix achieved applying series single dimensional gaussian matrices horizontal direction process vertical direction computational terms property calculation performed time height notation opposed separable kernel applying multiple successive gaussian image applying single larger gaussian blur radius square root sum squares blur applied applying successive gaussian applying single gaussian blur radius relationship processing time saved gaussian blur successive time required performing single blur gaussian commonly reducing size image image common apply pass filter image prior ensure frequency image aliasing gaussian properties sharp edges introduce filtered image pass filter gaussian blur pass filter frequency signals amplitude plot log scale frequency domain variance reduction gaussian filter standard deviation smooth picture reduce standard deviation pixel values picture assume grayscale pixel values standard deviation applying filter reduced standard deviation 11 approximated gaussian matrix sample matrix produced sampling gaussian filter kernel pixel note center element largest decreasing distance center increases note central times larger implementation gaussian blur typically generated image kernel gaussian values practice advantage gaussian separable property process passes pass dimensional kernel blur image horizontal vertical direction pass dimensional kernel blur remaining direction dimensional kernel single pass requires calculations typically achieved sampling gaussian filter kernel discrete positions pixel reduces computational cost filter kernels sampling gaussian function samples leads error accuracy maintained computational cost integration gaussian function pixel converting continuous values discrete values kernel sum values image values normalized term kernel sum terms kernel common gaussian smoothing commonly edge detection edge detection algorithms sensitive noise filter built operator highly sensitive noisy environments gaussian blur filter edge detection aims reduce level noise image improves result edge detection algorithm approach commonly referred gaussian log filtering  
1876458	computer	generation network ngn body key architectural telecommunication core access networks idea ngn network services voice data media video ip packets internet commonly built internet protocol term ip transformation telephone networks ngn ngn concept future internet focused evolution internet terms variety interactions services offered introduction ngn definition practical perspective ngn involves main architectural looked separately ngn defined separation transport connectivity portion network services transport provider enable service defining service layer transport layer – services independent transport details increasingly applications including voice tend independent access network network applications user devices phone pc set box underlying technology components generation networks based internet technologies including internet protocol ip label switching mpls application level session protocol sip initially popular protocol popularity local loop original poor traversal network address translation reason domestic voip services developed sip voice networks control network operator largest carriers protocol choice core introduced devices easily consistently devices possibility looked devices extensively supporting ip multimedia ims sip major chance protocol voice applications devices ngn – programmable device controls voice ip voip calls enables correct integration protocols ngn function creating interface existing telephone network media term defined equipment manufacturers functions term ngn literature originally voip device converted voice data analog digital switched circuit form packet based ip controlled device started media control protocol changed media controller agent devices systems controlling calls ip multimedia ims ngn architecture internet media services capability defined european telecommunications standards institute 3rd generation partnership project implementations popular introduced british century networks term ngn denotes initiative deploy operate ngn switches networks period aim 2008 ip switches network concept abandoned favor maintaining current generation equipment company roll ngn started deployment 1999 ngn optic cable presence core optical network wavelength division multiplexing technology provide scalability hundreds bandwidth growth demand backbone network mpls technology deliver performance ip mpls based services carry voice video data traffic infrastructure allowing infrastructure costs flexibility functionality traffic classes service coupled service level quality service performance guarantees ngn classes service offered mpls ip vpn netherlands developing ngn network transformation program called ip generation networks messaging domain networks designed built deployed traffic control handle demands requirements ip networks telecommunications company implemented ngn underlying network services scale project 2004 inherent flexibility scalability core network approach rise classical services deployment vpn implementation distance ethernet vpn services cross national application february 2014 revealed subsidiary european convert infrastructure ip network 000 fixed lines platform capital investment worth 14 country south east europe network based internet protocol canada startup wind mobile owned ip wireless backbone mobile phone service mid 2005 china announced commercial roll china generation carrying network internet protocol generation network ip ngn architecture capable backbone network control layer protocols mpls performance layer mpls optimized architecture enables frame traffic layer vpn supports legacy traffic ip services single ip mpls network  
1906608	computer	named entity recognition entity identification entity entity extraction extraction seeks locate classify named entity unstructured pre defined categories person names organizations locations medical codes time expressions values systems structured block producing block names entities person consisting token token company temporal expression detected classified art systems english produce human performance entering measure human 60 96 95 named entity recognition platforms notable platforms include definition expression named entity word named task entities strings phrases stands consistently closely defined practice deals names instance automotive company created ford referred ford ford motor company ford refer entities ford include proper names terms biological species resolution descriptions pick properties names kinds opposed individuals bank named entity recognition broken implementations distinct detection names classification names type entity refer person organization location phase typically simplified segmentation names defined bank america single america segmentation formally phase requires choosing organize categories temporal expressions numerical expressions money considered named entities context task instances types examples 2001 2001 refers calendar month june refer month june june june named entity definition practical reasons definition term named entity strict explained context named entity types proposed literature categories proposed 2002 question answering consists 29 types 64 extended hierarchy proposed 2002 200 2011 hierarchy based common entity types ground breaking experiments social media formal evaluation evaluate quality output measures defined accuracy token level possibility vast majority real entity names defined accuracy predict entity typically 90 entity properly finding person accuracy academic conferences variant score defined definition prediction misses single token includes token wrong class hard error contribute precision recall evaluation models based token token matching proposed models handle partially overlapping matches exact matches grained evaluation comparison extraction systems account degree exact predictions approaches systems created linguistic grammar based techniques statistical models machine learning hand grammar based systems typically precision cost recall months experienced computational statistical systems typically require manually training data approaches suggested avoid annotation effort classifier types perform machine learned conditional random fields typical choice domains art systems meaning systems developed domain typically perform domains considerable effort involved tuning systems perform domain true rule based statistical systems systems 1990s aimed extraction articles attention processing military reports stages automatic content extraction evaluation included types telephone speech conversations 1998 deal entity identification molecular biology bioinformatics medical natural language processing communities common entity domain names gene products considerable recognition chemical entities context 27 teams participating task medical domain written native language recognize entities english common approach translate applying original version vocabulary automatic translation feasible current challenges reported dataset named entity recognition solved main efforts directed reducing annotation labor semi supervised learning robust performance domains scaling fine grained entity types projects promising solution quality human supervised semi supervised machine learning approaches task models deal complex contexts search queries researchers statistical models hmm hidden markov model maximum entropy conditional random fields feature sets emerging task identifying expressions cross linking wikipedia instance extremely fine grained named entity recognition types actual wikipedia describing concepts output field progress remains application  
1911810	computer	statistical language model probability distribution sequences sequence probability sequence estimate relative likelihood phrases natural language processing applications generate output language modeling speech recognition machine translation speech tagging parsing optical character recognition handwriting recognition retrieval applications speech recognition match sounds word sequences language model context distinguish phrases sound american english phrases recognize speech easier resolve evidence language model incorporated pronunciation model acoustic model language models retrieval query likelihood model separate language model document collection documents ranked based probability query document language model commonly language model bag model data sparsity major building language models word sequences observed training solution assumption probability word depends previous gram model model   models model retrieval treated combination finite automata splits probabilities terms context model probability word depends word probability document finite automata units automaton probability distribution entire vocabulary model model document probability generated specific query calculated documents build models probabilities probabilities documents generate probabilities query rank documents query generating probabilities models documents retrieval contexts language models avoid instances term   common approach generate maximum likelihood model entire collection linearly collection model maximum likelihood model document create document model gram models gram model probability sentence approximated assumed probability word wi context history preceding approximated probability context history preceding markov property conditional probability calculated gram model frequency counts language model denote gram model language models     typically gram model probabilities derived frequency counts models derived severe grams explicitly form smoothing assigning total probability mass unseen grams methods simple add smoothing assign count unseen grams prior sophisticated models turing models   language model probability sentence red house approximated   language model approximation context grams filled start sentence typically denoted additionally sentence probability sequence sentence red house exponential language models maximum entropy language models encode relationship word gram history feature functions equation 13 14 partition function 15 parameter vector 16 feature function simplest feature indicator presence gram helpful prior 15 form log model exponential language model neural language models neural language models continuous space language models continuous representations embeddings predictions models neural networks continuous space embeddings dimensionality language modeling language models trained larger larger texts unique vocabulary increases sequences increases exponentially size vocabulary causing data sparsity exponentially sequences statistics properly estimate probabilities neural networks avoid representing distributed linear combinations weights neural alternate description neural language function neural architecture feed recurrent simpler common typically neural language models constructed trained probabilistic classifiers learn predict probability network trained predict probability distribution vocabulary linguistic context standard neural training algorithms stochastic gradient descent backpropagation context fixed size window previous network feature vector representing previous option future features estimated probability isa option faster training previous neural network learn context word log called skip gram language model basis popular word2vec program neural language models produce actual probabilities common distributed representation encoded networks hidden layers representations word mapped dimensional real vector called word embedding size layer output layer representations skip gram models distinct characteristic model semantic relations linear combinations capturing form models function maps word vector representation precise hand nearest neighbor left hand models language model describes probability occurring close adjacent bag concepts models semantics multi word expressions rich sentences bought lot  
1920674	computer	kuka manufacturer industrial robots solutions factory automation kuka robotics corporation 25 subsidiaries worldwide sales service subsidiaries including united australia canada mexico brazil china japan south korea taiwan india russia european countries company kuka owned history company founded germany company focused house street lights expanded products welding equipment solutions market leader public vehicles europe 1966 gmbh merged eventually kuka short 1973 kuka created industrial robot time company 1980 family publicly owned firm established 1995 company split kuka robotics corporation kuka kuka systems subsidiaries kuka company robotics industries association international robotics german engineering association kuka solutions automation industrial manufacturing processes june 2016 offered kuka completed january 2017 55 stake company robots finished kuka orange official corporate color black corporate data company headquartered germany december 2014 kuka employed 13 000 workers customers automotive industry company expanded industries notable 1971 – welding transfer built 1973 – industrial robot driven axes 1976 – 60 – robot type driven axes offset 1989 – generation industrial robots developed – drive motors maintenance technical availability 2004 kuka released controlled robot interact humans safety result collaboration german aerospace center institute 1995 2007 – kuka – time biggest industrial robot axes entered book records 2010 – robot family robot series completely covers load range 90 reach time 2012 – robot series launched 2014 – video released march company gained recognition public video robot specialized table match german professional real match commercial heavy video received strong criticism table community video viewed times youtube numerous awards application kuka software operating software heart entire control basic functions stored deployment robot robots control panel display axis control buttons integrated mouse robot moved manual teaching mode user view modify existing programs create manually control axes enabling switch called switch motion connection controller proprietary video interface bus safety button operation rugged located control cabinet robot controls real time drive electronics position feedback transmitted controller called connection board control cabinet located integrated board located base robot software elements running simultaneously user interface program storage windows 95 controllers windows xp embedded controllers windows embedded controllers kuka modified version vxworks real time os program control motion planning systems standard pc peripherals rom drive floppy controllers usb ports standard interface isa adding software hardware options industrial automation application industrial robots application material handling loading machines spot arc welding companies automotive industry industries aerospace industry specific applications include kuka entertainment 2001 kuka formed partnership develop passenger carrying industrial robot style attached robotic arms motion sequence series programmable program generation deployed universal theme park 2010 conjunction dynamic structures mounted robotic arms mounted track allowing arms travel performing movements synchronization elements animated projection surfaces kuka partnership kuka robots films james film die day scene nsa agent played laser robots film da vinci code kuka robot hands character robert 2007 kuka introduced simulator based market product installation version sum vista  
1931185	computer	automatic image annotation automatic image tagging linguistic indexing process automatically form digital image application vision techniques image retrieval systems organize locate images database method regarded type multi class image classification classes vocabulary size typically image analysis form extracted feature vectors training annotation machine learning techniques attempt automatically apply images methods learned image features training techniques developed machine translation translate textual vocabulary visual vocabulary regions efforts included classification approaches relevance models advantages automatic image annotation content based image retrieval cbir queries naturally user cbir requires users search image concepts color texture finding queries image features images concept user focusing traditional methods image retrieval libraries manually images expensive time consuming constantly growing image databases existence annotation engines online including real time tagging engine developed pennsylvania university researchers companies https built automatic engines video annotation additional companies figure offer mix automatic image annotation mix manual overview automation fails major simultaneous image classification annotation  
1940262	computer	vision image processing otsu method named automatically perform clustering based image thresholding reduction image binary image algorithm assumes image classes pixels histogram pixels background pixels threshold separating classes combined spread class variance minimal sum squared distances constant inter class variance otsu method roughly dimensional discrete analog analysis otsu method optimization method extension original method multi level thresholding referred multi otsu method otsu method otsu method search threshold minimizes class variance variance class defined weighted sum classes weights probabilities classes threshold classes class probability computed histogram otsu minimizing class variance maximizing inter class variance expressed terms class probabilities 11 12 class 13 relations easily class probabilities class computed effective algorithm matlab octave implementation 256 element histogram grayscale image gray levels typical bit images level threshold image double matlab built functions codice codice image processing implemented otsu method multi otsu method limitations otsu method performance histogram assumed distribution assumed deep sharp object compared background histogram object background compared difference image additive noise sharp gray level histogram incorrect threshold determined otsu method segmentation error define object size ratio object entire image difference difference average object background experimental performance global thresholding techniques including otsu method limited object size difference object background noise improvements improvements focusing limitations otsu method famous effective dimensional otsu method approach gray level pixel average neighborhood studied greatly improved images noise pixel average gray level neighborhood calculated gray level picture divided values average gray level divided values pair formed pixel gray level average neighborhood pair dimensional total 25 total occurrence frequency 26 27 divided total pixels image 28 defines joint probability mass function dimensional histogram dimensional otsu method developed based dimensional histogram probabilities classes denoted intensity vectors classes total vector expressed probability easy inter class discrete matrix defined trace discrete matrix expressed dimensional otsu method optimal threshold 38 maximizing algorithm 40 dimensional otsu method values 40 changed maximum evaluating fast recursive dynamic programming algorithm improve time performance dynamic programming approach 2d otsu method time complexity reduce computation cost tables build tables sum sum sum runtime complexity maximum pixels note coarse resolution threshold reduced matlab implementation function inputs output 46 2d histogram grayscale neighborhood average grayscale pair total pairs image determined 2d histogram direction threshold threshold  
1940509	computer	science instruction set refers architecture based solely pattern matching absence micro instructions classical sense chips comparable neural networks marketed neurons reduced instruction set risc history technology based ideas artificial neural networks parallel processing concept invented design architecture memory bottleneck pattern memory pattern learning recognition logic parallel computing neuron memory allowing simultaneous solving commercial production ibm released 36 neurons 1993 2000 manufacturing discontinued 2001 1993 2010 darpa intel developed time ibm patent august 2007 neurons introduced designed practical focus pattern recognition retrieval data mining security tasks applications software types chips image recognition tech companies facebook google applied pattern detection tasks produced chips released 2007 times compared chip machine machine capable predict scanning people person series describing heart data real life era massive data collection  
1952952	computer	networking term link aggregation applies methods combining multiple network connections parallel increase throughput single connection provide redundancy links fail link aggregation combines physical ports single bandwidth data path implement traffic load sharing ports enhance connection reliability terms method include port link ethernet network bonding channel bonding terms vendor independent standards link aggregation control protocol ethernet defined ieee 802 previous ieee 802 proprietary solutions network implement aggregation lowest layers osi model layer aggregation occurs balance network load links implementations advantage methods provide combining occur multiple interfaces share logical address ip physical address mac address interface address requires link aggregation method performance advantages channel bonding load balancing load balancing traffic network interfaces network socket osi model layer basis channel bonding implies division traffic physical interfaces level packet osi model layer data link osi model layer basis description link aggregation addresses ethernet connections bandwidth limitations lack regard issue bandwidth requirements scale linearly ethernet historically increased generation started bandwidth option generation cost alternative solution introduced network manufacturers 1990s combine physical ethernet links logical link channel bonding solutions required manual configuration identical equipment aggregation involves single failure typical port cable port connection usual switch switch switch configuration cable ports cable fail multiple physical connections level protocols designed fail completely ieee link aggregation standardization process mid 1990s network switch manufacturers included aggregation capability proprietary extension increase bandwidth switches manufacturer developed method led compatibility ieee 802 study create inter link layer standard november 1997 meeting agreed include automatic configuration feature add redundancy link aggregation control protocol initial release 802 2000 gigabit channel bonding schemes ieee standard link aggregation 43 ieee 802 standard march 2000 ieee 802 task force network equipment manufacturer joint standard proprietary standards 802 layer 2008 802 maintenance task force report revision project november 2006 802 layers 802 security protocol stack link aggregation defined 802 resolve 802 802 task force formed formal transfer protocol 802 publication ieee 802 2008 november 2008 link aggregation control protocol ieee specification link aggregation control protocol method control physical ports form single logical channel network device automatic links sending packets peer connected device implements features practical notes sending frames links protocol enabled device link enabled independently send frames links enabling units detect multiple links combine single logical link configured modes active passive active mode send frames configured links passive mode acts speak spoken controlling loops device active mode proprietary link aggregation addition ieee link aggregation proprietary aggregation schemes including cisco port aggregation protocol ethernet multi link split multi link split multi link distributed split multi link network devices support link aggregation software based implementations – bsd package linux bonding driver solaris – exist operating systems linux bonding driver linux bonding driver method multiple network interface controllers single logical interface called majority modern linux distributions linux kernel linux bonding driver integrated kernel module interface user level control program pre installed donald programmed original linux bonding driver cluster linux kernel driver modes modes linux bonding driver network interface aggregation modes supplied parameters kernel bonding module load time command command linux distribution specific configuration file behavior single logical interface depends bonding driver mode default parameter balance linux team driver linux team driver alternative bonding driver main difference team driver kernel essential code rest code link validation implementation decision usage network backbone link aggregation offers inexpensive set speed backbone network data single port device deliver link aggregation network backbone speed grow demand network increases replace hardware backbone install fiber optic pairs initially additional labor costs cost cable running extra cable reduces future labor costs networking change link aggregation extra cables increase backbone speeds extra cost ports frames balancing traffic network avoid ethernet frames tcp additional overhead dealing packets goal approximated sending frames session link common implementations l2 based mac ip addresses flow physical link provide distribution links single pairs hosts communicate provide variation effectively limits client bandwidth single maximum bandwidth communication partner extreme link loaded completely idle reason load balancing utilization links reached real life implementations advanced switches employ hash tcp port increase traffic variation links – depending ports vary – bring balance closer distribution maximum throughput multiple switches utilized optimize maximum throughput multiple network switch topology switches configured parallel isolated network systems configuration switches isolated reason employ topology isolated network hosts cluster configured performance multiple switches cost effective single larger switch access network required individual host equipped additional network device connected network host additionally acts network interfaces cluster node connected separate network switches network interfaces cluster node inter connections network switches linux bonding driver mode typically employed configurations type balance balance mode individual connections hosts effectively utilize interface bandwidth network interface cards provide network links throughput single central file server establish gigabit connection gigabit note data rate depending throughput link aggregation employed windows windows server 2012 supports link aggregation previous windows server versions manufacturer support feature device driver software intel released advanced networking services intel fast ethernet gigabit cards nvidia supports nvidia network access manager tool hp tool hp branded support modes port aggregation including 802 addition basic layer aggregation windows xp servers multiple ip interfaces network perform load balancing users internet connection increase connection speed sharing load interfaces offers advanced functions advanced control suite functionality advanced server program offering 802 static smart require configuration switches mix vendors required capabilities create linux unix linux freebsd macos opensolaris commercial unix distributions implement ethernet bonding level deal manufacturers drivers supported kernel virtualization platforms native support link aggregation offers static supports static virtual distributed switch hyper bonding offered hyper os level mentioned methods windows applies hyper limitations single switch modes balance balance broadcast 802 physical ports link aggregation logical switch leave single failure physical switch links connected offline modes active backup balance tlb balance set switches modes active sessions fail vendors proprietary extensions resolve issue multiple physical switches logical switch split multi link protocol multiple ethernet links split multiple switches stack single failure additionally allowing switches load balanced multiple aggregation switches single access stack devices inter switch connecting access device single device switch block prevent packet enhanced recovery speed operating devices link speed implementations ports aggregation consist physical type copper ports 100 multi mode fiber ports single mode fiber ports ieee standard requires link identical speed 100 000 switches independent meaning switch mixture copper maintaining usual approach fiber link diverse path link speed links path propagation time standard engineered issue ethernet aggregation aggregation refers matching aggregation type link switches implement 802 standard support static configuration link aggregation link aggregation configured switches fail configured switch device configured examples ethernet ethernet interfaces channel bonding requires assistance ethernet switch host operating delivery frames network interfaces manner disks array reason channel bonding refer redundant array inexpensive nodes redundant array independent network interfaces analog multiple links throughput connections closer bandwidth links throughput routing schemes simply load balance network connections links multiple lines bandwidth united kingdom bandwidth download bandwidth access bandwidth specifications data cable systems multiple channels 32 downstream upstream channels typically wide defines complicated involving aggregation level larger channels wireless broadband broadband bonding type channel bonding refers aggregation multiple channels osi layers level channels wired links additionally multiple cellular links wireless link previous bonding osi layers requiring telecommunications companies implementation broadband bonding implemented layers commercial implementations broadband channel bonding include  
1964509	computer	korea center north korean government technology center founded october 24 1990 country code level domain employs 000 people operates development production centers regional centers runs technology college technology institute branch offices china germany united linux started development red star os distribution north korea company technological rest north korea registered 2007 manage support european company implemented infrastructure north korean government goal projects north korea 2001 served clients europe china south korea japan middle east operates north korea official north korean venture company games published news corporation company center  
2031045	computer	computing hardware acceleration hardware perform functions efficiently software running purpose transformation data computed calculated purely software running generic cpu purely custom hardware mix operation computed faster application specific hardware designed programmed compute operation software performed purpose processor approach advantages disadvantages implementation computing tasks hardware decrease latency increase throughput hardware acceleration typical advantages software include rapid development leading faster times market engineering costs portability ease updating features bugs cost overhead compute operations advantages hardware include speedup reduced power consumption latency increased parallelism bandwidth utilization functional components integrated circuit cost ability update designs silicon costs functional times market hierarchy digital computing systems ranging purpose processors customized hardware flexibility efficiency efficiency increasing magnitude application implemented hierarchy hierarchy includes purpose processors cpus specialized processors gpus fixed function implemented field programmable gate arrays fixed function implemented application specific integrated circuit hardware acceleration performance practical functions fixed updates software solutions advent logic devices hardware acceleration fixed algorithms 2010 allowing hardware acceleration applied domains requiring modification algorithms processing control flow overview integrated circuits created perform arbitrary operations analog digital signals computing signals digital interpreted binary data hardware software operate binary representation perform computing accomplished calculating boolean functions bits input result output device downstream storage processing computational equivalence hardware software software hardware compute function custom hardware offers performance functions software hardware description languages model semantics software design programmed composed logic gates application specific integrated circuit stored program computers vast majority software based computing occurs machines implementing von neumann architecture stored program computers programs stored data executed processors typically cpu cores processors fetch decode instructions data operands memory instruction cycle execute instructions software program common cache code data leads von neumann bottleneck fundamental limitation throughput software processors implementing von neumann architecture modified harvard architecture instructions data separate caches memory hierarchy overhead decoding instruction multiplexing execution units microprocessor microcontroller leading circuit utilization intel hyper threading technology simultaneous multithreading exploiting utilization processor functional units instruction level parallelism hardware threads hardware execution units hardware execution units rely von neumann modified harvard architectures perform instruction fetch decode steps instruction cycle stages overhead calculations register transfer level hardware design time circuit costs instruction fetch decoding stages time power circuit computation resources increased parallel computation functions communication memory increased input output capabilities opportunity cost purpose utility emerging hardware architectures hardware designs emerging architectures memory computing transport architectures networks chip benefit increased locality data execution context reducing computing communication latency modules functional units custom hardware limited parallel processing capability logic blocks integrated circuit die hardware offer massive parallelism software purpose processors offering possibility implementing parallel random access machine model common build processing units microprocessor ip core single specialized functional units composed parallel digital signal processing embedded processor ip core hardware acceleration employed fixed tasks involving conditional branching amounts data nvidia gpus implemented implementation metrics device mobility increased relative performance specific acceleration protocols required characteristics physical hardware dimensions power consumption operations throughput categories task efficiency implementation efficiency flexibility metrics hardware operations throughput energy tasks accelerated integers suppose compute sum integers assuming integers codice hold sum software syntaxhighlight lang 20 array sum array syntaxhighlight algorithm runs linear time notation hardware sufficient chip calculation 20 time steps prefix sum algorithm algorithm requires time space algorithm syntaxhighlight lang parameter 20 parameter function array sum takes advantage parallel resources application specific hardware software purpose computing paradigms architectures stream processing hardware acceleration applied stream processing applications examples hardware acceleration include bit acceleration functionality graphics processing units gpus neural networks regular expression hardware acceleration spam control server industry intended prevent regular expression service attacks hardware performs acceleration purpose cpu separate unit referred hardware 3d traditionally processors sequential instructions executed designed purpose algorithms controlled instruction fetch moving temporary register file hardware improve execution specific algorithm allowing specific temporary variables reducing overhead instruction control fetch decode execute cycle modern processors multi core feature parallel single instruction multiple data simd units hardware acceleration yields benefits hardware acceleration suitable computation intensive algorithm executed frequently task program depending hardware acceleration vary functional unit functional block motion estimation  
2056516	computer	opencv source vision library programming functions aimed real time vision originally developed intel supported acquired intel library cross platform source bsd license opencv supports deep learning frameworks tensorflow history officially launched 1999 opencv project initially intel initiative advance cpu intensive applications series projects including real time ray 3d display main project included optimization experts intel russia intel performance library team days opencv goals project alpha version opencv released public ieee conference vision pattern recognition 2000 released 2001 2005 version released 2006 version pre release released october 2008 major release opencv october 2009 opencv includes major interface easier type safe patterns functions implementations existing terms performance multi core systems official releases occur months development independent russian team supported commercial corporations august 2012 support opencv profit foundation opencv maintains developer user 2016 intel signed agreement acquire leading developer opencv applications opencv application include support opencv includes statistical machine learning library programming language opencv written primary interface comprehensive extensive interface python java matlab octave api interfaces online documentation languages developed encourage adoption wider audience developments algorithms opencv developed interface hardware acceleration library intel integrated performance primitives proprietary optimized routines accelerate based gpu interface progress september 2010 based gpu interface progress october 2012 documentation version 13 opencv os support opencv runs desktop operating systems windows linux macos freebsd opencv runs mobile operating systems android ios blackberry user official releases sources opencv  
2057290	computer	retrieval tf–idf short term document frequency numerical intended reflect word document collection corpus weighting factor searches retrieval mining user modeling tf–idf increases times word appears document offset documents corpus word helps adjust frequently tf–idf popular term weighting schemes based recommender systems digital libraries tf–idf variations tf–idf weighting scheme search engines central tool ranking document relevance user query tf–idf filtering subject fields including classification simplest ranking functions computed tf–idf query term sophisticated ranking functions variants simple model term frequency suppose set english documents rank document relevant query brown simple start documents brown leaves documents distinguish count times term occurs document times term occurs document called term frequency documents varies greatly definition form term weighting peter 1957 inverse document frequency term common term frequency tend incorrectly documents happen word frequently weight meaningful terms brown term distinguish relevant relevant documents terms common brown inverse document frequency factor incorporated weight terms occur frequently document set increases weight terms occur rarely 1972 conceived statistical interpretation term called inverse document frequency term weighting definition tf–idf product statistics term frequency inverse document frequency determining exact values statistics term frequency term frequency simplest choice raw count term document times term occurs document denote raw count simplest scheme document frequency inverse document frequency measure word common rare documents scaled inverse fraction documents word total documents documents term document frequency tf–idf calculated weight tf–idf reached term frequency document document frequency term collection documents weights tend filter common terms ratio log function equal tf–idf equal term appears documents ratio approaches bringing tf–idf closer introduced term 1972 paper heuristic theoretical foundations decades researchers explanation theory connection zipf law attempts probabilistic probability document term relative document frequency define inverse document frequency inverse relative document frequency probabilistic interpretation takes form applying retrieval leads define event spaces required probability distributions documents account queries terms tf–idf suppose term count tables corpus consisting documents listed calculation tf–idf term performed raw frequency form frequency document document word appears document relative frequency constant corpus accounts ratio documents include word corpus documents include word tf–idf word implies word appears documents word occurs times document finally base terms idea tf–idf applies entities terms 1998 concept applied authors argued uncommon shared documents weighted highly documents addition tf–idf applied visual purpose object matching videos entire sentences concept tf–idf prove effective scheme tf–idf applied researchers improvement simple count weight component term weighting schemes derived tf–idf term frequency proportional document frequency introduced 2001 context identifying emerging topics media component measures difference term occurs domains calculated based document corpus recommended calculated users personal document collections authors report equally effective tf–idf applied situations user modeling access global document corpus  
2069686	computer	modular audio recognition framework source platform collection voice sound speech natural language processing nlp algorithms written java arranged modular framework attempts facilitate addition algorithms library applications source learning extension applications framework detailed manual api reference format project documented applications source code documentation released bsd style license  
2070605	computer	stochastic neural networks type artificial neural networks built introducing random variations network network neurons stochastic transfer functions stochastic weights tools optimization random local neural network stochastic transfer functions boltzmann machine neuron binary valued chance depends neurons network stochastic neural networks applications risk management bioinformatics fields  
2088675	computer	probabilistic latent semantic analysis probabilistic latent semantic indexing retrieval circles statistical technique analysis mode occurrence data dimensional representation observed variables terms hidden variables latent semantic analysis evolved compared standard latent semantic analysis linear algebra occurrence tables singular decomposition probabilistic latent semantic analysis based mixture decomposition derived latent class model model observations form occurrences documents models probability occurrence mixture independent distributions topic note topics chosen advance estimated data formulation symmetric formulation generated latent class conditional probabilities formulation asymmetric formulation document latent class chosen document word generated class documents occurrence discrete variables parameters equal 11 parameters grows linearly documents addition generative model documents collection estimated generative model documents parameters learned em algorithm application discriminative setting kernels applications retrieval filtering natural language processing machine learning reported aspect model probabilistic latent semantic analysis severe overfitting history latent class model references negative matrix terminology coined 1999 thomas  
2090057	computer	statistics kernel density estimation parametric estimate probability density function random variable kernel density estimation fundamental data smoothing population based finite data sample fields signal processing termed window method independently creating current form definition independent distributed sample drawn distribution unknown density shape function kernel density kernel negative function smoothing parameter called bandwidth kernel called scaled kernel defined intuitively choose data trade bias variance choice bandwidth discussed range kernel functions commonly uniform normal kernel optimal square error sense loss efficiency kernels listed convenient mathematical properties normal kernel standard normal density function construction kernel density estimate fields density estimation equivalent heat generated heat kernels fundamental solution heat equation data locations methods construct discrete operators learning kernel density estimates closely properties suitable kernel compare construction histogram kernel density data histogram horizontal axis divided cover range data data falls interval box height 12 data falls stack boxes kernel density estimate normal kernel variance 25 red lines data kernels kernel density estimate solid blue curve kernel density estimate compared histogram kernel density estimates converge faster true underlying density continuous random variables bandwidth selection bandwidth kernel parameter strong influence estimate illustrate simulated random sample standard normal distribution blue plot horizontal axis curve true density normal density variance comparison red curve data artifacts bandwidth green curve bandwidth underlying structure black curve bandwidth considered density estimate close true density common criterion select parameter expected risk function termed integrated squared error weak assumptions unknown real density function notation consists leading function derivative minimum solution differential involve unknown density function derivative variety automatic data based methods developed selecting bandwidth review studies carried compare plug bandwidth notation weak assumptions exist parametric faster rate kernel note rate slower typical convergence rate parametric methods bandwidth held fixed depending location estimate samples produces powerful method termed adaptive variable bandwidth kernel density estimation bandwidth selection kernel density estimation heavy distributions difficult rule thumb bandwidth gaussian basis functions approximate data underlying density estimated gaussian optimal choice bandwidth integrated squared error standard deviation samples approximation termed normal distribution approximation gaussian approximation 1986 rule thumb rule thumb easy compute yield estimates density close normal gaussian mixture sample 200 figure true density kernel density rule thumb bandwidth solve equation bandwidth estimate based rule thumb bandwidth matlab script relation characteristic function density sample natural estimate characteristic function characteristic function probability density function fourier transform difficulty applying leads integral estimate 12 12 function equal origin falls infinity controls fast function 12 range 12 remains region common choice function uniform function effectively interval integration gaussian function function chosen applied density fourier transform function kernel density characteristic function density statistical implementation list software implementations kernel density includes  
2152217	computer	freertos real time operating kernel embedded devices ported 35 microcontroller platforms distributed mit license implementation freertos designed simple kernel consists files code readable easy port written assembly functions included architecture specific routines freertos methods multiple threads tasks software mode power applications thread supported freertos applications completely allocated alternatively rtos objects dynamically allocated schemes memory allocation advanced features typically operating systems linux windows device drivers advanced memory management user accounts networking emphasis speed execution freertos thread library operating command interface posix abstraction add supported popular libraries freertos implements multiple threads host program thread method regular short thread method switches tasks depending priority scheduling scheme usual interval 1000 100 interrupt hardware interval changed suit application download configurations port compiler allowing rapid application design freertos lot documentation rtos additional details rtos design amazon freertos amazon extension freertos referred freertos freertos libraries iot support amazon services version 2017 amazon freertos code including updates original kernel developed complementary version freertos common functionality designed safety critical implementation freertos identified resolved result development life cycle level software component developed integrity systems partnership real time engineers primary developer freertos project freertos share scheduling algorithm apis developed developed solely language meet requirements certification solely chip read memory microcontroller standards implemented hardware memory code utilized original configuration certification systems kernel portion designs included rom microcontrollers texas instruments source code separately purchased usage scenario header file map api functions location read memory commercially licensed version amazon freertos sold integrity systems product support companies amazon freertos kernel libraries freertos mit license  
2163522	computer	subsidiary formed 1991 intent advance art computing solve difficult technological innovation collaboration academic government industry researchers team employs 000 scientists engineers including turing award winners fields medal winners dijkstra prize winners includes core labs directed technical fellow experiences technologies directed corporate vice president peter lee 2010 2018 000 patents filed worldwide largest percentage patents 20 broad graduate students laboratories labs multi collaborative joint academic institutions center carnegie mellon university massachusetts institute technology foundation centre social  
2182112	computer	born 1956 british scientist overview chairman limited professor london south bank university headed centre applied formal methods professor science city university visiting professor institute york city university king college london visiting academic university college london education born oxford school school prior university college oxford oxford university received degree engineering science career college london oxford university computing laboratory oxford university department science university reading london south bank university formal methods notation chair user 1990s 2011 2002 elected chair british society formal aspects computing science 2005 associate editor chief journal innovations systems software engineering associate editor board acm computing journal covering software engineering formal methods associate integrity systems industrial project notation major online 1994 founded virtual library online directory international council started virtual museum computing 2002 founded limited online discussion industry oxford instruments instruments silicon graphics elected fellow royal society arts manufactures 2002 british society bcs 2004 company city london  
2191771	computer	cpu core voltage power supply voltage supplied cpu digital circuit gpu device processing core power cpu heat product voltage current modern cpus current proportional clock speed cpu drawing current clock cycles power saving clock speed power manage heat laptop desktop processors power management feature software operating adjust clock speed core voltage dynamically voltage module converts 12 voltage cpu core voltage required cpu trend core power designer challenge ground supply voltage source gate terminals supply voltage voltage current supplied proportional gate source voltage reduced threshold voltage dependent shape channel gate physical properties reduce reduce supply voltage increase current increase load driven gate current drive proportional requires designer trend supply voltage goal clock speed improvements reduction threshold voltage improve note channel 18 24 months moore law distance terminals switch called channel nature relationship terminal current processor clock speed increased cost stability core voltage increased cost power consumption heat dissipation involves running processor specifications damage cpu life dual voltage cpu dual voltage cpu split design processor core external input output remain compatibility single voltage cpu single power voltage chip power internal power 2002 microprocessor market statistics cpus single voltage cpus cpus pentium single voltage cpus dual voltage cpus introduced performance gain increasing clock speeds semiconductor processes heat generation power supply concerns laptop computers voltage external voltage levels transformed reduce power usage heat produced ability operate frequencies feature intel pentium processors typically intended mobile environment refers splitting core voltage supply voltage processor core voltage save power compared typical pentium processor core voltage pentium processors called split power supply  
2203602	computer	design programs textbook robert bruce systematic design programs published 2001 mit press edition published 2018 freely online print book introduces concept design step process creating programs statement book originally conjunction project universities teaching program design principles design process starts analysis statement goal description kinds data desired program produces structure data descriptions determines organization program book carefully introduces complex kinds data sets programming book starts atomic forms data compound forms data including data data definition book organize program principle enabling programmer form data construct program structure interpretation programs relies variant scheme programming language programming environment series programming languages language supports functions atomic data simple structures language adds power previous exception largest teaching language languages functional programming languages 2004 paper structure interpretation science authors distinguish focus designed textbook address issues students education schools classes including  
2214847	computer	geometry processing mesh processing concepts applied mathematics science engineering design efficient algorithms acquisition reconstruction analysis manipulation simulation transmission complex 3d models implies concepts data structures algorithms analogous signal processing image processing image smoothing intensity signal blur kernel formed operator geometric smoothing achieved surface geometry blur kernel formed operator applications geometry processing algorithms cover wide range multimedia entertainment classical aided design biomedical computing reverse engineering scientific computing geometry processing common topic siggraph graphics academic conference main topic annual geometry processing geometry processing life cycle geometry processing involves shape 2d 3d shape live space arbitrary dimensions processing shape involves stages life cycle shape methods model mathematical representation scan shape born analyzed edited repeatedly cycle involves measurements distances shape shape characteristic editing involve performing transformations final stage shape life viewer rendered game movie instance shape life defined decision shape criteria real method 3d printing laser cutting discrete representation shape shape shapes geometry processing properties geometry topology geometry shape concerns position shape space includes dimension shape topology shape collection properties change smooth transformations applied shape concerns dimensions holes boundaries shape shape computers shapes geometry processing represented graph node graph vertex position geometry shape directed edges connect vertices hand rule direction called normal forms mesh nature encode topology shape addition class represent shape advanced representations encode coarse representation sequence transformations produce fine resolution representation shape applied variety applications including transmission mesh compression properties shape characteristic property 3d shape characteristic alternatively defined terms continuous sense connected components holes holes connected components boundary surface concrete mesh pair connected component holes connected components boundary holes characteristic bring discrete characteristic mesh computed terms vertices edges surface reconstruction reconstruction surface mesh depending shape shape exist sampled represent surface space transform surface mesh reconstruction strategy employed method indicator function function determines space belong surface shape computed sampled key concept gradient indicator function sampled equal surface normal formally suppose collection sampled surface denoted space normal 11 gradient indicator function defined task reconstruction indicator function surface function 13 14 15 vector field defined samples view solution equation approximation 16 18 19 20 surface reconstructed algorithm construct mesh function 16 applied subsequent graphics applications registration common geometry processing merge multiple views single object captured angles positions registration registration optimal transformation surface 22 surface 23 formally 24 projection surface 22 surface 23 optimal rotation matrix 27 translation vector 28 minimize objective function linear symmetric matrices distance function 30 linear linear change 22 iterative solution iterative closest employed solve transformations solving transformation random sample 22 chosen projected 23 sample uniformly random surface mesh random sampling broken stages uniformly sampling uniformly sampling probability proportional surface optimal transformation calculated based difference 34 projection iteration projections calculated based result applying previous transformation samples process repeated convergence smoothing shapes defined scanned noise signal acting surface actual surface geometry reducing noise data noise reduction surface task geometric smoothing analogous signal noise reduction employs approaches derived recording initial signal 35 signal approximated magnitude gradient weight 36 37 variation 38 40 constant elements signal vertices 41 choice 42 chosen 43 44 45 term map image variation linear solve parameter 36 47 determine values matrix 48 analyzing geometry connected mesh 50 51 angles edge mass matrix operator computes local integral function set mesh occasionally 3d surface flat plane process goal coordinates map surface manner optimization major applications mesh texture mapping mass method measure distortion mapping process measure edges 2d mapping differs lengths original 3d surface formal terms objective function written 55 set mesh edges 56 set vertices objective function result solution maps vertices single vertex coordinates idea graph theory apply mapping boundary vertices mesh unit circle convex vertices single vertex mapping applied boundary vertices interpolation mapping severe attempts edge lengths equal correctly account sizes actual surface mesh squares measure distortion variations coordinate functions distortion apparent mass methods variations coordinate functions approach objective function dirichlet energy minimize angle distortion preserve 58 addition mapping sized regions original setting coordinate functions requirements dirichlet energy objective function avoid vertices mapped single require solution optimization norm orthogonal trivial solution concerned transforming rest shape shape typically transformations continuous alter topology shape modern mesh based shape methods satisfy user constraints handles selected vertices regions mesh handle rest shape removing details common forms interactive based based based based user apply transformations set called handles shape based defines shape user based requires drawn shape user volume based handles provide sparse set constraints user moves stay rest surface mapping 64 2d parametric domain mapping 34 transformed surface ideally transformed shape adds distortion original model distortion terms 67 based energy applying operator measure position relative neighborhood handles smooth energy minimize written 68 method translation invariant unable account scheme applies transformation handle 70 rotation matrix translation vector advance pick rotation minimizes achieve local rotation requires function 72 outputs rotation surface energy optimize translation vector final objective function translations constant gradient segmentation trivial determining mesh easy surface pose determining function return 78 79 simplest shape closed determine 79 surface ray direction query count times passes surface 79 ray pass time pass bounded ray entering 79 79 logic applies previous ray extra time time leaves times guarantee closed pair article mesh semantic holes legs attempt solve rays random directions classify 79 rays times 99 rays 100 associate average ray limit rays method handles accurate rays required method computationally ideal robust approach generalized inspired 2d approach solid angle 79 mesh determine 79 generalized 79 proportional sum solid angle contribution mesh closed mesh equivalent characteristic function volume represented function meaning segmentation change holes closed mesh reason generalized handles boundary passes holes mesh limit generalized equivalent ray method rays infinity  
2266644	computer	multilayer perceptron mlp class feedforward artificial neural network mlp consists layers nodes input layer hidden layer output layer input nodes node neuron nonlinear activation function mlp utilizes supervised learning technique called backpropagation training multiple layers linear activation distinguish mlp linear perceptron distinguish data linearly separable multilayer perceptrons referred neural networks single hidden layer theory theory activation function multilayer perceptron linear activation function neurons linear function maps weighted inputs output neuron linear algebra layers reduced layer input output model neurons nonlinear activation function developed model frequency action biological neurons common activation functions ranges logistic function shape ranges output node neuron weighted sum input connections alternative activation functions proposed including functions specialized activation functions include radial basis functions radial basis networks class supervised neural network models layers mlp consists layers input output layer hidden layers nodes connected node layer connects weight node layer learning learning occurs perceptron changing connection weights piece data processed based error output compared expected result supervised learning carried backpropagation generalization squares algorithm linear perceptron represent error output node data training target produced perceptron node weights adjusted based minimize error entire output gradient descent change weight output previous neuron 14 learning rate selected ensure weights converge response derivative calculated depends local field 15 varies easy prove output node derivative simplified 17 derivative activation function vary analysis difficult change weights hidden node relevant derivative depends change weights nodes represent output layer change hidden layer weights output layer weights change derivative activation function algorithm represents backpropagation activation function theory terminology term multilayer perceptron refer single perceptron multiple layers perceptrons organized layers alternative multilayer perceptron network mlp perceptrons perceptrons sense true perceptrons formally special artificial neurons threshold activation function step function mlp perceptrons employ arbitrary activation functions true perceptron performs binary classification mlp neuron perform classification regression depending activation function term multilayer perceptron applied respect nature nodes layers composed defined artificial neurons perceptrons interpretation avoids definition perceptron artificial neuron applications ability solve approximate solutions extremely complex fitness approximation universal function theorem create mathematical models regression analysis classification regression response variable classifier algorithms popular machine learning solution 1980s finding applications diverse fields speech recognition image recognition machine translation software strong competition simpler support vector machines backpropagation networks returned deep learning  
2271282	computer	series 40 software platform application user interface ui software nokia broad range mid feature phones phones mobile phone platforms hundreds millions devices nokia announced 25 january 2012 company sold series 40 devices smartphones nokia windows phone 2012 symbian 2012 2013 series 40 phones asha smartphones support smartphone features multitasking browser 2014 acquired nokia mobile phones business licensing agreement company mobile allowed nokia brand feature phones series 40 range july 2014 company revealed future production series 40 devices replaced series 30 history series 40 underlying operating called intelligent architecture isa called nokia operating series 40 introduced 1999 release nokia 96 65 pixel display phone browser ui evolved resolution ui resolution color ui enhanced graphical generation series 40 2005 introduced support devices resolutions ui comprehensive 2012 nokia asha mobile phones 200 released series 40 final feature phone running series 40 nokia 2013 running edition technical applications series 40 communication applications telephone internet telephony voip messaging email client capabilities browser media applications camera video music video player radio personal management applications calendar tasks basic file management series 60 applications default location files transferred bluetooth user installed applications series 40 mobile java applications flash applications supported browser integrated browser access content service provider version series 40 called series 40 edition introduced browser based source components browser support 01 javascript series 60 series 40 browser browser enhance user experience feature phones asha nokia browser servers optimize fashion mini synchronization support synchronization address book calendar notes external services phones synchronization settings message software platform series 40 embedded software platform software development standard content application development technologies supports java java technology provide location communication messaging media graphics capabilities supports flash applications  
2279892	computer	law performance software slower rapidly hardware faster named discussed 1995 paper software history attributed martin book wrote progress hardware software critical software hardware size time trend obvious 1987 factors acceptance growing software rapidly growing hardware performance customers features essential enhanced user functionality increased size software argues people increasingly complexity details essential hidden cost result calls creation software development software developed 1986 1989 based hardware primary goal software developed fraction memory capacity processor power required flexibility functionality user names law 2009 attributed founder google referred law attributed google conference 2009 common forms names leading hardware software companies 1990s intel gates intel gates law speed software 18 months variant law gates founder observation speed commercial software 50 18 months benefits moore law occur variety reasons code developer management design philosophy previous manager law named david variant stating software efficiency 18 months moore law  
2303660	computer	edition unix called version unix v6 version unix operating wide release bell labs released 1975 direct predecessor targeted dec pdp 11 family minicomputers version unix 1978 1979 v6 systems remained regular operation 1985 corporation licensed version unix educational institutions licensed version commercial users 20 000 remained version 1980s enhanced v6 basis commercially sold unix version interactive bell unix based v6 earlier versions based produced marketed binary compatible v6 clone code original v6 unix bsd license unix systems source code source code license explicit v6 teaching tool notably university california berkeley university university south berkeley distributed set add programs called berkeley software distribution operating distribution professor john famous unix edition edited selection main kernel implemented digital pdp 11 40 main source kernel documentation unix developers license restrictions unix versions book distributed photo portability 32 1977 richard professor university completed port v6 unix 32 portability unix systems programming language practice unix level included utilities developed releases features v7 notably compiler unix port platform pdp series computers portable operating systems feasible language write 1980 version licensed published edition 32 time bell labs port 32 completed released goal port improve portability unix produce portable version compiler portable compiler distributed v7 versions unix produce unix port vax ibm 370 unix portability project completed princeton unix kernel adapted operating ibm 370 virtualization environment version nucleus amdahl internal unix offering amdahl variants extensions bell labs developed variants v6 including mini unix pdp 11 models lsi unix lsi 11 real time operating unix rt merged v6 unix earlier decided distribution bell labs pre v7 bug support tape distributed university released unix share method november 1979 v6 variant improved security process v6 unix appeared local built pdp 11 augmented partial compatibility bsd unix personal based v6 teaching mit 2002 2006 subsequently replaced x86 clone called  
2310753	computer	radial basis function rbf real valued function depends distance origin alternatively distance called center function property radial function norm euclidean distance distance functions radial basis functions typically approximate functions approximation process interpreted simple neural network context originally david david 1988 michael 1977 kernel support vector classification rbf implementation ready rbf exploited engineering applications types commonly types radial basis functions include writing inverse critical radius approximation radial basis functions typically build function function 16 represented sum 17 radial basis functions center 18 weighted coefficient 19 weights 19 estimated matrix methods linear squares function linear weights 19 approximation schemes time series prediction control nonlinear systems simple chaotic behaviour 3d reconstruction graphics hierarchical rbf pose space rbf network interpreted simple single layer type artificial neural network called radial basis function network radial basis functions role activation functions network continuous function compact interval principle arbitrary accuracy sum form 23 radial basis functions 16 differentiable respect weights 19 weights learned standard iterative methods neural networks radial basis functions manner yields reasonable interpolation approach fitting set chosen covers entire range data ideal polynomial term orthogonal radial basis functions estimates fitting set tend perform  
2321845	computer	journal acm peer reviewed scientific journal covering science theoretical aspects official journal association computing machinery current editor chief university journal established 1954 scientists hold journal acm  
2328319	computer	medium dependent interface mdi describes interface physical electrical optical network physical layer implementation physical medium carry transmission ethernet pair defines medium dependent interface crossover mdi interface auto mdi ports network interfaces detect connection require crossover automatically mdi mdi configuration properly match link ethernet popular ethernet family defines common medium dependent interfaces connection cable pair connection cable typically single piece attached pair modular incorrectly called context fiber variety depending manufacturer physical space availability separate pairs directions communication pair cables wired medium dependent interface referred mdi mdi medium dependent interface crossover connecting mdi port mdi port straight cable connect mdi ports mdi ports crossover cable mdi devices mdi switches switches mdi port connect switches crossover cable mdi mdi terminology refers variants ethernet pair technology female port connection network device refers transmit wires mdi device connected receive wires mdi device straight cables connect pins transmit mdi device pins receive mdi device pins receive pins mdi device transmit pins mdi device convention network bridges switches mdi configuration nodes personal computers workstations servers routers mdi interface routers devices normal switch mdi mdi specific port requirement connecting vice versa devices mdi port internal crossover connecting mdi mdi requires straight cable crossover total connecting mdi mdi crossover mdi mdi requires crossover cable complicated multiple patch panels structured connection multiple patch building cable segments idea central hub switch secondary hub switch auto mdi connect ports configuration mdi mdi mdi mdi 100 connection ethernet crossover cable cross transmit receive signals cable matched level confusion kinds cables hierarchical star network automatic solution auto mdi automatically required cable connection type connection removing crossover cables interconnect switches connecting pcs peer peer enabled link type cable auto mdi operate correctly data rate interface setting set auto auto mdi developed hewlett packard engineers bruce pseudo random generator network port pairs auto link auto mdi ports connected normal modern products algorithm resolution time typically 500 resolve extremely rare probability loop switching subsequently auto mdi standard developed patented algorithms forced mode auto mdi link automatically established port auto implemented device occasionally crossover cable connecting auto mdi mdi hub switch routers switches including 100 gigabit gigabit devices practice auto mdi 100 connections automatically switch proper configuration cable connected gigabit faster ethernet links pair cable cable pairs simultaneous transmission directions reason dedicated transmit receive pairs crossover cables required communication physical medium attachment identification pair continues cables pairs  
2352843	computer	blender foundation organization responsible development blender source 3d content creation program foundation produced animated short films dream 2006 2008 2010 steel 2012 2017 goals foundation original author blender software funded companies community foundations goals worldwide internet community access 3d technology blender core foundation resources support community formed developing blender annual blender conference amsterdam plans future blender represent blender siggraph conference graphics maintain blender developers blender software projects blender foundation organized community driven projects blender institute program including freely licensed films source video game 2008 foundation projects intended improve 3d source content creation pipeline blender project created blender software released license terms source material addition capabilities software projects detailed production material textures models serve examples blender user community finished products purposes 18 march 2006 blender foundation released film dream response success dream blender foundation established blender institute support future software content development projects blender institute operates studio building amsterdam blender foundation located headed april 2008 blender institute released film based movie blender institute released game project november 2008 30 september 2010 blender institute released project october 2011 concept script development blender film project titled steel previous blender institute projects 100 graphics focus steel combination live action footage generated characters environments live action footage shot sony camera project released 26 september 2012 movie project movie project blender foundation announced project january 2010 project primary goals movie project film produced blender institute film called 2014 release announced minute pilot entitled cycle released youtube august 2015 netherlands film 24 september 2015 pilot prize 2015 international conference 3d animation 2013 episode short animated series released blender foundation 2016 short released hero movie project announced september 2017 released april 2018 technical target hero improve tools  
2355246	computer	chairman started manufacturing personal venture october december company manufacturing paid capital manufacturing involved manufacturing passive electronic components share worldwide filters frequency sensors march 31 2013 manufacturing 24 subsidiaries japan 52 united canada mexico brazil germany france italy united kingdom netherlands china taiwan south korea singapore thailand vietnam india april 13 2012 announced deal acquire rf 78 share august 23 2014 announced acquisition semiconductor corporation july 28 2016 understanding signed sony intent sell portion battery business sony energy devices corporation october 2017 announced exhibit theme park disney entitled science oriented presentation emphasizes stem support children education products variety electronic products ranging communication wireless modules power company famous manufacturing components rf filters based processing technologies film film temperature includes monolithic multilayer devices chip filters crystal filters filters lot technology rf components outcome published patents holds 300 patents patent applications technology  
2368154	computer	clinical decision support cdss health technology designed provide health professionals clinical decision support assistance clinical decision tasks definition proposed robert centre health evidence clinical decision support systems link health observations health knowledge influence health choices improved health care major topic artificial intelligence medicine effectiveness evidence effectiveness cdss mixed 2014 systematic review benefit terms risk death cdss combined electronic health record benefits terms 2005 systematic review concluded improved performance 64 studies improved patient 13 studies features improved performance include quality studies increased 1973 2004 2005 systematic review decision support systems improved clinical practice 68 cdss features success include systematic reviews effects 2011 stating gap demonstrated benefits technologies cost effectiveness demonstrated evaluation effectiveness cdss implementing rational treatment published 2014 authors term study cdss characteristics clinical decision support defined active knowledge systems items patient data generate specific implies cdss simply decision support focused knowledge management achieve clinical patient care based multiple items patient data purpose main purpose modern cdss assist care interact cdss reach diagnosis based patient data days conceived decisions input wait cdss output choice simply output modern methodology assist cdss utilizing knowledge cdss analysis patient data human cdss typically cdss expected pick cdss main types cdss detailed clinical decision support specific type cdss diagnosis decision support systems requests patients data response set takes output determines relevant tests narrow diagnosis cdss based reasoning previous data determine beams optimal beam angles brain cancer patients medical review recommended treatment plan determine classification cdss based timing systems care dealing patient timing pre diagnosis diagnosis post diagnosis pre diagnosis cdss systems cdss diagnosis review filter preliminary diagnostic choices improve final post diagnosis cdss systems data connections patients medical history clinical predict future events claimed decision support replace common tasks future approach national health service england operated patient phone trained medical conditions hours suitable step patient day patient phone common sense suggests based implicit worst diagnosis revealed patient incorrect based trained person opinion initial purposes knowledge based cdss consist knowledge base inference engine mechanism communicate knowledge base rules compiled data form rules determining drug interactions rule drug drug user interface advanced user edit knowledge base inference engine combines rules knowledge base patient data communication mechanism user input knowledge based cdss knowledge base form artificial intelligence called machine learning computers learn experiences patterns clinical data writing rules expert input systems based machine learning explain reasons called black boxes meaningful human inspection reliability reasons post diagnostic systems patterns depth types knowledge based systems support vector machines artificial neural networks genetic algorithms united american recovery 2009 push widespread adoption health technology health technology economic clinical health integrating electronic medical records entry health processing storage institute medicine usage health technology including clinical decision support systems advance quality patient care published report 1999 human focused patient safety united attention quality patient care included adoption health detailed laws cdss defined office national health technology approved department health human services definition meaningful published absence laws cdss vendors viewed legal care patients cdss usage technology patient care care legal explicitly defined effective performance shift cdss challenges adoption clinical challenges effort medical institutions software companies produce support aspects clinical tasks complexity clinical demands staff time care institution support ensure fluid integral clinical varying amounts success common reducing successful adoption acceptance sectors healthcare domain impact sectors commonly systems perform batch based checking negative drug interactions report professional sector success cdss claims rely stay operation systems created proposed treatment plan current rules plan attempts address care patient financial institution aimed diagnostic tasks success limited deployment scope operational 1971 university hospital reported produced correct diagnosis compared success rate 79 wide range efforts institutions produce systems widespread adoption acceptance achieved offerings acceptance historically integration focus functional decision core cdss existed causing planning product stand applications requiring current switch cdss input data produced additional steps break flow perspective cost time technical challenges barriers implementation clinical decision support systems technical challenges biological systems complicated clinical decision utilize range relevant data electronic evidence based medicine patient medical history family history historical trends disease occurrence published clinical data effectiveness patient treatment cdss acceptance integration mentioned source medical support systems produce massive systems produce volume require pay attention causing critical maintenance core challenges cdss difficulty incorporating extensive clinical published ongoing basis tens thousands clinical published studies manually read evaluated scientific incorporated cdss accurate 2004 stated process clinical data medical knowledge form computers manipulate assist clinical decision support feasible business individual published addition integration data difficult incorporate existing decision support instances clinical papers properly subject clinical papers analysis months complete evaluation cdss offer improve clinical outcome evaluation cdss process improve quality measure effectiveness serve purposes generic metric applies systems attributes consistency experts apply wide spectrum systems evaluation benchmark cdss depends goal diagnostic decision support rated based consistency accuracy classification disease compared decision support systems evidence based medicine rated based patient improvement financial care providers combining electronic health records implementing electronic health records challenge reasons challenge issues implementation phase numerous studies challenges implementing electronic health records received attention process legacy systems electronic health records future healthcare industry capture real time data provide quality patient care efficiency effective time resources incorporating cdss process medicine potential change medicine taught level cdss clinical decision support systems cdss systems designed impact decision individual patients time decisions integrated cdss benefits implement cdss integrated historically required planning healthcare facility purpose cdss successful effective success effectiveness measured increase patient care delivered reduced events occurring addition saving time resources benefits terms autonomy financial benefits healthcare facility benefits cdss combined successful cdss integration practice quality care patient ultimate goal healthcare errors occurred healthcare provide quality patient care addressed implementation cdss electronic health records future healthcare facilities 100 electronic terms real time patient modifications occur ensure systems benefits clinical decision support systems performance patient remain subject ongoing barriers implementing electronic health records healthcare settings challenges maintaining efficiency safety implementation process effective understanding users key success implementation projects addition adoption clinical approach cdss main concern moving integrated cdss key aspects data entry addressed implementing cdss avoid potential events occurring aspects include service oriented architecture proposed technical address barriers status australia july 2015 planned transition australia difficulties majority healthcare facilities running completely paper based systems transition phase scanned moving transition phase attempted implement program costs project south australia successful implementation public healthcare hand national health service national 2000s included expensive process implementing enterprise patient administration foundation public health care sites expected 2014 facilities connected successful integration cdss increase benefits july 2015 reported 75 health care facilities implemented largest health country model south consistent progress implementation current iteration technology includes cdss features identifying risk patients based data input electronic record june 2016 sites scope initial roll implemented  
2373410	computer	context aware network form network synthesis properties dumb network intelligent network architectures dumb networks feature intelligent peripheral devices core network control monitor application creation operation network follow principle applications set peripheral devices control network network assumes users applications equal priority conflict interaction handled independent applications network suited individual user addition applications pure internet ideal dumb network intelligent network contrast dumb network suited applications reliability stability network supply monitor control application creation operation telephone network intelligent failure telephone network business public safety context aware network network overcome limitations dumb intelligent network models create synthesis combines network models designed application creation time application operation compatible preferences individual user expressed preferences enterprise network semantic context aware network grid networks networks networks application aware networks service oriented networks elements context aware model context aware network applications composed existing network applications techniques modeling applications identification applications satisfy specific functional requirements requirements method applications terms purposes application business process process linked larger organization including priority failure context aware network descriptions function handle conflict applications accessing resources level constraints context aware network monitors application operation ensure compatible level requirements constraints resolved light context aware network suited applications reliability evolution required finding purchase development enterprise business processes customer relations management service oriented architectures context aware model current enterprise computing underlying principles context aware handle creation management operation fly context aware services book  
2400746	computer	history corporate company decision merger tomy international subsidiaries takara tomy japan decision tomy built considerable brand recognition majority takara international hit products sold branded toy companies considered financial cost changing policies western business publications merger company bought western media takara tomy merger takara tomy assumption takara time merger takara sales tomy management takara tomy discussed merging times including times takara appeared stronger japanese corporate law merger companies equal basis post merger media control brands takara tomy merger tomy copyright including takara brands shipped simply result practical decision tomy international subsidiaries japan takara tomy continues tomy takara distinct brand names toy ranges originated separate company toy ranges stand products carry takara tomy brand takara purchased majority stake production june 2005 studio complete subsidiary takara tomy march 2006 merger tomy founded 1982 sale distribution tomy products europe brought games west success tomy traditionally tomy 2006 tomy launched consumers online tomy 2011 takara tomy acquired corporation brand learning curve included products takara tomy manufactured broad range products based properties include tomy jump tomy branded care products takara space merged takara tomy produces wide variety toy game brands license thomas disney game life game pitch revolution animal tomy rights licenses vary region examples product merged company combining takara game game life license tomy license produce game tomy products worldwide including pre school monitors mechanical electronic games consumer electronics children arts products vast range suited selection disney thomas engine publish japan based series responsible distribution products japan play company responsible distribution products japan acquired distribution rights starting owned 2015 distribution rights rights generations 1960s tomy sponsor toy television merged takara shortly mentioned company list notable products include  
2422681	computer	short unstructured management architecture standard content analytics originally developed ibm component software architecture development discovery composition deployment multi analytics analysis unstructured integration search technologies structure architecture dimensions implementations apache reference implementation maintained apache software foundation software projects  
2506529	computer	science machine learning cellular neural networks cnn cellular nonlinear networks cnn parallel computing paradigm neural networks difference communication allowed units typical applications include image processing analyzing 3d surfaces solving partial differential equations reducing visual geometric maps modelling biological vision sensory motor cnn architecture variety architectures difficult precise definition cnn processor architecture cnn processors finite fixed fixed location fixed topology locally multiple input single output nonlinear processing units nonlinear processing units referred neurons cells mathematically cell modeled nonlinear encoded initial inputs variables define behavior dynamics continuous continuous time cnn ct cnn processors discrete discrete time cnn cnn processors cell output cells external devices output typically real valued complex multi valued cnn cnn cnn processors processing units identical applications require identical units called uniform processor cnn cnn processors consist types cells original cnn cnn processor cell weighted sum inputs output linear function original perceptron based neural networks functions perform limited modeling linear functions complex functions linear cnn cnn processors cells defined space commonly dimensional euclidean geometry grid cells limited dimensional spaces defined arbitrary dimensions square spatially invariant arrangement cells arranged infinite plane space cell interconnect local meaning connections cells radius distance measured connections time delayed processing temporal domain cnn architectures cells relative applications require spatially variant topology multiple neighborhood size cnn cnn processors multiple layer cnn cnn processors cells layer identical extend capability cnn processors definition collection independent entities integrated behavior distinct entities connections local exchange happen globally diffusion sense cnn processors systems dynamics derived interaction processing units processing units result exhibit behavior mathematically relationship cell neighbors located influence defined law determines behavior processor laws modeled logic cnn laws modeled computational logic computational cnn cnn cnns modelling social networks local achieved linguistic terms literature review idea cnn processors introduced 1988 article cellular neural networks theory cellular neural networks applications ieee transactions circuits systems articles underlying mathematics cnn processors mathematical model demonstrate specific cnn implementation inputs static processing units converge perform calculations applications cnn processors image processing pattern recognition largest application active cnn articles international journal editor ieee transactions circuits systems international journal variety articles cnn processors researchers focus cnn architectures aspects cnn processors key article 1993 article cnn universal machine array introduced programmable analog cnn processor engineering community multi national effort funded office national science foundation academy sciences academy sciences university california article proved cnn processors researchers physical platform cnn theories article companies started larger capable processors based basic architecture cnn universal processor key cnns inspired processing platforms algorithms published numerous key articles involved companies institutions developing cnn technology cnn processors published literature references paper cellular neural networks review written neural nets 1993 paper definitions cnn types dynamics implementations applications readable document book cellular neural networks visual computing foundations applications written examples manner uncommon papers journal articles book covers aspects cnn processors serve textbook references considered manage organize vast cnn literature framework cnn literature proceedings international cellular neural networks applications proceedings online ieee conferences held 1990 1992 1994 1996 1998 2000 2002 2005 2006 held july topics include theory design applications algorithms physical implementations programming training methods understanding analog semiconductor based cnn technology computers product addition published articles publication list cnn technologies optical computing commonly functions implemented cnn processors reference image processing libraries cnn based visual computers cnn based systems processing architectures cnn processors hybrid ann continuous automata processing units cnn nn processor units multi input systems behavior systems driven weights processing linear interconnect main cnn processors connections locally ann connections global neurons layer connected layer feed nn neurons hopfield networks weights processing previous feedback cnn processors weights determine dynamics tend exploit locality data set processing result highly redundant systems robust fault tolerant behavior errors cross ann cnn processor ratio memory cnn processors cell interconnect local invariant weights store previous control dynamics weights cells modified learning creating term memory topology dynamics cnn processors closely cnn processors consists fixed identical processors spatially discrete uniform difference cnn processors continuous valued discrete values cnn processor cell behavior defined linear function processor cells defined machine exceptions continuous valued cellular automata continuous automata continuous resolution depending continuous automata cnn continuous spatial automata consist infinite spatially continuous continuous valued automata considerable performed field continuous spaces easier mathematically model discrete spaces allowing quantitative approach opposed empirical approach researchers cellular automata continuous spatial automata processors physically realized processing platform chemical cnn processors terms resolution input output modeled continuous spatial automata model computation behaviors cnn processors expressed mathematically series ordinary differential equations equation represents individual processing unit behavior entire cnn processor defined initial conditions inputs cell interconnect topology weights cells cnn processors generate respond signals specific properties cnn processors generate multi chaotic systems exhibit multi level cnn processors designed solve local level processor intensive expressed function space time cnn processors implement pass pass filters morphological operators approximate wide range partial differential equations heat dissipation wave propagation cnn processors diffusion processors processors spatially invariant invariant analog parallel processors characterized combine create agent processors typically implemented processor light input camera output processors implemented multilayer cnn processor processors create perform main difference chemical implementation cnn implementation cnn implementations considerably faster chemical chemical processors spatially continuous cnn processors spatially discrete processor processors simulated layer cnn processors implemented semiconductor computations performed generation propagation signals grow change time computations occur signal occur interaction signals type processing signals wave processing involves generation collision waves wave processing measure distances optimal paths computations occur solutions structures maintain shape structures interact static signals store implement boolean functions computations occur complex growing behavior pixel snakes addition storing performing boolean functions structures interact create static structures cnn processors intended analog calculations types cnn processors implement boolean function allowing universal turing machines capable algorithm performed processors based von neumann architecture type cnn processors universal cnn cnn architecture consists additional layer ann solution stated minsky cnn processors simplest game life rule simplest universal turing machine unique representation systems researchers apply techniques hardware developed cnn understand continuous space cnn processors modifications equivalent cellular automata creates behavior processing platform construction arbitrary boolean functions called universal result class cnn processors commonly referred universal cnn processors original cnn processors perform linearly separable boolean functions essentially minsky introduced respect neural networks translating functions digital logic table domains cnn domain functions considerably simplified bit generation logic typically implemented nested exclusive gates represented sum function nested absolute functions reduction function complexity cnn implementation parameters represented continuous real domain methods select cnn processor template weights synthesis involves determine coefficients offline previous libraries papers articles mathematically training processor researchers propagation genetic algorithms learn perform functions propagation algorithms tend faster genetic algorithms provide mechanism solution noisy search space technology processing platform remains intellectual implemented hardware integrated processors based implementation advantages purpose serve teaching device cnn processors implemented current technology plans implement cnn processors future technologies include interfaces programming implemented variety systems types cnn processors advantages disadvantages future cnn processors cnn processors implemented semiconductors plans cnn processors emerging technologies future semiconductor based cnn processors analog cnn processors digital cnn processors cnn processors digital processors analog cnn processors developed analog computers common 1960s gradually replaced digital computers 1970s analog processors considerably faster applications differential equations modeling reason analog computing lost favor lack precision difficulty analog solve complex equation analog cnn processors share advantages speed analog cnn processors perform real time ultra frame rate 000 frame processing digital processors analog implementation cnn processors requires power digital accuracy analog cnn processors compare digital applications noise process affect image quality programmable analog cnn processor created 1993 named cnn universal processor internal controller allowed multiple performed data set multiple layers allowing universal computation included design single layer interfaces analog memory switching logic software processor developed determine cnn processor utility cnn concept proved promising 2000 organizations designing programmable analog cnn processors mixed signal semiconductor company emerged university introduced prototype cnn processor product processor contained processor units processor grayscale processor units processor grayscale processor units time processing elements increase speed improved functions perform increased detector interface integrated silicon considerably improved interface ability detector interface cnn processor real time interaction sensing processing multilayer prototype cnn processors processor layer cnn processor cnn processors released commercially eye product consists processors processors software development kits support program integrate analog processor computers include cnn processors visual systems founded 2000 researchers programmable cnn universal processor computers mission speed inspired systems based cnn processors 2003 computers developed visual processor board included 4k processor texas instrument module speed frame allowed cnn processing easily included desktop considerably improving capability cnn analog processors 2006 computers developed ultra speed smart camera product includes 4k processor models product development team dual camera platform based ultra speed smart camera designed provide assistance blind people functions perform route recognition color processing researchers developed custom analog cnn processors analog cnn processor developed team university generate robot researchers national university designed cnn processor learn pattern learning recognition researchers national institute technology developed max cnn processor learn cnn dynamics diversity cnn processors cnn gained analog cnn development efforts common future speed power consumption analog cnn processors analog cnn processors create environment process variation applications errors situations minor result failures chaotic communication process variation change phase space lost stability considerable performed researchers accommodate variation researchers improving semiconductor process closely match theoretical cnn performance researchers robust cnn architectures researchers developing methods target specific chip operating conditions optimized match processing platform process variation limit current analog cnn processors barrier creating complex processing units process variation resolved ideas nested processing units linear inputs implemented real time analog cnn processor semiconductor real processing units limits size cnn processors largest cnn based vision processor consists 4k detector consumer cameras feature size predicted law result minor improvements reason alternate technologies tunneling neuron transistors explored architecture cnn processors star cnn processors analog time shared multiple processor units proposed expected result processor unit reduction size percent fast energy efficient digital cnn processors share process variation feature size analog digital cnn processors include nested processor units addition digital cnn flexible cost easier integrate common implementation digital cnn processors founded 2002 operating berkeley intellectual property synthesized digital based cnn processors 30 frame plans fast digital strategic partner computers designs products developing software libraries perform tasks including limited video analytics video security market feature classification multi target tracking signal image processing flow processing routines derived cnn processing perform cnn simulations speed applications options precise cnn emulation software packages 2000 speed mathematical techniques iterative method solution cnn processor techniques performed mathematics tool matlab digital cnn processors highly parallel application specific processors graphics processors implementing neural networks graphics processors exploration community researchers alternate technologies cnn processors current cnn processors digital share term common semiconductor based processors include limited speed reliability power consumption computers developing optical cnn processors combine biological holographic memories initially technology exploration cnn processor perform 300 operations promising technology cnn processors nanotechnology nanotechnology concept investigated single electron tunneling single electron current transistors create cnn processing units summary cnn processors implemented provide users effectively advantages address disadvantages technology semiconductors researchers cnn processors emerging technologies cnn architecture suited specific processing processors purchase future applications philosophy cnn researchers potential cnn architecture platform people variety disciplines exploring practical implementations cnn processors cnn processors model physical phenomena researchers exploring theoretical mathematical computational ideas cnn processors applications engineering understood behavior cnn processors exploited perform specific task scientific cnn processors explore phenomenon cnn processors platforms variety applications cnn processors designed perform image processing original application cnn processors perform real time ultra frame rate 000 frame processing digital processors applications particle detection jet engine spark plug detection cnn processors achieve 50 000 frames applications tracking flash detection spark plug microprocessors conventional supercomputer cnn processors local level processor intensive operations feature extraction level gain color detection contrast enhancement image compression motion estimation image encoding image decoding image segmentation orientation maps pattern learning recognition multi target tracking image resolution enhancement image mapping image inpainting optical flow moving object detection axis detection image fusion processing capabilities flexibility cnn processors field applications analysis monitoring detection infrared cluster peak energy physics anomaly detection potential field maps laser dot detection metal inspection detecting manufacturing perform functions recognition feature extraction tracking generating visual stimuli patterns cnn processors medical biological performing automated cell detecting segment images meaningful regions measure function measure timing neurons detect brain lead potential future application cnn microprocessors combine dna real time dna analysis hundreds thousands dna sequences major bottleneck dna analysis time process data form images cnn microprocessor researchers reduced time perform calculation cnn processors generate analyze patterns textures motivation cnn processors understand pattern generation natural systems generate turing patterns understand situations form types patterns presence cnn processors approximate pattern generation systems create stationary temporal patterns time memory pattern generation aid performance image generation compression real time generation stochastic coarse grained biological patterns texture boundary detection pattern texture recognition classification control systems ongoing effort incorporate cnn processors sensory computing machines emerging field cellular machines basic create integrated cnn processors sensory signal processing decision control reason cnn processors provide power size eventually cost computing suited cellular machines cellular machines eventually create sensor network san type mobile networks military intelligence surveillance environments maintenance exploration cnn processors proven control functions optimize function genetic algorithm measure distances perform optimal path finding complex dynamic environment theoretically learn associate complex stimuli create level motors robotic central pattern generator function feedback environment allowing robust flexible inspired robot motor cnn based systems operate environments function processing units disabled variety behavior cnn processors communication systems chaotic communications cnn processors potential power consumption spread spectrum features chaotic communication chaotic signal carrier wave chaotic phase synchronization reconstruct original message cnn processors encode decode message data encryption source authentication detecting complex patterns images sound processing spectral signals detection cnn processors processors meaning emulate aspects biological neural networks original cnn processors based consist layer connected layers locally coupled neurons cnn processors goal design systems knowledge ideas neuroscience contribute real validation theories cnn processors implemented real time original cnn architecture chosen modeled correct aspects biological neural networks perform task life cnn processors limited biological neural networks vision processing simulate dynamic activity neural networks responsible pre processing sensory detect differences patterns cnn processors understand systems modeled simple coupled units living cells biological networks systems cnn architecture dynamics nature simple analyze conduct experiments stochastic simulation techniques scientists explore spin population dynamics lattice based gas models phenomena simulation applications include heat transfer mechanical systems protein production transmission wave propagation structures instances 3d dimensional cnn prove complex shapes phenomena complex systems link art systems technology cnn processors variety mathematical concepts systems constructing linear systems arbitrary complexity collection simple understood dynamic systems chaotic dynamics generating chaotic signals dynamic behavior scientific field studies natural systems goal researchers develop conceptual mathematical framework analyze model understand systems including limited atomic mechanical molecular chemical biological social economic systems topics explored behavior local activity impact global behavior complexity spatial invariant measure complexity professor massachusetts institute technology mit identified 32 definitions complexity mathematically analyzing systems economic social systems references computational complexity cellular neural networks applications 2004  
2576553	computer	united nations university international institute software technology unu da united nations university training centre based china history 1989 council united nations university decided establish united nations university international institute software technology unu training centre university unu door 1992 china initial institute united nations institute address global human development international operation advanced training software technology history 2000 2010 decade unu positions university united nations generation providing critical software systems developing communication technology changed decades defined mission strategic plan 2010 plan calls unu focused response computing environment potential serve development eventually unu decided institute computing society ics administration director unu professor peter center electronic center electronic unu international center practice electronic established 2007 center built contribution unu project program 2007 collaborative initiative build utilize foundation electronic government 2010 official unu mission center electronic unu support developing countries strategic technology transform public organizations relationships businesses civil society activities center include applied policy capacity building forms development – strategy development software development development development communities practice teaching center schools presentations government managers researchers aspects electronic courses presentation materials events conferences center established 2007 leads organization series international conferences electronic editions  
2578705	computer	born november chinese scientist professor china studied department mathematics mechanics university institute computing technology chinese academy sciences university oxford university computing laboratory oxford university department science time prime duration interval logic real time systems european project correct systems visiting professor department science technical university professor principal fellow director unu returned 2007 director unu chinese academy sciences children  
2592865	computer	architecture cycles instruction clock cycles instruction instruction aspect processor performance average clock cycles instruction program program inverse instructions cycle definition average cycles instruction process defined instructions instruction type clock cycles instruction type total instruction count summation instruction types process explanation assume classic risc pipeline stages stage requires clock cycle instruction passes stages sequentially pipelining instruction fetched stage previous instruction stage clock cycles takes execute instruction processor pipelining instruction fetched clock cycle exploiting instruction level parallelism theoretically instructions pipeline stages instruction stage instruction complete stage clock cycle average clock cycles takes execute instruction processor scalar single execution unit processor multiple execution unit processor achieve values processor superscalar values pipelining execution units stages units instructions fetched stage previous instructions stage average clock cycles takes execute instruction values pipelining execution units units instructions fetched clock cycle exploiting instruction level parallelism instructions complete stage clock cycle average clock cycles takes execute instruction examples multi cycle mips types instructions program determine effective mips millions instructions rate execution time program 12  
2615949	computer	network network configuration parallel computing architectures indirect topology relies perfect interconnection algorithm connection architecture network interconnection network meaning processing elements connected multiple stages switches inputs outputs addresses figure outputs stage connected inputs stage perfect connection connections stage represent movement cards divided equal card card terms binary representation stage perfect logical left shift bit address shifted left bit moving bit stage adjacent pairs inputs connected simple exchange element set straight pass inputs outputs send input output vice versa processing element network switches stage stages manner switches set determines connection paths network time methods destination tag routing tag routing discussed network highly path input output network destination tag routing destination tag routing switch settings determined solely message destination bit destination address select output switch stage bit upper output selected output selected bit destination address select output switch stage final output selected message destination switch settings upper upper message destination switch settings upper switch settings hold sending message tag routing tag routing switch settings based source destination tag 1s bit positions bit positions source destination common bit tag select setting switch stage bit switch set pass switch bit tag set switch stage final output selected send message tag switch settings straight applications multiprocessing networks cpus shared memory decrease probability cpu memory connection bottleneck class networks built multiprocessor ibm  
2622712	computer	visualization toolkit vtk source freely software 3d graphics image processing visualization vtk consists class library interpreted interface layers including java python team created continues extend toolkit offers professional support services vtk vtk supports wide variety visualization algorithms including scalar vector tensor texture methods advanced modeling techniques implicit modeling reduction mesh smoothing cutting vtk extensive visualization framework suite 3d interaction supports parallel processing databases gui qt vtk cross platform runs linux windows mac unix platforms core vtk implemented toolkit requiring users build applications combining objects application supports automated core python java vtk applications written interpreted programming languages vtk worldwide commercial applications development basis advanced visualization applications vtk source toolkit licensed bsd license history vtk initially created 1993 software book visualization toolkit object oriented approach 3d graphics published hall book software written researchers martin time permission ownership software continues authors core vtk written users developers improve apply real medical systems businesses contributed researchers book included los national labs oil gas national labs strong developers focus adding visualization vtk support active worldwide vtk community charles law left 1998 time hundreds additional developers created visualization founding vtk community grew rapidly toolkit usage expanded academic commercial applications vtk forms core biomedical computing application numerous papers ieee visualization conferences based vtk appeared vtk processor los national laboratory process data 2005 based vtk real time rendering 23 russian anti aircraft vehicle hit wave cell calculation united laboratory vtk forms basis national organizations los national labs vtk foundation data visualization vtk key computing tools established national alliance medical image computing initiative future computing tools vtk includes expansion toolkit support processing display informatics data supported national laboratories project represents efforts scientific visualization informatics functionality  
2651093	computer	edge enhancement image processing filter edge contrast image video attempt improve acutance apparent filter identifying sharp edge boundaries image edge subject background color increasing image contrast edge creating subtle dark edges image called leading edge defined viewed typical viewing distance process video field degree majority modern television set control edge enhancement printers graphics printing quality digital cameras perform edge enhancement adjusted edge enhancement analog digital process analog edge enhancement analog video equipment modern crt properties edge enhancement applied image vary properties common algorithm parameters edge enhancement applied horizontal vertical direction directions amounts applying edge enhancement images originally analog video effects edge enhancement forms image edge enhancement enhance subtle uniform image texture appears flat smooth image benefit image noise subject natural person obvious process image natural apparent image increased level flat smooth forms image edge enhancement capable improving perceived acutance image enhancement completely image lost result filtering operations image compound loss leading artifacts image edge enhancement applied picture dvd video edge enhancement applied dvd player played television displayed essentially edge enhancement filter creates edges existing edges enhanced viewing conditions ideal edge enhancement required produce sharp image losing varies factors image viewed distance larger display size medium inherently sharp person typically demand lesser edge enhancement image display size viewing distance medium inherently person reason cinema larger quality screens edge enhancement commercially produced dvd videos edge enhancement optimized quality television screens loss result edge enhancement viewing conditions  
2655175	computer	image histogram type histogram acts graphical representation distribution digital image pixels histogram specific image viewer judge entire distribution image modern digital cameras aid distribution captured image lost raw image format dynamic range displayed image approximation raw file horizontal axis graph represents variations vertical axis represents pixels left horizontal axis represents black dark middle represents medium hand represents light pure white vertical axis represents size captured histogram dark image majority data left center graph conversely histogram image dark data center graph image manipulation image editors typically create histogram image edited histogram pixels image vertical axis brightness horizontal axis algorithms digital editor user visually adjust brightness pixel dynamically display improvements picture brightness contrast field vision image tools thresholding contained graph representation pixel distribution function variation image analyzed threshold edge detection image segmentation occurrence matrices  
2672495	computer	rise swedish institute science leading institute applied communication technology founded 1985 rise institute industry century total products services businesses revolution competitive strength swedish industry quality efficiency public sector january 2005 employees researchers 30 phd degrees 200 employees researchers phd degrees institute headquartered main office building software software packages developed academic output 100 publications academic journals conferences researchers receive academic degrees positions ranked science institution article december 2004 issue highly journal proceedings national academy sciences swedish institution included list european institutions 13 american institutions larger funding owned jointly 60 swedish government 40 swedish industry government owners institutes rise swedish administration industry owners consortium brown abb green transportation funded owners national funding sources swedish government agency innovation systems swedish foundation strategic industrial collaboration partners european projects funded european commission history rise formed 1985 owned swedish government  
2701254	computer	bachelor science bachelor science science bcs type bachelor degree awarded study science awarded depending factors institution requirements academic calendar awarded science degree programs mathematical theoretical foundations computing core depending school result degrees including post secondary institutions honors bachelor science degree introduced upgrade regular bachelor program requires additional study engineering basic skills engineering student engineering based theories principles computation physics mathematics engineering principles applied resolution technical require creation development software hardware network architectures engineering studies intended people oriented scientific aspects development evolution science capabilities lead development projects fast continuously environments educational degree engineering specific skills proposed engineering professional degree required skills software engineer theoretical aspects science electronics list classification professional https 52 68 typical requirements science wide field courses required bachelor science degree vary typical list requirements includes topics schools emphasis mathematics require additional courses basic set science courses students typically choose additional courses variety fields schools students science  
2702169	computer	network bridge networking device creates single network multiple communication networks network segments function called network bridging bridging distinct routing routing multiple networks communicate independently remain separate bridging connects separate networks single network osi model bridging performed data link layer layer segments network wireless device wireless bridge types network bridging technologies simple bridging bridging learning transparent bridging source route bridging transparent bridging transparent bridging table called forwarding base control forwarding frames network segments table starts entries bridge receives frames destination address entry table frame ports bridge frame segments received frames host destination network respond forwarding database entry created source destination addresses process source addresses recorded entries table destination addresses looked table matched proper segment send frame digital equipment corporation dec originally developed technology 1980s context port bridge forwarding base filtering database bridge reads frame destination address filter bridge determines destination host segment network frame segment destination address segment source address bridge filters frame reaching network transparent bridging operate devices ports bridge connected hosts bridge ports connected bridge port connected bridge port connected bridge port frame addressed bridge bridge source address frame creates address port entry forwarding table bridge destination address frame forwarding table ports frame received hosts host destination address frame host recognizes destination address match generates response return path bridge adds address port entry forwarding table bridge address forwarding table response port host hosts port response communication network simple bridging simple bridge connects network segments typically operating frame frame basis network store technique typically forwarding frame integrity source network delays destination network contrast simply extend maximum segment bridges frames required cross bridge additionally bridges reduce creating separate collision domain bridge bridging bridge connects multiple networks operates decide frame frame basis traffic additionally bridge decide traffic simple bridge bridge typically store operation bridge function serves basis network switches implementation forwarding base stored content addressable memory initially received ethernet frame switch learns frames source mac address adds interface build forwarding base switch frame interface based frames destination mac address destination address unknown switch frame interfaces interface behaviour called unicast forwarding bridge learns addresses connected nodes data link layer frames layer forwarding method forwarding methods bridge fourth methods performance increasing methods switch products input output port  
2710684	computer	delay tolerant networking approach network architecture seeks address technical issues heterogeneous networks lack continuous network connectivity examples networks operating mobile extreme environments planned networks space term tolerant networking gained united support darpa funded projects occur limits wireless radio range sparsity mobile nodes energy resources attack noise history 1970s decreasing size computers researchers developing technology routing fixed locations computers field routing 1980s widespread wireless protocols field 1990s mobile networking networking increasing concurrently separate activities darpa founded nasa develop proposal internet internet pioneer developed initial architecture networking technologies delays packet deep space communications 2002 fall started adapt ideas design networks coined term delay tolerant networking paper published 2003 conference motivation mid 2000s brought increased including growing academic conferences delay tolerant networking growing combining sensor networks field classic delay tolerant networking algorithms factors security reliability understood traditional networking routing ability transport route data source destination fundamental ability communication networks delay tolerant networks characterized lack connectivity lack paths environments popular routing protocols fail establish protocols establish complete route route established actual data paths difficult impossible establish routing protocols store approach data moved stored network eventually reach destination common technique maximize probability message transferred copies message reaching destination feasible networks amounts local storage bandwidth relative expected traffic common spaces increased efficiency delivery times maximum advantage forwarding opportunities storage throughput opportunities tightly constrained algorithm required concerns bundle protocols efforts provide shared framework algorithm application development published 2007 define common abstraction software running networks commonly bundle protocol protocol defines series data blocks bundle semantic application progress individual block store manner participating nodes network transport technologies including ip ip based transport layers carrying local networks called bundle convergence layers bundle architecture operates overlay network providing naming architecture based coarse grained class service offerings protocols application level preferences sending network store nature delay tolerant protocols routing solutions delay tolerant networks benefit exposure application layer network scheduling influenced application data received variation packet delay bundle protocols application data heterogeneous network configurations level service guarantees service guarantees set application level bundle protocol specification includes normal security issues addressing security issues major focus bundle protocol security concerns delay tolerant networks vary depending application authentication critical security guarantees difficult network connectivity complicated protocols key exchange identify visible devices solutions typically modified mobile network security schemes original solutions delay tolerant community include based encryption nodes public identifier tables protocol efforts efforts issues involved efforts internet bundle protocol space  
2786727	computer	stream processing programming paradigm equivalent programming event stream processing programming applications easily exploit limited form parallel processing applications multiple computational units floating unit graphics processing unit field programmable gate arrays explicitly managing allocation synchronization communication units stream processing paradigm parallel software hardware parallel computation performed sequence data stream series operations kernel functions applied element stream kernel functions pipelined optimal local chip memory attempted minimize loss bandwidth external memory interaction uniform streaming kernel function applied elements stream typical kernel stream data dependencies compiler tools optimize chip management tasks stream processing hardware direct memory access dependencies manual management reduces software complexity hardware cached reduces data involved service specialized computational units arithmetic logic units 1980s stream processing explored programming language streams iteration single assignment language applications stream processing essentially driven data model traditional dsp gpu type applications image video digital signal processing purpose processing data access databases flexibility model implications easier faster efficient execution depending context processor design tuned maximum efficiency trade flexibility stream processing suitable applications exhibit application characteristics examples records streams include record read input perform operations write output multiple inputs multiple outputs piece memory readable writable comparison prior parallel paradigms basic computers started sequential execution paradigm traditional cpus based perform operation time computing evolved data managed increased obvious sequential programming model increased processing power efforts spent finding alternative perform massive amounts computations solution exploit level parallel execution result efforts simd programming paradigm allowed applying instruction multiple instances data time simd environment complicated structures mimd parallelism paradigms efficient real implementations limitations memory alignment synchronization issues limited parallelism simd processors stand components embedded standard cpus simple program adding arrays 100 component vectors 400 total conventional sequential paradigm sequential paradigm variations exist loops structures ultimately construct parallel simd paradigm registers assumes instruction codice instruction account vector components data format clarity method reduces decoded instructions jump instructions loop times gains result parallel execution mathematical operations happened simd register holds data parallelism speed limited assumption performing parallel operations note common parallel stream paradigm simd mimd paradigm dataset defined component block defined separately describing set data assumed rows result sources kernel simplicity mapping input output data applied kernels complex implementation paradigm loop internally throughput scale chip complexity easily utilizing hundreds alus complex data patterns extra power stream processing branch simd mimd processing confused simd implementations streaming manner performance comparable model usage pattern performance applied generic processors standard cpu speedup reached contrast stream processors easily reach performance attributed efficient memory access levels parallel processing degrees flexibility allowed model stream processors limitations kernel stream size consumer hardware ability perform precision math complex limits instructions executed stanford university stream processing projects included stanford real time programmable project started 1999 prototype called imagine developed 2002 project called 2004 stream enhanced processors graphics processing units rapidly evolved speed functionality days stream processing languages developed specialized hardware programming model notes challenge parallel processing type hardware architecture easy program question real environment acceptable performance machines imagine straightforward single model automated dependencies memory allocation scheduling result mit stanford finding optimal tasks programmer tools hardware programmers beat tools mapping algorithms parallel hardware tools beat programmers memory allocation schemes concern mimd designs cell programmer deal application multiple cores deal process synchronization load balancing efficient multi core programming tools simd programming issue array structures structure arrays programmers build data structures meaning happened structures assembled arrays organized array structures structure memory compiler produce data sense structures constant offset size attribute structure instance element instance offset depends structure definition considered compiler policies position variables simd allocated continuous memory space simd operations memory location array color defined component vector simd processors support component operations exceptions kinds limitations simd acceleration standard cpus proposed solution structure arrays readers experienced identifier pointer element array allocated java programmers roughly equivalent attributes spread memory cache misses update stream processors usage structures encouraged application view attributes defined flexibility gpus reference set attributes 16 attribute application components format components data types supported attributes attached memory block defining consecutive elements attributes effectively allowing data gpu stream processing attributes single set parameters structure global variable performs operations memory processing modern stream processing frameworks provide interface structure data stream abstraction data dependencies enabling runtime hardware advantage knowledge efficient computation simplest efficient stream processing enables linking independent compute kernels data flow graph stream operators models computation stream processing streaming applications level language models computation models process based models generic processor architecture historically cpus implementing memory access increasing performance compared slow growing external memory bandwidth gap amounts die dedicated memory alus expensive die dedicated actual mathematical machinery rough estimation architecture exists stream processors programming model transistors dedicated management view stream processors exist controlled environment gpus exist add board apply imagine cpus dirty job managing resources running applications stream processor equipped fast efficient proprietary memory bus switches common multi buses employed exact memory dependent market range written 64 bit wide entry level mid range models fast 128 bit switch matrix segments models deploy huge amounts memory slower 256 bits wide contrast standard processors intel pentium 64 single 64 bit wide data bus memory access patterns arrays exist dimension fixed kernel closely matches multiple pointer chain guaranteed finally read write specific memory stream simd nature stream processor execution units alus clusters read write operations expected happen memories optimized bandwidth latency difference efficient memory bus 90 stream processor chip requiring global data stored memory kernel dependencies internally stream processor features communication management circuits stream register file cache stream data stored transferred external memory cache software controlled structure alus shared alu clusters key concept innovation stanford imagine chip compiler memory optimal transparent programmer dependencies kernel functions data programming model enables compiler perform flow analysis pack commonly cache management majority project schedule stream processor imagine tests stanford compiler job scheduling memory hand tuned effort proof lot clusters inter cluster communication assumed rare internally cluster efficiently exploit alus cluster communication common highly efficient alus fetched data alu equipped local register files basically usable registers data access pattern easy temporary data slow memories silicon implementation highly efficient power saving hardware loop issues magnitude speedup expected mainstream gpus computing streaming manner applications benefit communication biggest express improved communications gpu generic stream processor amounts time counter datasets changing kernel expensive operation stream architecture streams behaviour referred short stream pipelining widespread heavily practice stream processors gpus featuring pipelines 200 stages cost switching settings dependent setting modified considered expensive avoid levels pipeline techniques deployed texture techniques game oriented nature gpus concepts generic stream processing stream programming libraries languages programming languages stream processors start java add extensions provide specific instructions application developers tag kernels streams applies languages considered stream programming languages degree commercial examples stream programming languages include commercial implementations purpose tied specific hardware vendor examples purpose languages include vendor specific languages include event based file based processing actual stream processing performance continuous operator stream processing services  
2849640	computer	born august chinese scientist mathematics department university 1965 1965 1985 east china normal university visiting stanford university university san francisco california united 1984 1998 senior fellow programming oxford university computing laboratory oxford university department science extensively formal aspects computing science theories programming book 1986 professor science east china normal university shanghai 1996 professor science shanghai university 1998 senior fellow international institute software technology unu united nations university based moved shanghai 2005 include sound methods specification systems communications application standards techniques designing implementing specifications software hardware reliability 2005 elected chinese academy sciences 2013 east china normal university international day association international conference theoretical aspects computing books written science books including  
2878626	computer	optical computing produced computation decades bandwidth electrons conventional computers projects focus replacing current components optical optical digital processing binary data approach appears offer short term commercial optical computing optical components integrated traditional computers produce optical electronic hybrid devices 30 energy converting electronic energy conversion transmission messages optical computers eliminate optical electrical optical electrical power application specific devices synthetic radar optical designed principles optical computing detect track objects classify serial time domain optical data optical components binary digital fundamental building block modern electronic computers transistor replace electronic components optical equivalent optical transistor required achieved materials linear materials exist intensity incoming light intensity light transmitted material manner current response transistor optical transistor create optical logic gates assembled level components cpu nonlinear optical manipulate light beams controlling light beams computing optical computing function electrical components data format conversion electrons slower researchers future capabilities optical computers compete semiconductor based electronic computers terms speed power consumption cost size question critics note real logic systems require logic level fan isolation electronic transistors cost power speed optical logic competitive applications major linear optical device technology required change nature computing challenges challenge optical computing computation nonlinear process multiple signals interact light electromagnetic wave interact electromagnetic wave presence electrons material strength interaction electromagnetic waves light electronic signals conventional result processing elements optical requiring power larger dimensions conventional electronic transistors light travel faster electrons frequencies measured optical transistors capable extremely frequencies electromagnetic wave transform limit rate optical transistor respond signal limited spectral bandwidth fiber optic communications practical limits channels silicon transistors dramatically faster operation electronic transistors require practical methods highly logic logic light logic gates switching nonlinear optical effects signals combined logic build energy interference optical nonlinear effects approaches investigated include logic molecular level demonstration performed logical operations molecules approaches time delays optical computing basic idea delay light signal perform computations solve complete difficult conventional computers basic properties light approach solving time delays steps path simplest subset sum optical device solving instance light enter start node divided rays intensity rays node divided 3rd node represents subsets set expect intensity signal destination node expect 16 subsets target moment solution subset sum elements practical implementation cables cables increased fixed solution expected moment wavelength based computing wavelength based computing solve variables variables wavelength contained light ray considered variables optical device proper wavelengths satisfy computing approach xerox machine transparent performing computations variables variables solved steps optical beams solved optical approach paths generated stored binary matrix gray scale vector distances cities multiplication performed optical optical fourier processors computations scientific applications require frequent 2d discrete fourier transform – solving differential equations describing propagation waves transfer heat modern gpu technologies typically enable speed computation 2d techniques developed perform natural fourier transforming property lenses input encoded liquid crystal spatial light result measured conventional ccd image sensor optical architectures offer superior scaling computational complexity inherently highly nature optical propagation solve 2d heat equations machines physical computers design inspired theoretical model called machines building machines initially colleagues built machine optical components commonly optical table team hewlett packard labs including developed chip design tools build machine single chip integrating optical components single chip  
2889768	computer	image stitching photo stitching process combining multiple photographic images overlapping fields view produce resolution image commonly performed software approaches image stitching require exact images identical produce stitching algorithms benefit images dynamic range imaging regions overlap digital cameras photos internally image stitching modern applications process stages image stitching process divided main components image registration issues image stitching illumination views guaranteed stitching images create visible reasons background changing images continuous major issues deal presence parallax lens distortion scene motion exposure differences stitching ideal set images reasonable overlap overcome lens distortion features set images consistent exposure frames minimize probability occurring ideal real life intensity varies scene contrast intensity frames lens distortion motion scene ratio height image account create visually detection feature detection automatically images robust required estimate transformation image image corners harris corners difference gaussian harris corners dog features distinct operators detection developed 1977 involving automatic navigation robot environment defined concept image concluded matching regions images operator considered corner detector defines intensity variations directions corners finding corners distinct regions image register consecutive image frames harris improved corner detector differential corner score respect direction processing step build robot environment based image sequences method match consecutive image frames tracking corners edges frames detector algorithms note patented commercial usage restricted feature detected descriptor method descriptor applied match registration image registration involves matching features set images direct alignment methods search image minimize sum absolute differences overlapping pixels direct alignment methods images additionally users input rough model feature matching stage neighboring images matching features features matching result search accurate execution comparison faster estimate robust model data common method random sample iterative method robust parameter estimation fit mathematical models sets observed data algorithm deterministic sense produces reasonable result probability probability increasing iterations performed probabilistic method time algorithm algorithm applications vision including simultaneous solving correspondence estimation fundamental matrix pair stereo cameras basic assumption method data consists data distribution explained mathematical model data fit model considered noise measurements simply incorrect data estimation fit models pairs checking models model – produces correct matches – chosen answer ratio data outputs model fitting data image aims minimize differences ideal lens models camera lens combination optical exposure differences images camera response feature detection methods register images absolute positions features recorded saved stitching software data geometric optimization images addition images derivative programs method alignment alignment transform image match view image alignment simple terms change coordinates coordinate outputs image matching required types transformations image pure translation pure rotation similarity transform includes translation rotation scaling image transformed transform transformation image transform set dimensional transformations visible features transformed image straight lines parallelism maintained transform transformation mathematically coordinate transformed image matrix camera rotation translation real coordinates equations relation matrix parameters degrees freedom computed direct linear transform singular decomposition matrix constructed coordinates dimensional vector elements matrix simple apply svd column singular vector true space degrees freedom algorithm requires estimate multiple correct matrix maximum process images aligned single shot scene automatically algorithm overlap image involves executing stage combined images output projection colors adjusted images exposure differences applicable dynamic range merging motion images adjustment minimize images reduced simple gain adjustment basically minimizing intensity difference overlapping pixels image algorithm weight pixels center image gain multi band images compare 2007 method image brown david paper image stitching invariant methods apply global rotation vector vertical rendering frame effectively output gain image edges visible intensity decreases edge image parallax effects motion optical centre registration errors camera radial distortion reasons strategy called multi band image segments space images arranged map projections projection image viewed dimensional plane single lines straight reality straight directions image wide views start exhibit severe distortion image projection mapping viewing mapped squares 90 90 degree projection image horizontal field view limited vertical field view projection meant viewed image cylinder viewed viewed 2d plane horizontal lines vertical lines remain straight vertical distortion increases rapidly formats distortion projection projection strictly speaking projection image horizontal vertical field view projection meant viewed image viewed viewed 2d plane horizontal lines projection vertical lines remain vertical basically map mapping projections desired additionally specialized projections advantages normal projections projection named italian projection projections combined image fine tuning final output image projection projection form virtual camera straight setting field view ground virtual camera creates projection produce visually result equal projection discussed projection article artifacts image stitching images camera lead parallax errors final product captured scene features rapid movement dynamic motion artifacts occur result time differences image segments blind stitching feature based alignment methods opposed manual selection stitching assembly avoid parallax distortion issue images stitching format camera keeping stationary lens images parallax issues market movement capture device medium format digital capture movement camera adapter flex adapter phase simple linear stitching axis horizontal image adapter plate user create images overlap precisely creating images stitching photographic advantage stitching format camera capture device remains plane exposure eliminated software dedicated programs include tools image editor programs multiple images popular adobe systems includes tool versions auto programs videos enables real time video stitching image stitching module software enables multiple fields view camera live view manual stitching microscopy samples  
2891273	computer	partially assembled platform kit allowing costs retail desktop notebook server purposes form factor manufacturers produce systems specialized standard form factor sold pre built unit motherboard power supply installed components hand expensive pre configured save time labor compared building scratch typical desktop consists cpu tower pre fitted motherboard power supply platform ram hard drive operating installed cost flash drive additional input output devices required depending install operating built motherboard audio adapter network adapter common capable solutions peripherals keyboard mouse monitor acquired separately systems include graphics processor ram rarely mass storage media hard drives operating software pcs normal desktop pc windows operating systems sold include software linux computers computers computers returned missing broken hard drives peripherals upgrade limitations future limited motherboard component space extra devices memory card slots desired motherboard compatible faster processors memory originally purchased limit processor thermal design power support cpus fit socket manufacturers companies manufacture computers  
2901245	computer	unix refers versions unix operating dec pdp pdp 11 vax 32 32 computers developed bell labs computing sciences center history term unix appeared bell technical journal 1978 distinguish versions internal bell labs unix code base primary version term version unix applied earlier versions prior operating commonly called simply unix unix time sharing licensed version educational institutions version commercial sites schools paid 200 20 000 commercial version version 1980s unix versions referred edition manual describes versions officially released bell labs grew unix edition edition common referring version unix manual edition modern editions unix implementations minix edition starting edition versions unix close relationship bsd basis edition post 2000 versions unix closer bsd unix included bsd code legacy 2002 caldera international released unix bsd software license 2017 unix heritage society lucent usa nokia bell laboratories released condition copyright rights respect commercial distribution performance display creation derivative editions  
2932011	computer	standard image digital image file institutions image processing image compression algorithms standard images labs compare visually images chosen represent natural typical images class processing techniques deal images chosen range challenges image reconstruction algorithms fine textures sharp transitions edges uniform regions historical origins images transmission material original paris link equipment photographic equipment printing trade largest user standardized image technology coming television digital image transmission systems common images standard size images images files university california signal image processing institute released set 24 images comparing image compression techniques  
2937077	computer	graphics digital imaging image scaling refers digital image video technology digital material resolution enhancement scaling vector graphic image graphic primitives image scaled geometric transformations loss image quality scaling raster graphics image image pixels generated decreasing pixel scaling visible quality loss digital signal processing scaling raster graphics dimensional sample rate conversion conversion discrete signal sampling rate local sampling rate mathematical image scaling interpreted form image image reconstruction view sampling theorem theorem image resolution original carried applying suitable 2d anti aliasing filter prevent aliasing artifacts image reduced carried image sampling reconstruction filter takes anti aliasing filter sophisticated approach inverse solving question generating image scaled input image variety techniques applied including optimization techniques regularization terms machine learning examples algorithms image size changed simpler increasing image size nearest neighbor interpolation replacing pixel nearest pixel output multiple pixels color preserve sharp details pixel art introduce smooth images nearest nearest neighbor mathematical nearest common implementation produces artifacts faster calculate interpolation pixel color values introducing continuous transition output original material discrete transitions desirable continuous images algorithm reduces contrast sharp edges art interpolation yields increase computational complexity theory reconstruction signal practice assumptions completely real digital images approximation method yields interpolation regarded computationally efficient approximation algorithms sample specific pixels scaling threshold sampling algorithms algorithms sample adjacent pixels losing data rough trivial solution issue box sampling target pixel box original image sample pixels box ensures input pixels contribute output major algorithm hard optimize solution sampling scaling set copies nearest larger origin ensure scaling threshold scaling algorithm fast easy optimize standard frameworks cost image memory standard implementation simple interpolation based fourier transform frequency domain components smooth window based approach reduce recovery details notable circular content left edge directed interpolation algorithms aim preserve edges image scaling algorithms introduce artifacts examples algorithms task include edge directed interpolation edge guided image interpolation iterative based interpolation directional convolution interpolation 2013 analysis scores ssim series images graphics resolution colors 256 colors achieved pixel art scaling algorithms produce sharp edges maintain level vector extraction offer approach creates resolution independent vector representation graphic scaled resolution independent version rendered raster image desired resolution technique adobe live trace scalable vector graphics suited simple geometric images photographs complexity method machine learning detailed images photographs complex programs method include neural enhance applications image scaling applications browsers image editors image file viewers software digital process generating images images screens printers video application images theaters ready output devices resolution content dvd player performed real time output signal saved pixel art scaling pixel art graphics resolution rely individual pixels limited colors graphics rely visual cues define complex shapes resolution individual pixels scaling pixel art difficult specialized algorithms developed handle pixel art graphics traditional scaling algorithms cues account typical application improve appearance fourth generation earlier video games console designed real time input images 60 frames fast hardware algorithms suitable gaming real time image processing algorithms provide sharp graphics minimizing blur scaling art algorithms implemented wide range 2d game engines game engine gained recognition technologies encouraged 1980s 1990s gaming experiences filters commercial xbox live virtual console classic resolution games visually modern hd displays released games incorporate filters include ultimate collection  
2938351	computer	scalar processors represent class processors scalar processor processes data item time typical data items integers floating scalar processor classified processor single instructions single data contrast vector processor single instruction operates simultaneously multiple data items referred simd difference analogous difference scalar vector arithmetic superscalar processor hand executes instruction clock cycle simultaneously multiple instructions redundant functional units processor functional unit separate cpu core execution resource single cpu arithmetic logic unit bit  
2997698	computer	logical methods science peer reviewed access scientific journal covering theoretical science applied logic established 2005 editor chief university indexing journal indexed current contents engineering computing technology mathematical reviews science expanded math journal reports journal 2016 impact factor  
3025266	computer	ternary called ternary logic values popular binary base calculations types ternary computing deals discrete ternary digits defined history calculating machine built thomas operated balanced ternary modern electronic ternary built union university notable advantages binary computers eventually replaced electricity consumption production cost 1970 built enhanced version called 70 usa ternary computing emulator binary machine developed 1973 ternary developed canada balanced ternary ternary computing commonly implemented terms balanced ternary digits negative balanced ternary replacing vice versa easy digits normal addition balanced ternary express negative values easily positive leading negative sign advantages calculations efficient ternary binary digits magnitude notation potential future applications advent mass produced binary components computers ternary computers donald knuth argues brought development future advantage ternary logic efficiency happen combining optical ternary logic ternary fiber dark orthogonal light ibm reports ternary computing topics papers proposed balanced ternary memory cell advantages proposed memory circuit capability speed computation power consumption simple construction elements ternary operation 2009 quantum proposed quantum ternary typical qubit basic quantum element called ternary computers popular culture robert time love computers story set including ternary calculation result original ternary unit pair pair unit unit pair pair unit virtual game ternary computers modern ternary extra boolean true false operations understanding logic binary computers space series ternary logic program computers nanotechnology devices  
3044244	computer	series 80 crystal short mobile software platform enterprise professional level smartphones nokia introduced 2000 symbian os common physical properties symbian os user interface type screen resolution pixels keyboard series 80 size screens separate development market nokia announced 2005 final series 80 device nokia series 80 platform final nokia  
3057187	computer	independent toyota motors founded 1949 25 company owned toyota motor toyota companies march 2016 sales toyota 50 total revenue 44 revenue originated car manufacturers japan germany china denso largest auto supplier 2016 denso corporation consisted subsidiaries japan 34 34 europe 58 asia total employees company global production structure manufacturing india mexico indonesia accommodate global demand products 2013 denso listed global 500 list total revenue 43 meaning word denso derived japanese electric device sales company manufactures auto including gasoline engine components hybrid vehicle components control systems instrument clusters air bag systems pre crash radar systems spark denso manufactures automotive components equipment industrial robots code denso industrial robot gained wide public attention japan conducted game japanese chess professional players 2014 denso global sales distributed denso toyota helpful toyota participating developing cars series denso electronics toyota racing development toyota gmbh germany operated toyota team toyota championship team toyota championship team toyota hybrid denso energy recovery consists motor generator unit electric motor finished 2013 24 hours toyota family denso products japanese cars japan super 500 300 denso wave denso wave subsidiary produces automatic identification products bar code readers products industrial robots programmable logic controllers creating dimensional code japan robot association support standard denso international america denso international america american subsidiary denso corporation 1970 denso corporation decided expand japan north america march 1971 denso sales california founded california company 12 objective denso sales california promote air systems options japanese vehicles 1975 denso corporation sales division denso sales michigan september 1975 denso international america service center falls contract john including motors denso international america employs 17 000 people 38 locations north central south america march 31 2008 combined sales american locations price january 30 2012 department announced investigation discovered massive price scheme denso played role fixed prices allocated components car manufacturers toyota honda extended michigan japan investigation denso agreed pay fine 78  
3089375	computer	feature mechanisms functions dependent prevent finite machine consist electrical electronic mechanical devices systems applications prevent machine operator element changing element vice versa equipped moving stationary moving proof strategies confused simple safety switch typical switch door considered door locked operating door include sophisticated elements infrared beams program digital electronics simple switches key key method safety industrial environments operator sequence defined selection switches called key releasing sequence control power isolated key released grant access individual multiple prevent access electric key switch door switch key held attached switch door switch releases key key door key removed switch switch closing power applied door locked releasing key key returned switch ensure energy supply machine machine entered adjustment maintenance microprocessors microprocessor architecture hardware stalls pipeline hazard detected hazard hazard software program loads data bus calls data cycle loads multiple cycles load hazard mechanical strictly mechanical form internal safety blocks motion properly closed locked operation device press hand fed hand removed buttons device hand greatly reduces possibility operation operator proof systems augmented operator stroke machine major engineering operator safety operators safety forced pressure factors require facilitate operator cooperation electrical people generators power business event main power offline transfer power source generator main safety employed consists switches prevent main power generator power simultaneously power sources running condition generator power feed main dangerous voltage reach main feed building device designed generator provide backup power main generator power connected time circuit operate interference event condition devices electrical systems employ mechanical device manage movement circuit prevent main power  
3100948	computer	structural similarity ssim method predicting perceived quality digital television pictures kinds digital images videos version model developed laboratory image video engineering live university texas austin developed jointly laboratory computational vision york university ssim measuring similarity images ssim reference metric measurement prediction image quality based initial distortion image reference ssim designed improve traditional methods peak signal noise ratio squared error history predecessor ssim called universal quality developed 2001 evolved collaboration current version ssim published april 2004 ieee transactions image processing addition defining ssim quality paper context developing evaluating quality measures including connections human visual perception direct validation human subject ratings ssim rapidly image processing community march 2000 phase report video quality experts concluded proposed models quality 2004 ssim paper cited 15 000 times google cited papers image processing video engineering fields ieee signal processing society paper award 2009 received ieee signal processing society impact award 2016 paper impact publication ssim individual engineering award television academy 2015 structural similarity difference respect techniques mentioned approaches estimate absolute errors hand ssim perception based model considers image perceived change structural incorporating phenomena including contrast terms structural idea pixels strong inter dependencies spatially close dependencies carry structure objects visual scene phenomenon image context tend visible regions contrast phenomenon visible activity texture image algorithm ssim calculated windows image measure windows common size ssim condition components ssim based comparison measurements samples 24 contrast 25 structure 26 individual comparison functions addition definitions ssim weighted combination measures weights 32 reduced form application evaluate image quality applied applied color rgb values values ssim identical sets data perfect structural similarity structural similarity typically calculated window sizes window pixel pixel image authors windows reduce complexity calculation variants multi scale ssim advanced form ssim called ssim ssim conducted multiple scales process multiple stages sampling processing vision perform equally ssim image video databases component ssim component ssim ssim form ssim takes account human eye differences precisely edge regions smooth regions metric calculated weighted average ssim categories regions edges textures smooth regions proposed weighting edges 25 smooth regions authors weighting edge leads closer ratings suggests edge regions play dominant role image quality perception structural structural distance metric derived ssim video quality metrics worth original version ssim designed measure quality images parameters temporal effects human perception human temporal variants ssim developed simple application ssim estimate video quality calculate average ssim frames video sequence complex wavelet ssim complex wavelet transform variant ssim ssim designed deal issues image scaling translation rotation scores images conditions ssim takes advantage complex wavelet transform yields scores images ssim defined complex wavelet transform signal complex wavelet transform signal additionally positive purposes function stability ideally ssim ssim maximum maximum signals structural similarity application performance computation cost ssim broadcast cable satellite television industries dominant method measuring video quality broadcast post production television industry achievements basis team award ssim included video quality measurement tools globally including marketed video clarity national instruments ssim variants – ssim – reference image video quality models count wide industry acceptance industry recognition awards specific applications ssim ability human visual quality applications variety examples performance comparison popularity ssim compared metrics including simple metrics image video quality metrics ssim repeatedly accuracy including authors paper claims performance ssim closer assumed advantage ssim functional dependency metrics ssim based methods databases databases ssim ssim database packet video paper link ssim identified  
3226361	computer	photography term acutance describes perception edge contrast image acutance amplitude derivative brightness respect space nature human visual image acutance appears increase acutance increase real resolution historically acutance enhanced development negative acutance developers optical printing digital photography camera software image tools offer facilities mask algorithm derived analog processing method image light gray lines drawn gray background transition sharp represented resolution acutance left increased adding pixel wide pixel wide actual image apparent increased acutance increased acutance viewers separately create dark tools image processing techniques increase acutance real images pass filtering increases acutance reduce absolute gradient reduces acutance filtering artifacts interpolation image processing images definition definition acutance determined imaging sharp edge producing shaped distribution maximum density minimum density – transitions yield acutance slope curve acutance acutance image gradient density intensity vector acutance image vector field perceived combination resolution acutance combination captured resolution changed processing acutance changed properly perceived transitions slope change output divided change position – output filters position resolution coarse noise filters increase acutance increasing perception signal noise ratio term critical focus optical resolution limited sensor film lens practice minimizing camera – alternative support lock cable release image lenses – optimal lens scene wide scenes diffraction blur blur lens limits wide  
3235536	computer	google translate multilingual machine translation service developed google translate offers interface mobile apps android ios api helps developers build browser extensions software applications google translate supports 100 languages levels serves 500 people daily launched april 2006 statistical machine translation service united nations european linguistic data translating languages translates english target language translation patterns millions documents decide translation accuracy criticized november 2016 google announced google translate switch neural machine translation engine google neural machine translation gnmt translates sentences time piece piece broader context figure relevant translation human speaking proper grammar originally enabled languages 2016 gnmt gradually languages history google translation translation service developed google april 2006 translates multiple forms texts media phrases originally google translate released statistical machine translation smt translating required english translating selected language step smt predictive algorithms translate poor accuracy google initially experts resolve limitation nature language january 2010 google introduced android app ios version february 2011 serve portable personal interpreter february 2010 integrated browsers chrome automatically recognize picture spot languages 2014 google acquired word lens improve quality visual voice translation scan picture device translated automatically foreign languages translates speech requiring individuals button speech translation november 2016 google translating method called machine translation deep learning techniques translate sentences time ensures accuracy context 2018 translates 100 day functions google translate translate multiple forms media includes speech images videos functions include handwritten translation features google translate pronunciation dictionary translation additionally google translate introduced translate app translation mobile phone offline mode features google translate translate multiple forms media including speech images sites real time video language supports 100 languages levels serves 500 people daily languages google translate translated phrases source target simple dictionary single word input detect language selected unknown language automatically identified user source google translate produce machine translation users save translations languages entered screen keyboard handwriting recognition speech recognition browser integration google translate browsers optional extension translation engine february 2010 google translate integrated google chrome browser default optional automatic translation mobile apps google translate app android ios supports 100 languages translate 37 languages photo 32 voice conversation mode 27 real time video augmented reality mode android app released january 2010 ios february 2011 january 2011 android version conversation mode allowed users communicate nearby person language originally limited english spanish feature received support 12 languages testing october january 2015 apps gained ability translate physical real time device camera result google acquisition word lens app original january launch supported languages july update support 20 languages enhanced speed conversation mode translations api 2011 google announced google translate api software developers functioning translate api stated reason substantial economic caused extensive set december 2011 response public pressure google announced june 2011 api continue paid service api numerous party websites apps original decision led developers google question google apis products google assistant google translate translations google assistant devices google assistant runs google google pixel supported languages languages supported google translate method translation april 2006 google translate launched statistical machine translation engine google translate apply rules algorithms based statistical analysis traditional rule based analysis original creator criticized effectiveness rule based algorithms favor statistical approaches based method called statistical machine translation darpa contest speed machine translation 2003 head google machine translation leaving human july 2014 solid base developing usable statistical machine translation pair languages scratch consist bilingual corpus parallel collection 150 200 corpora statistical models data translate languages acquire huge linguistic data google united nations european google translate translate language l1 l2 translates english target language l1 l2 google translate generates translation patterns hundreds millions documents decide translation detecting patterns documents translated human google translate intelligent translation october 2007 languages chinese russian google translate based software engine online translation services fish october 2007 google translate proprietary house technology based statistical machine translation google translate community google constantly seeks translate languages people speak improve google translate accuracy contribute google phrase type translated version google translation phrase individuals translation statistical machine translation google deployed called machine quality translation languages traditional translation method called machine translation translation method utilizes predictive algorithms guess translate texts foreign languages aims translate phrases single overlapping phrases translation bilingual corpora generate statistical model translates texts language google neural machine translation september 2016 team google led software engineer announced development google neural machine translation gnmt increase accuracy google translate november announced google translate switch gnmt google translate neural machine translation artificial neural network capable deep learning short term memory networks gnmt improves quality translation based machine translation method learns millions examples translates sentences time piece piece broader context figure relevant translation human speaking proper grammar gnmt proposed architecture learning tested languages supported google translate framework learns time create natural translations gnmt network capable machine translation semantics sentence simply phrase phrase translations universal language languages gnmt enabled languages english chinese french german japanese korean spanish march 2017 enabled russian languages languages april gnmt capability translate language l1 l2 improves previous versions google translate translated english target language l1 l2 gnmt capable shot translation translating language pair japanese korean explicitly 2014 google launched translate community platform aimed improving translation service august 2016 google app released android users translation tasks offered accuracy google translate reliable human translation sufficient ability provide accurate translation foreign language ability translate phrases consistent manner conducted 2011 google translate score minimum score english identical choice flexibility choosing alternative expressions produces translation human translation perspective conceptual languages translated sentence structure sentence human translation google carried required native speakers language rate translation scale google translate 43 average limitations differences complexity nature language accuracy vary greatly languages languages produce typically western languages english spanish accurate accuracy languages european languages google translate performs english target language source language european union translated eu notes 2010 analysis french english translation accurate source shorter rule based machine translations perform chinese english translations translations submitted chinese edit sentences edit arbitrary sets characters leading incorrect russian english google translate draft dictionary common sense correct numerous 2018 translate accurate russian wikipedia accessible read english quality translate adding extension chrome applying left language links wikipedia article google translate deployed technology called machine translation translate sentences block context time alternative translation word phrase function word limit translated transferred document form translated function machine translation identify double meanings word word foreign language meanings translated language result lead additionally error remains major limitation google translate attempts accuracy reviews shortly translation service time google international competition machine translation translation google translate statistical matching translate translated include obvious errors common terms common terms language sentence meaning websites bad translator translation party utilized service produce translating multiple languages children game telephone court usage 2017 google translate court court court failed book interpreter chinese  
3247560	computer	form art based produce optical dimensional image eyes single image pair images 3d figure instance viewer eyes adjacent letters row focusing capital os ensure image central dot stable focus rest image 3d apparent os figure 3d effects eyes figure distances figure dramatically 3d image achieved moving viewer head screen increases stereo moving horizontally vertically produces effects figure single image random based idea single image random dot word image people included electronic mail messages news articles figure figure floor wall figure single image random figure moving animated versions emphasis stereo individual sort secret message block figure single sources figures david thomas charles appeared publicly accessible 3d figure invented spot originally adapted article author article permission  
3259263	computer	hassabis born 27 july 1976 british artificial intelligence researcher video game designer class games player life education hassabis born greek father chinese grew north london child chess hassabis reached master standard age 13 england chess teams represented university cambridge oxford cambridge chess matches 1995 1996 1997 winning blue hassabis college funded comprehensive school east north london completed advanced level level age 15 16 hassabis games career level designing 17 designing lead programming 1994 game theme park games designer peter theme park simulation video game sold copies award inspired management games university cambridge hassabis left study college cambridge completed science 1997 double university cambridge career cambridge hassabis studios games designer peter hassabis founded company hassabis lead programmer 2001 game black white studios hassabis left 1998 studios london based independent games developer publishing deals interactive universal addition managing company hassabis served executive designer games release game highly unusual simulation game delayed huge scope final game reduced original vision reviews receiving score 100 simulator score 75 100 april 2005 intellectual property technology rights sold studio closed university college london neuroscience studios hassabis returned phd cognitive neuroscience university college london 2009 supervised sought human brain algorithms continued neuroscience artificial intelligence visiting scientist jointly massachusetts institute technology mit harvard university foundation computational neuroscience unit 2009 field memory influential papers published nature science neuron highly cited papers published proceedings national academy sciences united america time patients damage unable imagine experiences finding established link process process memory recall based follow functional magnetic imaging study hassabis developed theoretical account memory identifying scene construction generation online maintenance complex scene key process underlying memory recall received widespread coverage mainstream media listed scientific field journal science deepmind 2010 hassabis founded deepmind london based machine learning startup hassabis university college london computational neuroscience unit hassabis university partner david silver deepmind mission solve intelligence intelligence solve deepmind aims neuroscience machine learning developments computing hardware increasingly powerful purpose learning algorithms creation artificial intelligence company focused training learning algorithms master games december 2013 announced pioneering training algorithm called deep network play atari games level raw pixels screen inputs deepmind included profile tech 2014 google purchased deepmind remained independent entity based london google acquisition company achievements notable creation alphago program champion lee complex game considered board positions existing programming techniques alphago beat european champion fan october 2015 winning champion lee march 2016 additional deepmind include creating neural turing machine safety creation partnership national health service united kingdom eye hospital improve medical service identify eye conditions deepmind artificial intelligence protein folding science december 2018 deepmind tool critical assessment techniques protein structure prediction predicting accurate structure 25 43 project major investment terms people resources fundamental real scientific hassabis guardian demonstration power deepmind application understanding serves component potential prize worth decade deepmind responsible technical machine learning produced award winning papers company advances deep learning reinforcement learning field deep reinforcement learning combines methods hassabis predicted artificial intelligence technologies ethical issues remain awards games hassabis expert player games including  
3274742	computer	learning automaton type machine learning algorithm studied 1970s learning automata select current action based experiences environment fall range reinforcement learning environment stochastic markov decision process history learning automata michael 1960s union colleagues published collection papers matrices automata functions additionally reasonable automata behaviour automata games learning automata investigated united 1960s term learning automaton introduced survey paper 1974 definition learning automaton adaptive decision unit random environment learns optimal action repeated interactions environment actions chosen specific probability distribution updated based environment response automaton performing action respect field reinforcement learning learning automata characterized policy contrast reinforcement policy manipulate policy policy evolutionary algorithms formally define stochastic automaton consist paper stochastic automata allowing actions automaton correspond discrete discrete parameter markov process time step automaton reads input environment updates randomly successor probabilities outputs action automaton environment reads action input automaton frequently input set penalty response environment automaton learn minimize penalty responses feedback loop automaton environment called model model arbitrary finite input set model interval real finite action set learning automata finite action set learning automata class learning automata actions finite mathematical terms size action set finite  
3328438	computer	thomas huang born june 26 1936 shanghai researcher professor university huang leading figures vision pattern recognition human interaction life education thomas huang born june 26 1936 shanghai 1949 family moved taiwan huang studied electronics national taiwan university received bachelor degree 1956 huang united study massachusetts institute technology mit mit initially peter theory image coding william time scanning equipment commercially build scanner images programs written assembly language prototype lab descriptions images stored paper tape holes huang supervised thesis picture statistics linearly coding 1960 thesis noise 1963 master focused algorithms image coding adaptive techniques interpolation sensitivity edges included effects noise spectrum career huang accepted position faculty department electrical engineering mit remained 1963 1973 accepted position electrical engineering professor director signal processing laboratory university 1973 remaining 1980 1980 huang accepted chair electrical engineering university april 15 1996 huang william distinguished professor electrical engineering involved science laboratory served head image processing institute advanced science technology chair institute track human intelligent interaction 2012 named chair title dr huang retired teaching december 2014 continues active researcher dr huang founding editor international journal vision graphics image processing series sciences helped organize international picture coding 1969 international video coding 1993 international conference automatic recognition 1995 repeated events dr huang focus development concepts theories algorithms wide application multimedia signal processing mit developed algebraic procedure testing stability conditions dimensional filters based double transformation method published digital holography nonlinear filters filters standard technique removal noise images earliest image compression enhancement analysis developed approaches binary document compression utilized dimensional scanned scan detecting transition subsequent differs statistical predictions experimental model performance 1969 huang grant teams method block transform coding building huang peter 1984 huang frequency domain multi frame method discrete fourier transform observed resolution satellite images acquisition stage continuous fourier transform resolution image inverse fourier transform final image increased resolution dr huang wavelet methods encoding coding wavelet coding content based image retrieval multimedia databases images video audio enables searches encoded images size retrieved images include relevance feedback database systems user searching constructing tables contents semantic video multimedia image sequence audio closed modelling dr huang identification dimensional motion structure objects multiple images features identified compression television images development image standards human vision dr huang modeling analysis synthesis images human hands body initial motivation support model based video coding video phone idea model user transmitted reconstructed receiving sufficient extract send movement drive model video sequence tools developed type applicable including virtual space electronic games dr huang considers image speech processing speech recognition sound processing images huang mark students created database speech recorded automobiles usable benchmark testing audio visual speech recognition algorithms developed methods detecting audio elements human attention enable humans effectively amounts audio dr huang human interaction interface design researchers combine audio video based techniques identification human huang attempts develop series algorithms extract multi optimal amounts data multiple sources types amounts data compressed transmitted sensing applications military dr huang develop natural effective humans interact virtual environment speech projects include visual hand tracking recognition visual reading enhance audio speech recognition accuracy integration speech recognition visual analysis controlling displays virtual environments audio visual recognition age detection received media attention software female based da vinci 2015 dr huang dr ann project develop generated avatar capable online communication medical patients exploring performance computing data develop techniques deep learning tasks studied recognition project team robert train feedforward neural network identify images honors outstanding achievements huang received numerous honors awards career including awards named dr huang supervised 100 graduate students huang prominent researchers field vision including atlas 2012 thomas huang fund graduate created response students james contributions dr huang contributions researcher fund provide support students human intelligent interaction institute  
3337942	computer	robotics competition international school robotics competition teams school students week period build game playing robots robots complete tasks goals flying goals balancing robots balance beams game required set tasks annually teams standard set allowed budget encouraged specialized robotics competition robotics competition programs organized lego league lego league tech challenge robotics competition unique culture built values competition inherent program talk respect teams emphasizes teams compete time goal program students science technology 2018 competition teams 000 students 25 000 27 countries built robots regional competitions 85 competitions 800 teams slots championship events tournament addition field competition teams team awards recognizing engineering industrial design safety controls media quality core values program teams united canada china mexico israel australia teams history founded 1989 inventor dean assistance mit professor women science technology decided inventor looked activities captured students decided combining sports competition science technology potential sports people straightforward school school required explained tests competitions letters judge create participants sports space contrast science math traditional educational settings uncertainty stated participants responsible technological advances robotics competition season 1992 event school competition scale size tech challenge robotics competition games robots wired connection receive data drivers wireless teams teams 28 countries 2018 power teams meaning previous season teams meaning 2018 season competition countries represented listed decreasing teams 2018 competition championship championship robotics competition competition season occurs late april roughly 800 teams participated championship events 2018 held april texas michigan media exposure documentary teams 2008 season television series dean dean prior commercial 2010 robotics competition season team university student film document robotics competition australia produced documentary film called film 2011 film book called written story team california 2009 game season movie adaptation directed michael produced cnn documentary fail education america 15 2011 robotics competition teams 2011 season documentary student team covering levels team robotics team robotics team august 14 2011 special called science roll featured famous musical artists black smith executive producer special program special focus robotics competition included segments tech challenge lego league lego league 1996 1998 championship covered 2013 day robotics competition teams robots led robot cutting 2014 movie robotics competition robot built team team 2012 season featured game pieces 2015 time broadcast subsidiary month january 2015 fourth season 2013 series featuring characters competing regional robotics competition competition notably episode code  
3367262	computer	circular convolution convolution functions functions occurs normal periodic summation function situation context circular convolution theorem identical operation expressed terms periodic functions infinite integration interval reduced period situation context discrete time fourier transform called periodic convolution product discrete sequences periodic convolution individual sequences function defined periodic summation function convolution exists convolution periodic identical arbitrary parameter periodic summation integral called periodic convolution functions normalized expressed periodic summation function operation referred circular convolution functions discrete sequences discrete sequences period write circular convolution functions special extent matrix multiplication kernel integral transform matrix practical figure duration sequence duration sequence values circular convolution identical values   desired result sequence finite response filter circular convolution efficient compute fast fourier transform algorithm circular convolution theorem methods dealing sequence practical sequence divided segments blocks processed filtered segments carefully edge effects eliminated overlapping input blocks output blocks explain compare methods context sequence size   overlapping input method block size equal size terms normal linear convolution normal convolution performed block start block edges filter latency 200 samples convolution outputs edge effects discarded simply computed output input blocks overlapping input blocks 200 samples sense 200 elements input block saved carried block method referred overlap save method requires save output samples compute samples option computing samples leading edge effects circular convolution inverse output 200 samples edge effects discarded samples illustrate fourth frame figure block extended frame individual components linear convolution performed entire sequence edge effects contributions extended blocks overlap contributions original block frame output green represents portion overlapping output method overlap add input blocks size 200 valued samples adds element output blocks discarded 200 values output block saved addition block methods advance samples overlap save avoids initial final addition  
3446185	computer	science hierarchical protection domains called protection rings mechanisms protect data functionality improving fault tolerance behaviour providing security approach capability based security operating systems provide levels access resources protection hierarchical levels layers privilege architecture hardware cpu architectures provide cpu modes hardware microcode level rings arranged hierarchy privileged trusted numbered privileged trusted operating systems level physical hardware cpu memory special gates rings access resources manner opposed allowing arbitrary usage correctly access rings improve security programs privilege level resources intended programs running user program camera user hardware access function device drivers programs browsers running numbered rings request access network resource restricted numbered implementations multiple rings protection concepts introduced multics operating highly secure predecessor unix family operating systems mainframe hardware access control sufficient provide support rings hardware multics supported transitions software successor implemented hardware support rings purpose systems rings hardware cpu modes windows windows server 2008 rings kernel mode user mode earlier versions windows processors supported protection levels modern cpu architectures including popular intel x86 architecture include form protection windows nt operating unix utilize feature os extent rings kernel code device drivers privileged code user programs access code user programs dos kernel drivers applications typically exclusive protected mode drivers dos real mode os runs effectively protection memory managers addition dr dos modules modes called decreasing kernel executive supervisor user design structure software ongoing discussion monolithic micro kernels design structure initiative embedded firmware intel original multics rings modern systems hardware remains aware current executing instruction thread times special machine register systems virtual memory assigned hardware data eclipse bits program counter pc served register code executing virtual pc set automatically calling memory automatically transfer hardware control passed restrictions types memory access performed rings x86 special gate structure instruction control secure entry level trusted rings functions supervisor operating systems architecture hardware restrictions designed limit opportunities security addition privileged special capabilities real memory addressing virtual memory hardware architecture implements privilege levels application operating privileged level privileged level protection combined processor modes master kernel privileged supervisor mode user mode systems operating systems running hardware supporting forms protection effective architecture requires close cooperation hardware operating operating systems designed multiple hardware platforms limited rings supported platform security model simplified kernel user hardware rings modes supervisor mode terms supervisor mode hardware flag changed code running level software level tasks threads flag set running applications flag determines execute machine code operations modifying registers descriptor tables performing operations interrupts idea modes operate program supervisor mode trusted fail failure crash supervisor mode execution mode processors enables execution instructions including privileged instructions access address space memory management hardware peripherals mode operating runs monolithic kernel operating runs supervisor mode applications user mode types operating systems microkernel share behavior examples pc processors modes x86 processors modes divided rings programs code runs fail time impact rest rarely configured levels access existing systems switching user mode kernel mode cost performance measured basic request codice cost 1000 cycles machines 100 actual switch 70 user kernel space 40 rest kernel overhead microkernel minimization overhead reduced cost 150 cycles wrote eventually hierarchical protection rings closely match requirements programmer improvement simple modes rings protection efficient implementation hardware fine grained protection remained rings protection provide answer proved blind gain performance systems functions viewed application logic device drivers kernel mode security applications access control operating monitors cited examples embedded database management kernel mode developed kernel mode deployment provide local database kernel based application functions eliminate context switches occur kernel functions interact database running user mode functions moved rings direction linux kernel instance processes functions require transition functions static data kernel transition function mode cpus intel amd offer x86 virtualization instructions control hardware access intel codenamed amd codenamed create operating operations host os assist virtualization insert privilege level add machine code instructions intended privilege level privilege level x86 instruction set controls access program running processor resources memory regions ports special instructions privilege levels ranging privileged privileged modern operating systems level kernel executive level application programs resource level levels privilege levels rings lesser privileged process access privileged process protection fault exception reported os privilege levels current operating systems wide market share including windows macos linux ios android mechanism bit privilege level supervisor user bit windows nt level real mode programs executed level privilege level virtual mode executes programs level potential future multiple privilege levels supported x86 isa family include virtual machines host operating kernel instructions privilege access kernel mode applications running os virtual machine lowest level user mode virtual machine os kernel intermediate level instruction privilege kernel mode operations calls view operating privilege level flag flag ia 32 compatible x86 cpus bits 12 13 register protected mode mode privilege level current program task current privilege level task program equal task program access ports changed codice codice current privilege level port determining ability task access port hardware features cpu hardware architectures provide flexibility exploited operating systems proper complex cpu modes requires close cooperation operating cpu os cpu architecture os cpu designed hardware features left os designed compatible multiple cpu architectures cpu mode features os reason windows levels hardware architectures supported powerpc mips implemented privilege levels multics operating designed special cpu architecture designed multics advantage cpu modes exception rule degree os hardware cost effective potential advantages security stability ultimately purpose distinct operating modes cpu provide hardware protection environment security software trusted portions software allowed execute environment kernel mode designs software executes user modes processor generates fault exception condition user mode stability processor generates fault exception condition kernel mode operating systems error hierarchy modes exists based security exceptions privilege level numbered privilege levels fault kernel mode privilege crash entire fault affect rings transitions modes executing thread transition level privilege privilege kernel user modes transitions levels privilege secure hardware controlled gates executing special instructions external interrupts received microkernel operating systems attempt minimize code running privileged mode purposes security ultimately performance  
3492955	computer	fiber fiber loop generic term broadband network architecture optical fiber provide local loop telecommunications fiber optic cables carry data copper cables distances copper telephone networks built 20th century replaced fiber generalization configurations fiber deployment arranged fiber premises building fttc fiber cabinet node copper wires connection served balanced pair distribution plant trade cost capacity closer fiber head cost construction channel capacity served facilities cost saved running fiber fiber key method drive generation access describes upgrade broadband step change speed quality service typically download speed fast speed definition generation defined march 2010 review local access market super fast broadband broadband products provide maximum download speed threshold commonly considered maximum speed supported current generation copper based networks network called hybrid fiber network cable television operators fiber loop advanced services networks fixed wireless mobile wireless technologies wi term evolution alternative providing internet access definitions telecommunications industry distinct configurations terms widespread promote consistency comparing rates countries europe north america asia agreed definitions 2006 update 2009 2011 2015 formal definitions fttc benefits fiber optic cables carry data speeds distances copper cables traditional telephone lines common form gigabit ethernet runs category category augmented category pair copper ethernet fiber easily reach tens selected major communications provider carry data connections consumer configurations bring fiber building offer speeds remaining segments standard ethernet cable fiber future proof data rate connection limited terminal equipment fiber substantial speed improvements equipment fiber upgraded type employed chosen single mode critical future connections popularity definition demand video streaming applications devices youtube facebook live demand reliable bandwidth people utilize services fttc fiber transitions copper street cabinet users standard ethernet configurations existing copper bit rate digital subscriber downstream rates 80 falls extremely distance 100 fiber premises fiber premises form fiber optic communication delivery optical fiber optical distribution network central office premises subscriber term refer fttc fiber utility reaching premises fiber premises optical fiber building provide distinction fiber panel subscriber unit fiber building shared electrical ground floor floor fiber cabinet node fiber cabinet fttc telecommunications based fiber optic cables platform serves customers customers connection platform cable pair abstraction easily mounted device communications typically fiber customer premises equipment fttc fiber node neighborhood identified distinguished fiber cabinet fttc telecommunication architecture based fiber optic cables cabinet serving neighborhood customers typically connect cabinet traditional cable pair wiring served cabinet radius customers cabinet serves radius architecture typically called fttc delivery broadband services speed internet speed communications protocols broadband cable access typically form digital subscriber cabinet customers data rates vary exact protocol close customer cabinet existing pair infrastructure provide service costly deploy term bandwidth potential limited relative implementations bring fiber closer subscriber variant technique cable television providers hybrid fiber fiber replaces analog customer neighborhood customers fttc delivery broadband services speed internet existing wire communications protocols broadband cable access typically form connecting cabinet customers protocols data rates vary exact protocol close customer cabinet feasible cable fiber copper ethernet capable connecting connection category copper thousands feet ethernet protocols including power ethernet supported fixed wireless technologies rely including motorola power capable running power supply fed feet cable power networking rely fttc ieee protocol predecessor existing electric service cables cabinet electrical equivalent robust wi implementation advantage single cable power data avoiding cable cost fttc costs deploy historically bandwidth potential practice relative advantage fiber depends bandwidth backhaul usage based restrictions prevent capabilities customer premises equipment maintenance restrictions cost running fiber vary building type united canada largest deployment fttc carried telecommunications acquisition deployment fttc future based existing fttc plant removed replaced announced march 2010 expansion network announced 2010 entry smart power utility data management based fttc existing wire approach reach access additional revenues secure 128 bandwidth required advanced infrastructure largest deployment united conducted power utility fttc reaching subscriber square reflected cost deployment reduced 70 month historically telephone cable companies hybrid networks modes transport presence customer premises increased competitive cost pressure availability existing wire solutions smart grid deployment requirements hybrid networking tools major vendors lucent qualcomm wi solutions edge networks ieee ieee 802 21 protocol efforts improvements fttc serve fttc serves measure fixed wireless special advantages smart appliances electric vehicles rely operators speed internet access networks mid 2000s network topology active ethernet deliver services central office fiber handled advanced digital broadcast subscriber shared consumer electronics ce devices 2007 italian access providers wind participated initiative called fiber italy aim creating fiber network italy pilot italian capital bandwidth 100 fiber italy initiative plan bring fiber fiber business cities 2018 december 2010 total fiber enabled passed 000 september 2010 european commission published access networks list measures promote deployment fast broadband generation access networks plans complete fiber roll 200 costs 22 month google fiber speed copper telephone networks built 20th century replaced countries fttc step play services delivered approach proven grow subscriber considerably operators including united germany italy australia canadian operators bell canada optical distribution networks direct fiber simplest optical distribution network architecture direct fiber fiber leaving central office customer networks provide bandwidth costly fiber central office machinery south city largest direct fiber networks telecommunication connectivity fiber ground competitive offerings argument direct fiber multiple operators patch network easily simple direct fiber competitive operators benefit layer networking technologies passive optical network pon active optical network form topology shared fiber commonly fiber leaving central office shared customers fiber close customers split individual customer specific achieve split active optical network rely powered network equipment signal switch router signals optical electrical optical transformation signal leaving central office directed customer intended incoming signals customers avoid powered equipment buffering active ethernet type ethernet common optical ethernet switches signal incorporating customers premises central office switched ethernet network networks identical ethernet networks businesses academic institutions purpose connect central office connect computers printers location switching cabinet handle 000 customers typical neighborhood equipment performs layer switching layer switching routing layer routing carrier central office ieee 802 standard enables service providers deliver single mode optical fiber depending provider speeds commercially passive optical network passive optical network pon network architecture optical enable single optical fiber serve 128 customers pon reduces fiber central office equipment required compared architecture downstream signal coming central office broadcast customer premises sharing fiber encryption prevent upstream signals combined multiple access protocol time division multiple access ethernet protocol ethernet common quad play voice video data mobile services fiber hybrid fiber networks active dedicated fiber operator central office hybrid networks transport data fiber intermediate ensure throughput speeds copper connections approach increasingly popular service providers north america europe google looked approach deliver multiple services access networks united electrical network private property signal typically converted electrical format optical network terminal term unit onu identical ieee term converts optical signal electrical signal film filter technology units require electrical power operation providers connect backup batteries power ensure emergency access telecommunications optical range optical network terminals units provide time slot upstream communication forms common building existing ethernet phone cable systems connect optical network terminal unit systems reach unit combine signals transport common medium ethernet closer user equipment router network interface controller separate signals convert protocol fttc combined internet video telephone signal building existing telephone cable wiring reaches user living space converts data video signals ethernet protocol user category cable  
3499226	computer	introduction algorithms book thomas charles book textbook algorithms courses universities commonly cited reference algorithms published papers 000 documented book sold copies 20 led common edition authors write book written comprehensive teaching professional environments focuses algorithm design techniques application specific programming language algorithms written descriptions focus aspects algorithm mathematical properties efficiency editions edition textbook include author book included arithmetic circuits algorithms parallel computers dropped edition addition fourth author edition refer book edition book white book algorithms edition color cover changed green causing book algorithms edition published august 2009 plans edition started 2014 fourth edition published 2019 earliest cover design mobile cover red 1959 museum american art york city  
3503207	computer	multi core processor single computing component independent processing units called cores read execute program instructions instructions ordinary cpu instructions add data branch single processor multiple instructions separate cores time increasing speed programs parallel computing manufacturers typically integrate cores single integrated circuit die chip multiprocessor multiple single chip package microprocessors personal computers multi core multi core processor implements multiprocessing single physical package designers cores multi core device tightly loosely cores share caches implement message passing shared memory inter core communication methods common network interconnect cores include bus dimensional mesh multi core systems include identical cores heterogeneous multi core systems cores identical heterogeneous cores share instruction set amd accelerated processing units cores share instruction set single processor systems cores multi core systems implement architectures vliw superscalar vector multithreading multi core processors application domains including purpose embedded network digital signal processing dsp graphics gpu improvement performance gained multi core processor depends software algorithms implementation gains limited fraction software parallel simultaneously multiple cores amdahl law called parallel speedup factors cores split fit core cache avoiding slower main memory applications accelerated programmers effort software ongoing topic terminology terms multi core dual core commonly refer sort central processing unit cpu applied digital signal processors dsp chip soc terms refer multi core microprocessors manufactured integrated circuit die separate microprocessor package referred multi chip module article terms multi core dual core cpus manufactured integrated circuit contrast multi core systems term multi cpu refers multiple physically separate processing units special circuitry facilitate communication terms core multi core multi core architectures cores tens thousands systems soft microprocessor cores single core considered semiconductor intellectual property core cpu core development manufacturing technology improves reducing size individual gates physical limits semiconductor based major design concern physical limitations heat dissipation data synchronization methods improve cpu performance instruction level parallelism ilp methods superscalar pipelining suitable applications difficult predict code applications suited thread level parallelism methods multiple independent cpus commonly increase combination increased space manufacturing processes demand increased led development multi core cpus commercial business drive development multi core architectures decades improve performance cpu integrated circuit reduced cost device alternatively circuit transistors design increased functionality complex instruction set computing cisc architectures clock rates increased magnitude decades late 20th century 1980s 2000s rate clock speed improvements increased parallel computing form multi core processors improve processing performance multiple cores cpu chip lead sales cpu chips cores intel produced 48 core processor cloud computing core x86 architecture technical factors manufacturers implemented symmetric multiprocessing smp designs discrete cpus issues implementing multi core processor architecture supporting software additionally continue regular performance improvements purpose processors manufacturers intel amd multi core designs manufacturing costs performance applications systems multi core architectures developed alternatives strong established markets integration peripheral functions chip advantages multiple cpu cores die cache circuitry operate clock rate signals travel chip combining equivalent cpus single die improves performance cache alternative bus operations simply signals cpus travel shorter distances signals quality signals data time period individual signals shorter repeated assuming die physically fit package multi core cpu designs require printed circuit board space multi chip smp designs dual core processor power coupled single core processors power required drive signals external chip cores share circuitry l2 cache interface bus terms competing technologies silicon die multi core design proven cpu core library designs produce product risk design error wider core design adding cache returns multi core chips performance energy factor mobile devices operate batteries core multi core cpu energy efficient chip efficient single monolithic core performance energy challenge additional overhead writing parallel code disadvantages maximizing usage computing resources multi core processors requires operating os support existing application software ability multi core processors increase application performance depends multiple threads applications integration multi core chip chip production yields difficult manage density single core designs intel partially creating quad core designs combining dual core single die unified cache dual core opposed producing cores single die requiring produce quad core cpu architectural view ultimately single cpu designs silicon surface multiprocessing cores development architecture carry risk finally raw processing power constraint performance processing cores sharing bus memory bandwidth limits real performance advantage 2009 report dr single core close memory bandwidth limited dual core 30 70 improvement memory bandwidth 90 improvement expected amdahl law claim application cpus running faster single core communication cpus limiting factor count 100 improvement hardware trends trend processor development increasing cores processors hundreds thousands cores theoretically addition multi core chips mixed simultaneous multithreading memory chip special purpose heterogeneous asymmetric cores performance efficiency gains processing multimedia recognition networking applications core includes performance core called power core called trend improving energy efficiency focusing performance advanced fine ultra fine power management dynamic voltage frequency scaling laptop computers portable media players chips designed cores evolved single core designs referred designs differences architecture composition balance cores multi core architecture variety architectures core design repeated consistently mixture cores optimized heterogeneous role article cpu designers multi core future times 2008 includes comments software effects version anti application create thread scan process gui thread commands user scan multi core architecture benefit application single thread heavy balance multiple cores programming code requires complex threads easily introduce subtle difficult bugs processing data shared threads thread safety code difficult single code perceived lack motivation writing consumer level applications relative consumer level demand maximum hardware applications additional performance penalty single processor machines extra overhead development difficult single processor machines serial tasks decoding entropy encoding algorithms video impossible result generated create result entropy decoding algorithm increasing emphasis multi core chip design stemming thermal power consumption increase processor clock speeds extent software advantage chips single constraint performance future developers unable design software exploit resources multiple cores ultimately reach performance telecommunications market design parallel packet processing quick adoption multiple core processors control plane replace traditional network processors based proprietary microcode parallel programming techniques benefit multiple cores existing parallel programming models multi core platforms intel introduced abstraction parallelism called efforts include cray sun ibm multi core processing ability modern computational software development developers programming languages modern languages support multi core functionality requires numerical libraries access code written languages fortran perform math computations faster languages intel amd written native languages advantage multi core processing balancing application workload processors performance characteristics conceptual models deal language program building blocks programming libraries functions block native implementation processor type users simply program intelligent compiler implementation based context managing central role developing parallel applications basic steps designing parallel applications hand server multi core processors ideal users connect simultaneously independent threads execution servers application servers throughput licensing vendors license software processor rise ambiguity processor consist single core combination cores embedded applications embedded computing operates processor technology distinct mainstream pcs technological drives multi core apply application natural fit multi core technologies task easily processors addition embedded software typically developed specific hardware release issues software portability legacy code supporting independent developers critical pc enterprise computing result easier developers technologies result variety multi core processing architectures multi core network processing devices mainstream companies semiconductor networks manufacturing products processors developer key challenge exploit cores devices achieve maximum networking performance level performance limitations inherent smp operating address issue companies provide portable packet processing software designed networking data plane runs fast path environment os digital signal processing trend applies texas instruments core core core core stated core entries include family stream processors 40 80 purpose alus chip programmable simd engine processors single die focused communication applications development processors options developed existing include heterogeneous systems  
3538953	computer	thrun born 14 1967 scientist germany ceo corporation chairman founder google fellow professor science stanford university carnegie mellon university google founded google google driving car team professor stanford university tech thrun led development robotic vehicle 2005 darpa grand challenge exhibit institution national museum american history team developed vehicle called darpa grand challenge 2007 thrun led development google driving car thrun probabilistic algorithms robotics applications including robotic mapping recognition contributions age elected national academy engineering academy sciences 2007 guardian recognized 20 internet freedom life education thrun born 1967 germany west germany thrun completed intermediate science medicine university 1988 university completed degree 1993 1995 science statistics career 1995 joined science department carnegie mellon university scientist 1998 assistant professor director robot learning laboratory faculty founded master program automated learning discovery program broad machine learning scientific discovery 2001 thrun spent stanford university returned associate professor science robotics thrun left july 2003 associate professor stanford university director january 2004 thrun professor science electrical engineering stanford april 2011 thrun stanford google google fellow january 23 2012 founded online private educational organization google fellow development google driverless car thrun 2018 documentary artificial intelligence robotics thrun developed autonomous robotic systems earned international recognition 1994 started university project thesis 1997 thrun colleagues wolfram developed robotic guide museum 1997 1998 follow robot installed national museum american history washington guided tens thousands week deployment period thrun project interactive humanoid robot pennsylvania 2002 thrun helped develop mapping robots project colleagues william carnegie mellon university stanford university 2003 development robot 2005 darpa grand challenge graduate student michael william led software development robot 2007 thrun robot 2007 darpa challenge thrun joined google stanford students google developed google street view thrun contributions robotics theoretical contributed probabilistic robotics field statistics robotics substantial contributions mobile robot localization mapping slam control probabilistic techniques mainstream robotics numerous commercial applications fall 2005 thrun published textbook entitled probabilistic robotics term workers wolfram 2007 japanese translation probabilistic robotics japanese market thrun principal stanford spin  
3591552	computer	concrete mathematics foundation science donald knuth published 1989 textbook science light treatment analysis algorithms contents history book mathematical knowledge skills science analysis algorithms topics concrete mathematics continuous discrete mathematics frequently term concrete mathematics denotes abstract mathematics book based begun 1970 knuth stanford university book material mathematical knuth art programming readers introduction famous series books concrete mathematics style authors style mathematics mathematical comments submitted editors knuth students stanford knuth books readers invited claim reward error error technically historically incorrect book lot mathematical notation includes floor functions notation donald knuth edition concrete mathematics concrete  
3596825	computer	concept image analysis describes actual spatial image resolution image volume image equal pixel image actual image vary image local resolution expressed pixel voxel functional analysis estimate random field theory statistical inference proposed estimate history word pixel voxel word  
3673806	computer	real time executive multiprocessor systems real time executive systems real time executive military systems real time operating rtos designed embedded systems source software development late 1980s versions 1993 corporation managing project cooperation steering committee includes user design designed real time embedded systems support api standards including posix api classic api originally based real time executive interface definition specification includes port freebsd tcp ip stack support including fat provide form memory management processes posix terminology implements single process environment reflected posix services memory mapping process shared memory closely corresponds posix profile 52 single process threads architectures ported target processor architectures application domains experimental physics industrial control community includes multiple people active popular space supports multiple microprocessors developed space including sparc mips powerpc architectures space models software radio nasa trace gas license distributed modified gnu public license allowing linking objects files executable covered license based modified public license language modified specific programming language  
3825008	computer	air gap air wall air network security measure employed computers ensure secure network physically isolated networks public internet local network network network interfaces connected networks physical conceptual air gap analogous air gap maintain water quality classified settings air network network interfaces wired wireless connected networks ordinary computers wired network virtually wireless network interface controller connected nearby wireless networks access internet update software represents security air computers wireless interface controller disabled physically removed data air write data physical medium physically computers physical access easier control electronic network interface time malware secure secure data environments networks devices rated handle levels classified devices networks referred referring classified classified level occasionally referred red classified black access policies based model data moved minimal security measures requires procedures ensure protection data level classification concept represents maximum protection network save device transfer data air data removable storage medium removable disk usb flash drive physically carry storage access easily controlled network regarded closed terms signals security unable accessed analyzed computers secure network labor intensive involving human security analysis programs data entered air networks human manual entry data security analysis agent bridge gap exploiting security holes handling removable media possibility acoustic communication demonstrated researchers researchers demonstrated data frequency signals examples examples types networks systems air include systems features connect public internet effectively air including internet connections automobiles bluetooth wi cellular phone connectivity limitations limitations devices environments include wireless connections secure network restrictions em secure network scientists 2013 demonstrated air gap malware designed air gap isolation acoustic shortly network security researcher received press attention 2014 researchers introduced attack pattern data isolated nearby mobile phone frequency signals 2015 channel air computers thermal introduced supports communication requires additional dedicated peripheral hardware 2015 researchers introduced method data air computers cellular frequencies transmission generated standard internal bus cellular malware discovered 2016 usb device remotely data air malware remained hidden usb drive visible windows transport channel air connected internet share files systems discovery data field communication radio signal detection 2018 enables devices establish effective communication bringing researchers transmit range expected 100 malware exploit hardware combinations sensitive air systems air gap channels hardware combinations bridge air gap including acoustic light magnetic thermal radio frequency  
3828482	computer	surgical american corporation manufactures markets robotic products designed improve clinical patients surgery notably da vinci surgical company 100 500 september 30 2017 installed base units worldwide – united europe asia rest history eventually led development da vinci surgical performed late 1980s profit institute sri international 1990 sri received funding national institutes health sri developed prototype robotic surgical defense advanced projects agency darpa potential operate remotely 1994 dr sri device time time employed 1995 introduced john left corporation option acquire sri intellectual property incorporated company named surgical devices robert wrote business plan company raised initial venture capital included fund company sri prototype originally da vinci ready testing 1997 company prototypes advanced named da vinci named final version prototype da vinci surgical eventually testing surgical marketing europe 1999 united company raised 46 initial public offering 2000 approved da vinci surgical surgery address disease disease 2001 approved surgery subsequently approved surgery procedures performed procedures shortly public surgical patent motion chief motion robotic surgery field earlier surgical robotic surgical approved europe food drug administration approved procedure time approved da vinci uncertainty created companies company growth 2003 surgical motion agreed merge ultimately favor da vinci motion stock selling 14 share adjusted stock splits merger stock price 2015 500 growth systems sold 60 2002 compared 2014 surgical procedures performed 000 2002 compared 000 2014 2017 surgical reported annual revenue increase 15 previous cycle surgical shares share market valued 58 november 2018 da vinci surgical da vinci surgical robotic surgical controlled console commonly increasingly repair surgical procedures overview da vinci designed improve conventional operates hand held instruments da vinci consists console typically patient patient interactive robotic arms controlled console arms tools hold objects instruments fourth arm camera lenses stereoscopic vision console console eye holes image procedure arms hand controllers controls operate energy supplied instruments cut tissue left controls camera bring surgical image closer da vinci scales filters translates hand movements precise micro movements instruments operate body providing superior visualization enhanced precision da vinci surgical perform procedures involving complex reconstruction patient da vinci procedure offer potential benefits procedure including blood loss blood da vinci enable shorter hospital stay recovery faster return normal daily activities da vinci surgical costs da vinci released april 2009 cost 75 addition maintenance contracts instruments surgery surgical procedures performed robot traditional critics hard time cost clinical data support claim improved patient robotic surgery item medical services critics concern lack studies term superior surgery june 2018 surgical class action 43  
3829034	computer	environment knowledge analysis weka suite machine learning software written java developed university software licensed gnu public license description weka collection visualization tools algorithms data analysis predictive modeling graphical user interfaces easy access functions original java version weka party modeling algorithms implemented programming languages data utilities based running machine learning experiments original version designed tool analyzing data domains java based version weka development started 1997 application educational purposes advantages weka include weka supports standard data mining tasks data clustering classification regression visualization feature selection weka techniques assumption data flat file relation data fixed attributes numeric attributes attribute types supported weka access databases java database connectivity process result returned database query weka access deep learning deeplearning4j capable multi data mining separate software converting collection linked database tables single table suitable processing weka covered algorithms included weka distribution sequence modeling user interfaces weka main user interface essentially functionality accessed component based knowledge flow interface command systematic comparison predictive performance weka machine learning algorithms collection datasets interface features panels providing access main components native regression tools weka regression classification tools native packages included weka software native weka environment native packages famous tool model tree package list tools regression tools extension packages version package manager easier installation extension packages functionality included weka prior version moved extension packages change easier contribute extensions weka maintain software modular architecture independent updates weka core individual extensions  
3833695	computer	term century written reference dates meant computes person performing mathematical calculations electronic computers commercially human supposed fixed rules authority teams people frequently calculations divided parallel frequently calculations performed independently separate teams check 20th century term human applied individuals arithmetic origins sciences approach complex calculations organized human computing divided computation determine time return colleagues human computers involved future movements objects create tables late computers british included william israel richard project tables sources reduce calculations team computers scientist computation temporary position moved women exceptions computers british navigation united version computers staff innovations human computing included royal royal george computers hired data organized manager pre printed computing forms standardized methods calculating checking computers operated remain standard computing operations 80 united signal created organizing human computing track weather patterns built previous navy project signal computing staff processed data collected finished intensive hour individual human responsible data women increasingly involved computing private companies hired computing manage office late century charles organized harvard computers approach harvard computing job computers harvard women standard pay started hour huge demand women offered harvard computers women era computers jump classify rate minute harvard computers published organized spectral lines continued expanded harvard computers successive volumes created committee statistical characteristics plants animals reported royal society committee advanced techniques scientific supported scientists scientist supported committee human mathematical tables created calculating machine lab university london committee create mathematical committee allowed data correlation brought correlation laboratory computers women lee computers squared statistics brown lab art mathematical table mathematical tables human computers compile century western european mathematical tables tables names principal mathematician involved project tables unknown computers accurate tables degree precision navigation engineering approaches break project form distance piece computers middle class women society receive send packets calculations post royal society eventually space committee mathematical tables committee professional organization human computers fluid dynamics human computers predict effects building simulation set application scientific estimated 64 000 humans weather solving differential equations human computers calculate computing electronics human computers women involved calculating tables war wars computers department united college human computers calculating machines electrical computers aid columbia university statistical created organized computing established university commission national council human computers played integral war war effort united labor force draft computers war women frequently degrees mathematics 1940s women hired nuclear particle left photographic project human computers variety mechanical assisted numerical studies complex nuclear war human computers flight raw data film paper rules electric reduced data standard engineering units lee book hidden figures documents contributions american women served human computers nasa begun black women computers center special aid war effort electrical computers human computers women programmers people responsible setting purpose electronic digital built university pennsylvania war human computers professional programmers women including kay jennings human assisted computation term human researchers refer human computation usage human refers activities humans context human based computation usage reason computational technique machine algorithmic tasks humans time humans context sequence exact steps executed yield answer humans solve term definition humans human computers context rare  
3960515	computer	networking jumbo frames ethernet frames bytes payload limit set ieee 802 standard jumbo frames carry bytes payload variations exist care term gigabit ethernet switches gigabit ethernet network interface cards support jumbo frames fast ethernet switches fast ethernet network interface cards support jumbo frames ethernet frame processed passes network processing contents single frame processing content broken frames cpu time reducing interrupts minimizes overhead byte count reduces frames processed analogous physically packet papers single sheet saving cutting sorting time jumbo frames gained initial introduced gigabit ethernet vendors size jumbo frames official ieee 802 ethernet standard adoption jumbo frames byte payload frames potential reduce cpu cycles demonstrated positive jumbo frames tcp performance presence jumbo frames network latency bandwidth links frame size connection typically limited lowest frame size intermediate links 802 token frames byte transport byte byte 802 11 transport byte ieee 802 ethernet standard support byte frames byte total frame size byte optional ieee 802 vlan tag bytes preferred payload size jumbo frames joint engineering team federal government networks national education networks meet criterion manufacturers bytes conventional size jumbo frame size bytes ieee 802 field ethernet equipment support jumbo frames bytes ieee 802 2009 ieee 802 2009 discovery standard ethernet maximum frame frame detection port field ieee 802 2015 allowed values basic frames 802 tagged frames 2000 multi tagged frames error detection larger frames suffer errors simple error detection ethernet frames larger data increases probability errors additional mechanisms developed improve error detection network layers solutions jumbo frames avoids data integrity reduction service data unit polynomial implemented transport selection polynomial based documented paper 32 bit redundancy codes internet applications polynomial distance hd ethernet 16 360 bit data word hd bits times ethernet additional bits error detection ability sized data compared ethernet standard polynomial hd capability data word sizes 72 simple additive contained tcp errors generated internal detected tcp proven detecting bus specific bit errors errors simple tend testing led adoption compiled evidence based simulated error real data demonstrated errors detected major adoption jumbo frames upgrade existing ethernet infrastructure avoid reduction ability detect errors calculations software slower performance achieved simple additive tcp overcome performance penalty load calculations cpus support utilize instruction featured extension vector math instruction set support polynomial purpose transport designed handle data tcp transport designed carry data provide improved error detection rates jumbo frames increase ethernet reduction error detection configuration vendors include size settings maximum frame size including frame maximum layer packet size maximum transfer unit maximum layer packet size frame values configured equipment vendors settings match mixture devices configured jumbo frames devices configured jumbo frames network potential network performance issues bandwidth efficiency jumbo frames efficiency ethernet network processing hosts reducing overhead tcp processing efficiency hosts increase ratio times improvement depends packets processed host hosts tcp engine receive benefit hosts process frames cpu frames jumbo frames ethernet frames larger allowed ieee ethernet standards frames required enable ip mpls ethernet deliver ethernet services implementations require jumbo user frames mpls frame format proper ethernet frame format values increased overhead extra mpls ethernet support byte frames requirement carrier ethernet networks super jumbo frames super jumbo frames considered frames payload size bytes relative scalability network data throughput function packet transfer rates complex manner payload size packet bit rate increases packet payload size increase direct proportion maintain equivalent timing parameters implies scaling numerous logic circuits network path accommodate maximum frame size required difficult process increase path performance national education networks bytes bytes subsequent increase 64 000 bytes time main factor involved increase maximum segment size increase memory buffer size mechanisms path main benefit reduction packet rate nodes intermediate transit nodes nodes logic handle packets total machine cycles spent processing packet decreases average packets increases total data transmitted relationship increasingly average network bit rate increases alternate approach cpu load independent frame size send approach eliminate packet overhead jumbo frames designed reduce receive segment eliminate packet overhead cpu jumbo frames remain traffic jumbo frames bandwidth perspective reduce bandwidth data overhead  
3991954	computer	cpu modes called processor modes cpu cpu privilege levels names operating modes central processing unit architectures restrictions type scope operations performed processes cpu design operating application software ideally highly trusted kernel code allowed execute mode including portions operating runs restricted mode request kernel perform operation damage impossible programs alter damage programs computing practice calls time performance computing uncommon designers time critical software device drivers kernel multiple modes multiple operating basic design virtual machine systems mode types mode called kernel mode exist master mode supervisor mode privileged mode restricted modes referred user modes names mode kernel mode cpu perform operation allowed architecture instruction executed operation memory accessed cpu modes restrictions cpu operations hardware typically instructions alter global machine memory accessed user mode capabilities cpu typically subset kernel mode hardware emulation native architectures standard kernel mode cpu architectures support multiple user modes hierarchy architectures based security hierarchy set rings kernel mode center multics hardware implementation security hardware platforms designed lines including intel protected mode ia 64 referred mode protection extend resources cpu hardware hardware registers track current operating mode cpu additional virtual memory registers table entries data track mode resources cpu operating status word cpu access memory additionally separate virtual memory segment targeted access physical targeted demonstrated handheld hardware supports goldberg virtualization requirements writing software efficiently support virtual machine simpler software believes running supervisor mode running user mode  
4118276	computer	conditional random fields class statistical modeling method applied pattern recognition machine learning structured prediction fall sequence modeling family discrete classifier label single sample neighboring samples context account linear chain popular natural language processing sequences labels sequences input samples type discriminative probabilistic graphical model encode relationships observations construct consistent labeling parsing sequential data natural language processing biological vision applications tagging shallow parsing named entity recognition gene finding critical functional region finding tasks alternative hidden markov models vision object recognition image segmentation description define observations random variables graph conditional random field random variables markov property graph 11 12 13 neighbors graphical model nodes divided sets observed output variables conditional distribution 17 modeled inference graphs exact inference inference basically arguments hold exist special exact inference feasible exact inference impossible algorithms approximate solutions include parameter learning learning parameters 18 maximum likelihood learning 19 nodes exponential family distributions nodes observed training optimization convex solved gradient descent algorithms newton methods algorithm hand variables inference solved variables exact inference graphs examples sequence modeling graph chain graph input sequence observed variables 20 represents sequence observations 21 represents hidden unknown variable observations 22 structured form chain edge 23 22 simple interpretation 22 labels element input sequence layout efficient algorithms conditional dependency 22 20 defined fixed set feature functions form 33 measurements input sequence partially determine likelihood 22 model feature numerical weight combines determine probability 22 linear chain applications simpler hidden markov models assumptions input output sequence distributions hmm loosely understood specific feature functions constant probabilities model transitions conversely loosely understood generalization hmm constant transition probabilities arbitrary functions vary positions sequence hidden depending input sequence notably contrast feature functions feature functions entire input sequence 20 inference range feature functions probabilistic interpretation variants semi markov extended models 22 dependent fixed 38 previous variables conventional training inference practical values 38 computational cost increases exponentially 38 advance managed issues concepts tools field bayesian infinity approach type model capable learning temporal dynamics scalable fashion introducing potential function based sequence bayesian model learning dynamics sequential observations render model computationally infinity employs field approximation potential functions driven efficient approximate training inference algorithms model capability capture model temporal dependencies arbitrary exists generalization semi markov conditional random field semi models variable label sequence 21 power model range dependencies 22 reasonable computational cost finally margin models structured prediction structured support vector machine alternative training procedure latent dynamic conditional random field latent dynamic conditional random fields discriminative probabilistic latent variable models type sequence tagging tasks latent variable models trained sequence tagging task sequence observations 44 main model solve assign sequence labels 45 finite set labels modeling ordinary linear chain set latent variables inserted chain rule probability capturing latent structure observations labels trained newton methods specialized version perceptron algorithm called latent variable perceptron developed based structured perceptron algorithm models applications vision recognition video streams shallow parsing software partial list software implement generic tools partial list software implement tools  
4155662	computer	statistics image processing smooth data set create function attempts capture patterns data leaving noise fine scale structures rapid phenomena smoothing data signal modified individual noise reduced adjacent increased leading signal smoothing aid data analysis extract data assumption smoothing reasonable provide flexible robust algorithms smoothing smoothing distinguished partially overlapping concept curve fitting terminology applications mixed smooth curve data called smoothing linear values written linear transformation observed values smoothing operation linear matrix representing transformation matrix matrix operation applying matrix transformation called convolution matrix called convolution matrix convolution kernel simple series data multi dimensional image convolution kernel dimensional vector algorithms common algorithms moving average capture trends repeated statistical image processing vision smoothing ideas scale space representations simplest smoothing algorithm average smooth method replaces signal average adjacent positive integer called smooth smooth smooth implements weighted smoothing function specific smoothing filter types  
4182449	computer	tablet commonly tablet mobile device typically mobile operating lcd touchscreen display processing circuitry battery single flat package tablets computers personal computers lack capabilities modern tablets modern smartphones differences tablets larger smartphones screens larger measured support access cellular network touchscreen display operated gestures executed mouse keyboard larger computers portable computers classified presence appearance physical keyboards species tablet physical keyboards accept input virtual keyboard touchscreen displays lack physical keyboard tablets connect independent physical keyboards wireless bluetooth usb pcs keyboards distinct tablets form tablet middle 20th century fictional tablets 1968 science fiction film developed decades century 2010 apple released ipad mass market tablet achieve widespread popularity tablets rapidly product category personal educational applications sales mid 2010s history tablet operating development pen computing electrical devices data input output flat display existed sheet paper display pen attached actuators 20th century devices characteristics created prototypes commercial products addition academic systems companies released commercial products 1980s input output types fictional prototype tablets tablet computers appeared science fiction 20th century helped promote concept wider audience examples include additionally real life projects proposed created tablet computers tablets earlier tablet products september 1989 grid systems released commercially successful tablet products based extended versions dos operating 1992 ibm announced april shipped developers october corporation os based personal 1993 hardware including cpu apple launched apple newton personal digital assistant 1993 apple newton os initially running hardware manufactured motorola incorporating arm cpu apple developed computers operating platform design licensed sharp digital manufacture variants 1996 palm released palm os based touch based touch based devices initially incorporating motorola 68000 cpu 1996 fujitsu released 1000 tablet format pc running windows 95 cpu mb ram offering input option connecting conventional keyboard mouse intel announced processor based touchscreen tablet 1999 branded intel tablet 2000 company screen media german company gmbh released based linux browser internet access europe device 16 mb storage 32 mb ram x86 compatible microcontroller national semiconductor screen 12 touch sensitive slots cards enable support television set box sold middle east company 2003 april 2000 launched pocket pc 2000 touch capable windows ce operating devices manufactured manufacturers based mix x86 mips arm hardware 2002 attempted define tablet pc mobile field business devices failed decisions limited original purpose existing devices heavy held hand extended legacy applications created desktop interfaces adapted format nokia plans internet tablet 2000 model manufactured 2001 nokia running featuring browser speakers inch screen released market ready nokia entered tablet space 2005 nokia running based linux distribution custom internet tablet user interface application framework layer named instance software platform generic computing tablet device intended internet consumption nokia platform future mobile devices project house platforms replaced series 60 nokia term internet tablet refer portable focused internet media consumption range personal digital assistant ultra mobile pc mobile phones runs release ipad introduced heavily modified apple called mac os based tablet apple handwriting recognition hardware mac os talk integrated tablet supplied party driver launch ultra mobile pc intel started mobile internet device initiative hardware combined linux configuration intel developed mobile linux operating successful launch atom cpu series netbooks 2010 nokia intel combined projects form linux based operating supports netbooks tablets tablet launched september 2010 germany extended version operating called os os adds android adobe air proprietary user interface optimized device september 27 2011 linux foundation announced replaced 2012 modern tablets android 2000s era platforms tablet computers reach market 2008 plans android based tablets appeared products released 2009 pocket sized model inch touchscreen released proprietary operating 2009 released android released 2009 android tablet appeared late 2009 unit called ultra version called released time ultra inch display 15 inches products 2010 manufacturers android adapted tablets debuted february 2011 apple defining class consumer device ipad shaped commercial market tablets successful tablet time release competing devices tested military 2011 secure 2013 2010 tablets mainstream samsung galaxy continuing trends features listed march 2012 pc magazine reported 31 internet users owned tablet viewing published content video news selling devices apple ipad sold release april 2010 mid october 2012 ipad market share units dropped 36 2013 android tablets android tablet sales volume devices 52 2012 2013 individual brands android operating devices follow ipad amazon blackberry announced september 2010 blackberry tablet os blackberry officially released canadian consumers april 19 2011 hewlett packard announced running qualcomm cpu released june 2011 august 18 2011 hp announced sales 2013 mozilla foundation announced prototype tablet model firefox os firefox os discontinued 2016 tablets 2014 february 2016 commercial release tablet utilizing touch operating support project lack market april 2017 community project february 2014 mobile app developers tablets developers smartphones 2014 23 companies deployed tablets sales activities survey report corporate ipad holds majority north america western europe japan australia android tablets popular asia china russia exception europe 2015 tablet sales increase apple remained largest market share 25 samsung vice president 2016 tablets models expensive designed keyboard reflected changing 2016 android market 65 apple takes spot 26 windows remaining 2018 computing devices android ios pcs forms desktop notebook tablet running operating systems windows macos linux late 2017 ipad pro received ios 11 update adding ability multiple windows drop app user files types tablets loosely categories physical size operating installed input output technology size varies inches models larger inch category include samsung galaxy pro 12 12 inches toshiba 13 inches 18 18 inches march 2013 tablet market sony tablet 27 inches september 2015 apple released ipad pro screen size larger regular ipad mini tablet mini tablets typical screen sizes commercially successful mini tablets introduced amazon tablet samsung galaxy 2011 google 2012 operate ordinary tablets specifications compared september 14 2012 amazon released upgraded version hd screen resolution features compared predecessor remaining inches october 2012 apple released ipad mini inch screen size inches regular ipad powerful current ipad july 24 2013 google released upgraded version display dual cameras stereo speakers color accuracy performance improvement built wireless charging variant support mobile september 2013 amazon updated tablet november 2013 apple released ipad mini remained inches matched hardware ipad air smartphones tablets devices typically screens tablets cellular network capability 2010 crossover touchscreen smartphones screens larger inches released size considered larger traditional smartphone creating hybrid category publications phone tablet time introduction screens inches 2017 screen sizes inches considered typical examples 2017 samsung galaxy note series models inches inches sony ultra inches inches honor inches distinct tablets pcs physical keyboards folding touchscreen 1s typically display virtual keyboard physical keyboards 1s processors operating systems laptops flexibility operation tablet pc hybrid combination tablet laptop features essential feature desktop operating windows opposed mobile operating additionally 1s typical laptop ports usb connect traditional pc peripheral devices external displays distinct tablets operate simple tablets media consumption devices 1s capacity media consumption content creation 1s called laptop desktop replacement computers species 1s gaming tablet tablets modified adding physical buttons pad thumb gaming experience combined touchscreen features typical tablet tablets targeted native os games emulator games nvidia tablet display running android runs android games purchased google play store pc games tablet computers models nvidia powered video cards switch hybrid console gaming tablet runs switch software features controllers motion controls gaming modes table mode traditional mode handheld mode dual touchscreen tablet computers design laptop examples include discontinued 2010 sony tablet considered toshiba customized business tablet customized business tablets built business customer hardware software perspective delivered business business transaction hardware transportation company consumer grade gps module tablet accuracy tablet customized embedded professional grade provide gps signal tablets field software transportation company remove software functions android internet browser reduce costs cellular network data consumption add custom package management software applications touchscreen special hardware software table tablet touchscreen tablet designed devices users food play games pay 2013 including red 2014 popular brands devices criticized servers claim determine hours based customer feedback service hardware architecture major architectures tablet market arm arm architecture intel amd x86 intel x86 including x86 64 powered ibm compatible pc 1981 apple macintosh computers 2006 cpus incorporated tablet pcs offer performance ability versions windows windows desktop enterprise applications windows based x86 tablets include intel announced plans enter tablet market atom 2010 october 2013 intel operation announced plans build based quad cores arm x86 processors arm cpu architecture choice manufacturers smartphones 95 arm digital cameras 80 arm set boxes routers smart 70 arm storage devices tablet computers 95 arm release mobile focused power efficient 32 bit processor originally designed apple newton 1993 laptop 1992 chip palm nokia smartphones camera phones cameras arm licensing model supported success allowing device manufacturers license alter custom soc derivatives tailored products helped manufacturers extend battery life component count size devices multiple multiple supply identical products price competition forced unit prices fraction x86 architecture historically limited support windows ce 2012 release windows announced additional support architecture arm based tablet branded surface x86 64 intel core variant branded surface pro intel tablet chip sales units 2012 12 units 2013 intel chairman stated 2014 goal tablet chip sales 40 units investment 2015 display key component tablet computers touch input touchscreen liquid crystal display lcd user navigate easily type virtual keyboard screen press screen apps files tablet grid systems corporation tablet featured pen tool aid precision touchscreen device screen keyboard respond screen keyboard mouse operation precise forms mid 2010s tablets multi touch earlier touchscreen devices users perform inputs handwriting recognition arm powered tablets galaxy note support support handwriting recognition digital provide resolution handwriting resolution touch screens factor support pressure sensitivity allowing variable stroke based characters chinese japanese korean writing built capability pressure sensing pressure digital art applications apps exist ios android platforms handwriting recognition 2015 google introduced handwriting input support languages features 2007 access screens success iphone features common multi touch features user touch screen multiple actions natural user interface features flash memory solid storage external usb bluetooth keyboards defined tablets tablets released mid 2010 version arm processor battery life arm cortex family powerful tasks internet light production mobile games features definition anti display touchscreen weight battery life sized laptop wireless local internet connectivity wi standard optional mobile broadband bluetooth connecting peripherals local devices ports wired connections charging usb ports devices support remote controller station keyboard additional connectivity board flash memory ports removable storage cloud storage services backup data devices local storage operating tablets conventional pcs operating systems dual rare tablet operating systems classes desktop os based tablets require storage cooling battery life processor intensive graphical applications addition mobile apps ports mobile based tablets reverse mobile apps battery life processor battery common laptop 2018 android tablets market apple ios 23 market windows 14 market android android linux based operating google offers source apache license designed mobile devices smartphones tablet computers android supports cost arm systems tablets running android released 2009 vendors motorola delayed deployment tablets 2011 android include tablet features android released 2011 versions support larger screen sizes tablets access google play service android includes operating key applications vendors sell customized android tablets mobile content provide app store larger google play android market chrome os devices chrome os market 2017 2019 tablets 1s touchscreen 360 degree ios ipad runs ios created iphone touch ipad released 2011 built underlying unix implementation macos user interface ios designed features required earlier tablets apple introduced multi touch gestures moving ios built arm architecture windows windows pen computing windows 1991 supported tablets running windows xp tablet pc tablet pcs pen based functional x86 pcs handwriting voice recognition functionality windows xp tablet pc edition pen support tablet support business versions windows vista windows tablets running windows touchscreen mouse input hand writing recognition support tablet pc announced ultra mobile pc initiative 2006 brought windows tablets touch form factor 2008 prototype screen tablet called project 2012 released windows features aspects operating user interface platform designed touch based devices tablets operating introduced application store style application optimized tablets introduced windows rt edition windows arm based devices launch windows rt release devices operating systems manufacturers including release surface tablets hybrids released july 2015 windows introduces universal apps style apps apps designed multiple product families identical pcs tablets smartphones embedded systems xbox surface hub windows holographic windows user interface handle transitions mouse oriented interface touchscreen optimized interface based input pcs interfaces include updated start menu windows replaced earlier editions windows hybrid os operation hardware companies built hybrid devices possibility windows android operating systems application store apps pre installed supplied online distribution sources app stores provide centralized software device software installation updates mobile device approach supplier controls software applications apps software development kits restricted approved software developers reduce impact malware provide software approved content control application quality competing vendors apple google amazon strategy originally allowed arbitrary apps installed december 2011 parties apple ibm agreed cross selling ibm developed applications enterprise level accounts source software personal control traditional personal computers sales 2010 tablet businesses business started conferences events trade 2012 intel reported tablet program improved productivity 19 000 employees average minutes day october 2012 display screen tablets laptop display screens tablets increasingly construction industry field documentation relevant device carrying amounts paper 2014 44 online consumers tablets jump 2011 tablet increasingly common children 2014 survey frequently object play american children age 12 play video game consoles board games play vehicles blocks action figures majority parents mobile toy 2014 american access tablet reader tablets personal internet connected 2015 study children tablet device 2017 tablet sales worldwide sales desktop computers worldwide pc sales flat quarter 2018 2010 2014 figures estimated 2014 2018 figures estimated manufacturer note consists vendors market share 2017 2018 data amazon operating survey conducted online association called digital content march 2012 72 tablet owners ipad 32 android tablet 2012 android tablet adoption increased 52 tablet owners owned ipad 51 owned android powered tablet add 100 tablet owners type 2013 android market share ios 36 late 2014 android market share 72 ios 22 windows 2016 android 65 apple 26 windows 2018 android tablets market apple ios 23 market windows 14 market blue wavelength light tablets impact ability fall reading experts harvard medical school limiting tablets reading delayed body clock stay late risk increases pc app android apps attempt decrease impact filtering blue wavelengths display ios includes shift colors device display hours plane electromagnetic waves type device type electronic device phases board commercial 13 november 2013 european safety agency announced mobile terminals european phases 2014 condition cellular functions mode activated formally confirmed december 11 2013 tablets readers smartphones players portable gaming consoles french historical equipped digital tablets called application integrated ipad mini offering interaction augmented virtual reality pieces control interactive professional specific sectors professionals construction industry insurance experts called rugged models field extreme hot environments addition satellite type connectivity type tablet connectivity  
4234887	computer	united advanced science suite advanced courses covering science offered college board school students opportunity college credit college level courses suite consists current classes discontinued class science taught pascal java 2004 science principles science principles science focus computing designed parallel science computational thinking meant equivalent science science principles introduced school science science programming class emphasizes object oriented programming methodology solving algorithm development overview data structures abstraction science tests students knowledge java meant equivalent science sponsored program technology education schools aims increase students science classes science discontinued science included topics science formal depth study algorithms data structures data abstraction binary trees studied science science recursive data structures dynamically allocated structures fundamental science science equivalent college students science discontinued 2009 administration  
4253501	computer	source rule based machine translation platform software released terms gnu public license overview shallow transfer machine translation finite lexical transformations hidden markov models speech tagging word category constraint grammar language pairs french existing machine translation systems commercial proprietary technologies hard adapt technologies language pairs difficult instance integrate single multilingual content management language independent specification ease efficient development project growth released 40 stable language pairs fast translation errors easily source project tools potential developers build language pair contribute project history originated machine translation engines project funded spanish government developed originally designed translate closely languages expanded treat language pairs create machine translation develop linguistic data dictionaries rules xml formats language data developed collaboration support stable version english french italian spanish swedish languages list companies involved development including language engineering software project 2009 2010 2011 2012 2013 2014 editions google summer code 2010 2011 2012 2013 2014 2015 2016 2017 editions google code step step view diagram displays steps takes translate source language translate target language translated language pairs list stable language pairs language codes languages represent  
4324903	computer	bigdog dynamically stable military robot created 2005 boston dynamics owned nasa jet laboratory harvard university field station funded darpa project bigdog combat history bigdog funded defense advanced projects agency darpa serve robotic pack terrain rough conventional vehicles wheels bigdog legs movement allowing surfaces wheels legs variety sensors including joint position ground contact bigdog features laser stereo vision bigdog stands size capable difficult terrain running carrying 35 degree controlled receives input robot sensors navigation balance managed control bigdog walking pattern controlled legs equipped cylinder actuators power bigdog behaviors vary greatly stand walk time walk legs running travel speed bigdog varies bigdog project headed dr martin 2012 received award robotics industries association dr professor university headed robotics lab developing walking running robots built actuators sensors joint position force movement ultimately controlled sensors 50 sensors located bigdog measure acceleration body motion force joint actuators engine speed temperature pressure robot internal engine level control position force level control controlled bigdog featured 20 articles scientist popular science popular mechanics wall street journal march 23 2008 boston dynamics released video footage generation bigdog footage bigdog ability walk terrain recover balance equivalent designed boston dynamics bigdog terms capabilities february 2012 darpa support support variant bigdog demonstrated capabilities terrain starting summer 2012 darpa planned complete development key capabilities 18 months worth operating theatre bigdog demonstrate ability complete 24 hours carrying load vision sensors conducted february 2013 boston dynamics released video footage modified bigdog arm arm pick objects robot legs power arm news writer supposed weights december 2015 bigdog project discontinued day pack field gas powered engine noisy combat project electric robot named spot carry projects progress spot mini progress built hardware bigdog powered stroke cylinder engine operating 000 engine drives drives actuators actuators joint total 16 unit consists cylinder position sensor force sensor computing power pc board stack pentium class running qnx  
4345916	computer	histogram equalization method image processing contrast adjustment image histogram overview method increases global contrast images usable data image represented close contrast values adjustment distributed histogram local contrast gain contrast histogram equalization effectively frequent intensity values method images dark method lead views structure ray images photographs key advantage method straightforward technique operator theory histogram equalization function original histogram calculation computationally intensive disadvantage method increase contrast background noise decreasing usable signal scientific imaging spatial correlation intensity signal separating dna fragments signal noise ratio visual detection histogram equalization produces effects photographs scientific images thermal satellite ray images class images apply false color histogram equalization produce effects visible image gradient applied images color depth applied bit image displayed bit gray scale reduce color depth unique gray image histogram equalization applied images color depth size continuous data 16 bit gray scale images implement histogram equalization image change change operation expressed original image histogram equalization mapping operation define leave image histogram equalization implemented change hand remains image modified implementation image change change original data modifications method multiple called local contrast contrast examples methods include adaptive histogram equalization contrast limiting adaptive histogram equalization histogram equalization beta optimized equalization goal methods improve contrast producing brightness shift loss artifacts modifying algorithm signal transform equivalent histogram equalization happen biological neural networks maximize output rate neuron function input statistics proved fly retina histogram equalization specific class histogram methods methods seek adjust image easier analyze improve visual quality projection projection project image application modified histogram original image functioning table pixel brightness values pixels position input single channel images function histogram destination image coordinates determined values pixels input terms statistics output image pixel probability input pixel object histogram implementation discrete grayscale image occurrences gray level probability occurrence pixel level image total gray levels image typically 256 total pixels image image histogram pixel normalized define cumulative distribution function image normalized histogram create transformation form produce image flat histogram image cumulative distribution function range constant properties perform transform inverse distribution function defined range maps levels range normalized histogram map values original range simple transformation applied result detailed derivation color images describes histogram equalization grayscale image color images applying method separately red green blue components rgb color values image applying method red green blue components rgb image yield image color balance relative distributions color channels change result applying algorithm image converted color space lab color space color space algorithm applied channel image histogram equalization methods 3d space applied histogram equalization 3d color space probability pixels dark proposed defined iso plane uniform gray distribution examples consistency statistical usage cumulative distribution function replaced cumulative histogram article links cumulative distribution function derived values cumulative histogram pixels defined terms rank image bit grayscale image values histogram image table pixel values count cumulative distribution function pixel values contribute increase minimum 52 maximum 64 pixels image normalized histogram equalization minimum cumulative distribution function image pixels 64 height levels 256 note scale values original data range equation scaling minimum equalization scaling data 78 46 78 row column normalized values image normalized yield values minimum 52 maximum  
4543102	computer	centralized method dynamically scheduling pipeline instructions execute hardware data dependencies instruction instructions released determines issued instructions instruction continue monitors flow executing instructions dependencies resolved instruction issued stages instructions decoded stages data structure control execution instructions maintains status tables algorithm detailed algorithm control method issue stage functional unit future instructions executed wait structural hazard resolved techniques algorithm avoid structural hazard resolve war dependencies register renaming  
4543249	computer	unified reservation station unified feature microarchitecture cpu register renaming algorithm dynamic instruction scheduling reservation stations permit cpu fetch data computed waiting stored register read instructions issued reservation station input read multiple instructions write register written checks operands raw execution unit structural hazard starting execution instructions stored parameters executed ready identified unit execute instruction register renaming war hazards associative structure cost compare returned processing units stored addresses algorithm instructions issued sequence reservation stations buffer instruction operands instruction operand reservation station common data bus operand operand reservation station execution instruction functional units reservation station output functional unit connects common data bus reservation stations operands  
4558491	computer	statistical machine translation smt machine translation paradigm translations generated basis statistical models parameters derived analysis bilingual corpora statistical approach rule based approaches machine translation based machine translation ideas statistical machine translation introduced 1949 including ideas applying theory statistical machine translation introduced late 1980s 1990s researchers ibm thomas watson center contributed machine translation studied machine translation method basis idea statistical machine translation theory document translated probability distribution string target language english translation string source language french modeling probability distribution approached approach implementation apply bayes theorem translation model probability source string translation target string language model probability target language string decomposition splits finding translation probability implementation perform search strings native language performing search efficiently machine translation decoder foreign string methods limit search space time keeping acceptable quality trade quality time usage speech recognition translation systems store native strings translations document typically translated sentence sentence language models typically approximated gram models approaches applied translation models additional complexity sentence lengths word languages statistical translation models initially word based models ibm hidden markov model model advances introduction phrase based models incorporated syntax syntactic structures benefits frequently cited benefits statistical machine translation rule based approach word based translation word based translation fundamental unit translation word natural language typically translated sentences compound morphology ratio lengths sequences translated called foreign native word produces assumed theory covers concept practice true english word corner translated spanish depending internal external angle simple word based translation translate languages word based translation systems simply map single word multiple translating english french word english produce french english producing single french word word based translation freely package includes training program ibm models hmm model model word based translation phrase based systems common phrase based corpus extract phrases syntax rules matching discussed community distributed implementations online phrase based translation phrase based translation aim reduce restrictions word based translation translating sequences lengths sequences called blocks phrases typically linguistic phrases statistical methods corpora phrases linguistic phrases motivated syntactic categories decreases quality translation syntax based translation syntax based translation based idea translating syntactic units single strings phrase based partial parse trees sentences idea syntax based translation statistical advent strong stochastic 1990s examples approach include based context grammars hierarchical phrase based translation hierarchical phrase based translation combines phrase based syntax based translation context grammar rules grammars constructed extension methods phrase based translation reference motivated syntactic idea introduced 2005 challenges statistical machine translation statistical machine translation deal include sentence alignment parallel corpora single sentences language translated sentences vice versa sentence performed alignment algorithm word alignment sentence alignment corpus alignment algorithm learn translation model source target sentence pair solutions ibm models hmm approach statistical real training sets translations proper train translated train paris train paris training depending corpora translate canadian bilingual corpus translated word word languages classification naming typical subject object sentence talk instance languages additional differences word instance located question statement speech recognition speech signal textual representation mapped blocks languages smt machine translator manage sequences word program designer attempts solutions included models distribution location item translation aligned location ranked language model selected voice started testing speech translation machine translation technological trends speech slower rate speech recognition ideas speech recognition statistical machine translation vocabulary smt systems typically store word forms separate symbols relation word forms phrases training data translated lack training data human domain differences morphology mobile devices rapid increase computing power tablets smartphones combined wide availability speed mobile internet access machine translation systems experimental systems developed assist foreign health workers developing countries systems market ios users messages built recognizes speech recognition edited online projects universal speech translation advanced star project eu translation sentences recognized spoken language growing combining speech recognition machine translation speech synthesis achieve speech speech translation lists passed statistical machine translation combining systems achieve sentence segmentation normalization prediction quality translations  
4605351	computer	natural language processing latent dirichlet allocation lda generative statistical model sets observations explained explain data observations collected documents document mixture topics word presence document topics lda topic model history context population lda proposed 2000 context machine learning applied lda independently david andrew michael jordan 2003 graphical model topic discovery papers august 2017 topics lda document viewed mixture topics document considered set topics assigned lda identical probabilistic latent semantic analysis lda topic distribution assumed sparse dirichlet prior sparse dirichlet encode documents cover set topics topics set frequently practice precise assignment documents topics lda generalization model equivalent lda uniform dirichlet prior distribution lda model topics classified cat dog topic probabilities generating classified interpreted viewer cat naturally word cat probability topic dog topic probabilities generating word probability special relevance function word roughly probability classes separate category topic defined identified basis automatic detection likelihood term occurrence lexical word occur topics probability typical set neighboring topic document assumed characterized set topics standard bag model assumption individual model variables variables latent variables proposed original paper sparse dirichlet prior model topic word distribution probability distribution topic set probability model applied variant lda plate notation model denotes topics dimensional vectors storing parameters dirichlet distributed topic word distributions vocabulary helpful entities represented 11 matrices created original document word matrix represents corpus documents modeled view consists rows defined documents columns defined topics 11 consists rows defined topics columns defined refers set rows vectors distribution set rows distribution topics generative process topics corpus imagine generative process documents created reverse engineer imagine generative process documents represented random latent topics topic characterized distribution lda assumes generative process corpus 16 consisting 17 documents 18 choose 19 20 21 dirichlet distribution symmetric parameter 22 typically sparse 23 choose 24 25 26 typically word positions 27 20 lengths 18 treated independent data generating variables 33 34 dropped plate definition formal description lda mathematically random variables inference learning distributions set topics word probabilities topic word topic mixture document bayesian inference original paper bayes approximation posterior distribution alternative inference techniques sampling expectation propagation derivation equations sampling integrated simplicity derivation documents assumed 38 derivation equally valid document lengths vary model total probability model variables denote vector version variables 40 41 integrated independent treat 11 separately focus focus hidden model 51 document replace probabilities equation true distribution expression write explicit equation word 51 document word symbol 55 word vocabulary assigned 56 topic dimensional dimensions limited specific 58 59 denotes word 51 document assigned 56 topic equation integration changed equation integration form dirichlet distribution dirichlet distribution attention 40 derivation 40 41 list steps derivation clarity write final equation 41 integrated goal sampling approximate distribution 75 sampling equations derived key conditional probability 78 denotes 79 hidden variable 80 word token document assume word vocabulary denotes 78 note sampling sample 78 probability exact probabilities 78 equation simplified finally 90 meaning 78 equation simplified property function split summation merge independent summation dropped note derived article discussion integrating dirichlet distribution bayesian network faster sampling focused inference latent dirichlet allocation support capture massive topics documents update equation mentioned earlier natural sparsity advantage intuitively document subset topics 95 word appears subset topics 96 update equation advantage sparsity equation terms sparse terms 98 99 term topics summation topics document sparse summation topics word 33 assigned corpus hand values 22 26 compared terms sampling topic sample random variable uniformly check sample fall fall sampling topic takes time original fall check subset topics record sparse topics topic sampled time topic sampled time 95 96 denotes topics assigned current document current word type sampling topic updating basic arithmetic operations applications extensions techniques topic modeling classic retrieval models techniques latent semantic indexing independent component analysis probabilistic latent semantic indexing negative matrix distribution lda model highly modular easily extended main field modeling relations topics achieved distribution dirichlet topic model approach correlation structure topics logistic normal distribution dirichlet extension hierarchical lda topics joined hierarchy nested chinese process lda extended corpus document includes types names lda dual model extensions lda include hierarchical dirichlet process mixture model topics data nested chinese process topics arranged hierarchy structure data earlier lda lda model essentially bayesian version model bayesian formulation perform datasets bayesian methods avoid overfitting data datasets models tend converge difference variable represent document training set document model probability learned training set em algorithm topic distribution argues step essentially model data variations lda automatically natural images categories forest image document image variations called spatial latent dirichlet allocation  
4612055	computer	company description founded march japan company engines light combine machines gas heat mini portable generators heavy utility machinery company manufactured gasoline powered engines practical engine https global history engines john king corporation trucks 20 established growing presence domestic uav market japan uavs forms application league division team sponsor league racing weather japanese television sponsor german global sponsor united company origin company combination names company founder  
4624565	computer	hierarchical telecommunications network backhaul portion network intermediate links core network backbone network edge network contracts networks backhaul carry packets backbone network business definition backhaul commercial bandwidth provider offers quality service guarantees appears telecommunications trade literature sense backhaul connection defined technically operates takes legal responsibility connection technical commercial definitions backhaul refers network global internet paid commercial access rates internet exchange core network access location middle networks exist customer lan local wan connection instance network fiber company public dark fiber networks backhaul alternative encourage local national carriers reach broadband cell phone serving serve retail networks connect customers cell phones single cell tower local connection cell tower rest backhaul link core internet service provider network presence term backhaul entire wired network networks wireless wired backhaul bands mesh network edge network capacity wireless channel packets fiber links telephone company internet service provider providing backhaul academic education networks commercial networks networks increasingly common connect public broadband backhaul national broadband plans motivated perceived break commercial providers plan instance specifies community institutions connected gigabit fiber definition entire hierarchical network human core network represent backhaul links edge networks hands feet individual links edge networks examples include backhaul technologies choice backhaul technology account parameters capacity cost reach resources frequency spectrum optical fiber wiring rights backhaul solutions wired lines copper wireless capacity radio links wired expensive solution impossible deploy remote wireless suitable option multi hop wireless architecture overcome wired solutions create efficient coverage growing demand emerging markets cost major factor technologies wireless backhaul solution offer carrier grade services easily feasible wired backhaul connectivity backhaul technologies include backhaul capacity network operator network operator technology limited technologies requirement specific short term links emergency public events cost time major factors rule wired solutions pre existing infrastructure accessible mesh networks wireless backhaul data rates increase range wireless network coverage reduced investment costs building infrastructure access cover service mesh networks unique reduce cost flexible architecture mesh networking access connected exchange data frames mesh requires costly cable backhaul network reduces total investment cost mesh capabilities coverage service easily cost reduction scale capacity mesh desirable instance university mesh project based city japan developed technology building capacity mesh infrastructure key component called periodic transmit proprietary packet forwarding scheme designed reduce radio interference forwarding path mesh networks 2010 hundreds wireless lan access incorporating technology installed commercial entertainment complex city successful operation largest wireless multi hop network wireless multi hop 11 access bandwidth users actual throughput double standard mesh network systems conventional packet forwarding latency multi hop degree voice ip communications solutions connections backhaul common wireless mesh network solutions supported source router firmware including derivatives agent supported examples routers ieee 802 21 standard specifies basic capabilities systems including 802 unknown user authentication 802 wireless mesh networking support effectively arbitrary wired connections appears single virtual private cloud proprietary networks follow principles term backhaul type connectivity technically business definition customer providing connectivity internet vendor providing authentication management services transition wireless wired backhaul wireless backhaul easy deploy moving presence wireless connections slower spectrum user devices devices require truck typically times wired backhaul limited bandwidth viewed initial temporary measure wiring issues strategies moving wireless wired backhaul involve building wired connections improve performance latency simple quantitative analysis spectrum user purposes delay latency achieved bandwidth network respond conditions notably requests connections wireless backhaul accommodate sources notably magazine networks issues network wires switching management designed future proof wireless network require change equipment wireless backhaul configuration supports simultaneous dual band communication band user communication backhaul equipment supports wired connections typically power ethernet applications ethernet assuming reasonable software flexibility bands user connectivity backhaul wired connection nodes powered connected power source single cable solutions power ethernet ieee power data power shorter range nodes wi projects usage software issues software defined networking sdn transition link layer technologies notably broadband software architecture backhaul sources optimal copper existing wire infrastructure 2012 technologies data wide carriers support customer networks companies involved called sdn revolution carrier data centre trend redundant backhaul hybrid networking lattice hierarchy backhaul instance ieee standard ieee 802 21 standard supports applications connection multiple connections lan level standards enable hybrid networks devices connect protocols tied single backhaul device account solely device cloud computing commercial industrial consumer level technology cell moving fiber optic range power nodes including cell phone connected fiber optic increasingly carrier ethernet protocols replacing connections firm projects 2014 ethernet dominant technology wireless backhaul 85 usage base stations ethernet march april 2012 wired networks backhaul 50 100 ethernet circuits standard range including networks scale range networks including telecommunications cables cables route companies including power cables telecommunications cables company business reflects telecommunications backhaul range voltage electricity transmission technologies common identical terms route liability legal aspects https books google books legal aspects voltage  
4635549	computer	rugged designed operate usage environments conditions strong extreme temperatures conditions designed type rough conditions external internal components cooling computers share design frequently terms typical environments rugged laptops tablet pcs public safety field sales field service manufacturing retail healthcare transportation distribution military industries individuals activities construction virtually rugged computers share underlying design philosophy providing controlled environment installed electronics rugged computers engineered operate multiple challenges including electronic components selected ability operating temperatures typical commercial components design engineering decisions reduction addition liquid cooling heat rugged materials ensure performance environments features include keyboards protect dust scratch screens readable direct rugged units prices study environments rugged computers commonly total cost ownership 36 percent rugged notebooks 33 percent compared conventional rugged versions cost failure rates impact productivity factors laptops laptop built operate environments conditions computers stronger regular laptop industrial construction military purposes engineered mobile drop dust requirements performance grade security equipped current legacy ports including serial commonly environments levels standardized measured ip tablets rugged tablet semi rugged rugged semi rugged body rugged tablets engineered extreme temperatures conditions designed maintaining strength dust tablet internally solid hard drive moving laptops tablets require fan improving dust water rugged options scanner serve transport sector levels measured ip smartphones rugged smartphone completely kinds elements water dust smartphone left true rugged smartphone damage rugged smartphone rugged tablet typically ip certification military standard specifications dust solar radiation temperature manufactures rugged smartphone complicated structure material level quality expectation rugged smartphones push talk capabilities reader functions suit industrial construction wireless connectivity wireless capability key requirement enterprise mobility applications reported wireless transmission failure rates times rugged notebooks compared rugged units difference attributed experience rugged notebook vendors integrating multiple products transmission failure leads minutes lost productivity user company network vpn cellular networks enable time connectivity users major vendors rugged computers offer built wireless lan wireless wan capabilities partner cellular carriers offerings wireless lan wireless wan connections mobile vpn connection creating connected infrastructure simpler user application data loss  
4636520	computer	access linux platform discontinued source software based operating referred generation version palm os mobile devices developed marketed access tokyo japan platform included execution environments java classic palm os based native linux applications demonstrated devices variety conferences including source mobile announced february 2006 initial versions platform software development kits officially released february 2007 effort access panasonic platform basis shared platform implementing version mode mobile oriented applications platform application programming interfaces apis specifications foundation smartphone mobile scheduled mid 2009 release renamed smartphone developed sharp corporation cooperation mobile partners scheduled 2009 released officially june 2010 result platform launched independently devices access user interface designed goals earlier palm os releases aim palm design philosophy centered applications simple aspects interface included task based orientation file document orientation commonly desktop systems appearance platform intended highly provide specific devices contexts releases modern support close palm os base frameworks nokia internet tablet framework based components drawn project including frameworks variety core components drawn mainstream source projects including components licensed gnu public license gnu lesser public license source licenses meaning environment software level components released mozilla public license project components addressed issues application life cycle communication exchange structured data security time event based common development applications mobile devices application development standard apis common operations defined standards portable operating interface posix linux standard base standard addresses telephony device messaging topics frameworks apis defined access applications developed linux native code legacy palm os applications garnet emulation environment java execution environments supported development application manager framework sdk eclipse based integrated development environment ide plug predecessor palm os development environment compilers embedded application binary interface enabled arm versions standard gnu compiler collection gcc tool chain security combination user space policy based security framework kernel space linux security module implement fine grained access controls components security implementation released framework controls based applications allowed access set safe apis  
4726017	computer	science synchronization refers distinct concepts synchronization processes synchronization data process synchronization refers idea multiple processes reach agreement sequence action data synchronization refers idea keeping multiple copies dataset maintain data integrity process synchronization primitives commonly implement data synchronization synchronization synchronization multi processor systems concurrent processes single processor systems mentioned main synchronization job fork split jobs tasks job jobs processing joined leave parallel programming require synchronization parallel processes wait processes occur producer consumer producer consumer relationship consumer process dependent producer process data produced exclusive resources multiple processes dependent resource access time operating ensure processor accesses time reduces thread process synchronization thread synchronization defined mechanism ensures concurrent processes threads simultaneously execute program segment critical processes access critical controlled synchronization techniques thread starts executing critical segment program thread wait thread proper synchronization techniques applied race condition values variables vary depending context switches processes threads suppose processes concurrently executing share common resource critical figure synchronization avoid accessing shared resource process access resource assigned process time assigned process process process wait process resource figure synchronization requirement considered processes threads executed board plane check user provide service provide correct mutual synchronization deals minimizing synchronization challenges algorithm design minimize reduce synchronization synchronization takes time computation distributed computing reducing synchronization attention scientists decades increasingly gap improvement computing latency increases experiments global communications synchronization distributed computers takes dominated share sparse iterative receiving increasing attention benchmark metric performance gradient ranking 500 supercomputers classic synchronization classic synchronization newly proposed synchronization scheme hardware synchronization systems provide hardware support critical code single processor interrupts executing running code multiprocessor systems key ability require implement synchronization multiprocessor set hardware primitives ability read modify memory location capability cost building basic synchronization primitives increase processor count increases alternative basic hardware primitives provide ability read modify location read write performed hardware primitives basic building blocks build wide variety user level synchronization operations including barriers expect users employ basic hardware primitives expect primitives programmers build synchronization library process complex modern hardware special atomic hardware instructions set memory word compare contents memory synchronization strategies programming languages java prevent thread interference memory consistency errors blocks code lock object sections forces thread acquire lock object execute block lock automatically released thread acquired lock executing block leaves block waiting block variable updates thread block visible threads acquire lock execute block java blocks addition enabling mutual memory consistency enable sending events threads acquired lock executing code block waiting lock block java sections combine functionality events synchronization monitor object lock monitor java object lock object method marked framework synchronization primitives synchronization designed thread process follow synchronization mechanism accessing protected resources critical consistent synchronization types operations mechanisms synchronization implementation synchronization effective implementing synchronization accessing shared resource piece code processor checks flag flag processor sets flag continues executing thread flag set locked threads loop checking flag set effective flag cycles lead performance issues processor cycles waiting barriers barriers simple implement provide based concept implementing wait cycles provide synchronization threads running simultaneously starting barrier time reaches barrier wait thread reach correct data threads reach barrier start time thread reaches wait threads correct data barrier synchronization multiple threads threads waiting threads thread waiting thread severe process performance barrier synchronization wait function thread represented wait time thread threads rate threads experiments 34 total execution time spent waiting slower threads mechanisms threads processors access flag fixed time thread access flag thread leaves flag flag thread access wait thread process code called binary thread allowed access access mathematical foundations synchronization originally process based concept lock object primary usage databases types file lock read read processes threads exclusive single process thread time derived file databases data shared memory processes threads object file locked time locked simultaneously overlap causing exception java exclusive thread based rely compare processor instruction abstract mathematical foundation synchronization primitives history monoid level theoretical devices process nets built history monoid synchronization examples synchronization examples respect platforms synchronization windows windows synchronization linux linux enabling kernel replaced systems prior kernel version linux disabled interrupt implement short critical sections version linux synchronization solaris solaris synchronization platform independent api data synchronization concept data synchronization refers multiple copies set data maintain data integrity figure database replication multiple copies data database servers store data locations examples include challenges data synchronization challenges user data synchronization data formats complexity data formats tend grow complex time organization grows building simple interfaces applications source target transform data passing target application extraction transformation loading tools helpful stage managing data format real real time systems customers current status current status real time current balance account real time updated enable smooth manufacturing process real time material enterprise running stock customer manufacturing process real life exist examples real time processing successful competitive advantage data security fixed rules policies data security vary depending security maintained correctly source data security access target systems prevent potential issue handling secret personal sensitivity data transfer data quality data quality constraint management maintain quality data common practice store data location share people systems applications locations helps data performance phases involved data synchronization process steps critical amounts data synchronization process carefully planned executed avoid negative impact performance  
4827706	computer	donald knuth prize prize outstanding contributions foundations science named donald knuth history knuth prize awarded 1996 includes award prize awarded acm ieee society technical committee mathematical foundations computing prizes awarded acm theory computing ieee foundations science conferences theoretical science contrast prize recognizes outstanding papers knuth prize awarded individuals impact field winners prize 1996 awarded  
4829643	computer	pattern simple ideas computers book published 1998 basic books book attempts explain concepts science terms book moves boolean algebra topics theory parallel computing cryptography algorithms universal computing turing machines promising technologies quantum computing systems  
4891153	computer	machine translation field computational linguistics software translate speech natural language 1950s machine translation reality references subject century machine translation experiment involved successful automatic translation russian sentences english 1954 earliest recorded projects researchers experiment belief machine translation solved union experiments performed shortly success experiment era funding machine translation united achieved progress slower expected 1966 report experiment dramatically reduced funding grew statistical models machine translation common expensive 1980s computational power increased exists autonomous automatic quality translation programs capable providing output strict constraints programs online google translate 2008 mid patents translating machines applied automatic bilingual dictionary paper tape russian peter submitted detailed proposal included bilingual dictionary method dealing languages based separated stages stage consisted native speaking editor source language organize logical forms syntactic functions stage required machine translate forms target language stage required native speaking editor target language output proposal remained unknown late 1950s time computers utilized set based machine translation 1949 researcher foundation translation based theory code breaking war theories universal principles underlying natural language submitted universities united january 1954 ibm experiment held york head office ibm public demonstration machine translation demonstration reported public toy 250 translated 49 carefully selected russian sentences english – field encouraged idea machine translation worldwide systems bilingual dictionaries hand coded rules word final output eventually considered linguistic developments time generative linguistics grammar exploited improve quality translations period operational systems installed united air force produced ibm washington university atomic energy commission italy developed university quality output poor customers terms speed 1950s bar government machine translation possibility automatic quality translation machines bar semantic ambiguity double meaning sentence word pen meanings meaning write ink meaning human meaning obvious bar claimed universal machine deal time type semantic ambiguity solved writing source texts machine translation controlled language vocabulary word meaning 1960s report 1960s union united language pair objects translation scientific technical documents articles scientific journals rough translations produced sufficient basic understanding articles article discussed subject human translator complete translation discarded machine translation 1966 publication report report government delivered automatic language processing advisory committee scientists government 1964 government concerned lack progress report concluded machine translation expensive accurate slower human translation machine translation reach quality human translator future report recommended tools developed aid – automatic dictionaries – computational linguistics continue supported publication report impact machine translation united lesser extent union united kingdom completely abandoned decade canada france germany continued main exceptions peter established companies 1968 1970 served department defense 1970 installed united air force subsequently commission european communities 1976 developed installed canada 1977 translate weather english french translating close 80 000 day 30 replaced 30 september 2001 1960s limited language pairs input demand 1970s cost systems translate range technical commercial documents demand increase demand translation canada europe japan 1980s 1990s 1980s diversity installed systems machine translation increased systems mainframe technology metal result improved availability microcomputers market machine translation systems companies advantage europe japan usa systems brought market china europe korea union 1980s lot activity japan generation japan intended competition hardware software project japanese electronics involved creating software translating english fujitsu toshiba mitsubishi sharp hitachi panasonic 1980s typically translation variety linguistic representation involving morphological syntactic semantic analysis 1980s methods machine translation developed ibm based statistical methods methods based translation examples technique termed based machine translation defining feature approaches syntactic semantic rules manipulation corpora 1990s encouraged speech recognition speech synthesis speech translation development german project language machine translation technology designed laboratory 1997 translate documents growth machine translation result advent cost powerful computers 1990s machine translation transition mainframe computers personal computers workstations companies led pc market time merger companies december 1994 corporate offer pc versions time sites internet fish technology google language tools initially technology exclusively 2000s field machine translation major statistical machine translation based machine translation speech translation focused moving domain limited systems domain translation systems projects europe star united dust darpa solutions automatically translating broadcast news developed domain content limited special translated cover variety topics french german project possibility machine translations multi internet project seeks translate videos audio files internet companies statistical machine translation commercially technologies asia online language translation products services google proprietary statistical language combinations google language tools proprietary statistical translate knowledge base articles offers domain adapted machine translation solution based statistical linguistic knowledge researchers combining syntactic morphological linguistic knowledge statistical systems combining statistics existing rule based systems  
5104401	computer	overview guide vision vision – field deals computers gain level understanding digital images videos perspective engineering seeks tasks human visual vision tasks include methods digital images image sensors image processing image analysis reach understanding digital images deals extraction dimensional data real produce numerical symbolic interpret image data forms video sequences views multiple cameras multi dimensional data medical scanner technological discipline vision seeks apply theories models construction vision systems scientific discipline vision concerned theory artificial systems extract images history vision history vision  
5151542	computer	windows embedded ce codenamed major release windows embedded operating targeted enterprise specific tools industrial controllers consumer electronics devices digital cameras ce features kernel supports 32 processes 32 process limit prior versions process receives virtual address space 32 mb windows embedded ce released november 2006 includes partial source code os serves basis hd windows mobile based windows ce windows phone major release windows phone operating based windows embedded ce windows phone windows embedded compact features features windows embedded ce september 2009 serves base platform hd windows phone ce includes features abilities note features listed specific windows phone hd  
5205640	computer	variable assembly language val based control language designed industrial robots val robot language stored val includes programming language direct individual applications val language easy understand syntax instruction set commands communications robot consist easy understand word sequences control programs written controls robot real time val continuous computation complex executed efficient memory reduction complexity val continuously generates robot control commands simultaneously interact human operator program generation modification convenient feature val ability libraries manipulation routines complex operations easily programmed combining val language consists monitor commands program instructions monitor commands execution user written programs program instructions provide create val programs controlling robot actions terminology terms frequently val operations monitor val monitor program operation accepts user input response instructions user written programs direct robot performs computations control robot editor val editor aid entering modifying existing enter modify robot control programs list instructions val programs written users tasks robot perform location location position object space orientation locations define positions robot tool assume program execution val programming apply numerical values supplied val commands instructions preceding monitor command description symbols command user dot command performed val level monitor mode user program executed dot command performed time val executing program symbols command executed monitor commands program instructions entering monitor command program instruction function characters unique commands instructions angle item describes actual argument programmer supply item position entering command instruction note included command instruction val commands instructions optional arguments optional arguments square argument argument monitor base command form 300 change direction entered note preceding 300 correctly direction change angle square entered command instruction types numerical arguments commands instructions type restrictions values accepted val rules observed nearest val function val control robot user commands instructions addition compact stand val designed highly interactive minimize time provide programming external communication standard val operator console terminal manual control box input commands data user operator console serves primary communication device direct play terminal printing terminal interaction devices automated cell typically handled monitoring input channels switching outputs robot control cell programmable devices val operating controller levels operation memory contents val controller switched monitor responsible control robot commands manual control unit terminal programs increase flexibility val monitor perform commands user program executed commands processed include controlling status defining robot locations storing floppy disk creating editing robot control programs  
5289626	computer	corpus speech american english speakers element time designed acoustic knowledge automatic speech recognition systems darpa corpus design joint effort massachusetts institute technology sri international texas instruments speech recorded mit publishing national institute standards technology telephone bandwidth version called network freely membership linguistic data consortium required access dataset  
5386671	computer	structure motion range imaging technique dimensional structures dimensional image sequences coupled local motion signals studied fields vision visual perception biological vision refers phenomenon humans living recover 3d structure projected 2d motion field moving object scene principle humans lot dimensional structure environment moving moves objects images time finding structure motion finding structure stereo vision instances correspondence images reconstruction 3d object correspondence images features corner edges gradients multiple directions image feature scale invariant feature transform difference dog features step finding dominant gradient direction rotation invariant descriptor fit orientation common feature detector robust features dog replaced matrix based detector evaluating gradient computes gradient components absolute values features detected images matched matching algorithms track features image matched features incorrectly matched matches filtered random sample algorithm remove paper solve location objective determine space project image set locations feature time reconstruct 3d positions camera motion alternative called direct approaches geometric 3d structure camera motion estimated images intermediate abstraction features corners approaches structure motion incremental camera solved collection global cameras solved time intermediate approach core partial computed integrated global solution applications structure motion multi view stereo models images acquired range digital cameras network ground control technique limited temporal frequency provide cloud data comparable density accuracy generated laser scanning fraction cost structure motion remote rugged environments laser scanning limited equipment portability laser scanning limited terrain causing loss data image technique applied settings fault settings applied properties orientation range digital cameras utilized including digital compact digital cameras smart phones accuracy data achieved expensive cameras include lenses optical quality technique offers opportunities surface multi temporal data detect position earth surface processes structure motion context digital methods cultural heritage cultural heritage structural control documentation humanity main view properly estimate situations planning maintenance efforts costs control constraints exist connected install permit traditional routines total stations approach structure direct interaction structure operator accurate fast respond management operational phase accurate established relation distance object ground sampling distance resolution programmed photographic vertical overlapping 60 figure external links structure motion software source solutions  
5389424	computer	arduino source hardware software company project user community designs manufactures single board microcontrollers microcontroller kits building digital devices interactive objects sense control physically digitally products licensed gnu lesser public license gnu public license manufacture arduino boards software distribution arduino boards commercially form kits arduino board designs variety microprocessors controllers boards equipped sets digital analog input output pins expansion boards circuits boards feature serial communications interfaces including universal serial bus usb models loading programs personal computers microcontrollers typically programmed features programming languages addition traditional compiler arduino project integrated development environment ide based processing language project arduino project started 2003 program students interaction design institute italy provide cost easy professionals create devices interact environment sensors actuators common examples devices intended include simple robots motion arduino bar italy project meet bar named march king italy history arduino project started interaction design institute italy time students basic microcontroller cost 50 considerable students 2003 created development platform wiring master thesis project creating processing development platform project goal create simple cost tools creating digital projects engineers wiring platform consisted printed circuit board microcontroller ide based processing library functions easily program microcontroller 2003 david student david support cheaper microcontroller wiring continuing wiring project renamed arduino initial arduino core team consisted david david invited participate completion wiring platform lighter expensive versions distributed source community estimated mid 2011 300 000 official commercially produced 2013 000 official boards users hands october 2016 arduino ceo 50 ownership company april 2017 wired reported academic record company personal accounts italian business documents listed holding phd massachusetts institute technology claimed york university wired reported university record interview wired earned degrees time announced arduino foundation arduino foundation established project remains surrounding continued july 2017 source licenses code arduino october 2017 arduino announced partnership arm arm announcement arm recognized independence core arduino lock arm architecture arduino continue technology vendors architectures trademark 2008 arduino project created company arduino hold arduino manufacture sale boards external companies arduino founding arduino transfer ownership arduino brand newly formed company 2008 company smart projects registered arduino trademark italy secret revealed arduino company register trademark originally registered discovered registered italy firm bring trademark control original arduino company failed 2014 smart projects pay ceo renamed company arduino created arduino graphics layout original arduino arduino development team january 2015 arduino filed arduino 2015 arduino created worldwide trademark brand united york october 2016 arduino founder ceo arduino ceo announced merger companies 2017 arduino owned arduino july 2017 founded david david acquired arduino arduino ceo replacing arduino hardware arduino source hardware hardware reference designs distributed creative share license arduino layout production files versions hardware hardware software designs freely licenses developers requested arduino exclusive official product derived permission official policy document arduino emphasizes project incorporating official product arduino compatible products commercially released project names arduino boards consist bit microcontroller varying amounts flash memory pins features 32 bit arduino based introduced 2012 boards single double row pins female facilitate connections programming circuits connect add modules termed multiple individually addressable serial bus boards include linear crystal designs voltage specific form factor restrictions arduino microcontrollers pre programmed boot programs chip flash memory default arduino boards loaded program code serial connection serial arduino boards level circuit convert logic levels logic level signals current arduino boards programmed universal serial bus usb implemented usb serial adapter chips boards model boards chip separate chip usb serial firmware header variants arduino mini usb serial adapter board cable bluetooth methods traditional microcontroller tools arduino ide standard programming programming arduino board microcontroller pins circuits current provide 14 digital pins produce pulse signals analog inputs digital pins pins board female inch plug application commercially arduino arduino compatible board boards provide header pins board plug arduino compatible arduino derived boards exist equivalent arduino enhance basic arduino adding output drivers school level education simplify robots equivalent change form factor compatibility variants processors varying compatibility official boards original arduino hardware produced italian company smart projects arduino branded boards designed american companies electronics industries 17 versions arduino hardware commercially produced arduino arduino compatible boards printed circuit expansion boards called plug supplied arduino provide motor controls 3d printing applications global gps ethernet liquid crystal display lcd software program arduino hardware written programming language compilers produce binary machine code target processor development environment bit 32 bit arm cortex based microcontrollers studio studio ide arduino integrated development environment ide cross platform application windows macos linux written programming language java originated ide languages processing wiring includes code editor features cutting searching replacing automatic matching syntax simple mechanisms compile programs arduino board message console buttons common functions hierarchy operation source code ide released gnu public license version arduino ide supports languages special rules code structuring arduino ide software library wiring project common input output procedures user written code requires basic functions starting main program loop compiled linked program main executable executive program gnu included ide distribution arduino ide employs program convert executable code file encoding loaded arduino board program board firmware program written arduino ide saved development files file extension arduino software ide pre saved extension minimal arduino program consist functions arduino boards light led current limiting connected 13 ground convenient feature tests program functions typical program repeatedly board led integrated arduino board program functions internal libraries included ide environment program loaded arduino board manufacturer libraries source nature arduino project publication software libraries developers projects arduino project received digital communities category 2006  
5454605	computer	bell prize award association computing machinery conjunction conference series conference prize recognizes outstanding achievement performance computing applications main purpose track progress time parallel computing innovation applying performance computing applications science engineering scale data analytics prize established 1987 award 000 2011 recognition funded bell pioneer performance parallel computing prizes prize 100 established alan numerical ibm claims mimd performance improvements proposed letters editor communications acm bell prize judges individuals teams apply award technical paper describing conference process conference included conference proceedings prize criteria acm bell prize intended recognize performance achievements demonstrate earlier multiple prizes awarded reflect types achievements current policies prize awarded categories depending entries received special achievement scalability special achievement time solution entry scalability terms strong weak scaling total time solve science engineering  
5508085	computer	theory computing peer reviewed access scientific journal covering theoretical science journal established 2005 published department science university editor chief university  
5574880	computer	minix project create availability functioning unix operating published bsd license successor project earlier versions minix main goal project fault tolerant detecting fly user intervention main embedded systems education minix supports ia 32 arm architecture processors virtual machines workstation virtual pc oracle port powerpc architecture development distribution live live usb image release minix iso 2017 minix believed intel management engine intel platform controller hub starting introduction 11 processors intel os intel processors starting windows gnu linux macos goals project nature monolithic kernel based systems driver minix creator tanenbaum times bugs usual program bring minix aims create operating reliable unix clone achieve code running kernel minimal file server process server device driver running separate user mode processes driver carefully named server driver fails respond server replaced driver monolithic bug driver easily crash kernel occur minix history minix publicly announced 24 october 2005 andrew tanenbaum speech association computing machinery acm operating systems principles conference serves edition tanenbaum textbook usable resource limited embedded computers applications requiring reliability reliability policies main goals minix reliability principles enhance reliability discussed reduce kernel size monolithic operating systems linux freebsd hybrids windows millions lines kernel code contrast minix 000 lines executable kernel code easier code bugs monolithic kernels device drivers kernel peripheral installed unknown code inserted kernel bad code driver bring minix device driver separate user mode process drivers execute privileged instructions change tables perform arbitrary input output write absolute memory kernel calls services kernel checks authority limit drivers memory access monolithic kernels driver write word memory user programs minix user data file builds descriptor access addresses passes descriptor file pass driver file driver kernel write descriptor impossible write addresses buffer bad bad pointer driver crash driver process server driver automatically drivers disk network recovery transparent user processes audio printer user monolithic kernels bad pointer driver leads crash infinite loops driver infinite loop gradually priority idle eventually server status requests driver monolithic kernel driver limit damage buffer minix fixed messages internal communication buffer buffer management buffer program function stack return address controlled memory buffer minix attack instruction data space split code read instruction space executed termed executable space protection attacks rely running executable memory return return oriented programming access kernel functions device drivers kernel services data users address spaces kernel calls minix kernel bit map driver calls monolithic kernels driver kernel function access ports kernel maintains table ports driver access driver touch ports monolithic kernels driver access ports device communication os components driver server communicate driver server process bit map determines process send drivers special process called server device driver driver fails respond correctly server automatically replaces detecting replacing functioning drivers automatic user action feature disk drivers release recover disk drivers random access memory ram driver recovery affect running processes integrate interrupts messages interrupt occurs converted level driver driver waiting message interrupt time codice message scheme nested interrupts driver programming easier architecture level microkernel 000 lines code assembly language handles interrupts scheduling message passing supports application programming interface api 30 kernel calls servers drivers user programs calls issue posix calls send messages servers kernel calls perform functions setting interrupts data address spaces level device drivers running separate process controls device disk printer drivers access port space issue instructions kernel calls list ports write values written overhead typically scheme kernel check audio driver write disk level servers operating functionality located user processes file service sending messages file server close read write files file server disk performed sending messages disk driver controls disk key servers server job servers drivers check health component fails respond correctly infinite loop server process drivers servers component replaces automatically running programs server process server microkernel trusted computing base fail reducing trusted computing base lines code linux windows systems 20 000 lines greatly reliability differences minix prior versions minix developed tools people learn design operating systems minix released 1987 12 000 lines x86 assembly language source code kernel memory manager file minix printed book tanenbaum originally developed minix compatibility ibm pc ibm pc microcomputers time minix released 1991 included support ibm systems ported motorola 68000 sparc architectures supporting atari commodore apple macintosh sun microsystems platforms version minix running user process sunos minix released 1997 x86 solaris hosted sparc architectures minix created researchers virtual memory support window minix modern operating tools unix applications tanenbaum improvements structure kernel minix release reliable minix version released 2009 gcc python client client client 400 common unix utility programs addition version marks transition feature version improved future ability device driver automatically replaced running processes minix applications reliability minix released february 2012 version features including compiler experimental symmetric multiprocessing support support gnu integrated release including utilities libraries minix released september 2014 release version support arm architecture addition x86 supports thousands packages running box minix conference sharing efforts minix lack submitted  
5648968	computer	von born 19 august 1978 professor science department carnegie mellon university pennsylvania founder company sold google 2009 founder ceo popular language learning platform von born grew city german descent received mathematics university 2000 phd science carnegie mellon university 2005 2006 von faculty carnegie mellon school science carnegie mellon university professor includes captchas human computation earned international recognition numerous honors awarded 2006 david packard foundation 2009 2009 faculty 2007 career award scientists engineers 2012 named 50 science discover recognition lists include popular science silicon 50 influential people technology mit technology review 35 fast company 100 innovative people business biggest person 2009 2011 foreign policy magazine spanish named influential intellectual america von field cryptography hopper john provide definitions prove private key 2000 pioneering captchas generated tests humans pass computers devices sites prevent automated programs scale automatically accounts huge captchas brought von widespread public coverage york times usa discovery channel mainstream von thesis completed 2005 publication term human computation coined referring methods combine human computers solve solve von thesis games purpose games played humans produce computation famous game online game randomly people simultaneously picture communicate lists phrases picture time limit match match accurate description picture database accurate image search technology game licensed google form google image improve accuracy google image search von games brought coverage mainstream media thesis award carnegie mellon university school science july 2006 von tech talk google human computation viewers 2007 von invented form captcha helps books images displayed user books optical character recognition identify people identified 100 000 sites 40 day 2011 awarded development chair science awarded faculty unusual school science 2018 von awarded mit prize improving technology von ceo language education platform teaching von unusual techniques teaching multiple teaching awards carnegie mellon university fall 2008 teaching carnegie mellon entitled science combination graph theory social science covers topics network game theory theory  
5908824	computer	dr king sun october 29 1985 distinguished professor university west founding international association pattern recognition served president recognized extensive contributions pioneer field pattern recognition image analysis machine intelligence honor memory professor king sun king sun prize living person recognition outstanding technical contribution field pattern recognition king sun prize 1988 born october china historical received national taiwan university 1953 university toronto 1955 university 1959 april 29 1985 washington academic life organized international conference pattern recognition 1973 served chairman conference evolved international association pattern recognition 1976 elected president pattern recognition committee chairman 1974 led founding ieee transactions pattern analysis machine intelligence served editor chief 1978 king sun invited china decades 1978 science technology center national university 1984  
